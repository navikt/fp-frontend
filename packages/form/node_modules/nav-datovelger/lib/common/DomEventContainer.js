"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contains = void 0;
const react_1 = __importStar(require("react"));
function contains(node, child) {
    return node === child || node.contains(child);
}
exports.contains = contains;
const DomEventContainer = (props) => {
    const divRef = react_1.useRef(null);
    const { active, onBlur, onKeyDown, onFocus, className, tabIndex, children } = props;
    const [isActive, setIsActive] = react_1.useState(active === true);
    react_1.useEffect(() => {
        const blur = (source) => {
            if (onBlur) {
                onBlur({
                    source,
                });
            }
        };
        const handleDocumentKeyDown = (evt) => {
            if (evt && evt.keyCode === 27) {
                blur('esc');
            }
        };
        const startEventListening = () => {
            window.addEventListener('keydown', handleDocumentKeyDown);
        };
        const stopEventListening = () => {
            window.removeEventListener('keydown', handleDocumentKeyDown);
        };
        if (active !== isActive) {
            if (active === true) {
                startEventListening();
                setIsActive(true);
            }
            else {
                stopEventListening();
                setIsActive(false);
            }
        }
    }, [active, setIsActive, isActive, onBlur]);
    const handleOnBlur = () => {
        const divContainer = divRef.current || null;
        if (divContainer === null) {
            return;
        }
        setTimeout(() => {
            const activeElement = window.document.activeElement;
            const isChildElement = activeElement ? contains(divContainer, activeElement) : undefined;
            if (!isChildElement && onBlur) {
                onBlur({ source: 'blur' });
            }
        }, 0);
    };
    const handleOnInternalDocumentKeyDown = (evt) => {
        if (onKeyDown) {
            onKeyDown(evt);
        }
    };
    return (react_1.default.createElement("div", { ref: divRef, onBlur: handleOnBlur, onKeyDown: handleOnInternalDocumentKeyDown, onFocus: onFocus, className: className, tabIndex: tabIndex }, children));
};
exports.default = DomEventContainer;
