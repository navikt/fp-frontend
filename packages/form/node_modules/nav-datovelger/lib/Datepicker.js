"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
const DomEventContainer_1 = __importDefault(require("./common/DomEventContainer"));
const Calendar_1 = __importDefault(require("./calendar/Calendar"));
const DateInput_1 = __importDefault(require("./DateInput"));
const CalendarButton_1 = __importDefault(require("./elementer/CalendarButton"));
const CalendarPortal_1 = __importDefault(require("./elementer/CalendarPortal"));
const usePrevious_1 = require("./hooks/usePrevious");
const typeGuards_1 = require("./types/typeGuards");
const utils_1 = require("./utils");
require("./styles/datepicker.less");
const Datepicker = ({ inputId = nav_frontend_js_utils_1.guid(), limitations, value, inputProps, calendarSettings, disabled, allowInvalidDateSelection, locale = 'nb', showYearSelector, onChange, dayPickerProps, setFocusOnDateWhenOpened, allowNavigationToDisabledMonths = false, calendarDateStringFilter, }) => {
    const [activeMonth, setActiveMonth] = react_1.useState(utils_1.getDefaultMonth(value, limitations, dayPickerProps));
    const [calendarIsVisible, setCalendarIsVisible] = react_1.useState(false);
    const prevValue = usePrevious_1.usePrevious(value);
    const initialMonthPrevValue = usePrevious_1.usePrevious(dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.initialMonth);
    const calendarRef = react_1.useRef();
    react_1.useEffect(() => {
        const initialMonth = dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.initialMonth;
        const dateStringToUse = calendarDateStringFilter ? calendarDateStringFilter(value) : value;
        if (initialMonth !== initialMonthPrevValue && dateStringToUse === prevValue) {
            const defaultMonth = utils_1.getDefaultMonth(dateStringToUse, limitations, dayPickerProps);
            if (!utils_1.isSameDate(defaultMonth, activeMonth)) {
                setActiveMonth(defaultMonth);
            }
        }
        if (dateStringToUse !== prevValue) {
            const defaultMonth = utils_1.getDefaultMonth(dateStringToUse, limitations, dayPickerProps);
            if (!utils_1.isSameDate(defaultMonth, activeMonth)) {
                setActiveMonth(defaultMonth);
            }
        }
    }, [value, limitations, prevValue, activeMonth, dayPickerProps, initialMonthPrevValue, calendarDateStringFilter]);
    const setDate = (value = '') => {
        setCalendarIsVisible(false);
        onChange(value, typeGuards_1.isISODateString(value));
    };
    return (react_1.default.createElement(DomEventContainer_1.default, null,
        react_1.default.createElement("div", { className: "nav-datovelger" },
            react_1.default.createElement("div", { className: "nav-datovelger__inputContainer" },
                react_1.default.createElement(DateInput_1.default, { id: inputId, ref: inputProps === null || inputProps === void 0 ? void 0 : inputProps.inputRef, inputProps: Object.assign(Object.assign({}, inputProps), { disabled }), dateValue: value, onDateChange: setDate }),
                react_1.default.createElement(CalendarButton_1.default, { disabled: disabled, onClick: () => setCalendarIsVisible(!calendarIsVisible), isOpen: calendarIsVisible })),
            calendarIsVisible && (react_1.default.createElement(CalendarPortal_1.default, { position: calendarSettings === null || calendarSettings === void 0 ? void 0 : calendarSettings.position },
                react_1.default.createElement(Calendar_1.default, { ref: calendarRef, locale: locale, showWeekNumbers: calendarSettings === null || calendarSettings === void 0 ? void 0 : calendarSettings.showWeekNumbers, dateString: calendarDateStringFilter ? calendarDateStringFilter(value) : value, month: activeMonth, minDateString: limitations && limitations.minDate, maxDateString: limitations && limitations.maxDate, unavailableDates: limitations ? utils_1.getInvalidDates(limitations) : undefined, onSelect: setDate, onClose: () => setCalendarIsVisible(false), allowInvalidDateSelection: allowInvalidDateSelection, dayPickerProps: dayPickerProps, showYearSelector: showYearSelector, setFocusOnDateWhenOpened: setFocusOnDateWhenOpened, allowNavigationToDisabledMonths: allowNavigationToDisabledMonths }))))));
};
exports.default = Datepicker;
