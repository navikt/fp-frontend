"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setFocusOnCalendarMonth = exports.setFocusOnLastElementInDayPickerCaption = exports.setFocusOnFirstElementInDayPickerCaption = exports.setInitialDayFocus = void 0;
const focusUtils_1 = require("./focusUtils");
const setInitialDayFocus = (calendar) => {
    if (calendar) {
        const el = calendar.querySelector(`.DayPicker-Day--selected`) ||
            calendar.querySelector(`.DayPicker-Day--today`) ||
            calendar.querySelector(`.DayPicker-Day[aria-disabled="false"]`);
        if (el) {
            el.focus();
        }
    }
};
exports.setInitialDayFocus = setInitialDayFocus;
const setFocusOnFirstElementInDayPickerCaption = (calendar) => {
    if (calendar) {
        const el = calendar.querySelector(`.DayPicker-Caption`);
        if (el) {
            focusUtils_1.focusFirstElement(el);
        }
    }
};
exports.setFocusOnFirstElementInDayPickerCaption = setFocusOnFirstElementInDayPickerCaption;
const setFocusOnLastElementInDayPickerCaption = (calendar) => {
    if (calendar) {
        const el = calendar.querySelector(`.DayPicker-Caption`);
        if (el) {
            focusUtils_1.focusLastElement(el);
        }
    }
};
exports.setFocusOnLastElementInDayPickerCaption = setFocusOnLastElementInDayPickerCaption;
const getMonthElement = (calendar, focusElement) => {
    let el;
    if (calendar) {
        switch (focusElement) {
            case 'previousMonth':
            case 'nextMonth':
                el = calendar.querySelector(`.nav-datovelger__navbar__knapp--${focusElement}`);
                break;
            case 'year':
                el = calendar.querySelector(`select[name=year]`);
                break;
            case 'month':
                el = calendar.querySelector(`select[name=month]`);
                break;
        }
    }
    if (el && el !== null) {
        return el;
    }
    return undefined;
};
const setFocusOnCalendarMonth = (calendar, focusElement) => {
    if (calendar) {
        const el = getMonthElement(calendar, focusElement);
        if (el) {
            el.focus();
        }
    }
};
exports.setFocusOnCalendarMonth = setFocusOnCalendarMonth;
