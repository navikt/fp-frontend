"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputDateStringToISODateString = exports.ISODateStringToInputDateString = exports.InputDateStringToUTCDate = exports.ISODateStringToUTCDate = exports.dateToISODateString = exports.dateToInputDateString = exports.ISO_DATE_STRING_FORMAT = exports.INPUT_DATE_STRING_FORMAT = exports.INVALID_DATE_VALUE = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const utc_1 = __importDefault(require("dayjs/plugin/utc"));
const customParseFormat_1 = __importDefault(require("dayjs/plugin/customParseFormat"));
dayjs_1.default.extend(utc_1.default);
dayjs_1.default.extend(customParseFormat_1.default);
exports.INVALID_DATE_VALUE = 'Invalid date';
exports.INPUT_DATE_STRING_FORMAT = 'DD.MM.YYYY';
exports.ISO_DATE_STRING_FORMAT = 'YYYY-MM-DD';
const ALLOWED_INPUT_FORMATS = [
    exports.INPUT_DATE_STRING_FORMAT,
    'DDMMYYYY',
    'DD/MM/YYYY',
    'DD-MM-YYYY',
    'DDMMYY',
    'D.M.YY',
    'DD.MM.YY',
    'D.M.YYYY',
];
const stringToUTCDate = (dateString, format) => {
    if (dateString !== undefined && dateString.trim && dateString.trim().length === 10) {
        const d = dayjs_1.default(dateString, format).utc(true);
        return d.isValid() ? d.toDate() : undefined;
    }
    return undefined;
};
const dateToInputDateString = (date) => date ? dayjs_1.default.utc(date).format(exports.INPUT_DATE_STRING_FORMAT) : exports.INVALID_DATE_VALUE;
exports.dateToInputDateString = dateToInputDateString;
const dateToISODateString = (date) => {
    const d = dayjs_1.default.utc(date);
    return d.isValid() ? d.format(exports.ISO_DATE_STRING_FORMAT) : d.toString();
};
exports.dateToISODateString = dateToISODateString;
const ISODateStringToUTCDate = (isoDateString) => {
    return stringToUTCDate(isoDateString, exports.ISO_DATE_STRING_FORMAT);
};
exports.ISODateStringToUTCDate = ISODateStringToUTCDate;
const InputDateStringToUTCDate = (inputDateString) => {
    return stringToUTCDate(inputDateString, exports.INPUT_DATE_STRING_FORMAT);
};
exports.InputDateStringToUTCDate = InputDateStringToUTCDate;
const ISODateStringToInputDateString = (isoDateString) => {
    const date = stringToUTCDate(isoDateString, exports.ISO_DATE_STRING_FORMAT);
    const stringValue = date ? exports.dateToInputDateString(date) : exports.INVALID_DATE_VALUE;
    return stringValue === exports.INVALID_DATE_VALUE ? exports.INVALID_DATE_VALUE : stringValue;
};
exports.ISODateStringToInputDateString = ISODateStringToInputDateString;
const twoDigitYearFormats = ['DDMMYY', 'D.M.YY', 'DD.MM.YY'];
const hasTwoDigitYear = (dateString) => {
    return dayjs_1.default(dateString, twoDigitYearFormats, true).isValid();
};
const extractTwoDigitYear = (dateString) => {
    return dateString.slice(-2);
};
const appendCenturyToTwoYearDigitDateString = (dateString, century) => {
    const twoDigitYear = extractTwoDigitYear(dateString);
    return `${dateString.slice(0, dateString.length - 2)}${century}${twoDigitYear}`;
};
const date80YearsAgo = dayjs_1.default().subtract(80, 'year');
const assignCenturyToDateWithTwoYearDigits = (dateString) => {
    const twoDigitYearFormatsWith4YearDigits = ['DDMMYYYY', 'D.M.YYYY', 'DD.MM.YYYY'];
    const dateStringIn20thCentury = appendCenturyToTwoYearDigitDateString(dateString, '19');
    const dateIn20thCentury = dayjs_1.default(dateStringIn20thCentury, twoDigitYearFormatsWith4YearDigits, true).utc(true);
    const dateStringIn21stCentury = appendCenturyToTwoYearDigitDateString(dateString, '20');
    const dateIn21stCentury = dayjs_1.default(dateStringIn21stCentury, twoDigitYearFormatsWith4YearDigits, true).utc(true);
    if (dateIn20thCentury.isValid() && dateIn21stCentury.isValid()) {
        if (dateIn20thCentury.isBefore(date80YearsAgo)) {
            return exports.dateToISODateString(dateIn21stCentury.toDate());
        }
        else {
            return exports.dateToISODateString(dateIn20thCentury.toDate());
        }
    }
    return exports.INVALID_DATE_VALUE;
};
const InputDateStringToISODateString = (inputDateString) => {
    if (hasTwoDigitYear(inputDateString)) {
        return assignCenturyToDateWithTwoYearDigits(inputDateString);
    }
    const date = dayjs_1.default(inputDateString, ALLOWED_INPUT_FORMATS, true).utc(true);
    return date.isValid() ? exports.dateToISODateString(date.toDate()) : exports.INVALID_DATE_VALUE;
};
exports.InputDateStringToISODateString = InputDateStringToISODateString;
