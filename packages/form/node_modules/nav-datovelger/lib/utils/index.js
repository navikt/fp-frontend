"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultMonth = exports.isSameDate = exports.getInvalidDates = exports.dayDateKey = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const dateFormatUtils_1 = require("./dateFormatUtils");
const dayDateKey = (date) => dayjs_1.default(date).format(dateFormatUtils_1.INPUT_DATE_STRING_FORMAT);
exports.dayDateKey = dayDateKey;
const getInvalidDates = (limitations) => {
    var _a;
    let invalidDates = [];
    if (limitations.invalidDateRanges) {
        invalidDates = limitations.invalidDateRanges
            .map((t) => {
            const from = dateFormatUtils_1.ISODateStringToUTCDate(t.from);
            const to = dateFormatUtils_1.ISODateStringToUTCDate(t.to);
            if (from && to) {
                return {
                    from,
                    to,
                };
            }
            return undefined;
        })
            .filter((t) => t !== undefined);
    }
    const minDate = limitations.minDate;
    const maxDate = limitations.maxDate;
    const disabledWeekdays = {
        daysOfWeek: [
            ...(limitations.weekendsNotSelectable ? [0, 6] : []),
            ...(((_a = limitations.disabledDaysOfWeek) === null || _a === void 0 ? void 0 : _a.daysOfWeek) || []),
        ],
    };
    return [
        ...invalidDates,
        ...(maxDate ? [{ after: dayjs_1.default(maxDate, dateFormatUtils_1.ISO_DATE_STRING_FORMAT).toDate() }] : []),
        ...(minDate ? [{ before: dayjs_1.default(minDate, dateFormatUtils_1.ISO_DATE_STRING_FORMAT).toDate() }] : []),
        ...[disabledWeekdays],
    ];
};
exports.getInvalidDates = getInvalidDates;
const isSameDate = (d1, d2) => {
    return dayjs_1.default(d1).isSame(d2, 'day');
};
exports.isSameDate = isSameDate;
const getDefaultMonth = (dateString, limitations, dayPickerProps) => {
    const d = dayjs_1.default(dateString).utc(true).format(dateFormatUtils_1.ISO_DATE_STRING_FORMAT);
    if (dateString && dayjs_1.default(d).isValid()) {
        return dayjs_1.default(d).toDate();
    }
    if (dayPickerProps && dayPickerProps.initialMonth) {
        return dayPickerProps.initialMonth;
    }
    const today = dayjs_1.default().toDate();
    if (limitations && limitations.minDate) {
        return dayjs_1.default(limitations.minDate).isAfter(today)
            ? dayjs_1.default(limitations.minDate, dateFormatUtils_1.ISO_DATE_STRING_FORMAT).toDate()
            : today;
    }
    return today;
};
exports.getDefaultMonth = getDefaultMonth;
