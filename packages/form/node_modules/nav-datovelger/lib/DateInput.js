"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const dateFormatUtils_1 = require("./utils/dateFormatUtils");
const getInitialValue = (dateValue) => {
    const inputDateString = dateFormatUtils_1.ISODateStringToInputDateString(dateValue);
    return inputDateString === dateFormatUtils_1.INVALID_DATE_VALUE ? dateValue : inputDateString;
};
const isInputFormattedDateString = (value) => {
    if (value && typeof value === 'string') {
        const reg = /^\d{2}.\d{2}.\d{4}$/;
        const match = value.match(reg);
        return match !== null;
    }
    else {
        return false;
    }
};
const DateInput = react_1.default.forwardRef(function DateInput({ id, dateValue = '', inputProps, onDateChange }, ref) {
    const [inputValue, setInputValue] = react_1.useState(getInitialValue(dateValue));
    const triggerValueChange = (value = '') => {
        const isoDateString = dateFormatUtils_1.InputDateStringToISODateString(value.trim());
        if (isoDateString !== dateFormatUtils_1.INVALID_DATE_VALUE) {
            if (!isInputFormattedDateString(value) && dateValue !== '') {
                setInputValue(dateFormatUtils_1.ISODateStringToInputDateString(dateValue));
            }
            onDateChange(isoDateString);
        }
        else {
            onDateChange(value);
        }
    };
    const onChange = (evt) => {
        setInputValue(evt.target.value);
    };
    const onBlur = (evt) => {
        triggerValueChange(evt.target.value);
    };
    const onKeyDown = (evt) => {
        if (evt.key === 'Enter') {
            evt.preventDefault();
            triggerValueChange(evt.target.value);
        }
    };
    react_1.useEffect(() => {
        const inputDateString = dateFormatUtils_1.ISODateStringToInputDateString(dateValue);
        if (inputDateString !== dateFormatUtils_1.INVALID_DATE_VALUE) {
            setInputValue(dateValue === undefined || dateValue === '' ? '' : inputDateString);
        }
        else {
            setInputValue(dateValue);
        }
    }, [dateValue]);
    return (react_1.default.createElement("input", Object.assign({ ref: ref, id: id }, inputProps, { className: `nav-datovelger__input${inputProps && inputProps['aria-invalid'] === true ? ' skjemaelement__input--harFeil' : ''}`, autoComplete: "off", autoCorrect: "off", type: "text", inputMode: "text", value: inputValue, maxLength: 10, onChange: onChange, onBlur: onBlur, onKeyDown: onKeyDown })));
});
exports.default = DateInput;
