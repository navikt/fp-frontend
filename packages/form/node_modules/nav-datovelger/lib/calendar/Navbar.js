"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const classnames_1 = __importDefault(require("classnames"));
const dayjs_1 = __importDefault(require("dayjs"));
const ChevronSvg_1 = __importDefault(require("../elementer/ChevronSvg"));
const texts_1 = require("../texts");
const YearSelector_1 = __importDefault(require("./YearSelector"));
class NavbarButton extends react_1.default.Component {
    render() {
        const { month, direction, disabled, onClick } = this.props;
        const label = direction === 'previousMonth' ? texts_1.Texts.navbarPreviousMonthLabel : texts_1.Texts.navBarNextMonthLabel;
        return (react_1.default.createElement("button", { type: "button", id: `kalender-navbarknapp-${direction}`, className: classnames_1.default('nav-datovelger__navbar__knapp', `nav-datovelger__navbar__knapp--${direction}`, {
                'nav-datovelger__navbar__knapp--disabled': disabled,
            }), onClick: (e) => (disabled ? null : onClick(e, month, direction)), "aria-label": label, "aria-disabled": disabled },
            react_1.default.createElement(ChevronSvg_1.default, { direction: direction === 'previousMonth' ? 'venstre' : 'hÃ¸yre' })));
    }
}
const createCaption = (props) => props.localeUtils.formatMonthTitle(props.defaultMonth);
class Navbar extends react_1.default.Component {
    shouldComponentUpdate(nextProps) {
        return createCaption(nextProps) !== createCaption(this.props);
    }
    render() {
        const { defaultMonth, onChangeMonth, minDate, maxDate, showYearSelector, localeUtils, allowNavigationToDisabledMonths, locale, } = this.props;
        const previousMonth = dayjs_1.default(defaultMonth).subtract(1, 'month');
        const nextMonth = dayjs_1.default(defaultMonth).add(1, 'month');
        const lastMonthIsDisabled = !allowNavigationToDisabledMonths && minDate ? dayjs_1.default(minDate).isAfter(previousMonth.endOf('month')) : false;
        const nextMonthIsDisabled = !allowNavigationToDisabledMonths && maxDate ? dayjs_1.default(maxDate).isBefore(nextMonth.startOf('month')) : false;
        const onClick = (evt, month, focusElement) => {
            evt.preventDefault();
            evt.stopPropagation();
            onChangeMonth(month, focusElement);
        };
        return (react_1.default.createElement("div", { className: "DayPicker-Caption" },
            react_1.default.createElement("span", { "aria-live": "assertive", className: showYearSelector ? 'sr-only' : '' }, createCaption(this.props)),
            showYearSelector && (react_1.default.createElement("div", { className: "nav-datovelger__navbar__yearSelector" },
                react_1.default.createElement(YearSelector_1.default, { defaultMonth: defaultMonth, maxDate: maxDate, minDate: minDate, localeUtils: localeUtils, onChange: (month, focusElement) => onChangeMonth(month, focusElement), locale: locale }))),
            react_1.default.createElement("nav", { className: `nav-datovelger__navbar ${showYearSelector ? 'nav-datovelger__navbar--withYearSelector' : ''}` },
                react_1.default.createElement(NavbarButton, { month: previousMonth.toDate(), direction: 'previousMonth', disabled: lastMonthIsDisabled, onClick: (evt, month) => onClick(evt, month, 'previousMonth') }),
                react_1.default.createElement(NavbarButton, { month: nextMonth.toDate(), direction: 'nextMonth', disabled: nextMonthIsDisabled, onClick: (evt, month) => onClick(evt, month, 'nextMonth') }))));
    }
}
exports.default = Navbar;
