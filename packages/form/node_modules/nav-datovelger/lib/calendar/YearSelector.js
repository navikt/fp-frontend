"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const dayjs_1 = __importDefault(require("dayjs"));
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
const getAvailableMonths = (monthNames, defaultMonth, minDate, maxDate) => {
    const options = [];
    const from = minDate && defaultMonth.getFullYear() === minDate.getFullYear() ? minDate.getMonth() : 0;
    const to = maxDate && defaultMonth.getFullYear() === maxDate.getFullYear() ? maxDate.getMonth() : 11;
    let m = from;
    while (m <= to) {
        options.push({
            value: m,
            label: monthNames[m],
        });
        m++;
    }
    return options;
};
class YearSelector extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.yearSelect = null;
        this.monthSelect = null;
        this.onChange = this.onChange.bind(this);
        this.onYearChange = this.onYearChange.bind(this);
        this.getYear = this.getYear.bind(this);
        this.getMonth = this.getMonth.bind(this);
    }
    getYear() {
        if (this.yearSelect) {
            return parseInt(this.yearSelect.value, 10);
        }
        return (this.props.minDate || this.props.maxDate || new Date()).getFullYear();
    }
    getMonth() {
        if (this.monthSelect) {
            return parseInt(this.monthSelect.value, 10);
        }
        return (this.props.minDate || this.props.maxDate || new Date()).getMonth();
    }
    onChange(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        this.props.onChange(new Date(this.getYear(), this.getMonth()), 'month');
    }
    onYearChange(evt) {
        var _a, _b;
        evt.stopPropagation();
        evt.preventDefault();
        const year = parseInt(((_a = this.yearSelect) === null || _a === void 0 ? void 0 : _a.value) || '', 10);
        const month = parseInt(((_b = this.monthSelect) === null || _b === void 0 ? void 0 : _b.value) || '', 10);
        const newDate = new Date(year, month);
        if (this.props.minDate && dayjs_1.default(newDate).isBefore(this.props.minDate)) {
            this.props.onChange(this.props.minDate, 'year');
        }
        else if (this.props.maxDate && dayjs_1.default(newDate).isAfter(this.props.maxDate)) {
            this.props.onChange(this.props.maxDate, 'year');
        }
        else {
            this.props.onChange(newDate, 'year');
        }
    }
    render() {
        const { defaultMonth, minDate: min = new Date(1900, 0, 1), maxDate: max = dayjs_1.default().add(4, 'year').toDate(), localeUtils, } = this.props;
        const monthNames = localeUtils.getMonths(this.props.locale);
        const monthOptions = getAvailableMonths(monthNames, defaultMonth, min, max);
        const years = [];
        const minYear = Math.min(defaultMonth.getFullYear(), min.getFullYear());
        const maxYear = Math.max(defaultMonth.getFullYear(), max.getFullYear());
        for (let i = minYear; i <= maxYear; i += 1) {
            years.push(i);
        }
        const monthSelectId = nav_frontend_js_utils_1.guid();
        const yearSelectId = nav_frontend_js_utils_1.guid();
        const showYearSelect = years.length > 1;
        return (react_1.default.createElement("div", { className: "nav-datovelger__yearSelector" },
            showYearSelect && (react_1.default.createElement("div", { className: "selectContainer" },
                react_1.default.createElement("label", { className: "sr-only", htmlFor: yearSelectId }, "Velg \u00E5r"),
                react_1.default.createElement("select", { id: yearSelectId, ref: (c) => (this.yearSelect = c), className: "skjemaelement__input skjemaelement__input--year", name: "year", onChange: this.onYearChange, value: defaultMonth.getFullYear() }, years.map((year) => (react_1.default.createElement("option", { key: year, value: year }, year)))))),
            react_1.default.createElement("div", { className: `selectContainer${showYearSelect === false ? ' selectContainer--monthOnly' : ''}` },
                react_1.default.createElement("label", { className: "sr-only", htmlFor: monthSelectId }, "Velg m\u00E5ned"),
                react_1.default.createElement("select", { id: monthSelectId, ref: (c) => (this.monthSelect = c), className: "skjemaelement__input", name: "month", onChange: this.onChange, value: defaultMonth.getMonth() }, monthOptions.map((m) => (react_1.default.createElement("option", { key: m.value, value: m.value }, m.label)))))));
    }
}
exports.default = YearSelector;
