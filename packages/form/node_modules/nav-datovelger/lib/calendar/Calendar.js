"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const focus_trap_react_1 = __importDefault(require("focus-trap-react"));
const react_1 = __importStar(require("react"));
const react_day_picker_1 = __importDefault(require("react-day-picker"));
const DomEventContainer_1 = __importDefault(require("../common/DomEventContainer"));
const calendarFocusUtils_1 = require("../utils/calendarFocusUtils");
const calendarLocaleUtils_1 = __importDefault(require("../utils/calendarLocaleUtils"));
const dateFormatUtils_1 = require("../utils/dateFormatUtils");
const Navbar_1 = __importDefault(require("./Navbar"));
require('dayjs/locale/nb.js');
require('dayjs/locale/nn.js');
const Calendar = react_1.default.forwardRef(function Calendar(props, ref) {
    const [displayMonth, setDisplayMonth] = react_1.useState(props.month);
    const { dateString, minDateString, maxDateString, localeUtils, showWeekNumbers, unavailableDates, showYearSelector, allowInvalidDateSelection, locale, onClose, onSelect, setFocusOnDateWhenOpened, dayPickerProps, allowNavigationToDisabledMonths, } = props;
    const onSelectDate = (date, modifiers) => {
        if (allowInvalidDateSelection || !modifiers.disabled) {
            onSelect(dateFormatUtils_1.dateToISODateString(date));
        }
    };
    const onChangeMonth = (month, focusElement) => {
        setDisplayMonth(month);
        if (ref) {
            const calendar = ref.current;
            if (focusElement) {
                setTimeout(() => {
                    calendarFocusUtils_1.setFocusOnCalendarMonth(calendar, focusElement);
                });
            }
        }
        if (dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.onMonthChange) {
            dayPickerProps === null || dayPickerProps === void 0 ? void 0 : dayPickerProps.onMonthChange(month);
        }
    };
    const dayPickerPropsToUse = {
        localeUtils: calendarLocaleUtils_1.default,
        navbarElement: function navbarElement() {
            return react_1.default.createElement("span", null);
        },
        captionElement: function CaptionElement() {
            const minDate = dateFormatUtils_1.ISODateStringToUTCDate(minDateString);
            const maxDate = dateFormatUtils_1.ISODateStringToUTCDate(maxDateString);
            return (react_1.default.createElement(Navbar_1.default, { defaultMonth: displayMonth, onChangeMonth: onChangeMonth, minDate: minDate, maxDate: maxDate, localeUtils: Object.assign(Object.assign({}, calendarLocaleUtils_1.default), localeUtils), showYearSelector: showYearSelector, allowNavigationToDisabledMonths: allowNavigationToDisabledMonths, locale: locale }));
        },
        firstDayOfWeek: 1,
        showWeekNumbers,
    };
    const calendarRef = react_1.useRef();
    react_1.useEffect(() => {
        if (setFocusOnDateWhenOpened && calendarRef.current) {
            calendarFocusUtils_1.setInitialDayFocus(calendarRef.current);
        }
    }, [calendarRef, setFocusOnDateWhenOpened]);
    return (react_1.default.createElement("div", { ref: ref, role: "dialog", "aria-label": "Kalender", className: "nav-datovelger__kalender" },
        react_1.default.createElement(DomEventContainer_1.default, { onKeyDown: (evt) => {
                if (evt.key === 'Tab' && evt.target) {
                    const className = evt.target.className || '';
                    if (className.indexOf('DayPicker-Day') >= 0) {
                        if (evt.shiftKey === false) {
                            calendarFocusUtils_1.setFocusOnFirstElementInDayPickerCaption(calendarRef.current);
                        }
                        else {
                            calendarFocusUtils_1.setFocusOnLastElementInDayPickerCaption(calendarRef.current);
                        }
                        evt.stopPropagation();
                        evt.preventDefault();
                    }
                }
            } },
            react_1.default.createElement("div", { ref: calendarRef },
                react_1.default.createElement(focus_trap_react_1.default, { active: true, focusTrapOptions: {
                        clickOutsideDeactivates: true,
                        onDeactivate: onClose,
                    } },
                    react_1.default.createElement(react_day_picker_1.default, Object.assign({ locale: locale, fromMonth: minDateString ? dateFormatUtils_1.ISODateStringToUTCDate(minDateString) : undefined, toMonth: maxDateString ? dateFormatUtils_1.ISODateStringToUTCDate(maxDateString) : undefined, canChangeMonth: false, selectedDays: dateString ? dateFormatUtils_1.ISODateStringToUTCDate(dateString) : undefined, onDayClick: onSelectDate, onMonthChange: onChangeMonth }, dayPickerProps, dayPickerPropsToUse, { disabledDays: unavailableDates, month: displayMonth })))))));
});
exports.default = Calendar;
