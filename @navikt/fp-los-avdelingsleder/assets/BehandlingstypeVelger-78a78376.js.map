{"version":3,"file":"BehandlingstypeVelger-78a78376.js","sources":["../../src/behandlingskoer/components/sakslisteForm/filtrering/BehandlingstypeVelger.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\nimport { CheckboxField } from '@navikt/ft-form-hooks';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { BehandlingType, KodeverkType } from '@navikt/ft-kodeverk';\n\nimport { restApiHooks, RestApiPathsKeys } from '../../../../data/fplosRestApi';\nimport useLosKodeverk from '../../../../data/useLosKodeverk';\n\nconst behandlingstypeOrder = Object.values(BehandlingType);\n\ninterface OwnProps {\n  valgtSakslisteId: number;\n  valgtAvdelingEnhet: string;\n  hentAvdelingensSakslister: (params: { avdelingEnhet: string }) => void;\n  hentAntallOppgaver: (sakslisteId: number, avdelingEnhet: string) => void;\n}\n\n/**\n * BehandlingstypeVelger\n */\nconst BehandlingstypeVelger: FunctionComponent<OwnProps> = ({\n  valgtSakslisteId,\n  valgtAvdelingEnhet,\n  hentAvdelingensSakslister,\n  hentAntallOppgaver,\n}) => {\n  const { startRequest: lagreSakslisteBehandlingstype } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.LAGRE_SAKSLISTE_BEHANDLINGSTYPE,\n  );\n  const alleBehandlingTyper = useLosKodeverk(KodeverkType.BEHANDLING_TYPE);\n  const behandlingTyper = useMemo(\n    () => behandlingstypeOrder.map(kode => alleBehandlingTyper.find(bt => bt.kode === kode)),\n    [],\n  );\n  return (\n    <>\n      <Label size=\"small\">\n        <FormattedMessage id=\"BehandlingstypeVelger.Behandlingstype\" />\n      </Label>\n      <VerticalSpacer eightPx />\n      {behandlingTyper\n        .map(bt => {\n          if (!bt) {\n            return null;\n          }\n          return (\n            <React.Fragment key={bt.kode}>\n              <VerticalSpacer fourPx />\n              <CheckboxField\n                name={bt.kode}\n                label={bt.navn}\n                onChange={isChecked =>\n                  lagreSakslisteBehandlingstype({\n                    sakslisteId: valgtSakslisteId,\n                    avdelingEnhet: valgtAvdelingEnhet,\n                    behandlingType: bt.kode,\n                    checked: isChecked,\n                  }).then(() => {\n                    hentAntallOppgaver(valgtSakslisteId, valgtAvdelingEnhet);\n                    hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet });\n                  })\n                }\n              />\n            </React.Fragment>\n          );\n        })\n        .filter(bt => !!bt)}\n    </>\n  );\n};\n\nexport default BehandlingstypeVelger;\n"],"names":["behandlingstypeOrder","BehandlingType","BehandlingstypeVelger","valgtSakslisteId","valgtAvdelingEnhet","hentAvdelingensSakslister","hentAntallOppgaver","lagreSakslisteBehandlingstype","restApiHooks","RestApiPathsKeys","alleBehandlingTyper","useLosKodeverk","KodeverkType","behandlingTyper","useMemo","kode","bt","jsxs","Fragment","jsx","Label","FormattedMessage","VerticalSpacer","React","CheckboxField","isChecked","BehandlingstypeVelger$1"],"mappings":"mTAUA,MAAAA,EAAA,OAAA,OAAAC,CAAA,EAYAC,EAAA,CAAA,CAA4D,iBAAAC,EAC1D,mBAAAC,EACA,0BAAAC,EACA,mBAAAC,CAEF,IAAA,CACE,KAAA,CAAA,aAAAC,CAAA,EAAAC,EAAA,iBAAqEC,EAAA,+BAClD,EAEnBC,EAAAC,EAAAC,EAAA,eAAA,EACAC,EAAAC,EAAA,QAAwB,IAAAd,EAAA,IAAAe,GAAAL,EAAA,KAAAM,GAAAA,EAAA,OAAAD,CAAA,CAAA,EACiE,CAAA,CACtF,EAEH,OAAAE,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIC,EAAAA,IAAAC,EAAA,CAAA,KAAA,QAAA,SAAAD,MAAAE,EAAA,CAAA,GAAA,uCAAA,CAAA,CAAA,CAAA,EAEAF,EAAAA,IAAAG,EAAA,CAAA,QAAA,EAAA,CAAA,EACwBT,EAAA,IAAAG,GAGpBA,EAGAC,OAAAM,EAAA,SAAA,CAAA,SAAA,CAEIJ,EAAAA,IAAAG,EAAA,CAAA,OAAA,EAAA,CAAA,EAAuBH,EAAA,IACvBK,EAAC,CAAA,KAAAR,EAAA,KACU,MAAAA,EAAA,KACC,SAAAS,GAAAlB,EAAA,CAEsB,YAAAJ,EACf,cAAAC,EACE,eAAAY,EAAA,KACI,QAAAS,CACV,CAAA,EAAA,KAAA,IAAA,CAETnB,EAAAH,EAAAC,CAAA,EACAC,EAAA,CAAA,cAAAD,CAAA,CAAA,CAA+D,CAAA,CAChE,CAAA,CAEL,GAAAY,EAAA,IAAA,EAnBF,IAoBA,EAAA,OAAAA,GAAA,CAAA,CAAAA,CAAA,CAGc,CAAA,CAAA,CAG1B,EAEAU,EAAAxB"}