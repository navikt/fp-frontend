{"version":3,"file":"UtvalgskriterierForSakslisteForm-23b45589.js","sources":["../../src/behandlingskoer/components/sakslisteForm/UtvalgskriterierForSakslisteForm.tsx"],"sourcesContent":["import React, { FunctionComponent, useEffect, useCallback, useMemo } from 'react';\nimport { useIntl, FormattedMessage, IntlShape } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Heading, BodyShort, Panel } from '@navikt/ds-react';\nimport { required, minLength, maxLength, hasValidName } from '@navikt/ft-form-validators';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Form, InputField } from '@navikt/ft-form-hooks';\n\nimport { restApiHooks, RestApiPathsKeys } from '../../../data/fplosRestApi';\nimport BehandlingstypeVelger from './filtrering/BehandlingstypeVelger';\nimport AndreKriterierVelger from './filtrering/AndreKriterierVelger';\nimport FagsakYtelseTypeVelger from './filtrering/FagsakYtelseTypeVelger';\nimport SorteringVelger from './sortering/SorteringVelger';\nimport useDebounce from './useDebounce';\nimport Saksliste from '../../../typer/sakslisteAvdelingTsType';\n\nimport styles from './utvalgskriterierForSakslisteForm.module.css';\n\nconst minLength3 = minLength(3);\nconst maxLength100 = maxLength(100);\n\ntype FormValues = {\n  sakslisteId: number;\n  navn: string;\n  sortering?: string;\n  erDynamiskPeriode?: boolean;\n  fra?: string;\n  til?: string;\n  fomDato?: string;\n  tomDato?: string;\n};\n\nconst buildInitialValues = (intl: IntlShape, valgtSaksliste: Saksliste): FormValues => {\n  const behandlingTypes = valgtSaksliste.behandlingTyper\n    ? valgtSaksliste.behandlingTyper.reduce((acc, bt) => ({ ...acc, [bt]: true }), {})\n    : {};\n  const fagsakYtelseTypes = valgtSaksliste.fagsakYtelseTyper\n    ? valgtSaksliste.fagsakYtelseTyper.reduce((acc, fyt) => ({ ...acc, [fyt]: true }), {})\n    : {};\n\n  const andreKriterierTyper = valgtSaksliste.andreKriterier\n    ? valgtSaksliste.andreKriterier.reduce((acc, ak) => ({ ...acc, [ak.andreKriterierType]: true }), {})\n    : {};\n  const andreKriterierInkluder = valgtSaksliste.andreKriterier\n    ? valgtSaksliste.andreKriterier.reduce(\n        (acc, ak) => ({ ...acc, [`${ak.andreKriterierType}_inkluder`]: ak.inkluder }),\n        {},\n      )\n    : {};\n\n  return {\n    sakslisteId: valgtSaksliste.sakslisteId,\n    navn: valgtSaksliste.navn\n      ? valgtSaksliste.navn\n      : intl.formatMessage({ id: 'UtvalgskriterierForSakslisteForm.NyListe' }),\n    sortering: valgtSaksliste.sortering ? valgtSaksliste.sortering.sorteringType : undefined,\n    fomDato: valgtSaksliste.sortering ? valgtSaksliste.sortering.fomDato : undefined,\n    tomDato: valgtSaksliste.sortering ? valgtSaksliste.sortering.tomDato : undefined,\n    fra: valgtSaksliste.sortering ? valgtSaksliste.sortering.fra?.toString() : undefined,\n    til: valgtSaksliste.sortering ? valgtSaksliste.sortering.til?.toString() : undefined,\n    erDynamiskPeriode: valgtSaksliste.sortering ? valgtSaksliste.sortering.erDynamiskPeriode : undefined,\n    ...andreKriterierTyper,\n    ...andreKriterierInkluder,\n    ...behandlingTypes,\n    ...fagsakYtelseTypes,\n  };\n};\n\ninterface OwnProps {\n  valgtSaksliste: Saksliste;\n  valgtAvdelingEnhet: string;\n  hentAvdelingensSakslister: (params: { avdelingEnhet: string }) => void;\n  hentOppgaverForAvdelingAntall: (params: { avdelingEnhet: string }) => void;\n}\n\n/**\n * UtvalgskriterierForSakslisteForm\n */\nconst UtvalgskriterierForSakslisteForm: FunctionComponent<OwnProps> = ({\n  valgtSaksliste,\n  valgtAvdelingEnhet,\n  hentAvdelingensSakslister,\n  hentOppgaverForAvdelingAntall,\n}) => {\n  const intl = useIntl();\n  const { data: antallOppgaver, startRequest: hentAntallOppgaverForSaksliste } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.OPPGAVE_ANTALL,\n  );\n  useEffect(() => {\n    hentAntallOppgaverForSaksliste({ sakslisteId: valgtSaksliste.sakslisteId, avdelingEnhet: valgtAvdelingEnhet });\n  }, [valgtSaksliste.sakslisteId]);\n\n  const hentAntallOppgaver = useCallback((sakslisteId: number, avdelingEnhet: string) => {\n    hentAntallOppgaverForSaksliste({ sakslisteId, avdelingEnhet });\n    hentOppgaverForAvdelingAntall({ avdelingEnhet });\n  }, []);\n\n  const { startRequest: lagreSakslisteNavn } = restApiHooks.useRestApiRunner(RestApiPathsKeys.LAGRE_SAKSLISTE_NAVN);\n\n  const tranformValues = useCallback(\n    (nyttNavn: string): void => {\n      lagreSakslisteNavn({\n        sakslisteId: valgtSaksliste.sakslisteId,\n        navn: nyttNavn,\n        avdelingEnhet: valgtAvdelingEnhet,\n      }).then(() => hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet }));\n    },\n    [valgtAvdelingEnhet, valgtSaksliste],\n  );\n\n  const defaultValues = useMemo(() => buildInitialValues(intl, valgtSaksliste), [valgtSaksliste]);\n\n  const formMethods = useForm<FormValues>({\n    defaultValues,\n  });\n\n  const lagreNavn = useDebounce<string>('navn', tranformValues, formMethods.trigger);\n\n  const values = formMethods.watch();\n\n  return (\n    <Form<FormValues> formMethods={formMethods}>\n      <Panel className={styles.panel}>\n        <Heading size=\"small\">\n          <FormattedMessage id=\"UtvalgskriterierForSakslisteForm.Utvalgskriterier\" />\n        </Heading>\n        <VerticalSpacer eightPx />\n        <FlexContainer>\n          <FlexRow className={styles.utvalgskriterieRad}>\n            <FlexColumn>\n              <InputField\n                name=\"navn\"\n                label={intl.formatMessage({ id: 'UtvalgskriterierForSakslisteForm.Navn' })}\n                validate={[required, minLength3, maxLength100, hasValidName]}\n                onChange={lagreNavn}\n                className={styles.bredde}\n              />\n            </FlexColumn>\n            <FlexColumn className={styles.colRight}>\n              <div className={styles.grayBox}>\n                <BodyShort size=\"small\">\n                  <FormattedMessage id=\"UtvalgskriterierForSakslisteForm.AntallSaker\" />\n                </BodyShort>\n                <Heading size=\"small\">{antallOppgaver ? `${antallOppgaver}` : '0'}</Heading>\n              </div>\n            </FlexColumn>\n          </FlexRow>\n          <FlexRow spaceBetween>\n            <FlexColumn>\n              <FagsakYtelseTypeVelger\n                valgtSakslisteId={valgtSaksliste.sakslisteId}\n                valgtAvdelingEnhet={valgtAvdelingEnhet}\n                hentAvdelingensSakslister={hentAvdelingensSakslister}\n                hentAntallOppgaver={hentAntallOppgaver}\n              />\n              <BehandlingstypeVelger\n                valgtSakslisteId={valgtSaksliste.sakslisteId}\n                valgtAvdelingEnhet={valgtAvdelingEnhet}\n                hentAvdelingensSakslister={hentAvdelingensSakslister}\n                hentAntallOppgaver={hentAntallOppgaver}\n              />\n            </FlexColumn>\n            <FlexColumn>\n              <AndreKriterierVelger\n                valgtSakslisteId={valgtSaksliste.sakslisteId}\n                valgtAvdelingEnhet={valgtAvdelingEnhet}\n                values={values}\n                hentAvdelingensSakslister={hentAvdelingensSakslister}\n                hentAntallOppgaver={hentAntallOppgaver}\n              />\n            </FlexColumn>\n            <FlexColumn>\n              <SorteringVelger\n                valgtSakslisteId={valgtSaksliste.sakslisteId}\n                valgteBehandlingtyper={valgtSaksliste.behandlingTyper}\n                valgtAvdelingEnhet={valgtAvdelingEnhet}\n                erDynamiskPeriode={!!values.erDynamiskPeriode}\n                hentAvdelingensSakslister={hentAvdelingensSakslister}\n                hentAntallOppgaver={hentAntallOppgaver}\n              />\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n      </Panel>\n    </Form>\n  );\n};\n\nexport default UtvalgskriterierForSakslisteForm;\n"],"names":["minLength3","minLength","maxLength100","maxLength","buildInitialValues","intl","valgtSaksliste","behandlingTypes","acc","bt","fagsakYtelseTypes","fyt","andreKriterierTyper","ak","andreKriterierInkluder","_a","_b","UtvalgskriterierForSakslisteForm","valgtAvdelingEnhet","hentAvdelingensSakslister","hentOppgaverForAvdelingAntall","useIntl","antallOppgaver","hentAntallOppgaverForSaksliste","restApiHooks","RestApiPathsKeys","useEffect","hentAntallOppgaver","useCallback","sakslisteId","avdelingEnhet","lagreSakslisteNavn","tranformValues","nyttNavn","defaultValues","useMemo","formMethods","useForm","lagreNavn","useDebounce","values","jsx","Form","jsxs","Panel","styles","Heading","FormattedMessage","VerticalSpacer","FlexContainer","FlexRow","FlexColumn","InputField","required","hasValidName","BodyShort","FagsakYtelseTypeVelger","BehandlingstypeVelger","AndreKriterierVelger","SorteringVelger","UtvalgskriterierForSakslisteForm$1"],"mappings":"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"}