{"version":3,"file":"FagsakYtelseTypeVelger-99a6fbf1.js","sources":["../../src/behandlingskoer/components/sakslisteForm/filtrering/FagsakYtelseTypeVelger.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { CheckboxField } from '@navikt/ft-form-hooks';\nimport { KodeverkType } from '@navikt/ft-kodeverk';\n\nimport { KodeverkMedNavn } from '@navikt/fp-types';\nimport { restApiHooks, RestApiPathsKeys } from '../../../../data/fplosRestApi';\nimport useLosKodeverk from '../../../../data/useLosKodeverk';\n\nconst finnFagsakYtelseTypeNavn = (fagsakYtelseTyper: KodeverkMedNavn[], valgtFagsakYtelseType: string) => {\n  const type = fagsakYtelseTyper.find(fyt => fyt.kode === valgtFagsakYtelseType);\n  return type ? type.navn : '';\n};\n\ninterface OwnProps {\n  valgtSakslisteId: number;\n  valgtAvdelingEnhet: string;\n  hentAvdelingensSakslister: (params: { avdelingEnhet: string }) => void;\n  hentAntallOppgaver: (sakslisteId: number, avdelingEnhet: string) => void;\n}\n\n/**\n * FagsakYtelseTypeVelger\n */\nconst FagsakYtelseTypeVelger: FunctionComponent<OwnProps> = ({\n  valgtSakslisteId,\n  valgtAvdelingEnhet,\n  hentAvdelingensSakslister,\n  hentAntallOppgaver,\n}) => {\n  const { startRequest: lagreSakslisteFagsakYtelseType } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.LAGRE_SAKSLISTE_FAGSAK_YTELSE_TYPE,\n  );\n  const alleFagsakYtelseTyper = useLosKodeverk(KodeverkType.FAGSAK_YTELSE);\n  return (\n    <>\n      <Label size=\"small\">\n        <FormattedMessage id=\"FagsakYtelseTypeVelger.Stonadstype\" />\n      </Label>\n      <VerticalSpacer eightPx />\n      {alleFagsakYtelseTyper.map(fyt => (\n        <React.Fragment key={fyt.kode}>\n          <VerticalSpacer fourPx />\n          <CheckboxField\n            name={fyt.kode}\n            label={finnFagsakYtelseTypeNavn(alleFagsakYtelseTyper, fyt.kode)}\n            onChange={isChecked =>\n              lagreSakslisteFagsakYtelseType({\n                sakslisteId: valgtSakslisteId,\n                avdelingEnhet: valgtAvdelingEnhet,\n                fagsakYtelseType: fyt.kode,\n                checked: isChecked,\n              }).then(() => {\n                hentAntallOppgaver(valgtSakslisteId, valgtAvdelingEnhet);\n                hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet });\n              })\n            }\n          />\n        </React.Fragment>\n      ))}\n      <VerticalSpacer eightPx />\n    </>\n  );\n};\n\nexport default FagsakYtelseTypeVelger;\n"],"names":["finnFagsakYtelseTypeNavn","fagsakYtelseTyper","valgtFagsakYtelseType","type","fyt","FagsakYtelseTypeVelger","valgtSakslisteId","valgtAvdelingEnhet","hentAvdelingensSakslister","hentAntallOppgaver","lagreSakslisteFagsakYtelseType","restApiHooks","RestApiPathsKeys","alleFagsakYtelseTyper","useLosKodeverk","KodeverkType","jsxs","Fragment","jsx","Label","FormattedMessage","VerticalSpacer","React","CheckboxField","isChecked","FagsakYtelseTypeVelger$1"],"mappings":"qSAWA,MAAAA,EAAA,CAAAC,EAAAC,IAAA,CACE,MAAAC,EAAAF,EAAA,KAAAG,GAAAA,EAAA,OAAAF,CAAA,EACA,OAAAC,EAAAA,EAAA,KAAA,EACF,EAYAE,EAAA,CAAA,CAA6D,iBAAAC,EAC3D,mBAAAC,EACA,0BAAAC,EACA,mBAAAC,CAEF,IAAA,CACE,KAAA,CAAA,aAAAC,CAAA,EAAAC,EAAA,iBAAsEC,EAAA,kCACnD,EAEnBC,EAAAC,EAAAC,EAAA,aAAA,EACA,OAAAC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIC,EAAAA,IAAAC,EAAA,CAAA,KAAA,QAAA,SAAAD,MAAAE,EAAA,CAAA,GAAA,oCAAA,CAAA,CAAA,CAAA,EAEAF,EAAAA,IAAAG,EAAA,CAAA,QAAA,EAAA,CAAA,EACwBR,EAAA,IAAAT,GAAAY,EAAA,KAAAM,EAAA,SAAA,CAAA,SAAA,CAGpBJ,EAAAA,IAAAG,EAAA,CAAA,OAAA,EAAA,CAAA,EAAuBH,EAAA,IACvBK,EAAC,CAAA,KAAAnB,EAAA,KACW,MAAAJ,EAAAa,EAAAT,EAAA,IAAA,EACqD,SAAAoB,GAAAd,EAAA,CAE9B,YAAAJ,EAChB,cAAAC,EACE,iBAAAH,EAAA,KACO,QAAAoB,CACb,CAAA,EAAA,KAAA,IAAA,CAETf,EAAAH,EAAAC,CAAA,EACAC,EAAA,CAAA,cAAAD,CAAA,CAAA,CAA+D,CAAA,CAChE,CAAA,CAEL,GAAAH,EAAA,IAAA,CAAA,EAEHc,EAAAA,IAAAG,EAAA,CAAA,QAAA,EAAA,CAAA,CACuB,CAAA,CAAA,CAG9B,EAEAI,EAAApB"}