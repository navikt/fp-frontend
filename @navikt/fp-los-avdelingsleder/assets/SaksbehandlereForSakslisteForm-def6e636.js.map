{"version":3,"file":"SaksbehandlereForSakslisteForm-def6e636.js","sources":["../../src/behandlingskoer/components/saksbehandlerForm/SaksbehandlereForSakslisteForm.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo, useEffect } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { HStack, Label, Panel, VStack } from '@navikt/ds-react';\nimport { Form, CheckboxField } from '@navikt/ft-form-hooks';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { restApiHooks, RestApiPathsKeys } from '../../../data/fplosRestApi';\nimport Saksbehandler from '../../../typer/saksbehandlerAvdelingTsType';\nimport Saksliste from '../../../typer/sakslisteAvdelingTsType';\n\nimport styles from './saksbehandlereForSakslisteForm.module.css';\n\nconst sortSaksbehandlere = (saksbehandlere: Saksbehandler[]) =>\n  saksbehandlere && saksbehandlere instanceof Array\n    ? [...saksbehandlere].sort((saksbehandler1, saksbehandler2) =>\n        saksbehandler1.navn.localeCompare(saksbehandler2.navn),\n      )\n    : saksbehandlere;\n\ntype FormValues = {\n  reserverTil: string;\n};\n\ninterface OwnProps {\n  valgtSaksliste: Saksliste;\n  avdelingensSaksbehandlere: Saksbehandler[];\n  valgtAvdelingEnhet: string;\n  hentAvdelingensSakslister: (params: { avdelingEnhet: string }) => void;\n}\n\n/**\n * SaksbehandlereForSakslisteForm\n */\nconst SaksbehandlereForSakslisteForm: FunctionComponent<OwnProps> = ({\n  avdelingensSaksbehandlere = [],\n  valgtSaksliste,\n  valgtAvdelingEnhet,\n  hentAvdelingensSakslister,\n}) => {\n  const sorterteAvdelingensSaksbehandlere = useMemo(\n    () => sortSaksbehandlere(avdelingensSaksbehandlere),\n    [avdelingensSaksbehandlere],\n  );\n  const pos = Math.ceil(sorterteAvdelingensSaksbehandlere.length / 2);\n  const avdelingensSaksbehandlereVenstreListe = sorterteAvdelingensSaksbehandlere.slice(0, pos);\n  const avdelingensSaksbehandlereHoyreListe = sorterteAvdelingensSaksbehandlere.slice(pos);\n\n  const { startRequest: knyttSaksbehandlerTilSaksliste } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.LAGRE_SAKSLISTE_SAKSBEHANDLER,\n  );\n\n  const defaultValues = valgtSaksliste.saksbehandlerIdenter.reduce(\n    (acc, brukerIdent) => ({ ...acc, [brukerIdent]: true }),\n    {},\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues,\n  });\n\n  useEffect(() => {\n    formMethods.reset(defaultValues);\n  }, [valgtSaksliste.sakslisteId]);\n\n  return (\n    <Form<FormValues> formMethods={formMethods}>\n      <Panel className={styles.panel}>\n        <Label size=\"small\">\n          <FormattedMessage id=\"SaksbehandlereForSakslisteForm.Saksbehandlere\" />\n        </Label>\n        <VerticalSpacer sixteenPx />\n        {sorterteAvdelingensSaksbehandlere.length === 0 && (\n          <FormattedMessage id=\"SaksbehandlereForSakslisteForm.IngenSaksbehandlere\" />\n        )}\n        {sorterteAvdelingensSaksbehandlere.length > 0 && (\n          <HStack>\n            <VStack gap=\"2\" className={styles.colLeft}>\n              {avdelingensSaksbehandlereVenstreListe.map(s => (\n                <CheckboxField\n                  key={s.brukerIdent}\n                  name={s.brukerIdent}\n                  label={s.navn}\n                  onChange={isChecked =>\n                    knyttSaksbehandlerTilSaksliste({\n                      sakslisteId: valgtSaksliste.sakslisteId,\n                      brukerIdent: s.brukerIdent,\n                      checked: isChecked,\n                      avdelingEnhet: valgtAvdelingEnhet,\n                    }).then(() => hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet }))\n                  }\n                />\n              ))}\n            </VStack>\n            <VStack gap=\"2\">\n              {avdelingensSaksbehandlereHoyreListe.map(s => (\n                <CheckboxField\n                  key={s.brukerIdent}\n                  name={s.brukerIdent}\n                  label={s.navn}\n                  onChange={isChecked =>\n                    knyttSaksbehandlerTilSaksliste({\n                      sakslisteId: valgtSaksliste.sakslisteId,\n                      brukerIdent: s.brukerIdent,\n                      checked: isChecked,\n                      avdelingEnhet: valgtAvdelingEnhet,\n                    }).then(() => hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet }))\n                  }\n                />\n              ))}\n            </VStack>\n          </HStack>\n        )}\n      </Panel>\n    </Form>\n  );\n};\n\nexport default SaksbehandlereForSakslisteForm;\n"],"names":["sortSaksbehandlere","saksbehandlere","saksbehandler1","saksbehandler2","SaksbehandlereForSakslisteForm","avdelingensSaksbehandlere","valgtSaksliste","valgtAvdelingEnhet","hentAvdelingensSakslister","sorterteAvdelingensSaksbehandlere","useMemo","pos","avdelingensSaksbehandlereVenstreListe","avdelingensSaksbehandlereHoyreListe","knyttSaksbehandlerTilSaksliste","restApiHooks","RestApiPathsKeys","defaultValues","acc","brukerIdent","formMethods","useForm","useEffect","jsx","Form","jsxs","Panel","styles","Label","FormattedMessage","VerticalSpacer","HStack","VStack","s","CheckboxField","isChecked","SaksbehandlereForSakslisteForm$1"],"mappings":"mXAaAA,EAAAC,GAAAA,GAAAA,aAAA,MAAA,CAAA,GAAAA,CAAA,EAAA,KAE0B,CAAAC,EAAAC,IAAAD,EAAA,KAAA,cAAAC,EAAA,IAAA,CAEpB,EAAAF,EAiBNG,EAAA,CAAA,CAAqE,0BAAAC,EAAA,CAAA,EACtC,eAAAC,EAC7B,mBAAAC,EACA,0BAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,EAAA,QAA0C,IAAAV,EAAAK,CAAA,EACU,CAAAA,CAAA,CACxB,EAE5BM,EAAA,KAAA,KAAAF,EAAA,OAAA,CAAA,EACAG,EAAAH,EAAA,MAAA,EAAAE,CAAA,EACAE,EAAAJ,EAAA,MAAAE,CAAA,EAEA,CAAA,aAAAG,CAAA,EAAAC,EAAA,iBAAsEC,EAAA,6BACnD,EAGnBC,EAAAX,EAAA,qBAAA,OAA0D,CAAAY,EAAAC,KAAA,CAAA,GAAAD,EAAA,CAAAC,CAAA,EAAA,KACH,CAAA,CACpD,EAGHC,EAAAC,EAAA,CAAwC,cAAAJ,CACtC,CAAA,EAGFK,OAAAA,EAAAA,UAAA,IAAA,CACEF,EAAA,MAAAH,CAAA,CAA+B,EAAA,CAAAX,EAAA,WAAA,CAAA,EAGjCiB,MAAAC,EAAA,CAAA,YAAAJ,EAAA,SAAAK,EAAAA,KAAAC,EAAA,CAAA,UAAAC,EAAA,MAAA,SAAA,CAGMJ,EAAAA,IAAAK,EAAA,CAAA,KAAA,QAAA,SAAAL,MAAAM,EAAA,CAAA,GAAA,+CAAA,CAAA,CAAA,CAAA,EAEAN,EAAAA,IAAAO,EAAA,CAAA,UAAA,EAAA,CAAA,EAC0BrB,EAAA,SAAA,GAAAc,EAAAA,IAAAM,EAAA,CAAA,GAAA,qDAAA,EAEkDpB,EAAA,OAAA,GAAAgB,EAAA,KAAAM,EAAA,CAAA,SAAA,CAIxER,EAAAA,IAAAS,EAAA,CAAA,IAAA,IAAA,UAAAL,EAAA,QAAA,SAAAf,EAAA,IAAAqB,GAAAV,EAAA,IAEIW,EAAC,CAAA,KAAAD,EAAA,YAES,MAAAA,EAAA,KACC,SAAAE,GAAArB,EAAA,CAEwB,YAAAR,EAAA,YACD,YAAA2B,EAAA,YACb,QAAAE,EACN,cAAA5B,CACM,CAAA,EAAA,KAAA,IAAAC,EAAA,CAAA,cAAAD,CAAA,CAAA,CAAA,CAC6D,EAAA0B,EAAA,WATzE,CAAA,EAAA,EAabV,MAAAS,EAAA,CAAA,IAAA,IAAA,SAAAnB,EAAA,IAAAoB,GAAAV,EAAA,IAGIW,EAAC,CAAA,KAAAD,EAAA,YAES,MAAAA,EAAA,KACC,SAAAE,GAAArB,EAAA,CAEwB,YAAAR,EAAA,YACD,YAAA2B,EAAA,YACb,QAAAE,EACN,cAAA5B,CACM,CAAA,EAAA,KAAA,IAAAC,EAAA,CAAA,cAAAD,CAAA,CAAA,CAAA,CAC6D,EAAA0B,EAAA,WATzE,CAAA,EAAA,CAab,EAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAKV,EAEAG,EAAAhC"}