{"version":3,"file":"OppgaverSomErApneEllerPaVentPanel-1e7853ca.js","sources":["../../src/kodeverk/behandlingVenteStatus.ts","../../src/nokkeltall/components/apneOgPaVentBehandlinger/OppgaverSomErApneEllerPaVentGraf.tsx","../../src/nokkeltall/components/apneOgPaVentBehandlinger/OppgaverSomErApneEllerPaVentPanel.tsx"],"sourcesContent":["enum BehandlingVenteStatus {\n  PA_VENT = 'PÅ_VENT',\n  IKKE_PA_VENT = 'IKKE_PÅ_VENT',\n}\n\nexport default BehandlingVenteStatus;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl, IntlShape } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Panel } from '@navikt/ds-react';\nimport { ReactECharts } from '@navikt/fp-los-felles';\n\nimport OppgaverSomErApneEllerPaVent from '../../../typer/oppgaverSomErApneEllerPaVentTsType';\nimport BehandlingVenteStatus from '../../../kodeverk/behandlingVenteStatus';\n\nconst UKJENT_DATO = 'UKJENT_DATO';\n\nconst getYearText = (month: number, intl: IntlShape): string =>\n  intl.formatMessage({ id: `OppgaverSomErApneEllerPaVentGraf.${month}` });\n\ninterface KoordinatDatoEllerUkjent {\n  x: string;\n  y: number;\n}\n\nconst finnGrafPeriode = (oppgaverSomErApneEllerPaVent: OppgaverSomErApneEllerPaVent[]): dayjs.Dayjs[] => {\n  let periodeStart = dayjs().subtract(9, 'M');\n  let periodeSlutt = dayjs().add(1, 'M');\n\n  oppgaverSomErApneEllerPaVent\n    .filter(oppgave => !!oppgave.førsteUttakMåned)\n    .forEach(oppgave => {\n      const dato = dayjs(oppgave.førsteUttakMåned);\n      if (dato.isBefore(periodeStart)) {\n        periodeStart = dato;\n      }\n      if (dato.isAfter(periodeSlutt)) {\n        periodeSlutt = dato;\n      }\n    });\n\n  // Eksta kolonne mellom y-akse og første stolpe + Ekstra kolonne for data med ukjent dato\n  return [\n    dayjs(periodeStart.subtract(1, 'months').startOf('month')),\n    dayjs(periodeSlutt.add(1, 'months').startOf('month')),\n  ];\n};\n\nconst finnAntallPerDato = (\n  oppgaverSomErApneEllerPaVent: OppgaverSomErApneEllerPaVent[],\n): KoordinatDatoEllerUkjent[] => {\n  const antallPerDatoOgUkjent = oppgaverSomErApneEllerPaVent.reduce((acc, oppgave) => {\n    const { førsteUttakMåned, antall } = oppgave;\n    const key = førsteUttakMåned || UKJENT_DATO;\n    return {\n      ...acc,\n      [key]: acc[key] ? acc[key] + antall : antall,\n    };\n  }, {} as Record<string, number>);\n\n  return Object.keys(antallPerDatoOgUkjent).map(k => ({ x: k, y: antallPerDatoOgUkjent[k] }));\n};\n\nconst lagKoordinatForDato = (dato: dayjs.Dayjs, oppgaver: KoordinatDatoEllerUkjent[]): (number | Date)[] => {\n  const eksisterendeDato = oppgaver.filter(o => o.x !== UKJENT_DATO).find(o => dayjs(o.x).isSame(dato));\n  return [\n    eksisterendeDato ? dayjs(eksisterendeDato.x).toDate() : dato.toDate(),\n    eksisterendeDato ? eksisterendeDato.y : 0,\n  ];\n};\n\nconst fyllInnManglendeDatoerOgSorterEtterDato = (\n  oppgaverPaVent: KoordinatDatoEllerUkjent[],\n  oppgaverIkkePaVent: KoordinatDatoEllerUkjent[],\n  periodeStart: dayjs.Dayjs,\n  periodeSlutt: dayjs.Dayjs,\n): { koordinaterPaVent: (number | Date)[][]; koordinaterIkkePaVent: (number | Date)[][] } => {\n  const koordinaterPaVent: (number | Date)[][] = [];\n  const koordinaterIkkePaVent: (number | Date)[][] = [];\n\n  let dato = dayjs(periodeStart);\n  do {\n    koordinaterPaVent.push(lagKoordinatForDato(dato, oppgaverPaVent));\n    koordinaterIkkePaVent.push(lagKoordinatForDato(dato, oppgaverIkkePaVent));\n    dato = dayjs(dato.add(1, 'month'));\n  } while (dato.isBefore(periodeSlutt));\n\n  koordinaterPaVent.push([periodeSlutt.toDate(), oppgaverPaVent.find(d => d.x === UKJENT_DATO)?.y || 0]);\n  koordinaterIkkePaVent.push([periodeSlutt.toDate(), oppgaverIkkePaVent.find(d => d.x === UKJENT_DATO)?.y || 0]);\n\n  return {\n    koordinaterPaVent,\n    koordinaterIkkePaVent,\n  };\n};\n\ninterface OwnProps {\n  height: number;\n  oppgaverApneEllerPaVent: OppgaverSomErApneEllerPaVent[];\n}\n\n/**\n * OppgaverSomErApneEllerPaVentGraf.\n */\nconst OppgaverSomErApneEllerPaVentGraf: FunctionComponent<OwnProps> = ({ height, oppgaverApneEllerPaVent }) => {\n  const intl = useIntl();\n  const paVentTekst = intl.formatMessage({ id: 'OppgaverSomErApneEllerPaVentGraf.PaVent' });\n  const ikkePaVentTekst = intl.formatMessage({ id: 'OppgaverSomErApneEllerPaVentGraf.IkkePaVent' });\n  const ukjentTekst = intl.formatMessage({ id: 'OppgaverSomErApneEllerPaVentGraf.Ukjent' });\n  const datoTekst = intl.formatMessage({ id: 'OppgaverSomErApneEllerPaVentGraf.Dato' });\n\n  const oppgaverPaVentPerDato = useMemo(\n    () =>\n      finnAntallPerDato(oppgaverApneEllerPaVent.filter(o => o.behandlingVenteStatus === BehandlingVenteStatus.PA_VENT)),\n    [oppgaverApneEllerPaVent],\n  );\n  const oppgaverIkkePaVentPerDato = useMemo(\n    () =>\n      finnAntallPerDato(\n        oppgaverApneEllerPaVent.filter(o => o.behandlingVenteStatus === BehandlingVenteStatus.IKKE_PA_VENT),\n      ),\n    [oppgaverApneEllerPaVent],\n  );\n\n  const [periodeStart, periodeSlutt] = useMemo(\n    () => finnGrafPeriode(oppgaverApneEllerPaVent),\n    [oppgaverApneEllerPaVent],\n  );\n\n  const { koordinaterPaVent, koordinaterIkkePaVent } = useMemo(\n    () =>\n      fyllInnManglendeDatoerOgSorterEtterDato(\n        oppgaverPaVentPerDato,\n        oppgaverIkkePaVentPerDato,\n        periodeStart,\n        periodeSlutt,\n      ),\n    [oppgaverPaVentPerDato, oppgaverIkkePaVentPerDato, periodeStart, periodeSlutt],\n  );\n\n  return (\n    <Panel>\n      <ReactECharts\n        height={height}\n        option={{\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow',\n              label: {\n                formatter: params => {\n                  const dato = dayjs(params.value);\n                  if (dato.isSame(periodeSlutt)) {\n                    return `${ukjentTekst} ${datoTekst}`;\n                  }\n                  return `${getYearText(dato.month(), intl)} - ${dato.year()}`;\n                },\n              },\n            },\n          },\n          toolbox: {\n            feature: {\n              saveAsImage: {\n                title: 'Lagre ',\n                name: 'Status_åpne_behandlinger',\n              },\n            },\n          },\n          legend: {\n            data: [paVentTekst, ikkePaVentTekst],\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true,\n          },\n          xAxis: [\n            {\n              type: 'category',\n              boundaryGap: false,\n              axisLabel: {\n                formatter: (value: any) => {\n                  const dato = dayjs(value);\n                  const erSiste = dato.isSame(periodeSlutt);\n                  const maned = erSiste ? ukjentTekst : getYearText(dato.month(), intl);\n                  const ar = erSiste ? datoTekst : dato.year();\n\n                  return `${maned}\\n${ar}`;\n                },\n              },\n            },\n          ],\n          yAxis: [\n            {\n              type: 'value',\n              name: intl.formatMessage({ id: 'OppgaverSomErApneEllerPaVentGraf.AntallGraf' }),\n            },\n          ],\n          series: [\n            {\n              name: paVentTekst,\n              type: 'bar',\n              stack: 'total',\n              label: {\n                show: true,\n              },\n              emphasis: {\n                focus: 'series',\n              },\n              data: koordinaterPaVent,\n            },\n            {\n              name: ikkePaVentTekst,\n              type: 'bar',\n              stack: 'total',\n              label: {\n                show: true,\n              },\n              emphasis: {\n                focus: 'series',\n              },\n              data: koordinaterIkkePaVent,\n            },\n          ],\n          color: ['#85d5f0', '#38a161'],\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default OppgaverSomErApneEllerPaVentGraf;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Label } from '@navikt/ds-react';\nimport { VerticalSpacer, FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport { Form, CheckboxField } from '@navikt/ft-form-hooks';\nimport { BehandlingType, KodeverkType } from '@navikt/ft-kodeverk';\n\nimport OppgaverSomErApneEllerPaVent from '../../../typer/oppgaverSomErApneEllerPaVentTsType';\nimport OppgaverSomErApneEllerPaVentGraf from './OppgaverSomErApneEllerPaVentGraf';\nimport StoreValuesInLocalStorage from '../../../data/StoreValuesInLocalStorage';\nimport useLosKodeverk from '../../../data/useLosKodeverk';\n\nconst formName = 'oppgaverSomErApneEllerPaVent';\n\ninterface OwnProps {\n  height: number;\n  oppgaverApneEllerPaVent: OppgaverSomErApneEllerPaVent[];\n  getValueFromLocalStorage: (key: string) => string | undefined;\n}\n\n/**\n * OppgaverSomErApneEllerPaVentPanel.\n */\nconst OppgaverSomErApneEllerPaVentPanel: FunctionComponent<OwnProps> = ({\n  height,\n  oppgaverApneEllerPaVent,\n  getValueFromLocalStorage,\n}) => {\n  const behandlingTyper = useLosKodeverk(KodeverkType.BEHANDLING_TYPE);\n  const stringFromStorage = getValueFromLocalStorage(formName);\n  const lagredeVerdier = stringFromStorage ? JSON.parse(stringFromStorage) : undefined;\n\n  const filtrerteBehandlingstyper = useMemo(\n    () =>\n      behandlingTyper.filter(\n        type => type.kode !== BehandlingType.TILBAKEKREVING && type.kode !== BehandlingType.TILBAKEKREVING_REVURDERING,\n      ),\n    [],\n  );\n\n  const formDefaultValues = useMemo(\n    () =>\n      Object.values(filtrerteBehandlingstyper).reduce(\n        (app, type) => ({\n          ...app,\n          [type.kode]: true,\n        }),\n        {},\n      ),\n    [],\n  );\n\n  const formMethods = useForm({\n    defaultValues: lagredeVerdier || formDefaultValues,\n  });\n\n  const values = formMethods.watch();\n\n  return (\n    <Form formMethods={formMethods}>\n      <StoreValuesInLocalStorage stateKey={formName} values={values} />\n      <Label size=\"small\">\n        <FormattedMessage id=\"OppgaverSomErApneEllerPaVentPanel.Apne\" />\n      </Label>\n      <VerticalSpacer sixteenPx />\n      <FlexContainer>\n        <FlexRow>\n          {filtrerteBehandlingstyper.map(type => (\n            <FlexColumn key={type.kode}>\n              <CheckboxField name={type.kode} label={type.navn} />\n            </FlexColumn>\n          ))}\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer sixteenPx />\n      <OppgaverSomErApneEllerPaVentGraf\n        height={height}\n        oppgaverApneEllerPaVent={oppgaverApneEllerPaVent.filter(oav => values[oav.behandlingType])}\n      />\n    </Form>\n  );\n};\n\nexport default OppgaverSomErApneEllerPaVentPanel;\n"],"names":["BehandlingVenteStatus","UKJENT_DATO","getYearText","month","intl","finnGrafPeriode","oppgaverSomErApneEllerPaVent","periodeStart","dayjs","periodeSlutt","oppgave","dato","finnAntallPerDato","antallPerDatoOgUkjent","acc","førsteUttakMåned","antall","key","k","lagKoordinatForDato","oppgaver","eksisterendeDato","o","fyllInnManglendeDatoerOgSorterEtterDato","oppgaverPaVent","oppgaverIkkePaVent","koordinaterPaVent","koordinaterIkkePaVent","_a","d","_b","OppgaverSomErApneEllerPaVentGraf","height","oppgaverApneEllerPaVent","useIntl","paVentTekst","ikkePaVentTekst","ukjentTekst","datoTekst","oppgaverPaVentPerDato","useMemo","oppgaverIkkePaVentPerDato","jsx","Panel","ReactECharts","params","value","erSiste","maned","ar","formName","OppgaverSomErApneEllerPaVentPanel","getValueFromLocalStorage","behandlingTyper","useLosKodeverk","KodeverkType","stringFromStorage","lagredeVerdier","filtrerteBehandlingstyper","type","BehandlingType","formDefaultValues","app","formMethods","useForm","values","jsxs","Form","StoreValuesInLocalStorage","Label","FormattedMessage","VerticalSpacer","FlexContainer","FlexRow","FlexColumn","CheckboxField","oav","OppgaverSomErApneEllerPaVentPanel$1"],"mappings":"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"}