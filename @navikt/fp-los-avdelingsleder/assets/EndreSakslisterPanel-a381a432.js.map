{"version":3,"file":"EndreSakslisterPanel-a381a432.js","sources":["../../../../node_modules/@navikt/aksel-icons/dist/react/esm/ArrowDown.js","../../src/behandlingskoer/components/EndreSakslisterPanel.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgArrowDown = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M12.75 3.5a.75.75 0 0 0-1.5 0v14.69l-5.22-5.22a.75.75 0 0 0-1.06 1.06l6.5 6.5a.75.75 0 0 0 1.06 0l6.5-6.5a.75.75 0 1 0-1.06-1.06l-5.22 5.22V3.5Z\", fill: \"currentColor\" })));\n});\nexport default SvgArrowDown;\n","import React, { FunctionComponent, useCallback, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { ArrowDownIcon } from '@navikt/aksel-icons';\nimport { restApiHooks, RestApiPathsKeys } from '../../data/fplosRestApi';\nimport Saksliste from '../../typer/sakslisteAvdelingTsType';\nimport Saksbehandler from '../../typer/saksbehandlerAvdelingTsType';\nimport GjeldendeSakslisterTabell from './GjeldendeSakslisterTabell';\nimport SaksbehandlereForSakslisteForm from './saksbehandlerForm/SaksbehandlereForSakslisteForm';\nimport UtvalgskriterierForSakslisteForm from './sakslisteForm/UtvalgskriterierForSakslisteForm';\n\nimport styles from './endreSakslisterPanel.module.css';\n\nconst EMPTY_ARRAY: Saksliste[] = [];\n\ninterface OwnProps {\n  setValgtSakslisteId: (sakslisteId: number) => void;\n  valgtSakslisteId?: number;\n  valgtAvdelingEnhet: string;\n  avdelingensSaksbehandlere: Saksbehandler[];\n  resetValgtSakslisteId: () => void;\n}\n\n/**\n * EndreSakslisterPanel\n */\nconst EndreSakslisterPanel: FunctionComponent<OwnProps> = ({\n  setValgtSakslisteId,\n  valgtSakslisteId,\n  valgtAvdelingEnhet,\n  avdelingensSaksbehandlere,\n  resetValgtSakslisteId,\n}) => {\n  const intl = useIntl();\n  const { data: oppgaverForAvdelingAntall, startRequest: hentOppgaverForAvdelingAntall } =\n    restApiHooks.useRestApiRunner(RestApiPathsKeys.OPPGAVE_AVDELING_ANTALL);\n  const { data: sakslister = EMPTY_ARRAY, startRequest: hentAvdelingensSl } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.SAKSLISTER_FOR_AVDELING,\n  );\n  const hentAvdelingensSakslister = useCallback(\n    (params: { avdelingEnhet: string }) => hentAvdelingensSl(params, true),\n    [],\n  );\n  useEffect(() => {\n    hentOppgaverForAvdelingAntall({ avdelingEnhet: valgtAvdelingEnhet });\n    hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet });\n  }, [valgtAvdelingEnhet]);\n\n  const { data: nySakslisteObject, startRequest: lagNySaksliste } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.OPPRETT_NY_SAKSLISTE,\n  );\n  const lagNySakslisteOgHentAvdelingensSakslisterPåNytt = useCallback((avdelingEnhet: string) => {\n    lagNySaksliste({ avdelingEnhet }).then(() => {\n      resetValgtSakslisteId();\n      hentAvdelingensSakslister({ avdelingEnhet });\n    });\n  }, []);\n  const nyId = nySakslisteObject ? parseInt(nySakslisteObject.sakslisteId, 10) : undefined;\n  const valgtSakId = valgtSakslisteId !== undefined ? valgtSakslisteId : nyId;\n\n  const valgtSaksliste = sakslister.find(s => s.sakslisteId === valgtSakId);\n\n  return (\n    <>\n      <GjeldendeSakslisterTabell\n        sakslister={sakslister}\n        setValgtSakslisteId={setValgtSakslisteId}\n        valgtSakslisteId={valgtSakId}\n        valgtAvdelingEnhet={valgtAvdelingEnhet}\n        oppgaverForAvdelingAntall={oppgaverForAvdelingAntall}\n        lagNySaksliste={lagNySakslisteOgHentAvdelingensSakslisterPåNytt}\n        resetValgtSakslisteId={resetValgtSakslisteId}\n        hentAvdelingensSakslister={hentAvdelingensSakslister}\n      />\n      <VerticalSpacer sixteenPx />\n      {valgtSakId && valgtSaksliste && (\n        <React.Fragment key={valgtSaksliste.sakslisteId}>\n          <UtvalgskriterierForSakslisteForm\n            valgtSaksliste={valgtSaksliste}\n            valgtAvdelingEnhet={valgtAvdelingEnhet}\n            hentAvdelingensSakslister={hentAvdelingensSakslister}\n            hentOppgaverForAvdelingAntall={hentOppgaverForAvdelingAntall}\n          />\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn className={styles.leftCol} />\n              <FlexColumn>\n                <ArrowDownIcon\n                  className={styles.arrow}\n                  title={intl.formatMessage({ id: 'EndreSakslisterPanel.Saksbehandlere' })}\n                />\n              </FlexColumn>\n              <FlexColumn className={styles.text}>\n                <FormattedMessage id=\"EndreSakslisterPanel.KnyttetMotSaksbehandlere\" />\n              </FlexColumn>\n            </FlexRow>\n          </FlexContainer>\n          <SaksbehandlereForSakslisteForm\n            valgtSaksliste={valgtSaksliste}\n            valgtAvdelingEnhet={valgtAvdelingEnhet}\n            avdelingensSaksbehandlere={avdelingensSaksbehandlere}\n            hentAvdelingensSakslister={hentAvdelingensSakslister}\n          />\n        </React.Fragment>\n      )}\n    </>\n  );\n};\n\nexport default EndreSakslisterPanel;\n"],"names":["__rest","this","s","e","p","i","SvgArrowDown","forwardRef","_a","ref","title","_titleId","props","titleId","useId","React.createElement","ArrowDownIcon","EMPTY_ARRAY","EndreSakslisterPanel","setValgtSakslisteId","valgtSakslisteId","valgtAvdelingEnhet","avdelingensSaksbehandlere","resetValgtSakslisteId","intl","useIntl","oppgaverForAvdelingAntall","hentOppgaverForAvdelingAntall","restApiHooks","RestApiPathsKeys","sakslister","hentAvdelingensSl","hentAvdelingensSakslister","useCallback","params","useEffect","nySakslisteObject","lagNySaksliste","lagNySakslisteOgHentAvdelingensSakslisterPåNytt","avdelingEnhet","nyId","valgtSakId","valgtSaksliste","jsxs","Fragment","jsx","GjeldendeSakslisterTabell","VerticalSpacer","React","UtvalgskriterierForSakslisteForm","FlexContainer","FlexRow","FlexColumn","styles","FormattedMessage","SaksbehandlereForSakslisteForm","EndreSakslisterPanel$1"],"mappings":"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","x_google_ignoreList":[0]}