{"version":3,"file":"GjeldendeSakslisterTabell-9d7d63f6.js","sources":["../../../../node_modules/@navikt/aksel-icons/dist/react/esm/PlusCircle.js","../../../../node_modules/@navikt/ds-react/esm/link/Link.js","../../src/behandlingskoer/components/GjeldendeSakslisterTabell.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgPlusCircle = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M3.75 12a8.25 8.25 0 1 1 16.5 0 8.25 8.25 0 0 1-16.5 0ZM12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm0 4.5a.75.75 0 0 1 .75.75v3.75h3.75a.75.75 0 0 1 0 1.5h-3.75v3.75a.75.75 0 0 1-1.5 0v-3.75H7.5a.75.75 0 0 1 0-1.5h3.75V7.5a.75.75 0 0 1 .75-.75Z\", fill: \"currentColor\" })));\n});\nexport default SvgPlusCircle;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\n/**\n * A component that displays a hyperlink.\n *\n * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/link)\n * @see 🏷️ {@link LinkProps}\n * @see [🤖 OverridableComponent](https://aksel.nav.no/grunnleggende/kode/overridablecomponent) support\n *\n * @example\n * ```jsx\n * <Link href=\"#\">lenke til ny side</Link>\n * <Link as={ReactRouter.Link} to=\"#\">lenke til ny side</Link>\n * ```\n * @example\n * ```jsx\n * <BodyLong>\n * ...\n *  <Link href=\"#\" inlineText>lenke til ny side</Link>\n * ...\n * </BodyLong>\n * ```\n */\nexport const Link = forwardRef((_a, ref) => {\n    var { as: Component = \"a\", className, underline = true, variant = \"action\", inlineText = false } = _a, rest = __rest(_a, [\"as\", \"className\", \"underline\", \"variant\", \"inlineText\"]);\n    return (React.createElement(Component, Object.assign({}, rest, { ref: ref, className: cl(\"navds-link\", className, `navds-link--${variant}`, {\n            \"navds-link--remove-underline\": !underline,\n            \"navds-link--inline-text\": inlineText,\n        }) })));\n});\nexport default Link;\n//# sourceMappingURL=Link.js.map","import React, { useState, KeyboardEvent, FunctionComponent, useEffect, useRef, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Detail, Label, Heading, Link } from '@navikt/ds-react';\nimport { KodeverkMedNavn } from '@navikt/ft-types';\nimport {\n  VerticalSpacer,\n  Table,\n  TableRow,\n  TableColumn,\n  DateLabel,\n  FlexContainer,\n  FlexRow,\n  FlexColumn,\n} from '@navikt/ft-ui-komponenter';\nimport { KodeverkType } from '@navikt/ft-kodeverk';\nimport { PlusCircleIcon, XMarkIcon } from '@navikt/aksel-icons';\n\nimport { restApiHooks, RestApiPathsKeys } from '../../data/fplosRestApi';\nimport useLosKodeverk from '../../data/useLosKodeverk';\nimport SletteSakslisteModal from './SletteSakslisteModal';\nimport Saksliste from '../../typer/sakslisteAvdelingTsType';\n\nimport styles from './gjeldendeSakslisterTabell.module.css';\n\nconst headerTextCodes = [\n  'GjeldendeSakslisterTabell.Listenavn',\n  'GjeldendeSakslisterTabell.Stonadstype',\n  'GjeldendeSakslisterTabell.Behandlingtype',\n  'GjeldendeSakslisterTabell.AntallSaksbehandlere',\n  'GjeldendeSakslisterTabell.AntallBehandlinger',\n  'GjeldendeSakslisterTabell.SistEndret',\n  'EMPTY_1',\n];\n\nconst formatStonadstyper = (fagsakYtelseTyper: KodeverkMedNavn[], valgteFagsakYtelseTyper?: string[]) => {\n  if (!valgteFagsakYtelseTyper || valgteFagsakYtelseTyper.length === 0) {\n    return <FormattedMessage id=\"GjeldendeSakslisterTabell.Alle\" />;\n  }\n\n  return valgteFagsakYtelseTyper\n    .map<string>(fyt => {\n      const type = fagsakYtelseTyper.find(def => def.kode === fyt);\n      return type ? type.navn : '';\n    })\n    .join(', ');\n};\n\nconst formatBehandlingstyper = (behandlingTyper: KodeverkMedNavn[], valgteBehandlingTyper?: string[]) => {\n  if (\n    !valgteBehandlingTyper ||\n    valgteBehandlingTyper.length === 0 ||\n    valgteBehandlingTyper.length === behandlingTyper.length\n  ) {\n    return <FormattedMessage id=\"GjeldendeSakslisterTabell.Alle\" />;\n  }\n\n  return valgteBehandlingTyper\n    .map<string>(bt => {\n      const type = behandlingTyper.find(def => def.kode === bt);\n      return type ? type.navn : '';\n    })\n    .join(', ');\n};\n\ninterface OwnProps {\n  sakslister: Saksliste[];\n  setValgtSakslisteId: (sakslisteId: number) => void;\n  valgtSakslisteId?: number;\n  valgtAvdelingEnhet: string;\n  oppgaverForAvdelingAntall?: number;\n  lagNySaksliste: (avdelingEnhet: string) => void;\n  resetValgtSakslisteId: () => void;\n  hentAvdelingensSakslister: (params: { avdelingEnhet: string }) => void;\n}\n\nconst wait = (ms: number): Promise<any> =>\n  new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n\n/**\n * GjeldendeSakslisterTabell\n */\nexport const GjeldendeSakslisterTabell: FunctionComponent<OwnProps> = ({\n  sakslister,\n  valgtAvdelingEnhet,\n  setValgtSakslisteId,\n  valgtSakslisteId,\n  oppgaverForAvdelingAntall,\n  lagNySaksliste,\n  resetValgtSakslisteId,\n  hentAvdelingensSakslister,\n}) => {\n  const [valgtSaksliste, setValgtSakslisteTemp] = useState<Saksliste>();\n  const tabRef = useRef<(HTMLDivElement | null)[]>([]);\n\n  const behandlingTyper = useLosKodeverk(KodeverkType.BEHANDLING_TYPE);\n  const fagsakYtelseTyper = useLosKodeverk(KodeverkType.FAGSAK_YTELSE);\n\n  const { startRequest: fjernSaksliste } = restApiHooks.useRestApiRunner(RestApiPathsKeys.SLETT_SAKSLISTE);\n\n  useEffect(() => {\n    tabRef.current = tabRef.current.slice(0, sakslister.length);\n  }, [sakslister]);\n\n  const setValgtSaksliste = async (\n    event: React.MouseEvent | React.KeyboardEvent,\n    id?: number,\n  ): Promise<string | undefined> => {\n    // @ts-ignore Fiks\n    if (tabRef.current.some(node => node && node.contains(event.target))) {\n      return;\n    }\n\n    // Må vente 100 ms før en byttar behandlingskø i tabell. Dette fordi lagring av navn skjer som blur-event. Så i tilfellet\n    // der en endrer navn og så trykker direkte på en annen behandlingskø vil ikke lagringen skje før etter at ny kø er valgt.\n    await wait(100);\n\n    if (id) {\n      setValgtSakslisteId(id);\n    }\n  };\n\n  const lagNySakslisteFn = useCallback(\n    (event: KeyboardEvent): void => {\n      if (event.keyCode === 13) {\n        lagNySaksliste(valgtAvdelingEnhet);\n      }\n    },\n    [valgtAvdelingEnhet],\n  );\n\n  const visFjernSakslisteModal = (nyValgtSaksliste: Saksliste): void => {\n    setValgtSakslisteTemp(nyValgtSaksliste);\n  };\n\n  const closeSletteModal = useCallback((): void => {\n    setValgtSakslisteTemp(undefined);\n  }, []);\n\n  const fjernSakslisteFn = useCallback(\n    (saksliste: Saksliste): void => {\n      closeSletteModal();\n      fjernSaksliste({ sakslisteId: saksliste.sakslisteId, avdelingEnhet: valgtAvdelingEnhet }).then(() => {\n        resetValgtSakslisteId();\n        hentAvdelingensSakslister({ avdelingEnhet: valgtAvdelingEnhet });\n      });\n    },\n    [valgtAvdelingEnhet],\n  );\n\n  return (\n    <>\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn>\n            <Label size=\"small\">\n              <FormattedMessage id=\"GjeldendeSakslisterTabell.GjeldendeLister\" />\n            </Label>\n          </FlexColumn>\n          <FlexColumn className={styles.margin}>\n            <div className={styles.grayBox}>\n              <BodyShort size=\"small\">\n                <FormattedMessage id=\"GjeldendeSakslisterTabell.OppgaverForAvdeling\" />\n              </BodyShort>\n              <Heading size=\"small\">{oppgaverForAvdelingAntall || '0'}</Heading>\n            </div>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      {sakslister.length === 0 && (\n        <>\n          <VerticalSpacer eightPx />\n          <BodyShort size=\"small\">\n            <FormattedMessage id=\"GjeldendeSakslisterTabell.IngenLister\" />\n          </BodyShort>\n          <VerticalSpacer eightPx />\n        </>\n      )}\n      {sakslister.length > 0 && (\n        <Table headerTextCodes={headerTextCodes}>\n          {sakslister.map((saksliste, index) => (\n            <TableRow\n              key={saksliste.sakslisteId}\n              className={saksliste.sakslisteId === valgtSakslisteId ? styles.isSelected : undefined}\n              id={saksliste.sakslisteId}\n              onMouseDown={setValgtSaksliste}\n              onKeyDown={setValgtSaksliste}\n            >\n              <TableColumn>{saksliste.navn}</TableColumn>\n              <TableColumn>{formatStonadstyper(fagsakYtelseTyper, saksliste.fagsakYtelseTyper)}</TableColumn>\n              <TableColumn>{formatBehandlingstyper(behandlingTyper, saksliste.behandlingTyper)}</TableColumn>\n              <TableColumn>\n                {saksliste.saksbehandlerIdenter.length > 0 ? saksliste.saksbehandlerIdenter.length : ''}\n              </TableColumn>\n              <TableColumn>{saksliste.antallBehandlinger}</TableColumn>\n              <TableColumn>\n                <DateLabel dateString={saksliste.sistEndret} />\n              </TableColumn>\n              <TableColumn>\n                <div\n                  ref={el => {\n                    tabRef.current[index] = el;\n                  }}\n                >\n                  <XMarkIcon\n                    className={styles.removeImage}\n                    onMouseDown={() => visFjernSakslisteModal(saksliste)}\n                    onKeyDown={() => visFjernSakslisteModal(saksliste)}\n                  />\n                </div>\n              </TableColumn>\n            </TableRow>\n          ))}\n        </Table>\n      )}\n      <Link onClick={() => lagNySaksliste(valgtAvdelingEnhet)} onKeyDown={lagNySakslisteFn}>\n        <Detail className={styles.imageText}>\n          <FormattedMessage id=\"GjeldendeSakslisterTabell.LeggTilListe\" />\n        </Detail>\n        <PlusCircleIcon />\n      </Link>\n      {valgtSaksliste && (\n        <SletteSakslisteModal valgtSaksliste={valgtSaksliste} cancel={closeSletteModal} submit={fjernSakslisteFn} />\n      )}\n    </>\n  );\n};\n\nexport default GjeldendeSakslisterTabell;\n"],"names":["__rest","this","s","e","t","p","i","SvgPlusCircle","forwardRef","_a","ref","title","_titleId","props","titleId","useId","React.createElement","PlusCircleIcon","Link","Component","className","underline","variant","inlineText","rest","React","cl","Link$1","headerTextCodes","formatStonadstyper","fagsakYtelseTyper","valgteFagsakYtelseTyper","jsx","FormattedMessage","fyt","type","def","formatBehandlingstyper","behandlingTyper","valgteBehandlingTyper","bt","wait","ms","resolve","GjeldendeSakslisterTabell","sakslister","valgtAvdelingEnhet","setValgtSakslisteId","valgtSakslisteId","oppgaverForAvdelingAntall","lagNySaksliste","resetValgtSakslisteId","hentAvdelingensSakslister","valgtSaksliste","setValgtSakslisteTemp","useState","tabRef","useRef","useLosKodeverk","KodeverkType","fjernSaksliste","restApiHooks","RestApiPathsKeys","useEffect","setValgtSaksliste","event","id","node","lagNySakslisteFn","useCallback","visFjernSakslisteModal","nyValgtSaksliste","closeSletteModal","fjernSakslisteFn","saksliste","jsxs","Fragment","FlexContainer","FlexRow","FlexColumn","Label","styles","BodyShort","Heading","VerticalSpacer","Table","index","TableRow","TableColumn","DateLabel","el","XMarkIcon","Detail","SletteSakslisteModal"],"mappings":"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","x_google_ignoreList":[0,1]}