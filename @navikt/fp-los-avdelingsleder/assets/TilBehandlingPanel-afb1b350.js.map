{"version":3,"file":"TilBehandlingPanel-afb1b350.js","sources":["../../src/nokkeltall/components/tilBehandling/TilBehandlingGraf.tsx","../../src/nokkeltall/components/tilBehandling/TilBehandlingPanel.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport { Panel } from '@navikt/ds-react';\nimport { KodeverkMedNavn } from '@navikt/ft-types';\nimport { DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { BehandlingType } from '@navikt/ft-kodeverk';\nimport { ReactECharts } from '@navikt/fp-los-felles';\n\nconst behandlingstypeOrder = [\n  BehandlingType.TILBAKEKREVING_REVURDERING,\n  BehandlingType.TILBAKEKREVING,\n  BehandlingType.DOKUMENTINNSYN,\n  BehandlingType.KLAGE,\n  BehandlingType.REVURDERING,\n  BehandlingType.FORSTEGANGSSOKNAD,\n];\n\nconst behandlingstypeFarger = {\n  [BehandlingType.TILBAKEKREVING_REVURDERING]: '#ef5d28',\n  [BehandlingType.TILBAKEKREVING]: '#ff842f',\n  [BehandlingType.DOKUMENTINNSYN]: '#ffd23b',\n  [BehandlingType.KLAGE]: '#826ba1',\n  [BehandlingType.REVURDERING]: '#3385d1',\n  [BehandlingType.FORSTEGANGSSOKNAD]: '#85d5f0',\n};\n\nexport interface OppgaveForDatoGraf {\n  behandlingType: string;\n  opprettetDato: string;\n  antall: number;\n}\n\ntype Koordinat = {\n  x: Date;\n  y: number;\n};\n\nconst sorterBehandlingtyper = (b1: string, b2: string): number => {\n  const index1 = behandlingstypeOrder.findIndex(bo => bo === b1);\n  const index2 = behandlingstypeOrder.findIndex(bo => bo === b2);\n  if (index1 === index2) {\n    return 0;\n  }\n  return index1 > index2 ? -1 : 1;\n};\n\nconst finnBehandlingTypeNavn = (behandlingTyper: KodeverkMedNavn[], behandlingTypeKode: string): string => {\n  const type = behandlingTyper.find(bt => bt.kode === behandlingTypeKode);\n  return type ? type.navn : '';\n};\n\nconst konverterTilKoordinaterGruppertPaBehandlingstype = (\n  oppgaverForAvdeling: OppgaveForDatoGraf[],\n): Record<string, Koordinat[]> =>\n  oppgaverForAvdeling.reduce((acc, o) => {\n    const nyKoordinat = {\n      x: dayjs(o.opprettetDato).startOf('day').toDate(),\n      y: o.antall,\n    };\n\n    const eksisterendeKoordinater = acc[o.behandlingType];\n    return {\n      ...acc,\n      [o.behandlingType]: eksisterendeKoordinater ? eksisterendeKoordinater.concat(nyKoordinat) : [nyKoordinat],\n    };\n  }, {} as Record<string, Koordinat[]>);\n\nconst fyllInnManglendeDatoerOgSorterEtterDato = (\n  data: Record<string, Koordinat[]>,\n  periodeStart: dayjs.Dayjs,\n  periodeSlutt: dayjs.Dayjs,\n): Record<string, Date[][]> =>\n  Object.keys(data).reduce((acc, behandlingstype) => {\n    const behandlingstypeData = data[behandlingstype];\n    const koordinater = [];\n\n    for (let dato = dayjs(periodeStart); dato.isSameOrBefore(periodeSlutt); dato = dato.add(1, 'days')) {\n      const funnetDato = behandlingstypeData.find(d => dayjs(d.x).startOf('day').isSame(dato.startOf('day')));\n      koordinater.push(\n        funnetDato ? [dayjs(funnetDato.x).format(ISO_DATE_FORMAT), funnetDato.y] : [dato.format(ISO_DATE_FORMAT), 0],\n      );\n    }\n\n    return {\n      ...acc,\n      [behandlingstype]: koordinater,\n    };\n  }, {});\n\ninterface OwnProps {\n  height: number;\n  behandlingTyper: KodeverkMedNavn[];\n  oppgaverPerDato: OppgaveForDatoGraf[];\n  isToUkerValgt: boolean;\n}\n\n/**\n * TilBehandlingGraf\n */\nexport const TilBehandlingGraf: FunctionComponent<OwnProps> = ({\n  height,\n  oppgaverPerDato,\n  isToUkerValgt,\n  behandlingTyper,\n}) => {\n  const periodeStart = dayjs()\n    .subtract(isToUkerValgt ? 2 : 4, 'w')\n    .add(1, 'd');\n  const periodeSlutt = dayjs();\n\n  const koordinater = useMemo(\n    () => konverterTilKoordinaterGruppertPaBehandlingstype(oppgaverPerDato),\n    [oppgaverPerDato],\n  );\n  const data = useMemo(\n    () => fyllInnManglendeDatoerOgSorterEtterDato(koordinater, periodeStart, periodeSlutt),\n    [koordinater, periodeStart, periodeSlutt],\n  );\n\n  const alleBehandlingstyperSortert = behandlingTyper.map(bt => bt.kode).sort(sorterBehandlingtyper);\n  const sorterteBehandlingstyper = Object.keys(data).sort(sorterBehandlingtyper);\n  const reversertSorterteBehandlingstyper = sorterteBehandlingstyper.slice().reverse();\n  // @ts-ignore Fiks\n  const farger = alleBehandlingstyperSortert.map(bt => behandlingstypeFarger[bt]);\n\n  return (\n    <Panel>\n      <ReactECharts\n        height={height}\n        option={{\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'cross',\n              label: {\n                formatter: params => {\n                  if (params.axisDimension === 'y') {\n                    return parseInt(params.value as string, 10).toString();\n                  }\n                  return dayjs(params.value).format(DDMMYYYY_DATE_FORMAT);\n                },\n              },\n            },\n          },\n          toolbox: {\n            feature: {\n              saveAsImage: {\n                title: 'Lagre ',\n                name: 'Antall_til_behandling',\n              },\n            },\n          },\n          legend: {\n            data: reversertSorterteBehandlingstyper.map(type => finnBehandlingTypeNavn(behandlingTyper, type)),\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true,\n          },\n          xAxis: [\n            {\n              type: 'time',\n              axisLabel: {\n                formatter: '{dd}.{MM}.{yyyy}',\n              },\n            },\n          ],\n          yAxis: [\n            {\n              type: 'value',\n            },\n          ],\n          series: alleBehandlingstyperSortert.map(type => ({\n            name: finnBehandlingTypeNavn(behandlingTyper, type),\n            type: 'line',\n            stack: 'stackname',\n            areaStyle: {},\n            emphasis: {\n              focus: 'series',\n            },\n            data: data[type],\n          })),\n          color: farger,\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default TilBehandlingGraf;\n","import React, { FunctionComponent } from 'react';\nimport dayjs from 'dayjs';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { HStack, Label } from '@navikt/ds-react';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { KodeverkMedNavn } from '@navikt/ft-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { FagsakYtelseType, KodeverkType } from '@navikt/ft-kodeverk';\nimport { Form, RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\n\nimport StoreValuesInLocalStorage from '../../../data/StoreValuesInLocalStorage';\nimport useLosKodeverk from '../../../data/useLosKodeverk';\nimport OppgaveForDato from '../../../typer/oppgaverForDatoTsType';\nimport TilBehandlingGraf, { OppgaveForDatoGraf } from './TilBehandlingGraf';\n\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nexport const ALLE_YTELSETYPER_VALGT = 'ALLE';\nexport const UKE_2 = '2';\n\nconst uker = [\n  {\n    kode: UKE_2,\n    tekstKode: 'TilBehandlingPanel.ToSisteUker',\n  },\n  {\n    kode: '4',\n    tekstKode: 'TilBehandlingPanel.FireSisteUker',\n  },\n];\n\nconst erDatoInnenforPeriode = (oppgaveForAvdeling: OppgaveForDato, ukevalg: string): boolean => {\n  if (ukevalg === uker[1].kode) {\n    return true;\n  }\n  const toUkerSiden = dayjs().subtract(2, 'w');\n  return dayjs(oppgaveForAvdeling.opprettetDato).isSameOrAfter(toUkerSiden);\n};\n\nconst finnFagsakYtelseTypeNavn = (fagsakYtelseTyper: KodeverkMedNavn[], valgtFagsakYtelseType: string): string => {\n  const type = fagsakYtelseTyper.find(fyt => fyt.kode === valgtFagsakYtelseType);\n  return type ? type.navn : '';\n};\n\nconst slaSammenLikeBehandlingstyperOgDatoer = (oppgaverForAvdeling: OppgaveForDato[]): OppgaveForDatoGraf[] => {\n  const sammenslatte: OppgaveForDatoGraf[] = [];\n\n  oppgaverForAvdeling.forEach(o => {\n    const index = sammenslatte.findIndex(\n      s => s.behandlingType === o.behandlingType && s.opprettetDato === o.opprettetDato,\n    );\n    if (index === -1) {\n      sammenslatte.push(o);\n    } else {\n      sammenslatte[index] = {\n        behandlingType: sammenslatte[index].behandlingType,\n        opprettetDato: sammenslatte[index].opprettetDato,\n        antall: sammenslatte[index].antall + o.antall,\n      };\n    }\n  });\n\n  return sammenslatte;\n};\n\ninterface OwnProps {\n  height: number;\n  oppgaverPerDato: OppgaveForDato[];\n  getValueFromLocalStorage: (key: string) => string | undefined;\n}\n\ntype FormValues = {\n  ukevalg: string;\n  ytelseType: string;\n};\n\nconst formName = 'tilBehandlingForm';\nconst formDefaultValues = { ytelseType: ALLE_YTELSETYPER_VALGT, ukevalg: UKE_2 };\n\n/**\n * TilBehandlingPanel.\n */\nconst TilBehandlingPanel: FunctionComponent<OwnProps> = ({ height, oppgaverPerDato, getValueFromLocalStorage }) => {\n  const intl = useIntl();\n  const behandlingTyper = useLosKodeverk(KodeverkType.BEHANDLING_TYPE);\n  const fagsakYtelseTyper = useLosKodeverk(KodeverkType.FAGSAK_YTELSE);\n  const stringFromStorage = getValueFromLocalStorage(formName);\n  const lagredeVerdier = stringFromStorage ? JSON.parse(stringFromStorage) : undefined;\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: lagredeVerdier || formDefaultValues,\n  });\n\n  const values = formMethods.watch();\n\n  return (\n    <Form<FormValues> formMethods={formMethods}>\n      <StoreValuesInLocalStorage stateKey={formName} values={values} />\n      <Label size=\"small\">\n        <FormattedMessage id=\"TilBehandlingPanel.TilBehandling\" />\n      </Label>\n      <VerticalSpacer eightPx />\n      <HStack gap=\"4\">\n        <SelectField\n          name=\"ukevalg\"\n          label=\"\"\n          selectValues={uker.map(u => (\n            <option key={u.kode} value={u.kode}>\n              {intl.formatMessage({ id: u.tekstKode })}\n            </option>\n          ))}\n        />\n        <RadioGroupPanel\n          name=\"ytelseType\"\n          isHorizontal\n          radios={[\n            {\n              value: FagsakYtelseType.FORELDREPENGER,\n              label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.FORELDREPENGER),\n            },\n            {\n              value: FagsakYtelseType.ENGANGSSTONAD,\n              label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.ENGANGSSTONAD),\n            },\n            {\n              value: FagsakYtelseType.SVANGERSKAPSPENGER,\n              label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.SVANGERSKAPSPENGER),\n            },\n            {\n              value: ALLE_YTELSETYPER_VALGT,\n              label: <FormattedMessage id=\"TilBehandlingPanel.Alle\" />,\n            },\n          ]}\n        />\n      </HStack>\n      <VerticalSpacer sixteenPx />\n      <TilBehandlingGraf\n        height={height}\n        isToUkerValgt={values.ukevalg === UKE_2}\n        behandlingTyper={behandlingTyper}\n        oppgaverPerDato={\n          oppgaverPerDato\n            ? slaSammenLikeBehandlingstyperOgDatoer(\n                oppgaverPerDato\n                  .filter(ofa =>\n                    values.ytelseType === ALLE_YTELSETYPER_VALGT ? true : values.ytelseType === ofa.fagsakYtelseType,\n                  )\n                  .filter(ofa => erDatoInnenforPeriode(ofa, values.ukevalg)),\n              )\n            : []\n        }\n      />\n    </Form>\n  );\n};\n\nexport default TilBehandlingPanel;\n"],"names":["behandlingstypeOrder","BehandlingType","behandlingstypeFarger","sorterBehandlingtyper","b1","b2","index1","bo","index2","finnBehandlingTypeNavn","behandlingTyper","behandlingTypeKode","type","bt","konverterTilKoordinaterGruppertPaBehandlingstype","oppgaverForAvdeling","acc","o","nyKoordinat","dayjs","eksisterendeKoordinater","fyllInnManglendeDatoerOgSorterEtterDato","data","periodeStart","periodeSlutt","behandlingstype","behandlingstypeData","koordinater","dato","funnetDato","d","ISO_DATE_FORMAT","TilBehandlingGraf","height","oppgaverPerDato","isToUkerValgt","useMemo","alleBehandlingstyperSortert","reversertSorterteBehandlingstyper","farger","jsx","Panel","ReactECharts","params","DDMMYYYY_DATE_FORMAT","isSameOrAfter","isSameOrBefore","ALLE_YTELSETYPER_VALGT","UKE_2","uker","erDatoInnenforPeriode","oppgaveForAvdeling","ukevalg","toUkerSiden","finnFagsakYtelseTypeNavn","fagsakYtelseTyper","valgtFagsakYtelseType","fyt","slaSammenLikeBehandlingstyperOgDatoer","sammenslatte","index","s","formName","formDefaultValues","TilBehandlingPanel","getValueFromLocalStorage","intl","useIntl","useLosKodeverk","KodeverkType","stringFromStorage","lagredeVerdier","formMethods","useForm","values","jsxs","Form","StoreValuesInLocalStorage","Label","FormattedMessage","VerticalSpacer","HStack","SelectField","RadioGroupPanel","FagsakYtelseType","ofa","TilBehandlingPanel$1"],"mappings":"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"}