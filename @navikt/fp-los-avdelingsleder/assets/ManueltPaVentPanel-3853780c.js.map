{"version":3,"file":"ManueltPaVentPanel-3853780c.js","sources":["../../src/nokkeltall/components/manueltSattPaVent/ManueltPaVentGraf.tsx","../../src/nokkeltall/components/manueltSattPaVent/ManueltPaVentPanel.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport { Panel } from '@navikt/ds-react';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { ReactECharts } from '@navikt/fp-los-felles';\n\nimport OppgaverManueltPaVent from '../../../typer/oppgaverManueltPaVentTsType';\n\ndayjs.extend(isSameOrBefore);\n\ninterface Koordinat {\n  x: number;\n  y: number;\n}\n\nconst lagKoordinater = (oppgaverManueltPaVent: OppgaverManueltPaVent[]): Koordinat[] =>\n  oppgaverManueltPaVent.map(o => ({\n    x: dayjs(o.behandlingFrist).startOf('day').toDate().getTime(),\n    y: o.antall,\n  }));\n\nconst lagDatastruktur = (koordinater: Koordinat[], isFireUkerValgt: boolean): (number | Date)[][] => {\n  const nyeKoordinater = [];\n  const periodeStart = dayjs().startOf('day').toDate();\n  const periodeSlutt = dayjs()\n    .add(isFireUkerValgt ? 4 : 8, 'w')\n    .toDate();\n\n  for (let dato = dayjs(periodeStart); dato.isSameOrBefore(periodeSlutt); dato = dato.add(1, 'days')) {\n    const funnetKoordinat = koordinater.find(k => dayjs(k.x).isSame(dato));\n    nyeKoordinater.push([dato.toDate(), funnetKoordinat ? funnetKoordinat.y : 0]);\n  }\n\n  return nyeKoordinater;\n};\n\ninterface OwnProps {\n  height: number;\n  isFireUkerValgt: boolean;\n  oppgaverManueltPaVent: OppgaverManueltPaVent[];\n}\n\n/**\n * ManueltPaVentGraf.\n */\nconst ManueltPaVentGraf: FunctionComponent<OwnProps> = ({ height, isFireUkerValgt, oppgaverManueltPaVent }) => {\n  const koordinater = useMemo(() => lagKoordinater(oppgaverManueltPaVent), [oppgaverManueltPaVent]);\n  const data = useMemo(() => lagDatastruktur(koordinater, isFireUkerValgt), [koordinater, isFireUkerValgt]);\n  return (\n    <Panel>\n      <ReactECharts\n        height={height}\n        option={{\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              snap: true,\n              label: {\n                formatter: params => {\n                  if (params.axisDimension === 'y') {\n                    return parseInt(params.value as string, 10).toString();\n                  }\n                  return dayjs(params.value).format(DDMMYYYY_DATE_FORMAT);\n                },\n              },\n            },\n          },\n          toolbox: {\n            feature: {\n              saveAsImage: {\n                title: 'Lagre ',\n                name: 'Antall_behandlinger_satt_pÃ¥_vent_manuelt',\n              },\n            },\n          },\n          xAxis: {\n            type: 'time',\n            axisLabel: {\n              formatter: '{dd}.{MM}.{yyyy}',\n            },\n          },\n          yAxis: {\n            type: 'value',\n          },\n          series: [\n            {\n              data,\n              type: 'line',\n              areaStyle: {},\n            },\n          ],\n          color: ['#337c9b'],\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default ManueltPaVentGraf;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { Label } from '@navikt/ds-react';\nimport { Form, RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { FagsakYtelseType, KodeverkType } from '@navikt/ft-kodeverk';\nimport { KodeverkMedNavn } from '@navikt/fp-types';\n\nimport OppgaverManueltPaVent from '../../../typer/oppgaverManueltPaVentTsType';\nimport ManueltPaVentGraf from './ManueltPaVentGraf';\nimport StoreValuesInLocalStorage from '../../../data/StoreValuesInLocalStorage';\nimport useLosKodeverk from '../../../data/useLosKodeverk';\n\nconst finnFagsakYtelseTypeNavn = (fagsakYtelseTyper: KodeverkMedNavn[], valgtFagsakYtelseType: string): string => {\n  const type = fagsakYtelseTyper.find(fyt => fyt.kode === valgtFagsakYtelseType);\n  return type ? type.navn : '';\n};\n\nexport const ALLE_YTELSETYPER_VALGT = 'ALLE';\nexport const UKE_4 = '4';\n\nconst uker = [\n  {\n    kode: UKE_4,\n    tekstKode: 'ManueltPaVentPanel.FireSisteUker',\n  },\n  {\n    kode: '8',\n    tekstKode: 'ManueltPaVentPanel.AtteSisteUker',\n  },\n];\n\nconst erDatoInnenforPeriode = (behandlingFrist: string, ukevalg: string): boolean => {\n  if (ukevalg === uker[1].kode) {\n    return true;\n  }\n\n  const dataOmFireUker = dayjs().add(4, 'w');\n  return dayjs(behandlingFrist).isSameOrBefore(dataOmFireUker);\n};\n\ninterface OwnProps {\n  height: number;\n  oppgaverManueltPaVent: OppgaverManueltPaVent[];\n  getValueFromLocalStorage: (key: string) => string | undefined;\n}\n\nconst formName = 'manueltPaVentForm';\nconst formDefaultValues = { valgtYtelsetype: ALLE_YTELSETYPER_VALGT, ukevalg: UKE_4 };\n\ntype FormValues = {\n  ukevalg: string;\n  valgtYtelsetype: string;\n};\n\n/**\n * ManueltPaVentPanel.\n */\nconst ManueltPaVentPanel: FunctionComponent<OwnProps> = ({\n  height,\n  oppgaverManueltPaVent,\n  getValueFromLocalStorage,\n}) => {\n  const intl = useIntl();\n  const fagsakYtelseTyper = useLosKodeverk(KodeverkType.FAGSAK_YTELSE);\n  const stringFromStorage = getValueFromLocalStorage(formName);\n  const lagredeVerdier = stringFromStorage ? JSON.parse(stringFromStorage) : undefined;\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: lagredeVerdier || formDefaultValues,\n  });\n\n  const values = formMethods.watch();\n\n  return (\n    <Form<FormValues> formMethods={formMethods}>\n      <StoreValuesInLocalStorage stateKey={formName} values={values} />\n      <Label size=\"small\">\n        <FormattedMessage id=\"ManueltPaVentPanel.SattPaVent\" />\n      </Label>\n      <VerticalSpacer sixteenPx />\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn>\n            <SelectField\n              name=\"ukevalg\"\n              label=\"\"\n              selectValues={uker.map(u => (\n                <option key={u.kode} value={u.kode}>\n                  {intl.formatMessage({ id: u.tekstKode })}\n                </option>\n              ))}\n            />\n          </FlexColumn>\n          <FlexColumn>\n            <RadioGroupPanel\n              name=\"valgtYtelsetype\"\n              isHorizontal\n              radios={[\n                {\n                  value: FagsakYtelseType.FORELDREPENGER,\n                  label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.FORELDREPENGER),\n                },\n                {\n                  value: FagsakYtelseType.ENGANGSSTONAD,\n                  label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.ENGANGSSTONAD),\n                },\n                {\n                  value: FagsakYtelseType.SVANGERSKAPSPENGER,\n                  label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.SVANGERSKAPSPENGER),\n                },\n                {\n                  value: ALLE_YTELSETYPER_VALGT,\n                  label: <FormattedMessage id=\"ManueltPaVentPanel.Alle\" />,\n                },\n              ]}\n            />\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer sixteenPx />\n      <ManueltPaVentGraf\n        height={height}\n        isFireUkerValgt={values.ukevalg === UKE_4}\n        oppgaverManueltPaVent={\n          oppgaverManueltPaVent &&\n          oppgaverManueltPaVent\n            .filter(ompv =>\n              values.valgtYtelsetype === ALLE_YTELSETYPER_VALGT\n                ? true\n                : values.valgtYtelsetype === ompv.fagsakYtelseType,\n            )\n            .filter(ompv => erDatoInnenforPeriode(ompv.behandlingFrist, values.ukevalg))\n        }\n      />\n    </Form>\n  );\n};\n\nexport default ManueltPaVentPanel;\n"],"names":["dayjs","isSameOrBefore","lagKoordinater","oppgaverManueltPaVent","o","lagDatastruktur","koordinater","isFireUkerValgt","nyeKoordinater","periodeStart","periodeSlutt","dato","funnetKoordinat","k","ManueltPaVentGraf","height","useMemo","data","jsx","Panel","ReactECharts","params","DDMMYYYY_DATE_FORMAT","finnFagsakYtelseTypeNavn","fagsakYtelseTyper","valgtFagsakYtelseType","type","fyt","ALLE_YTELSETYPER_VALGT","UKE_4","uker","erDatoInnenforPeriode","behandlingFrist","ukevalg","dataOmFireUker","formName","formDefaultValues","ManueltPaVentPanel","getValueFromLocalStorage","intl","useIntl","useLosKodeverk","KodeverkType","stringFromStorage","lagredeVerdier","formMethods","useForm","values","jsxs","Form","StoreValuesInLocalStorage","Label","FormattedMessage","VerticalSpacer","FlexContainer","FlexRow","FlexColumn","SelectField","u","RadioGroupPanel","FagsakYtelseType","ompv","ManueltPaVentPanel$1"],"mappings":"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"}