{"version":3,"file":"FordelingAvBehandlingstypePanel-c297968e.js","sources":["../../src/nokkeltall/components/fordelingAvBehandlingstype/FordelingAvBehandlingstypeGraf.tsx","../../src/nokkeltall/components/fordelingAvBehandlingstype/FordelingAvBehandlingstypePanel.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Panel } from '@navikt/ds-react';\nimport { BehandlingType } from '@navikt/ft-kodeverk';\nimport { ReactECharts } from '@navikt/fp-los-felles';\nimport { KodeverkMedNavn } from '@navikt/fp-types';\n\nimport OppgaverForAvdeling from '../../../typer/oppgaverForAvdelingTsType';\n\nconst behandlingstypeOrder = [\n  BehandlingType.TILBAKEKREVING_REVURDERING,\n  BehandlingType.TILBAKEKREVING,\n  BehandlingType.DOKUMENTINNSYN,\n  BehandlingType.KLAGE,\n  BehandlingType.REVURDERING,\n  BehandlingType.FORSTEGANGSSOKNAD,\n];\n\nconst slåSammen = (oppgaverForAvdeling: OppgaverForAvdeling[]): number[] => {\n  const test = oppgaverForAvdeling.reduce((acc, o) => {\n    const index = behandlingstypeOrder.findIndex(bo => bo === o.behandlingType) + 1;\n    return {\n      ...acc,\n      [index]: acc[index] ? acc[index] + o.antall : o.antall,\n    };\n  }, {} as Record<string, number>);\n\n  return behandlingstypeOrder.map((b, index) => test[index + 1]);\n};\n\ninterface OwnProps {\n  height: number;\n  behandlingTyper: KodeverkMedNavn[];\n  oppgaverForAvdeling: OppgaverForAvdeling[];\n}\n\n/**\n * FordelingAvBehandlingstypeGraf.\n */\nconst FordelingAvBehandlingstypeGraf: FunctionComponent<OwnProps> = ({\n  height,\n  oppgaverForAvdeling,\n  behandlingTyper,\n}) => {\n  const intl = useIntl();\n  const tilBehandlingTekst = intl.formatMessage({ id: 'FordelingAvBehandlingstypeGraf.TilBehandling' });\n  const tilBeslutterTekst = intl.formatMessage({ id: 'FordelingAvBehandlingstypeGraf.TilBeslutter' });\n\n  const finnBehandlingTypeNavn = useMemo(\n    () =>\n      behandlingstypeOrder.map(t => {\n        const type = behandlingTyper.find(bt => bt.kode === t);\n        return type ? type.navn : '';\n      }),\n    [behandlingTyper],\n  );\n\n  const tilBehandlingData = useMemo(\n    () => slåSammen(oppgaverForAvdeling.filter(o => o.tilBehandling)),\n    [oppgaverForAvdeling],\n  );\n  const tilBeslutterData = useMemo(\n    () => slåSammen(oppgaverForAvdeling.filter(o => !o.tilBehandling)),\n    [oppgaverForAvdeling],\n  );\n\n  return (\n    <Panel>\n      <ReactECharts\n        height={height}\n        option={{\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow',\n            },\n          },\n          toolbox: {\n            feature: {\n              saveAsImage: {\n                title: 'Lagre ',\n                name: 'Antall_åpne_behandlinger',\n              },\n            },\n          },\n          legend: {\n            data: [tilBehandlingTekst, tilBeslutterTekst],\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true,\n          },\n          xAxis: {\n            type: 'value',\n          },\n          yAxis: {\n            type: 'category',\n            data: finnBehandlingTypeNavn,\n          },\n          series: [\n            {\n              name: tilBehandlingTekst,\n              type: 'bar',\n              stack: 'total',\n              label: {\n                show: true,\n              },\n              emphasis: {\n                focus: 'series',\n              },\n              data: tilBehandlingData,\n            },\n            {\n              name: tilBeslutterTekst,\n              type: 'bar',\n              stack: 'total',\n              label: {\n                show: true,\n              },\n              emphasis: {\n                focus: 'series',\n              },\n              data: tilBeslutterData,\n            },\n          ],\n          color: ['#337c9b', '#38a161'],\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default FordelingAvBehandlingstypeGraf;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Label } from '@navikt/ds-react';\nimport { Form, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { KodeverkMedNavn } from '@navikt/ft-types';\nimport { FagsakYtelseType, KodeverkType } from '@navikt/ft-kodeverk';\n\nimport OppgaverForAvdeling from '../../../typer/oppgaverForAvdelingTsType';\nimport FordelingAvBehandlingstypeGraf from './FordelingAvBehandlingstypeGraf';\n\nimport StoreValuesInLocalStorage from '../../../data/StoreValuesInLocalStorage';\nimport useLosKodeverk from '../../../data/useLosKodeverk';\n\nconst finnFagsakYtelseTypeNavn = (fagsakYtelseTyper: KodeverkMedNavn[], valgtFagsakYtelseType: string) => {\n  const type = fagsakYtelseTyper.find(fyt => fyt.kode === valgtFagsakYtelseType);\n  return type ? type.navn : '';\n};\n\nexport const ALLE_YTELSETYPER_VALGT = 'ALLE';\n\ninterface InitialValues {\n  valgtYtelseType: string;\n}\n\ntype FormValues = {\n  valgtYtelseType: string;\n};\n\ninterface OwnProps {\n  height: number;\n  oppgaverForAvdeling: OppgaverForAvdeling[];\n  getValueFromLocalStorage: (key: string) => string | undefined;\n}\n\nconst formName = 'fordelingAvBehandlingstype';\nconst formDefaultValues: InitialValues = { valgtYtelseType: ALLE_YTELSETYPER_VALGT };\n\n/**\n * FordelingAvBehandlingstypePanel.\n */\nexport const FordelingAvBehandlingstypePanel: FunctionComponent<OwnProps> = ({\n  height,\n  oppgaverForAvdeling,\n  getValueFromLocalStorage,\n}) => {\n  const fagsakYtelseTyper = useLosKodeverk(KodeverkType.FAGSAK_YTELSE);\n  const behandlingTyper = useLosKodeverk(KodeverkType.BEHANDLING_TYPE);\n  const stringFromStorage = getValueFromLocalStorage(formName);\n  const lagredeVerdier = stringFromStorage ? JSON.parse(stringFromStorage) : undefined;\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: lagredeVerdier || formDefaultValues,\n  });\n\n  const values = formMethods.watch();\n\n  return (\n    <Form<FormValues> formMethods={formMethods}>\n      <StoreValuesInLocalStorage stateKey={formName} values={values} />\n      <Label size=\"small\">\n        <FormattedMessage id=\"FordelingAvBehandlingstypePanel.Fordeling\" />\n      </Label>\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"valgtYtelseType\"\n        isHorizontal\n        radios={[\n          {\n            value: FagsakYtelseType.FORELDREPENGER,\n            label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.FORELDREPENGER),\n          },\n          {\n            value: FagsakYtelseType.ENGANGSSTONAD,\n            label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.ENGANGSSTONAD),\n          },\n          {\n            value: FagsakYtelseType.SVANGERSKAPSPENGER,\n            label: finnFagsakYtelseTypeNavn(fagsakYtelseTyper, FagsakYtelseType.SVANGERSKAPSPENGER),\n          },\n          {\n            value: ALLE_YTELSETYPER_VALGT,\n            label: <FormattedMessage id=\"FordelingAvBehandlingstypePanel.Alle\" />,\n          },\n        ]}\n      />\n      <VerticalSpacer sixteenPx />\n      <FordelingAvBehandlingstypeGraf\n        height={height}\n        behandlingTyper={behandlingTyper}\n        oppgaverForAvdeling={\n          oppgaverForAvdeling\n            ? oppgaverForAvdeling.filter(ofa =>\n                values.valgtYtelseType === ALLE_YTELSETYPER_VALGT\n                  ? true\n                  : values.valgtYtelseType === ofa.fagsakYtelseType,\n              )\n            : []\n        }\n      />\n    </Form>\n  );\n};\n\nexport default FordelingAvBehandlingstypePanel;\n"],"names":["behandlingstypeOrder","BehandlingType","slåSammen","oppgaverForAvdeling","test","acc","o","index","bo","b","FordelingAvBehandlingstypeGraf","height","behandlingTyper","intl","useIntl","tilBehandlingTekst","tilBeslutterTekst","finnBehandlingTypeNavn","useMemo","t","type","bt","tilBehandlingData","tilBeslutterData","jsx","Panel","ReactECharts","finnFagsakYtelseTypeNavn","fagsakYtelseTyper","valgtFagsakYtelseType","fyt","ALLE_YTELSETYPER_VALGT","formName","formDefaultValues","FordelingAvBehandlingstypePanel","getValueFromLocalStorage","useLosKodeverk","KodeverkType","stringFromStorage","lagredeVerdier","formMethods","useForm","values","jsxs","Form","StoreValuesInLocalStorage","Label","FormattedMessage","VerticalSpacer","RadioGroupPanel","FagsakYtelseType","ofa"],"mappings":"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"}