{"version":3,"file":"ProsessDefaultInitPanel-d6dd07f4.js","sources":["../../src/behandling/felles/utils/readOnlyPanelUtils.ts","../../src/behandling/felles/utils/getAlleMerknaderFraBeslutter.ts","../../src/behandling/felles/prosess/useStandardProsessPanelProps.ts","../../src/behandling/felles/prosess/useProsessMenyRegistrerer.ts","../../src/behandling/felles/prosess/ProsessDefaultInitPanel.tsx"],"sourcesContent":["import { Behandling, Aksjonspunkt } from '@navikt/ft-types';\nimport { Vilkar, AksessRettigheter } from '@navikt/fp-types';\n\nexport const harBehandlingReadOnlyStatus = (behandling: Behandling) =>\n  behandling.taskStatus && behandling.taskStatus.readOnly ? behandling.taskStatus.readOnly : false;\n\nexport const erReadOnly = (\n  behandling: Behandling,\n  aksjonspunkterForPunkt: Aksjonspunkt[],\n  vilkarlisteForPunkt: Vilkar[],\n  rettigheter: AksessRettigheter,\n  hasFetchError: boolean,\n) => {\n  const { behandlingPaaVent } = behandling;\n  const isBehandlingReadOnly = hasFetchError || harBehandlingReadOnlyStatus(behandling);\n  const hasNonOverstyrbar = vilkarlisteForPunkt.some(v => !v.overstyrbar);\n\n  return !rettigheter.writeAccess.isEnabled || behandlingPaaVent || isBehandlingReadOnly || hasNonOverstyrbar;\n};\n","import { Aksjonspunkt, Behandling } from '@navikt/ft-types';\nimport { BehandlingStatus } from '@navikt/ft-kodeverk';\n\nconst getAlleMerknaderFraBeslutter = (behandling: Behandling, aksjonspunkter: Aksjonspunkt[]) => {\n  if (behandling.status !== BehandlingStatus.BEHANDLING_UTREDES) {\n    return {};\n  }\n  return aksjonspunkter.reduce(\n    (obj, ap) => ({\n      ...obj,\n      [ap.definisjon]: {\n        notAccepted: ap.toTrinnsBehandling && ap.toTrinnsBehandlingGodkjent === false,\n      },\n    }),\n    {},\n  );\n};\n\nexport default getAlleMerknaderFraBeslutter;\n","import { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { Aksjonspunkt } from '@navikt/ft-types';\nimport { AksjonspunktStatus, VilkarUtfallType, isAksjonspunktOpen } from '@navikt/ft-kodeverk';\n\nimport { Behandling, Fagsak, StandardProsessPanelProps, Vilkar } from '@navikt/fp-types';\n\nimport { aksjonspunktType } from '@navikt/fp-kodeverk';\nimport { ProsessAksjonspunkt } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { erReadOnly } from '../utils/readOnlyPanelUtils';\nimport getAlleMerknaderFraBeslutter from '../utils/getAlleMerknaderFraBeslutter';\nimport { StandardPropsStateContext } from '../utils/standardPropsStateContext';\n\nexport const DEFAULT_FAKTA_KODE = 'default';\nexport const DEFAULT_PROSESS_STEG_KODE = 'default';\n\nconst getBekreftAksjonspunktProsessCallback =\n  (\n    lagringSideEffectsCallback: (aksjonspunktModeller: any) => () => void,\n    fagsak: Fagsak,\n    behandling: Behandling,\n    aksjonspunkter: Aksjonspunkt[],\n    lagreAksjonspunkter: (params: any, keepData?: boolean) => Promise<any>,\n    lagreOverstyrteAksjonspunkter?: (params: any, keepData?: boolean) => Promise<any>,\n  ) =>\n  (aksjonspunkterSomSkalLagres: ProsessAksjonspunkt | ProsessAksjonspunkt[]) => {\n    const apListe = Array.isArray(aksjonspunkterSomSkalLagres)\n      ? aksjonspunkterSomSkalLagres\n      : [aksjonspunkterSomSkalLagres];\n    const models = apListe.map(ap => ({\n      '@type': ap.kode,\n      ...ap,\n    }));\n\n    const params = {\n      saksnummer: fagsak.saksnummer,\n      behandlingUuid: behandling.uuid,\n      behandlingVersjon: behandling.versjon,\n    };\n\n    const etterLagringCallback = lagringSideEffectsCallback(apListe);\n\n    if (lagreOverstyrteAksjonspunkter) {\n      const aksjonspunkterTilLagring = aksjonspunkter.filter(ap =>\n        apListe.some(apModel => apModel.kode === ap.definisjon),\n      );\n      const erOverstyringsaksjonspunkter = aksjonspunkterTilLagring.some(\n        ap =>\n          ap.aksjonspunktType === aksjonspunktType.OVERSTYRING ||\n          ap.aksjonspunktType === aksjonspunktType.SAKSBEHANDLEROVERSTYRING,\n      );\n\n      if (apListe.length === 0) {\n        throw Error('Det har oppstått en teknisk feil ved lagring av aksjonspunkter. Meld feilen i Porten.');\n      }\n\n      if (aksjonspunkterTilLagring.length === 0 || erOverstyringsaksjonspunkter) {\n        return lagreOverstyrteAksjonspunkter(\n          {\n            ...params,\n            overstyrteAksjonspunktDtoer: models,\n          },\n          true,\n        ).then(etterLagringCallback);\n      }\n    }\n\n    return lagreAksjonspunkter(\n      {\n        ...params,\n        bekreftedeAksjonspunktDtoer: models,\n      },\n      true,\n    ).then(etterLagringCallback);\n  };\n\nconst finnStatus = (vilkar: Vilkar[], aksjonspunkter: Aksjonspunkt[]) => {\n  if (vilkar.length > 0) {\n    const vilkarStatusCodes = vilkar.map(v => v.vilkarStatus);\n    if (vilkarStatusCodes.some(vsc => vsc === VilkarUtfallType.IKKE_VURDERT)) {\n      return VilkarUtfallType.IKKE_VURDERT;\n    }\n    return vilkarStatusCodes.every(vsc => vsc === VilkarUtfallType.OPPFYLT)\n      ? VilkarUtfallType.OPPFYLT\n      : VilkarUtfallType.IKKE_OPPFYLT;\n  }\n\n  if (aksjonspunkter.length > 0) {\n    return aksjonspunkter.some(ap => isAksjonspunktOpen(ap.status))\n      ? VilkarUtfallType.IKKE_VURDERT\n      : VilkarUtfallType.OPPFYLT;\n  }\n  return VilkarUtfallType.IKKE_VURDERT;\n};\n\nconst useStandardProsessPanelProps = (\n  aksjonspunktKoder?: string[],\n  vilkarKoder?: string[],\n  lagringSideEffekter?: (aksjonspunktModeller: any) => () => void,\n): StandardProsessPanelProps => {\n  const [formData, setFormData] = useState();\n  const value = useContext(StandardPropsStateContext);\n\n  const { aksjonspunkt: aksjonspunkter, vilkår } = value.behandling;\n\n  useEffect(() => {\n    if (formData) {\n      setFormData(undefined);\n    }\n  }, [value.behandling.versjon]);\n\n  const aksjonspunkterForSteg = useMemo(\n    () =>\n      aksjonspunkter && aksjonspunktKoder ? aksjonspunkter.filter(ap => aksjonspunktKoder.includes(ap.definisjon)) : [],\n    [aksjonspunkter, aksjonspunktKoder],\n  );\n\n  const vilkarForSteg = useMemo(\n    () => (vilkår && vilkarKoder ? vilkår.filter(v => vilkarKoder.includes(v.vilkarType)) : []),\n    [vilkår, vilkarKoder],\n  );\n\n  const isReadOnly = erReadOnly(\n    value.behandling,\n    aksjonspunkterForSteg,\n    vilkarForSteg,\n    value.rettigheter,\n    value.hasFetchError,\n  );\n\n  const alleMerknaderFraBeslutter = useMemo(\n    () => getAlleMerknaderFraBeslutter(value.behandling, aksjonspunkterForSteg),\n    [value.behandling.versjon, aksjonspunkterForSteg],\n  );\n\n  const harApneAksjonspunkter = aksjonspunkterForSteg.some(\n    ap => ap.status === AksjonspunktStatus.OPPRETTET && ap.kanLoses,\n  );\n\n  const status = useMemo(\n    () => finnStatus(vilkarForSteg, aksjonspunkterForSteg),\n    [vilkarForSteg, aksjonspunkterForSteg],\n  );\n\n  const readOnlySubmitButton = !aksjonspunkterForSteg.some(ap => ap.kanLoses) || VilkarUtfallType.OPPFYLT === status;\n\n  const standardlagringSideEffekter = useCallback(\n    () => () => {\n      value.oppdaterProsessStegOgFaktaPanelIUrl(DEFAULT_PROSESS_STEG_KODE, DEFAULT_FAKTA_KODE);\n    },\n    [],\n  );\n\n  const submitCallback = useMemo(\n    () =>\n      getBekreftAksjonspunktProsessCallback(\n        lagringSideEffekter || standardlagringSideEffekter,\n        value.fagsak,\n        value.behandling,\n        aksjonspunkterForSteg,\n        value.lagreAksjonspunkter,\n        value.lagreOverstyrteAksjonspunkter,\n      ),\n    [value.behandling.versjon, aksjonspunkterForSteg],\n  );\n\n  return {\n    behandling: value.behandling,\n    isAksjonspunktOpen: harApneAksjonspunkter,\n    aksjonspunkter: aksjonspunkterForSteg,\n    vilkar: vilkarForSteg,\n    alleKodeverk: value.alleKodeverk,\n    alleMerknaderFraBeslutter,\n    isReadOnly,\n    readOnlySubmitButton,\n    submitCallback,\n    status,\n    formData,\n    setFormData,\n  };\n};\n\nexport default useStandardProsessPanelProps;\n","import { useEffect, useState } from 'react';\n\nimport { usePrevious } from '@navikt/ft-ui-komponenter';\nimport ProsessPanelMenyData from '../typer/prosessPanelMenyData';\n\nconst DEFAULT_PANEL_VALGT = 'default';\n\nconst useProsessMenyRegistrerer = (\n  registrerProsessPanel: (data: ProsessPanelMenyData) => void,\n  id: string,\n  tekst: string,\n  skalVisesImeny: boolean,\n  harApentAksjonspunkt: boolean,\n  status: string,\n  skalMarkeresSomAktiv: boolean,\n  valgtProsessSteg?: string,\n) => {\n  const [erPanelValgt, setPanelValgt] = useState(false);\n  useEffect(() => {\n    registrerProsessPanel({\n      id,\n    });\n  }, []);\n\n  const erAktiv =\n    skalVisesImeny && (valgtProsessSteg === id || (skalMarkeresSomAktiv && valgtProsessSteg === DEFAULT_PANEL_VALGT));\n\n  const forrigeSkalVisesIMeny = usePrevious(skalVisesImeny);\n\n  useEffect(() => {\n    if (skalVisesImeny) {\n      registrerProsessPanel({\n        id,\n        tekst,\n        erAktiv,\n        harApentAksjonspunkt,\n        status,\n      });\n    } else if (!skalVisesImeny && forrigeSkalVisesIMeny) {\n      registrerProsessPanel({\n        id,\n      });\n    }\n    setPanelValgt(erAktiv);\n  }, [skalVisesImeny, forrigeSkalVisesIMeny, erAktiv, harApentAksjonspunkt, status]);\n\n  return skalVisesImeny && erPanelValgt;\n};\n\nexport default useProsessMenyRegistrerer;\n","import React, { ReactElement } from 'react';\n\nimport { RestApiState } from '@navikt/fp-rest-api-hooks';\nimport { RestKey } from '@navikt/fp-rest-api';\nimport { StandardProsessPanelProps } from '@navikt/fp-types';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\n\nimport { vilkarUtfallType } from '@navikt/fp-kodeverk';\nimport ProsessPanelInitProps from '../typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from './useStandardProsessPanelProps';\nimport useProsessMenyRegistrerer from './useProsessMenyRegistrerer';\nimport ProsessPanelWrapper from './ProsessPanelWrapper';\nimport { restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nexport type OwnProps<PANEL_DATA> = {\n  panelEndepunkter?: RestKey<any, any>[] | { key: RestKey<any, any>; params?: any }[];\n  aksjonspunktKoder?: string[];\n  vilkarKoder?: string[];\n  skalPanelVisesIMeny: (data: StandardProsessPanelProps) => boolean;\n  hentOverstyrtStatus?: (standardData: StandardProsessPanelProps) => string;\n  renderPanel: (data: PANEL_DATA & StandardProsessPanelProps) => ReactElement;\n  prosessPanelKode: ProsessStegCode;\n  prosessPanelMenyTekst: string;\n  lagringSideEffekter?: (aksjonspunktModeller: any) => () => void;\n  erOverstyrt?: boolean;\n  hentSkalMarkeresSomAktiv?: (standardData: StandardProsessPanelProps) => boolean;\n};\n\nconst ProsessDefaultInitPanel = <PANEL_DATA,>({\n  valgtProsessSteg,\n  behandling,\n  registrerProsessPanel,\n  panelEndepunkter = [],\n  aksjonspunktKoder,\n  vilkarKoder,\n  skalPanelVisesIMeny,\n  renderPanel,\n  prosessPanelKode,\n  prosessPanelMenyTekst,\n  lagringSideEffekter,\n  hentOverstyrtStatus,\n  erOverstyrt = false,\n  hentSkalMarkeresSomAktiv,\n}: OwnProps<PANEL_DATA> & ProsessPanelInitProps) => {\n  const standardPanelProps = useStandardProsessPanelProps(aksjonspunktKoder, vilkarKoder, lagringSideEffekter);\n\n  const status = hentOverstyrtStatus ? hentOverstyrtStatus(standardPanelProps) : standardPanelProps.status;\n\n  const skalMarkeresSomAktiv =\n    hentSkalMarkeresSomAktiv && hentSkalMarkeresSomAktiv(standardPanelProps) && !behandling.behandlingHenlagt;\n\n  const harApentAksjonspunkt = erOverstyrt || standardPanelProps.isAksjonspunktOpen;\n\n  const erPanelValgt = useProsessMenyRegistrerer(\n    registrerProsessPanel,\n    prosessPanelKode,\n    prosessPanelMenyTekst,\n    skalPanelVisesIMeny(standardPanelProps),\n    harApentAksjonspunkt,\n    status,\n    skalMarkeresSomAktiv || harApentAksjonspunkt,\n    valgtProsessSteg,\n  );\n\n  const formatertePanelEndepunkter = panelEndepunkter.map((e: any) => (e instanceof RestKey ? { key: e } : e));\n  const skalIkkeHenteData =\n    !erPanelValgt ||\n    formatertePanelEndepunkter.length === 0 ||\n    (status === vilkarUtfallType.IKKE_VURDERT && !harApentAksjonspunkt);\n\n  const { data: panelData, state: panelDataState } = restBehandlingApiHooks.useMultipleRestApi<PANEL_DATA, any>(\n    formatertePanelEndepunkter,\n    {\n      updateTriggers: [erPanelValgt, behandling.versjon, status, harApentAksjonspunkt],\n      suspendRequest: skalIkkeHenteData,\n      isCachingOn: true,\n    },\n  );\n\n  return (\n    <ProsessPanelWrapper\n      erPanelValgt={erPanelValgt}\n      erAksjonspunktOpent={standardPanelProps.isAksjonspunktOpen}\n      status={status}\n      dataState={formatertePanelEndepunkter.length > 0 ? panelDataState : RestApiState.SUCCESS}\n    >\n      {renderPanel({\n        ...(panelData as PANEL_DATA),\n        ...standardPanelProps,\n      })}\n    </ProsessPanelWrapper>\n  );\n};\n\nexport default ProsessDefaultInitPanel;\n"],"names":["harBehandlingReadOnlyStatus","behandling","erReadOnly","aksjonspunkterForPunkt","vilkarlisteForPunkt","rettigheter","hasFetchError","behandlingPaaVent","isBehandlingReadOnly","hasNonOverstyrbar","v","getAlleMerknaderFraBeslutter","aksjonspunkter","BehandlingStatus","obj","ap","DEFAULT_FAKTA_KODE","DEFAULT_PROSESS_STEG_KODE","getBekreftAksjonspunktProsessCallback","lagringSideEffectsCallback","fagsak","lagreAksjonspunkter","lagreOverstyrteAksjonspunkter","aksjonspunkterSomSkalLagres","apListe","models","params","etterLagringCallback","aksjonspunkterTilLagring","apModel","erOverstyringsaksjonspunkter","aksjonspunktType","finnStatus","vilkar","vilkarStatusCodes","vsc","VilkarUtfallType","isAksjonspunktOpen","useStandardProsessPanelProps","aksjonspunktKoder","vilkarKoder","lagringSideEffekter","formData","setFormData","useState","value","useContext","StandardPropsStateContext","vilkår","useEffect","aksjonspunkterForSteg","useMemo","vilkarForSteg","isReadOnly","alleMerknaderFraBeslutter","harApneAksjonspunkter","AksjonspunktStatus","status","readOnlySubmitButton","standardlagringSideEffekter","useCallback","submitCallback","DEFAULT_PANEL_VALGT","useProsessMenyRegistrerer","registrerProsessPanel","id","tekst","skalVisesImeny","harApentAksjonspunkt","skalMarkeresSomAktiv","valgtProsessSteg","erPanelValgt","setPanelValgt","erAktiv","forrigeSkalVisesIMeny","usePrevious","ProsessDefaultInitPanel","panelEndepunkter","skalPanelVisesIMeny","renderPanel","prosessPanelKode","prosessPanelMenyTekst","hentOverstyrtStatus","erOverstyrt","hentSkalMarkeresSomAktiv","standardPanelProps","formatertePanelEndepunkter","e","RestKey","skalIkkeHenteData","vilkarUtfallType","panelData","panelDataState","restBehandlingApiHooks","jsx","ProsessPanelWrapper","RestApiState"],"mappings":"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"}