{"version":3,"file":"ForeldreansvarInngangsvilkarInitPanel-df2f02f0.js","sources":["../../../../packages/kodeverk/src/relatertYtelseTilstand.ts","../../../../packages/fakta-felles/src/utils/isFieldEdited.ts","../../../../packages/fakta-omsorg-og-foreldreansvar/src/components/OmsorgsovertakelseFaktaPanel.tsx","../../../../packages/fakta-omsorg-og-foreldreansvar/src/components/RettighetFaktaPanel.tsx","../../../../packages/fakta-omsorg-og-foreldreansvar/src/components/BarnPanel.tsx","../../../../packages/fakta-omsorg-og-foreldreansvar/src/getAddresses.ts","../../../../packages/fakta-omsorg-og-foreldreansvar/src/components/ForeldrePanel.tsx","../../../../packages/fakta-omsorg-og-foreldreansvar/src/components/OmsorgOgForeldreansvarFaktaForm.tsx","../../../../packages/fakta-omsorg-og-foreldreansvar/src/components/OmsorgOgForeldreansvarInfoPanel.tsx","../../../../packages/fakta-omsorg-og-foreldreansvar/src/OmsorgOgForeldreansvarFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/OmsorgvilkaretFaktaInitPanel.tsx","../../../../packages/prosess-fakta-fodsel-sammenligning/src/components/FodselSammenligningOtherPanel.tsx","../../../../packages/prosess-fakta-fodsel-sammenligning/src/components/FodselSammenligningRevurderingPanel.tsx","../../../../packages/prosess-fakta-fodsel-sammenligning/src/components/FodselSammenligningPanel.tsx","../../../../packages/prosess-fakta-fodsel-sammenligning/src/FodselSammenligningIndex.tsx","../../../../packages/fakta-fodsel/src/components/TermindatoFaktaForm.tsx","../../../../packages/fakta-fodsel/src/components/AvklartBarnFieldArray.tsx","../../../../packages/fakta-fodsel/src/components/SjekkFodselDokForm.tsx","../../../../packages/fakta-fodsel/src/components/FodselInfoPanel.tsx","../../../../packages/fakta-fodsel/src/FodselFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/FodselvilkaretFaktaInitPanel.tsx","../../../../packages/fakta-adopsjon/src/components/MannAdoptererAleneFaktaForm.tsx","../../../../packages/fakta-adopsjon/src/components/EktefelleFaktaForm.tsx","../../../../packages/fakta-adopsjon/src/components/DokumentasjonFaktaForm.tsx","../../../../packages/fakta-adopsjon/src/components/AdopsjonInfoPanel.tsx","../../../../packages/fakta-adopsjon/src/AdopsjonFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/AdopsjonsvilkaretFaktaInitPanel.tsx","../../../../packages/prosess-varsel-om-revurdering/src/components/VarselOmRevurderingForm.tsx","../../../../packages/prosess-varsel-om-revurdering/src/VarselOmRevurderingProsessIndex.tsx","../../src/behandling/fellesPaneler/prosess/VarselProsessStegInitPanel.tsx","../../../../packages/prosess-vilkar-fodsel/src/components/FodselVilkarForm.tsx","../../../../packages/prosess-vilkar-fodsel/src/FodselVilkarProsessIndex.tsx","../../../../packages/prosess-vilkar-adopsjon/src/components/AdopsjonVilkarForm.tsx","../../../../packages/prosess-vilkar-adopsjon/src/AdopsjonVilkarProsessIndex.tsx","../../../../packages/prosess-vilkar-omsorg/src/components/ErOmsorgVilkaarOppfyltForm.tsx","../../../../packages/prosess-vilkar-omsorg/src/OmsorgVilkarProsessIndex.tsx","../../../../packages/prosess-vilkar-foreldreansvar/src/components/ErForeldreansvarVilkaarOppfyltForm.tsx","../../../../packages/prosess-vilkar-foreldreansvar/src/ForeldreansvarVilkarProsessIndex.tsx","../../src/behandling/fellesPaneler/prosess/inngangsvilkarPaneler/ForeldreansvarInngangsvilkarInitPanel.tsx"],"sourcesContent":["const relatertYtelseTilstand = {\n  APEN: 'ÅPEN',\n  LOPENDE: 'LØPENDE',\n  AVSLUTTET: 'AVSLUTTET',\n};\n\nexport default relatertYtelseTilstand;\n","import { FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { diff } from '@navikt/ft-utils';\n\nconst hasValue = (value: string | number | boolean | undefined): boolean => value !== null && value !== undefined;\n\nconst isNotEqual = (value1: number | string | undefined, value2: number | string | undefined): boolean =>\n  hasValue(value2) && value1 !== value2;\n\nconst getIsUtstedtDatoEdited = (soknad: Soknad, familiehendelse: FamilieHendelse): boolean =>\n  isNotEqual(soknad.utstedtdato, familiehendelse.utstedtdato);\n\nconst getIsTerminDatoEdited = (soknad: Soknad, familiehendelse: FamilieHendelse): boolean =>\n  isNotEqual(soknad.termindato, familiehendelse.termindato);\n\nconst getIsAntallBarnEdited = (soknad: Soknad, familiehendelse: FamilieHendelse): boolean =>\n  isNotEqual(soknad.antallBarn, familiehendelse.antallBarnTermin);\n\nconst getIsVilkarTypeEdited = (familiehendelse: FamilieHendelse): boolean => hasValue(familiehendelse.vilkarType);\n\nconst getIsAdopsjonFodelsedatoerEdited = (\n  soknad: Soknad,\n  familiehendelse: FamilieHendelse,\n  // @ts-ignore diff bør endrast så den gir ein meir forutsigbar output\n): Record<string, boolean> => diff(soknad.adopsjonFodelsedatoer, familiehendelse.adopsjonFodelsedatoer);\n\nconst getIsOmsorgsovertakelseDatoEdited = (soknad: Soknad, familiehendelse: FamilieHendelse): boolean =>\n  isNotEqual(soknad.omsorgsovertakelseDato, familiehendelse.omsorgsovertakelseDato);\n\nconst getIsBarnetsAnkomstTilNorgeDatoEdited = (soknad: Soknad, familiehendelse: FamilieHendelse): boolean =>\n  isNotEqual(soknad.barnetsAnkomstTilNorgeDato, familiehendelse.ankomstNorge);\n\nconst getIsAntallBarnOmsorgOgForeldreansvarEdited = (soknad: Soknad, familiehendelse: FamilieHendelse): boolean =>\n  isNotEqual(soknad.antallBarn, familiehendelse.antallBarnTilBeregning);\n\nconst getIsEktefellesBarnEdited = (familiehendelse: FamilieHendelse): boolean =>\n  hasValue(familiehendelse.ektefellesBarn);\n\nconst getIsMannAdoptererAleneEdited = (familiehendelse: FamilieHendelse): boolean =>\n  hasValue(familiehendelse.mannAdoptererAlene);\n\nconst getIsDokumentasjonForeliggerEdited = (familiehendelse: FamilieHendelse): boolean =>\n  hasValue(familiehendelse.dokumentasjonForeligger);\n\nexport type FieldEditedInfo = {\n  termindato?: boolean;\n  antallBarn?: boolean;\n  utstedtdato?: boolean;\n  adopsjonFodelsedatoer?: Record<string, boolean>;\n  omsorgsovertakelseDato?: boolean;\n  barnetsAnkomstTilNorgeDato?: boolean;\n  antallBarnOmsorgOgForeldreansvar?: boolean;\n  vilkarType?: boolean;\n  ektefellesBarn?: boolean;\n  mannAdoptererAlene?: boolean;\n  dokumentasjonForeligger?: boolean;\n};\n\nconst isFieldEdited = (\n  soknad: Soknad = {} as Soknad,\n  gjeldendeFamiliehendelse: FamilieHendelse = {} as FamilieHendelse,\n): FieldEditedInfo => ({\n  termindato: getIsTerminDatoEdited(soknad, gjeldendeFamiliehendelse),\n  antallBarn: getIsAntallBarnEdited(soknad, gjeldendeFamiliehendelse),\n  utstedtdato: getIsUtstedtDatoEdited(soknad, gjeldendeFamiliehendelse),\n  adopsjonFodelsedatoer: getIsAdopsjonFodelsedatoerEdited(soknad, gjeldendeFamiliehendelse),\n  omsorgsovertakelseDato: getIsOmsorgsovertakelseDatoEdited(soknad, gjeldendeFamiliehendelse),\n  barnetsAnkomstTilNorgeDato: getIsBarnetsAnkomstTilNorgeDatoEdited(soknad, gjeldendeFamiliehendelse),\n  antallBarnOmsorgOgForeldreansvar: getIsAntallBarnOmsorgOgForeldreansvarEdited(soknad, gjeldendeFamiliehendelse),\n  vilkarType: getIsVilkarTypeEdited(gjeldendeFamiliehendelse),\n  ektefellesBarn: getIsEktefellesBarnEdited(gjeldendeFamiliehendelse),\n  mannAdoptererAlene: getIsMannAdoptererAleneEdited(gjeldendeFamiliehendelse),\n  dokumentasjonForeligger: getIsDokumentasjonForeliggerEdited(gjeldendeFamiliehendelse),\n});\n\nexport default isFieldEdited;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { BodyShort, HStack, Label } from '@navikt/ds-react';\n\nimport { Datepicker } from '@navikt/ft-form-hooks';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\nimport { FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { FieldEditedInfo } from '@navikt/fp-fakta-felles';\n\nconst getAntallBarn = (soknad: Soknad, familiehendelse: FamilieHendelse): number => {\n  const antallBarn = soknad.antallBarn ? soknad.antallBarn : NaN;\n  return familiehendelse.antallBarnTilBeregning ? familiehendelse.antallBarnTilBeregning : antallBarn;\n};\n\nexport type FormValues = {\n  omsorgsovertakelseDato?: string;\n  foreldreansvarDato?: string;\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  erAksjonspunktForeldreansvar: boolean;\n  editedStatus: FieldEditedInfo;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  soknad: Soknad;\n  familiehendelse: FamilieHendelse;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (soknad: Soknad, familiehendelse: FamilieHendelse) => FormValues;\n}\n\n/**\n * OmsorgsovertakelseFaktaPanel\n */\nconst OmsorgsovertakelseFaktaPanel: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  erAksjonspunktForeldreansvar,\n  editedStatus,\n  alleMerknaderFraBeslutter,\n  soknad,\n  familiehendelse,\n}) => {\n  const intl = useIntl();\n  const antallBarn = getAntallBarn(soknad, familiehendelse);\n\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({\n        id: erAksjonspunktForeldreansvar\n          ? 'OmsorgOgForeldreansvarFaktaForm.ForeldreansvarInfo'\n          : 'OmsorgOgForeldreansvarFaktaForm.OmsorgInfo',\n      })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OMSORGSOVERTAKELSE]}\n    >\n      <HStack gap=\"10\">\n        <Datepicker\n          name=\"omsorgsovertakelseDato\"\n          label={intl.formatMessage({ id: 'OmsorgOgForeldreansvarFaktaForm.OmsorgsovertakelseDate' })}\n          validate={[required, hasValidDate]}\n          isReadOnly={readOnly}\n          isEdited={editedStatus.omsorgsovertakelseDato}\n        />\n        {erAksjonspunktForeldreansvar && (\n          <Datepicker\n            name=\"foreldreansvarDato\"\n            label={intl.formatMessage({ id: 'OmsorgOgForeldreansvarFaktaForm.ForeldreansvarDato' })}\n            validate={[required, hasValidDate]}\n            isReadOnly={readOnly}\n          />\n        )}\n        <div>\n          <Label size=\"small\">\n            <FormattedMessage id=\"OmsorgOgForeldreansvarFaktaForm.NrOfChildren\" />\n          </Label>\n          <BodyShort size=\"small\">{antallBarn}</BodyShort>\n        </div>\n      </HStack>\n    </FaktaGruppe>\n  );\n};\n\nOmsorgsovertakelseFaktaPanel.buildInitialValues = (soknad: Soknad, familiehendelse: FamilieHendelse): FormValues => ({\n  omsorgsovertakelseDato:\n    familiehendelse && familiehendelse.omsorgsovertakelseDato\n      ? familiehendelse.omsorgsovertakelseDato\n      : soknad.omsorgsovertakelseDato,\n  foreldreansvarDato: familiehendelse.foreldreansvarDato,\n});\n\nexport default OmsorgsovertakelseFaktaPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport { AksjonspunktCode, relatertYtelseTilstand, KodeverkType } from '@navikt/fp-kodeverk';\nimport { DateLabel, VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { KodeverkMedNavn, RelatertTilgrensedYtelse, Soknad } from '@navikt/fp-types';\n\nimport { useFormContext } from 'react-hook-form';\nimport styles from './rettighetFaktaPanel.module.css';\n\nconst getLopendeOrAvsluttetYtelser = (\n  ytelse: RelatertTilgrensedYtelse,\n): RelatertTilgrensedYtelse['tilgrensendeYtelserListe'] =>\n  ytelse.tilgrensendeYtelserListe.filter(y => y.status !== relatertYtelseTilstand.APEN);\n\nexport type FormValues = {\n  ytelser: RelatertTilgrensedYtelse[];\n  farSokerType?: string;\n};\n\ninterface PureOwnProps {\n  relatertYtelseTypes: KodeverkMedNavn[];\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (\n    soknad: Soknad,\n    innvilgetRelatertTilgrensendeYtelserForAnnenForelder: RelatertTilgrensedYtelse[],\n    getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n  ) => FormValues;\n}\n\n/**\n * RettighetFaktaPanel\n */\nconst RettighetFaktaPanel: FunctionComponent<PureOwnProps> & StaticFunctions = ({\n  relatertYtelseTypes,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n  const { watch } = useFormContext<FormValues>();\n\n  const farSokerType = watch('farSokerType');\n  const ytelser = watch('ytelser');\n\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'OmsorgOgForeldreansvarFaktaForm.Rettighet' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OMSORGSOVERTAKELSE]}\n    >\n      <BodyShort size=\"small\">{farSokerType || '-'}</BodyShort>\n      <VerticalSpacer sixteenPx />\n      <FaktaGruppe\n        withoutBorder\n        title={intl.formatMessage({ id: 'OmsorgOgForeldreansvarFaktaForm.AndreYtelseTilMor' })}\n      >\n        {ytelser.map(ytelse =>\n          getLopendeOrAvsluttetYtelser(ytelse).map(y => (\n            <div className={styles.wrapper} key={`${ytelse.relatertYtelseType}-${y.periodeFraDato}`}>\n              <BodyShort size=\"small\" className={styles.iverksatt}>\n                <FormattedMessage\n                  id=\"OmsorgOgForeldreansvarFaktaForm.YtelseIverksatt\"\n                  values={{ ytelseType: relatertYtelseTypes.find(r => r.kode === ytelse.relatertYtelseType)?.navn }}\n                />\n                <DateLabel dateString={y.periodeFraDato} />\n              </BodyShort>\n            </div>\n          )),\n        )}\n        {!ytelser.some(y => getLopendeOrAvsluttetYtelser(y).length > 0) && '-'}\n      </FaktaGruppe>\n    </FaktaGruppe>\n  );\n};\n\nRettighetFaktaPanel.buildInitialValues = (\n  soknad: Soknad,\n  innvilgetRelatertTilgrensendeYtelserForAnnenForelder: RelatertTilgrensedYtelse[],\n  getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n): FormValues => ({\n  ytelser: innvilgetRelatertTilgrensendeYtelserForAnnenForelder,\n  farSokerType: soknad.farSokerType ? getKodeverknavn(soknad.farSokerType, KodeverkType.FAR_SOEKER_TYPE) : undefined,\n});\n\nexport default RettighetFaktaPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, WrappedComponentProps } from 'react-intl';\nimport moment from 'moment';\nimport { Label, BodyShort } from '@navikt/ds-react';\n\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Soknad } from '@navikt/fp-types';\n\ninterface OwnProps {\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  soknad: Soknad;\n}\n\n/**\n * BarnPanel\n *\n * Presentasjonskomponent. Brukes i tilknytning til faktapanel for omsorg.\n * Viser barn fra søknad\n */\nconst BarnPanel: FunctionComponent<OwnProps & WrappedComponentProps> = ({\n  intl,\n  alleMerknaderFraBeslutter,\n  soknad,\n}) => {\n  const { adopsjonFodelsedatoer } = soknad;\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'BarnPanel.BarnDetSøkesOm' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OMSORGSOVERTAKELSE]}\n    >\n      {adopsjonFodelsedatoer &&\n        Object.keys(adopsjonFodelsedatoer).map(key => (\n          <React.Fragment key={`${key}`}>\n            <Label size=\"small\">\n              <FormattedMessage id=\"BarnPanel.ChildNumberBornData\" values={{ childNumber: key }} />\n            </Label>\n            <BodyShort size=\"small\">\n              {moment(adopsjonFodelsedatoer[parseInt(key, 10)]).format(DDMMYYYY_DATE_FORMAT)}\n            </BodyShort>\n            <VerticalSpacer eightPx />\n          </React.Fragment>\n        ))}\n    </FaktaGruppe>\n  );\n};\n\nexport default BarnPanel;\n","import { opplysningAdresseType, landkoder as Landkode } from '@navikt/fp-kodeverk';\nimport { Personadresse } from '@navikt/ft-types';\n\nconst emptyIfnull = (text?: string): string => (text == null ? '' : text);\n\nconst constructAddress = (adresse = '', postnummer = '', poststed = '', land = ''): string =>\n  `${emptyIfnull(adresse)}, ${emptyIfnull(postnummer)} ${emptyIfnull(poststed)} ${emptyIfnull(land)}`;\n\nexport type Adresser = { [key in opplysningAdresseType]?: string };\n\nconst getAddresses = (addresses: Personadresse[] = []): Adresser =>\n  addresses.reduce<Adresser>((acc, address) => {\n    if (!address.adresseType || address.adresseType === opplysningAdresseType.UKJENT) {\n      return {\n        ...acc,\n        [opplysningAdresseType.BOSTEDSADRESSE]: 'UKJENT',\n      };\n    }\n\n    const currentAddress = [address.adresselinje1, address.adresselinje2, address.adresselinje3]\n      .filter(linje => !!linje)\n      .join(', ');\n    if (!currentAddress) {\n      return acc;\n    }\n\n    const country = address.land !== Landkode.NORGE ? address.land : undefined;\n    return {\n      ...acc,\n      [address.adresseType]: constructAddress(currentAddress, address.postNummer, address.poststed, country).trim(),\n    };\n  }, {});\n\nexport default getAddresses;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage, WrappedComponentProps } from 'react-intl';\nimport { Label, BodyShort, Heading } from '@navikt/ds-react';\n\nimport { DateLabel, VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, navBrukerKjonn, opplysningAdresseType } from '@navikt/fp-kodeverk';\nimport { PersonopplysningerBasis, Personoversikt } from '@navikt/fp-types';\n\nimport getAddresses from '../getAddresses';\n\nconst getParentHeader = (erMor: boolean): string =>\n  erMor ? 'ForeldrePanel.MotherDeathDate' : 'ForeldrePanel.FatherDeathDate';\n\nconst lagSøkerdata = (personopplysninger: PersonopplysningerBasis) => {\n  const addresses = getAddresses(personopplysninger.adresser);\n\n  return {\n    aktorId: personopplysninger.aktoerId,\n    navn: personopplysninger.navn,\n    dodsdato: personopplysninger.dødsdato,\n    adresse: addresses[opplysningAdresseType.POSTADRESSE] || addresses[opplysningAdresseType.BOSTEDSADRESSE],\n    erMor: personopplysninger.kjønn === navBrukerKjonn.KVINNE,\n  };\n};\n\ninterface OwnProps {\n  personoversikt: Personoversikt;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\n/**\n * ForeldrePanel\n *\n * Presentasjonskomponent. Brukes i tilknytning til faktapanel for omsorg.\n */\nconst ForeldrePanel: FunctionComponent<OwnProps & WrappedComponentProps> = ({\n  intl,\n  personoversikt,\n  alleMerknaderFraBeslutter,\n}) => {\n  const beggeForeldre = useMemo(() => {\n    const f = [lagSøkerdata(personoversikt.bruker)];\n    if (personoversikt.annenPart) {\n      f.push(lagSøkerdata(personoversikt.annenPart));\n    }\n    return f;\n  }, []);\n\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'ForeldrePanel.Foreldre' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OMSORGSOVERTAKELSE]}\n    >\n      {beggeForeldre.map(foreldre => {\n        const shouldShowAdress = foreldre.adresse && !foreldre.dodsdato;\n        const parentHeader = getParentHeader(foreldre.erMor);\n        return (\n          <div key={`${foreldre.aktorId}`}>\n            <Heading size=\"small\">{foreldre.navn}</Heading>\n            <VerticalSpacer eightPx />\n            <BodyShort size=\"small\">\n              <FormattedMessage id=\"ForeldrePanel.Address\" />\n            </BodyShort>\n            {shouldShowAdress && <Label size=\"small\">{foreldre.adresse}</Label>}\n            {!shouldShowAdress && <BodyShort size=\"small\"> - </BodyShort>}\n            <VerticalSpacer eightPx />\n            <BodyShort size=\"small\">\n              <FormattedMessage id={parentHeader} />\n            </BodyShort>\n            {foreldre.dodsdato && (\n              <Label size=\"small\">\n                <DateLabel dateString={foreldre.dodsdato} />\n              </Label>\n            )}\n            {!foreldre.dodsdato && <BodyShort size=\"small\"> - </BodyShort>}\n            <VerticalSpacer sixteenPx />\n          </div>\n        );\n      })}\n    </FaktaGruppe>\n  );\n};\n\nexport default ForeldrePanel;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, HStack, VStack } from '@navikt/ds-react';\n\nimport { AksjonspunktHelpTextTemp, VerticalSpacer, FaktaGruppe, EditedIcon } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, VilkarType, KodeverkType } from '@navikt/fp-kodeverk';\nimport { SelectField } from '@navikt/ft-form-hooks';\nimport { required } from '@navikt/ft-form-validators';\nimport { isFieldEdited, FieldEditedInfo } from '@navikt/fp-fakta-felles';\nimport {\n  Aksjonspunkt,\n  FamilieHendelse,\n  InntektArbeidYtelse,\n  KodeverkMedNavn,\n  Personoversikt,\n  RelatertTilgrensedYtelse,\n  Soknad,\n} from '@navikt/fp-types';\nimport {\n  AvklarFaktaForForeldreansvarAksjonspunktAp,\n  AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { useFormContext } from 'react-hook-form';\nimport OmsorgsovertakelseFaktaPanel, { FormValues as OmsorgFormValues } from './OmsorgsovertakelseFaktaPanel';\nimport RettighetFaktaPanel, { FormValues as RettighetFormValues } from './RettighetFaktaPanel';\nimport BarnPanel from './BarnPanel';\nimport ForeldrePanel from './ForeldrePanel';\n\nimport styles from './omsorgOgForeldreansvarFaktaForm.module.css';\n\nconst getDescriptionText = (vilkarCode?: string): ReactElement => {\n  if (vilkarCode === VilkarType.OMSORGSVILKARET) {\n    return <FormattedMessage id=\"OmsorgOgForeldreansvarFaktaForm.HelpTextOmsorgTredjeLedd\" />;\n  }\n  if (vilkarCode === VilkarType.FORELDREANSVARSVILKARET_2_LEDD) {\n    return <FormattedMessage id=\"OmsorgOgForeldreansvarFaktaForm.HelpTextForeldreAndreLedd\" />;\n  }\n  if (vilkarCode === VilkarType.FORELDREANSVARSVILKARET_4_LEDD) {\n    return <FormattedMessage id=\"OmsorgOgForeldreansvarFaktaForm.HelpTextForeldreFjerdeLedd\" />;\n  }\n  return <FormattedMessage id=\"OmsorgOgForeldreansvarFaktaForm.ChooseVilkarToSeeDescription\" />;\n};\n\nconst findAksjonspunktHelpTexts = (erAksjonspunktForeldreansvar: boolean): ReactElement[] =>\n  erAksjonspunktForeldreansvar\n    ? [<FormattedMessage key=\"CheckInformation\" id=\"OmsorgOgForeldreansvarFaktaForm.CheckInformationForeldreansvar\" />]\n    : [\n        <FormattedMessage key=\"CheckInformation\" id=\"OmsorgOgForeldreansvarFaktaForm.CheckInformation\" />,\n        <FormattedMessage key=\"ChooseVilkar\" id=\"OmsorgOgForeldreansvarFaktaForm.ChooseVilkar\" />,\n      ];\n\nconst getEditedStatus = (soknad: Soknad, gjeldendeFamiliehendelse: FamilieHendelse): FieldEditedInfo =>\n  isFieldEdited(soknad, gjeldendeFamiliehendelse);\n\nexport type FormValues = OmsorgFormValues &\n  RettighetFormValues & {\n    vilkarType?: string;\n  };\n\ninterface PureOwnProps {\n  soknad: Soknad;\n  gjeldendeFamiliehendelse: FamilieHendelse;\n  readOnly: boolean;\n  vilkarTypes: KodeverkMedNavn[];\n  hasOpenAksjonspunkter: boolean;\n  relatertYtelseTypes: KodeverkMedNavn[];\n  erAksjonspunktForeldreansvar: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  personoversikt: Personoversikt;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (\n    soknad: Soknad,\n    familiehendelse: FamilieHendelse,\n    innvilgetRelatertTilgrensendeYtelserForAnnenForelder: RelatertTilgrensedYtelse[],\n    getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n  ) => FormValues;\n  transformValues: (\n    values: FormValues,\n    aksjonspunkt: Aksjonspunkt,\n  ) => AvklarFaktaForForeldreansvarAksjonspunktAp | AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp;\n}\n\n/**\n * OmsorgOgForeldreansvarFaktaForm\n *\n * Setter opp aksjonspunktet for avklaring av fakta for omsorgs og foreldreansvarsvilkåret.\n */\nconst OmsorgOgForeldreansvarFaktaForm: FunctionComponent<PureOwnProps> & StaticFunctions = ({\n  readOnly,\n  vilkarTypes,\n  hasOpenAksjonspunkter,\n  soknad,\n  relatertYtelseTypes,\n  erAksjonspunktForeldreansvar,\n  alleMerknaderFraBeslutter,\n  personoversikt,\n  gjeldendeFamiliehendelse,\n}) => {\n  const intl = useIntl();\n\n  const { watch } = useFormContext<FormValues>();\n\n  const editedStatus = getEditedStatus(soknad, gjeldendeFamiliehendelse);\n  const vilkarType = watch('vilkarType');\n\n  return (\n    <>\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={hasOpenAksjonspunkter}>\n        {findAksjonspunktHelpTexts(erAksjonspunktForeldreansvar)}\n      </AksjonspunktHelpTextTemp>\n      <VStack gap=\"2\">\n        <HStack gap=\"5\">\n          <div className={erAksjonspunktForeldreansvar ? styles.oneCol : styles.cols}>\n            <OmsorgsovertakelseFaktaPanel\n              readOnly={readOnly}\n              erAksjonspunktForeldreansvar={erAksjonspunktForeldreansvar}\n              editedStatus={editedStatus}\n              alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n              soknad={soknad}\n              familiehendelse={gjeldendeFamiliehendelse}\n            />\n          </div>\n          {!erAksjonspunktForeldreansvar && (\n            <div className={styles.cols}>\n              <RettighetFaktaPanel\n                relatertYtelseTypes={relatertYtelseTypes}\n                alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n              />\n            </div>\n          )}\n        </HStack>\n        <HStack gap=\"5\">\n          <div className={styles.cols}>\n            <BarnPanel soknad={soknad} alleMerknaderFraBeslutter={alleMerknaderFraBeslutter} intl={intl} />\n          </div>\n          <div className={styles.cols}>\n            <ForeldrePanel\n              personoversikt={personoversikt}\n              alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n              intl={intl}\n            />\n          </div>\n        </HStack>\n        {!erAksjonspunktForeldreansvar && (\n          <FaktaGruppe\n            title={intl.formatMessage({ id: 'OmsorgOgForeldreansvarFaktaForm.VelgVilkaarSomSkalAnvendes' })}\n            merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OMSORGSOVERTAKELSE]}\n          >\n            {!readOnly && (\n              <SelectField\n                name=\"vilkarType\"\n                validate={[required]}\n                hideLabel\n                label=\"\"\n                selectValues={vilkarTypes.map(d => (\n                  <option key={d.kode} value={d.kode}>\n                    {d.navn}\n                  </option>\n                ))}\n                className={styles.breddeSelect}\n                readOnly={readOnly}\n                disabled={readOnly}\n              />\n            )}\n            {readOnly && vilkarType && (\n              <div className={styles.vilkarTypeReadOnly}>\n                <Label size=\"small\" as=\"span\">\n                  {(vilkarTypes.find(d => d.kode === vilkarType) || {}).navn}\n                </Label>\n                {editedStatus.vilkarType && <EditedIcon />}\n              </div>\n            )}\n            <VerticalSpacer eightPx />\n            <BodyShort size=\"small\">{getDescriptionText(vilkarType)}</BodyShort>\n          </FaktaGruppe>\n        )}\n      </VStack>\n    </>\n  );\n};\n\nOmsorgOgForeldreansvarFaktaForm.buildInitialValues = (\n  soknad: Soknad,\n  gjeldendeFamiliehendelse: FamilieHendelse,\n  innvilgetRelatertTilgrensendeYtelserForAnnenForelder: InntektArbeidYtelse['innvilgetRelatertTilgrensendeYtelserForAnnenForelder'],\n  getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n): FormValues => ({\n  vilkarType: gjeldendeFamiliehendelse.vilkarType ? gjeldendeFamiliehendelse.vilkarType : '',\n  ...OmsorgsovertakelseFaktaPanel.buildInitialValues(soknad, gjeldendeFamiliehendelse),\n  ...RettighetFaktaPanel.buildInitialValues(\n    soknad,\n    innvilgetRelatertTilgrensendeYtelserForAnnenForelder,\n    getKodeverknavn,\n  ),\n});\n\nOmsorgOgForeldreansvarFaktaForm.transformValues = (\n  values: FormValues,\n  aksjonspunkt: Aksjonspunkt,\n): AvklarFaktaForForeldreansvarAksjonspunktAp | AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp =>\n  aksjonspunkt.definisjon === AksjonspunktCode.AVKLAR_VILKAR_FOR_FORELDREANSVAR\n    ? ({\n        omsorgsovertakelseDato: values.omsorgsovertakelseDato,\n        foreldreansvarDato: values.foreldreansvarDato,\n        kode: AksjonspunktCode.AVKLAR_VILKAR_FOR_FORELDREANSVAR,\n      } as AvklarFaktaForForeldreansvarAksjonspunktAp)\n    : ({\n        omsorgsovertakelseDato: values.omsorgsovertakelseDato,\n        vilkarType: values.vilkarType,\n        kode: AksjonspunktCode.OMSORGSOVERTAKELSE,\n      } as AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp);\n\nexport default OmsorgOgForeldreansvarFaktaForm;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\n\nimport { FaktaBegrunnelseTextFieldNew, FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { Form } from '@navikt/ft-form-hooks';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, getKodeverknavnFn, KodeverkType } from '@navikt/fp-kodeverk';\nimport {\n  Aksjonspunkt,\n  FamilieHendelse,\n  Personoversikt,\n  RelatertTilgrensedYtelse,\n  Soknad,\n  AlleKodeverk,\n} from '@navikt/fp-types';\nimport {\n  AvklarFaktaForForeldreansvarAksjonspunktAp,\n  AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport OmsorgOgForeldreansvarFaktaForm, { FormValues as OmsorgFormValues } from './OmsorgOgForeldreansvarFaktaForm';\n\ntype FormValues = OmsorgFormValues & {\n  begrunnelse?: string;\n};\n\nconst transformValues = (\n  values: FormValues,\n  aksjonspunkt: Aksjonspunkt,\n): AvklarFaktaForForeldreansvarAksjonspunktAp | AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp => ({\n  ...OmsorgOgForeldreansvarFaktaForm.transformValues(values, aksjonspunkt),\n  ...{ begrunnelse: values.begrunnelse },\n});\n\nconst buildInitialValues = (\n  soknad: Soknad,\n  gjeldendeFamiliehendelse: FamilieHendelse,\n  innvilgetRelatertTilgrensendeYtelserForAnnenForelder: RelatertTilgrensedYtelse[],\n  aksjonspunkter: Aksjonspunkt[],\n  alleKodeverk: AlleKodeverk,\n): FormValues => {\n  const aksjonspunkt = aksjonspunkter.find(\n    ap =>\n      ap.definisjon === AksjonspunktCode.OMSORGSOVERTAKELSE ||\n      ap.definisjon === AksjonspunktCode.AVKLAR_VILKAR_FOR_FORELDREANSVAR,\n  );\n  return {\n    ...OmsorgOgForeldreansvarFaktaForm.buildInitialValues(\n      soknad,\n      gjeldendeFamiliehendelse,\n      innvilgetRelatertTilgrensendeYtelserForAnnenForelder,\n      getKodeverknavnFn(alleKodeverk),\n    ),\n    ...FaktaBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkt),\n  };\n};\n\ninterface PureOwnProps {\n  soknad: Soknad;\n  personoversikt: Personoversikt;\n  gjeldendeFamiliehendelse: FamilieHendelse;\n  innvilgetRelatertTilgrensendeYtelserForAnnenForelder: RelatertTilgrensedYtelse[];\n  aksjonspunkter: Aksjonspunkt[];\n  alleKodeverk: AlleKodeverk;\n  submitCallback: (\n    data: AvklarFaktaForForeldreansvarAksjonspunktAp | AvklarFaktaForOmsorgOgForeldreansvarAksjonspunktAp,\n  ) => Promise<void>;\n  hasOpenAksjonspunkter: boolean;\n  submittable: boolean;\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  formData: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * OmsorgOgForeldreansvarInfoPanel\n *\n * Har ansvar for å sette opp form for faktapenelet til Omsorgsvilkåret.\n */\nexport const OmsorgOgForeldreansvarInfoPanel: FunctionComponent<PureOwnProps> = ({\n  hasOpenAksjonspunkter,\n  submittable,\n  readOnly,\n  innvilgetRelatertTilgrensendeYtelserForAnnenForelder,\n  alleMerknaderFraBeslutter,\n  soknad,\n  gjeldendeFamiliehendelse,\n  personoversikt,\n  submitCallback,\n  aksjonspunkter,\n  alleKodeverk,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: buildInitialValues(\n      soknad,\n      gjeldendeFamiliehendelse,\n      innvilgetRelatertTilgrensendeYtelserForAnnenForelder,\n      aksjonspunkter,\n      alleKodeverk,\n    ),\n  });\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const erAksjonspunktForeldreansvar =\n    aksjonspunkter[0].definisjon === AksjonspunktCode.AVKLAR_VILKAR_FOR_FORELDREANSVAR;\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, aksjonspunkter[0]))}\n    >\n      <OmsorgOgForeldreansvarFaktaForm\n        erAksjonspunktForeldreansvar={erAksjonspunktForeldreansvar}\n        readOnly={readOnly}\n        vilkarTypes={alleKodeverk[KodeverkType.OMSORGSOVERTAKELSE_VILKAR_TYPE]}\n        relatertYtelseTypes={alleKodeverk[KodeverkType.RELATERT_YTELSE_TYPE]}\n        hasOpenAksjonspunkter={hasOpenAksjonspunkter}\n        alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n        soknad={soknad}\n        gjeldendeFamiliehendelse={gjeldendeFamiliehendelse}\n        personoversikt={personoversikt}\n      />\n      <VerticalSpacer twentyPx />\n      <FaktaBegrunnelseTextFieldNew\n        isSubmittable={submittable}\n        isReadOnly={readOnly}\n        hasBegrunnelse={!!begrunnelse}\n        label={intl.formatMessage({\n          id: erAksjonspunktForeldreansvar\n            ? 'OmsorgOgForeldreansvarInfoPanel.BegrunnelseTitleFp'\n            : 'OmsorgOgForeldreansvarInfoPanel.BegrunnelseTitleEs',\n        })}\n      />\n      <VerticalSpacer twentyPx />\n      <FaktaSubmitButtonNew\n        isSubmittable={submittable}\n        isSubmitting={formMethods.formState.isSubmitting}\n        isDirty={formMethods.formState.isDirty}\n        isReadOnly={readOnly}\n      />\n    </Form>\n  );\n};\n\nexport default OmsorgOgForeldreansvarInfoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport {\n  StandardFaktaPanelProps,\n  FamilieHendelseSamling,\n  InntektArbeidYtelse,\n  Personoversikt,\n  Soknad,\n} from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport OmsorgOgForeldreansvarInfoPanel from './components/OmsorgOgForeldreansvarInfoPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  personoversikt: Personoversikt;\n  inntektArbeidYtelse: InntektArbeidYtelse;\n}\n\nconst OmsorgOgForeldreansvarFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  familiehendelse,\n  soknad,\n  personoversikt,\n  inntektArbeidYtelse,\n  aksjonspunkter,\n  alleMerknaderFraBeslutter,\n  submitCallback,\n  readOnly,\n  alleKodeverk,\n  harApneAksjonspunkter,\n  submittable,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <OmsorgOgForeldreansvarInfoPanel\n      gjeldendeFamiliehendelse={familiehendelse.gjeldende}\n      soknad={soknad}\n      personoversikt={personoversikt}\n      aksjonspunkter={aksjonspunkter}\n      innvilgetRelatertTilgrensendeYtelserForAnnenForelder={\n        inntektArbeidYtelse.innvilgetRelatertTilgrensendeYtelserForAnnenForelder\n      }\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      alleKodeverk={alleKodeverk}\n      hasOpenAksjonspunkter={harApneAksjonspunkter}\n      submittable={submittable}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default OmsorgOgForeldreansvarFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { FamilieHendelseSamling } from '@navikt/ft-types';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OmsorgOgForeldreansvarFaktaIndex } from '@navikt/fp-fakta-omsorg-og-foreldreansvar';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { InntektArbeidYtelse, Personoversikt, Soknad } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.OMSORGSOVERTAKELSE];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.SOKNAD,\n  BehandlingApiKeys.FAMILIEHENDELSE,\n  BehandlingApiKeys.INNTEKT_ARBEID_YTELSE,\n];\ntype EndepunktPanelData = {\n  soknad: Soknad;\n  familiehendelse: FamilieHendelseSamling;\n  inntektArbeidYtelse: InntektArbeidYtelse;\n};\n\ninterface OwnProps {\n  personoversikt: Personoversikt;\n}\n\n/**\n * OmsorgvilkaretFaktaInitPanel\n */\nconst OmsorgvilkaretFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({\n  personoversikt,\n  ...props\n}) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.OMSORGSVILKARET}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'OmsorgOgForeldreansvarInfoPanel.Omsorg' })}\n    skalPanelVisesIMeny={() => !!props.behandling.aksjonspunkt.some(ap => ap.definisjon === AKSJONSPUNKT_KODER[0])}\n    renderPanel={data => <OmsorgOgForeldreansvarFaktaIndex personoversikt={personoversikt} {...data} />}\n  />\n);\n\nexport default OmsorgvilkaretFaktaInitPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort, Heading } from '@navikt/ds-react';\n\nimport { DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Soknad } from '@navikt/fp-types';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport styles from './fodselSammenligningOtherPanel.module.css';\n\nconst formatDate = (date: string): string => (date ? moment(date, ISO_DATE_FORMAT).format(DDMMYYYY_DATE_FORMAT) : '-');\n\ninterface OwnProps {\n  soknad: Soknad;\n  termindato?: string;\n}\n\nexport const getTerminEllerFodselsdato = (\n  hasSoknad: boolean,\n  fødselsdatoerSoknad: { [key: number]: string },\n  termindatoSoknad?: string,\n  termindato?: string,\n): string | null => {\n  if (hasSoknad && Object.keys(fødselsdatoerSoknad).length > 0) {\n    return formatDate(Object.values(fødselsdatoerSoknad)[0]);\n  }\n  if (termindato) {\n    return formatDate(termindato);\n  }\n  if (!hasSoknad) {\n    return null;\n  }\n  return termindatoSoknad ? formatDate(termindatoSoknad) : '-';\n};\n\n/**\n * FodselSammenligningOtherPanel\n *\n * Viser sammenligning av fødsel ved ytelsesvedtak/søknad og oppdatert informasjon fra TPS.\n */\nconst FodselSammenligningOtherPanel: FunctionComponent<OwnProps> = ({ soknad, termindato }) => {\n  const soknadFodselsdatoer = soknad.fodselsdatoer ? soknad.fodselsdatoer : {};\n\n  const terminOrFodselLabel =\n    Object.keys(soknadFodselsdatoer).length > 0\n      ? 'FodselsammenligningPanel.Fodselsdato'\n      : 'FodselsammenligningPanel.Termindato';\n  const terminFodselHeader =\n    Object.keys(soknadFodselsdatoer).length > 0\n      ? 'FodselSammenligningOtherPanel.OpplysningerISoknad'\n      : 'FodselSammenligningOtherPanel.TerminISoknad';\n\n  const terminOrFodselDate = useMemo(\n    () => getTerminEllerFodselsdato(!!soknad, soknadFodselsdatoer, soknad.termindato, termindato),\n    [soknad, soknadFodselsdatoer, termindato],\n  );\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id={terminFodselHeader} />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      <FlexContainer>\n        <FlexRow>\n          {soknad.utstedtdato && (\n            <FlexColumn className={styles.colMargin}>\n              <Label size=\"small\">\n                <FormattedMessage id=\"FodselsammenligningPanel.UstedtDato\" />\n              </Label>\n              <BodyShort size=\"small\">{formatDate(soknad.utstedtdato)}</BodyShort>\n            </FlexColumn>\n          )}\n          <FlexColumn className={styles.colMargin}>\n            <Label size=\"small\">\n              <FormattedMessage id={terminOrFodselLabel} />\n            </Label>\n            <BodyShort size=\"small\">{terminOrFodselDate}</BodyShort>\n          </FlexColumn>\n          <FlexColumn>\n            <Label size=\"small\">\n              <FormattedMessage id=\"FodselsammenligningPanel.AntallBarn\" />\n            </Label>\n            <BodyShort size=\"small\">{soknad.antallBarn}</BodyShort>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n    </>\n  );\n};\n\nexport default FodselSammenligningOtherPanel;\n","import React, { FunctionComponent } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort, Heading } from '@navikt/ds-react';\n\nimport { DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport styles from './fodselSammenligningOtherPanel.module.css';\n\nconst formatDate = (date: string): string => (date ? moment(date, ISO_DATE_FORMAT).format(DDMMYYYY_DATE_FORMAT) : '-');\n\nconst getTermindatoEllerFodselsdato = (\n  isTermin: boolean,\n  originalSoknad?: Soknad,\n  orginalFamiliehendelse?: FamilieHendelse,\n): string | undefined => {\n  if (!originalSoknad && !orginalFamiliehendelse) {\n    return '';\n  }\n\n  const famHendelse = orginalFamiliehendelse || { termindato: undefined, avklartBarn: [] };\n\n  if (isTermin) {\n    const termDato = famHendelse.termindato ? famHendelse.termindato : originalSoknad?.termindato;\n    return termDato ? formatDate(termDato) : undefined;\n  }\n\n  if (famHendelse.avklartBarn && famHendelse.avklartBarn.length > 0) {\n    return formatDate(famHendelse.avklartBarn[0].fodselsdato);\n  }\n  if (!originalSoknad?.fodselsdatoer) {\n    return '-';\n  }\n  return formatDate(Object.values(originalSoknad.fodselsdatoer)[0]);\n};\n\nconst getAntallBarn = (\n  isTermin: boolean,\n  originalSoknad?: Soknad,\n  orginalFamiliehendelse?: FamilieHendelse,\n): number | undefined => {\n  if (!originalSoknad && !orginalFamiliehendelse) {\n    return 0;\n  }\n  const famHendelse = orginalFamiliehendelse || { termindato: undefined, antallBarnTermin: undefined, avklartBarn: [] };\n\n  if (isTermin) {\n    return famHendelse.termindato ? famHendelse.antallBarnTermin : originalSoknad?.antallBarn;\n  }\n  return famHendelse.avklartBarn && famHendelse.avklartBarn.length > 0\n    ? famHendelse.avklartBarn.length\n    : originalSoknad?.antallBarn;\n};\n\ninterface OwnProps {\n  soknadOriginalBehandling?: Soknad;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n  vedtaksDatoSomSvangerskapsuke?: number;\n}\n\n/**\n * FodselSammenligningRevurderingPanel\n *\n * Presentasjonskomponent. Viser sammenligning av fødsel ved ytelsesvedtak/søknad og oppdatert informasjon fra TPS.\n */\nconst FodselSammenligningRevurderingPanel: FunctionComponent<OwnProps> = ({\n  vedtaksDatoSomSvangerskapsuke,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n}) => {\n  const erTermin =\n    (familiehendelseOriginalBehandling && !!familiehendelseOriginalBehandling.termindato) ||\n    !soknadOriginalBehandling ||\n    !soknadOriginalBehandling.fodselsdatoer ||\n    Object.keys(soknadOriginalBehandling.fodselsdatoer).length === 0;\n\n  const terminOrFodselLabel = erTermin ? 'FodselsammenligningPanel.Termindato' : 'FodselsammenligningPanel.Fodselsdato';\n  const terminOrFodselDate = getTermindatoEllerFodselsdato(\n    erTermin,\n    soknadOriginalBehandling,\n    familiehendelseOriginalBehandling,\n  );\n  const antallBarn = getAntallBarn(erTermin, soknadOriginalBehandling, familiehendelseOriginalBehandling);\n  const shouldShowVedtaksdatoAsSvangerskapsuke = !familiehendelseOriginalBehandling\n    ? false\n    : (!familiehendelseOriginalBehandling.avklartBarn || familiehendelseOriginalBehandling.avklartBarn.length === 0) &&\n      !!vedtaksDatoSomSvangerskapsuke;\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"FodselsammenligningPanel.Ytelsesvedtak\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      <FlexContainer>\n        <FlexRow>\n          {shouldShowVedtaksdatoAsSvangerskapsuke && (\n            <FlexColumn className={styles.colMargin}>\n              <Label size=\"small\">\n                <FormattedMessage id=\"FodselsammenligningPanel.FodtISvangerskapsuke\" />\n              </Label>\n              <BodyShort size=\"small\">{vedtaksDatoSomSvangerskapsuke}</BodyShort>\n            </FlexColumn>\n          )}\n          <FlexColumn className={styles.colMargin}>\n            <Label size=\"small\">\n              <FormattedMessage id={terminOrFodselLabel} />\n            </Label>\n            <BodyShort size=\"small\">{terminOrFodselDate || '-'}</BodyShort>\n          </FlexColumn>\n          <FlexColumn>\n            <Label size=\"small\">\n              <FormattedMessage id=\"FodselsammenligningPanel.AntallBarn\" />\n            </Label>\n            <BodyShort size=\"small\">{antallBarn || '-'}</BodyShort>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n    </>\n  );\n};\n\nexport default FodselSammenligningRevurderingPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport moment from 'moment';\nimport { Tag, BodyShort, Heading } from '@navikt/ds-react';\n\nimport { FlexColumn, FlexContainer, FlexRow, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\nimport { DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { behandlingType } from '@navikt/fp-kodeverk';\nimport { AvklartBarn, FamilieHendelse, Soknad } from '@navikt/fp-types';\n\nimport FodselSammenligningOtherPanel from './FodselSammenligningOtherPanel';\nimport FodselSammenligningRevurderingPanel from './FodselSammenligningRevurderingPanel';\n\nimport styles from './fodselSammenligningPanel.module.css';\n\nconst formatDate = (date: string): string => (date ? moment(date, ISO_DATE_FORMAT).format(DDMMYYYY_DATE_FORMAT) : '-');\n\ninterface OwnProps {\n  behandlingsTypeKode: string;\n  avklartBarn: AvklartBarn[];\n  nrOfDodfodteBarn: number;\n  soknad: Soknad;\n  soknadOriginalBehandling?: Soknad;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n  termindato?: string;\n  vedtaksDatoSomSvangerskapsuke?: number;\n}\n\n/**\n * FodselSammenlingningPanel\n *\n * Presentasjonskomponent. Viser sammenligning av fødsel ved ytelsesvedtak/søknad og oppdatert informasjon fra TPS.\n */\nconst FodselSammenligningPanel: FunctionComponent<OwnProps> = ({\n  behandlingsTypeKode,\n  avklartBarn,\n  nrOfDodfodteBarn,\n  soknad,\n  vedtaksDatoSomSvangerskapsuke,\n  termindato,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n}) => (\n  <FlexContainer>\n    <FlexRow>\n      <FlexColumn className={styles.colWidthLeft}>\n        {behandlingsTypeKode !== behandlingType.REVURDERING && (\n          <FodselSammenligningOtherPanel soknad={soknad} termindato={termindato} />\n        )}\n        {behandlingsTypeKode === behandlingType.REVURDERING && (\n          <FodselSammenligningRevurderingPanel\n            soknadOriginalBehandling={soknadOriginalBehandling}\n            familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n            vedtaksDatoSomSvangerskapsuke={vedtaksDatoSomSvangerskapsuke}\n          />\n        )}\n      </FlexColumn>\n      <FlexColumn className={styles.colWidthRight}>\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              <Heading size=\"small\">\n                <FormattedMessage id=\"FodselsammenligningPanel.OpplysningerTPS\" />\n              </Heading>\n            </FlexColumn>\n            {nrOfDodfodteBarn > 0 && (\n              <FlexColumn>\n                <Tag variant=\"info\">\n                  <FormattedMessage id=\"FodselsammenligningPanel.Dodfodt\" />\n                </Tag>\n              </FlexColumn>\n            )}\n          </FlexRow>\n        </FlexContainer>\n        {avklartBarn.length > 0 && (\n          <Table\n            noHover\n            headerTextCodes={['FodselsammenligningPanel.Fodselsdato', 'FodselsammenligningPanel.Dodsdato']}\n          >\n            {avklartBarn.map((barn: AvklartBarn) => {\n              const key = barn.fodselsdato + barn.dodsdato;\n              return (\n                <TableRow key={key} id={key}>\n                  <TableColumn>\n                    <BodyShort size=\"small\">{formatDate(barn.fodselsdato)}</BodyShort>\n                  </TableColumn>\n                  <TableColumn>\n                    <BodyShort size=\"small\">{barn.dodsdato ? formatDate(barn.dodsdato) : '-'}</BodyShort>\n                  </TableColumn>\n                  <TableColumn>\n                    {barn.dodsdato && (\n                      <Tag variant=\"info\">\n                        <FormattedMessage id=\"FodselsammenligningPanel.Dod\" />\n                      </Tag>\n                    )}\n                  </TableColumn>\n                </TableRow>\n              );\n            })}\n          </Table>\n        )}\n        {avklartBarn.length === 0 && (\n          <div className={styles.noChildrenInTps}>\n            <BodyShort size=\"small\">-</BodyShort>\n          </div>\n        )}\n      </FlexColumn>\n    </FlexRow>\n  </FlexContainer>\n);\n\nexport default FodselSammenligningPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AvklartBarn, FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport FodselSammenligningPanel from './components/FodselSammenligningPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  behandlingsTypeKode: string;\n  avklartBarn?: AvklartBarn[];\n  termindato?: string;\n  vedtaksDatoSomSvangerskapsuke?: number;\n  soknad: Soknad;\n  soknadOriginalBehandling?: Soknad;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n}\n\nconst FodselSammenligningIndex: FunctionComponent<OwnProps> = ({\n  behandlingsTypeKode,\n  avklartBarn = [],\n  termindato,\n  vedtaksDatoSomSvangerskapsuke,\n  soknad,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n}) => {\n  const nrOfDodfodteBarn = avklartBarn.reduce((ab, barn) => ab + (barn.dodsdato ? 1 : 0), 0);\n  return (\n    <RawIntlProvider value={intl}>\n      <FodselSammenligningPanel\n        avklartBarn={avklartBarn}\n        termindato={termindato}\n        vedtaksDatoSomSvangerskapsuke={vedtaksDatoSomSvangerskapsuke}\n        nrOfDodfodteBarn={nrOfDodfodteBarn}\n        behandlingsTypeKode={behandlingsTypeKode}\n        soknad={soknad}\n        soknadOriginalBehandling={soknadOriginalBehandling}\n        familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n      />\n    </RawIntlProvider>\n  );\n};\n\nexport default FodselSammenligningIndex;\n","import React, { FunctionComponent } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Alert, Label, BodyShort, HStack } from '@navikt/ds-react';\n\nimport { DateLabel, VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { Datepicker, InputField } from '@navikt/ft-form-hooks';\nimport { hasValidDate, hasValidInteger, maxValue, minValue, required } from '@navikt/ft-form-validators';\nimport { FaktaBegrunnelseTextFieldNew, isFieldEdited } from '@navikt/fp-fakta-felles';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { BekreftTerminbekreftelseAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { useFormContext } from 'react-hook-form';\nimport styles from './termindatoFaktaForm.module.css';\n\nconst minValue1 = minValue(1);\nconst maxValue9 = maxValue(9);\n\nconst erTerminbekreftelseUtstedtForTidlig = (utstedtdato?: string, termindato?: string): boolean =>\n  utstedtdato !== undefined &&\n  termindato !== undefined &&\n  !moment(utstedtdato).isAfter(moment(termindato).subtract(18, 'weeks').subtract(4, 'days'));\n\nexport type FormValues = {\n  utstedtdato?: string;\n  termindato?: string;\n  antallBarn?: number;\n  begrunnelse?: string;\n};\n\ninterface OwnProps {\n  soknad: Soknad;\n  gjeldendeFamiliehendelse: FamilieHendelse;\n  readOnly: boolean;\n  submittable: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (soknad: Soknad, familiehendelse: FamilieHendelse, aksjonspunkt: Aksjonspunkt) => FormValues;\n  transformValues: (values: FormValues) => BekreftTerminbekreftelseAp;\n}\n\n/**\n * TermindatoFaktaForm\n *\n * Setter opp aksjonspunktet for avklaring av termindato (Fødselsvilkåret).\n */\nexport const TermindatoFaktaForm: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  soknad,\n  gjeldendeFamiliehendelse,\n  submittable,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n  const editedStatus = isFieldEdited(soknad, gjeldendeFamiliehendelse);\n\n  const { watch } = useFormContext<FormValues>();\n\n  const termindato = watch('termindato');\n  const utstedtdato = watch('utstedtdato');\n  const begrunnelse = watch('begrunnelse');\n  const isForTidligTerminbekreftelse = erTerminbekreftelseUtstedtForTidlig(utstedtdato, termindato);\n\n  const { avklartBarn } = gjeldendeFamiliehendelse;\n  const fodselsdatoTps = avklartBarn && avklartBarn.length > 0 ? avklartBarn[0].fodselsdato : undefined;\n  const antallBarnTps = avklartBarn ? avklartBarn.length : 0;\n  const isOverridden = gjeldendeFamiliehendelse.erOverstyrt || false;\n\n  return (\n    <>\n      <FaktaGruppe\n        title={intl.formatMessage({ id: 'TermindatoFaktaForm.ApplicationInformation' })}\n        merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.TERMINBEKREFTELSE]}\n      >\n        <HStack gap=\"4\">\n          <Datepicker\n            name=\"utstedtdato\"\n            label={intl.formatMessage({ id: 'TermindatoFaktaForm.UtstedtDato' })}\n            validate={[required, hasValidDate]}\n            isReadOnly={readOnly}\n            isEdited={editedStatus.utstedtdato}\n          />\n          <Datepicker\n            name=\"termindato\"\n            label={intl.formatMessage({ id: 'TermindatoFaktaForm.Termindato' })}\n            validate={[required, hasValidDate]}\n            isReadOnly={readOnly}\n            isEdited={editedStatus.termindato}\n          />\n          <InputField\n            name=\"antallBarn\"\n            label={intl.formatMessage({ id: 'TermindatoFaktaForm.AntallBarn' })}\n            parse={value => {\n              const parsedValue = parseInt(value.toString(), 10);\n              return Number.isNaN(parsedValue) ? value : parsedValue;\n            }}\n            validate={[required, hasValidInteger, minValue1, maxValue9]}\n            readOnly={readOnly}\n            className={styles.bredde}\n            isEdited={editedStatus.antallBarn}\n          />\n        </HStack>\n      </FaktaGruppe>\n      {fodselsdatoTps && !isOverridden && (\n        <FaktaGruppe title={intl.formatMessage({ id: 'TermindatoFaktaForm.OpplysningerTPS' })}>\n          <HStack gap=\"10\">\n            <div>\n              <Label size=\"small\">\n                <FormattedMessage id=\"TermindatoFaktaForm.FodselsdatoTps\" />\n              </Label>\n              <VerticalSpacer fourPx />\n              <BodyShort size=\"small\">\n                <DateLabel dateString={fodselsdatoTps} />\n              </BodyShort>\n            </div>\n            <div>\n              <Label size=\"small\">\n                <FormattedMessage id=\"TermindatoFaktaForm.AntallBarnTps\" />\n              </Label>\n              <VerticalSpacer fourPx />\n              <BodyShort size=\"small\">{antallBarnTps}</BodyShort>\n            </div>\n          </HStack>\n        </FaktaGruppe>\n      )}\n      <VerticalSpacer sixteenPx />\n      <FaktaBegrunnelseTextFieldNew isSubmittable={submittable} isReadOnly={readOnly} hasBegrunnelse={!!begrunnelse} />\n      {isForTidligTerminbekreftelse && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"warning\" className={styles.marginBottom}>\n            <FormattedMessage id=\"TermindatoFaktaForm.AdvarselForTidligUtstedtdato\" />\n          </Alert>\n        </>\n      )}\n    </>\n  );\n};\n\nTermindatoFaktaForm.buildInitialValues = (soknad, familiehendelse, aksjonspunkt): FormValues => {\n  const antallBarn = soknad.antallBarn ? soknad.antallBarn : NaN;\n  return {\n    utstedtdato: familiehendelse.utstedtdato ? familiehendelse.utstedtdato : soknad.utstedtdato,\n    termindato: familiehendelse.termindato ? familiehendelse.termindato : soknad.termindato,\n    antallBarn: familiehendelse.antallBarnTermin ? familiehendelse.antallBarnTermin : antallBarn,\n    ...FaktaBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkt),\n  };\n};\n\nTermindatoFaktaForm.transformValues = (values: FormValues): BekreftTerminbekreftelseAp => ({\n  kode: AksjonspunktCode.TERMINBEKREFTELSE,\n  utstedtdato: values.utstedtdato!,\n  termindato: values.termindato!,\n  antallBarn: values.antallBarn!,\n  ...FaktaBegrunnelseTextFieldNew.transformValues(values),\n});\n\nexport default TermindatoFaktaForm;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { hasValidDate, required, dateBeforeOrEqualToToday } from '@navikt/ft-form-validators';\nimport { AvklartBarn } from '@navikt/fp-types';\nimport { Datepicker, PeriodFieldArray } from '@navikt/ft-form-hooks';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport { HStack } from '@navikt/ds-react';\n\nconst FIELD_ARRAY_NAME = 'avklartBarn';\n\nexport const defaultAntallBarn = {\n  fodselsdato: undefined,\n  dodsdato: undefined,\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\nexport const AvklartBarnFieldArray: FunctionComponent<OwnProps> = ({ readOnly }) => {\n  const intl = useIntl();\n\n  const { control, watch } = useFormContext<{ avklartBarn: AvklartBarn[] }>();\n  const { fields, remove, append } = useFieldArray({\n    control,\n    name: FIELD_ARRAY_NAME,\n  });\n\n  const avklartBarn = watch('avklartBarn');\n\n  return (\n    <PeriodFieldArray\n      fields={fields}\n      emptyPeriodTemplate={defaultAntallBarn}\n      readOnly={readOnly}\n      bodyText={intl.formatMessage({ id: 'AvklartBarnFieldArray.LeggTilBarn' })}\n      shouldShowAddButton={avklartBarn.length < 9}\n      remove={remove}\n      append={append}\n    >\n      {(field, index, getRemoveButton = () => '-') => (\n        <React.Fragment key={field.id}>\n          <VerticalSpacer sixteenPx />\n          <HStack gap=\"4\" align=\"end\">\n            <Datepicker\n              name={`${FIELD_ARRAY_NAME}.${index}.fodselsdato`}\n              label={intl.formatMessage({ id: 'AvklartBarnFieldArray.Title' })}\n              validate={[hasValidDate, required, dateBeforeOrEqualToToday]}\n              isReadOnly={readOnly}\n            />\n            <Datepicker\n              name={`${FIELD_ARRAY_NAME}.${index}.dodsdato`}\n              label={intl.formatMessage({ id: 'AvklartBarnFieldArray.Dodsdato' })}\n              validate={[hasValidDate, dateBeforeOrEqualToToday]}\n              isReadOnly={readOnly}\n            />\n            {!readOnly && getRemoveButton()}\n          </HStack>\n        </React.Fragment>\n      )}\n    </PeriodFieldArray>\n  );\n};\n\nexport default AvklartBarnFieldArray;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\n\nimport { FaktaBegrunnelseTextFieldNew, isFieldEdited } from '@navikt/fp-fakta-felles';\nimport { ArrowBox, VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { FodselSammenligningIndex } from '@navikt/fp-prosess-fakta-fodsel-sammenligning';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { required } from '@navikt/ft-form-validators';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, FamilieHendelse, FamilieHendelseSamling, Soknad, AvklartBarn } from '@navikt/fp-types';\nimport { SjekkManglendeFodselAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { useFormContext } from 'react-hook-form';\nimport AvklartBarnFieldArray from './AvklartBarnFieldArray';\n\nimport styles from './SjekkFodselDokForm.module.css';\n\nexport type FormValues = {\n  fodselsdato?: string;\n  dokumentasjonForeligger?: boolean;\n  brukAntallBarnITps?: boolean;\n  avklartBarn?: AvklartBarn[];\n  begrunnelse?: string;\n  antallBarnFodt?: number;\n};\n\ninterface OwnProps {\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  avklartBarn: AvklartBarn[];\n  readOnly: boolean;\n  submittable: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  behandlingType: string;\n  soknadOriginalBehandling?: Soknad;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (soknad: Soknad, familiehendelse: FamilieHendelse, aksjonspunkt: Aksjonspunkt) => FormValues;\n  transformValues: (values: FormValues, avklartBarn: AvklartBarn[]) => SjekkManglendeFodselAp;\n}\n\n/**\n * FodselInfoPanel\n *\n * Setter opp aksjonspunktet for avklaring av manglende fødsel (Fødselsvilkåret).\n */\nexport const SjekkFodselDokForm: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  submittable,\n  behandlingType,\n  soknad,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n  alleMerknaderFraBeslutter,\n  familiehendelse,\n}) => {\n  const intl = useIntl();\n  const { watch } = useFormContext<FormValues>();\n  const { gjeldende, register } = familiehendelse;\n\n  const dokumentasjonForeligger = watch('dokumentasjonForeligger') || false;\n  const begrunnelse = watch('begrunnelse') || false;\n\n  const dokumentasjonForeliggerIsEdited = isFieldEdited(soknad, gjeldende).dokumentasjonForeligger;\n  const { termindato, vedtaksDatoSomSvangerskapsuke } = gjeldende;\n\n  return (\n    <>\n      <FodselSammenligningIndex\n        behandlingsTypeKode={behandlingType}\n        avklartBarn={register?.avklartBarn}\n        termindato={termindato}\n        vedtaksDatoSomSvangerskapsuke={vedtaksDatoSomSvangerskapsuke}\n        soknad={soknad}\n        soknadOriginalBehandling={soknadOriginalBehandling}\n        familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n      />\n      <FaktaGruppe\n        title={intl.formatMessage({ id: 'SjekkFodselDokForm.DokumentasjonAvFodsel' })}\n        merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.SJEKK_MANGLENDE_FODSEL]}\n      >\n        <RadioGroupPanel\n          name=\"dokumentasjonForeligger\"\n          isEdited={dokumentasjonForeliggerIsEdited}\n          hideLegend\n          validate={[required]}\n          isReadOnly={readOnly}\n          isHorizontal\n          isTrueOrFalseSelection\n          radios={[\n            {\n              label: <FormattedMessage id=\"SjekkFodselDokForm.DokumentasjonForeligger\" />,\n              value: 'true',\n            },\n            {\n              label: <FormattedMessage id=\"SjekkFodselDokForm.DokumentasjonForeliggerIkke\" />,\n              value: 'false',\n            },\n          ]}\n        />\n        {dokumentasjonForeligger && (\n          <div className={styles.clearfix}>\n            <VerticalSpacer eightPx />\n            <ArrowBox>\n              <Label size=\"small\">\n                <FormattedMessage id=\"SjekkFodselDokForm.FyllInnDokumenterteOpplysninger\" />\n              </Label>\n              <VerticalSpacer eightPx />\n              <AvklartBarnFieldArray readOnly={readOnly} />\n            </ArrowBox>\n          </div>\n        )}\n      </FaktaGruppe>\n      <VerticalSpacer sixteenPx />\n      <FaktaBegrunnelseTextFieldNew isSubmittable={submittable} isReadOnly={readOnly} hasBegrunnelse={!!begrunnelse} />\n    </>\n  );\n};\n\nconst lagBarn = (antallBarnFraSoknad: number): AvklartBarn[] => {\n  let antallBarn = antallBarnFraSoknad;\n  if (antallBarn === 0 || !antallBarn) {\n    antallBarn = 1;\n  }\n  const childrenArray: AvklartBarn[] = [];\n  while (antallBarn > 0) {\n    // @ts-ignore Fiks\n    childrenArray.push({ fodselsdato: undefined, dodsdato: undefined });\n    antallBarn -= 1;\n  }\n  return childrenArray;\n};\n\nconst ryddOppIAvklarteBarn = (avklartBarn: AvklartBarn[]): AvklartBarn[] =>\n  avklartBarn.map(ab => ({\n    fodselsdato: ab.fodselsdato,\n    dodsdato: ab.dodsdato === '' ? undefined : ab.dodsdato,\n  }));\n\nSjekkFodselDokForm.buildInitialValues = (soknad, familiehendelse, aksjonspunkt): FormValues => ({\n  dokumentasjonForeligger:\n    familiehendelse.dokumentasjonForeligger !== null ? familiehendelse.dokumentasjonForeligger : undefined,\n  brukAntallBarnITps: familiehendelse.brukAntallBarnFraTps !== null ? familiehendelse.brukAntallBarnFraTps : undefined,\n  avklartBarn:\n    familiehendelse.avklartBarn && familiehendelse.avklartBarn.length > 0\n      ? familiehendelse.avklartBarn\n      : lagBarn(soknad.antallBarn || 0),\n  ...FaktaBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkt),\n});\n\nSjekkFodselDokForm.transformValues = (values: FormValues, avklartBarn: AvklartBarn[]): SjekkManglendeFodselAp => ({\n  kode: AksjonspunktCode.SJEKK_MANGLENDE_FODSEL,\n  dokumentasjonForeligger: values.dokumentasjonForeligger!,\n  uidentifiserteBarn: ryddOppIAvklarteBarn(values.avklartBarn!),\n  brukAntallBarnITps: avklartBarn && !!avklartBarn.length ? values.brukAntallBarnITps! : false,\n  ...FaktaBegrunnelseTextFieldNew.transformValues(values),\n});\n\nexport default SjekkFodselDokForm;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { AksjonspunktHelpTextTemp, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { AksjonspunktCode, hasAksjonspunkt } from '@navikt/fp-kodeverk';\nimport { FodselSammenligningIndex } from '@navikt/fp-prosess-fakta-fodsel-sammenligning';\nimport { Aksjonspunkt, FamilieHendelseSamling, FamilieHendelse, Soknad, AvklartBarn } from '@navikt/fp-types';\nimport { BekreftTerminbekreftelseAp, SjekkManglendeFodselAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport TermindatoFaktaForm, { FormValues as TermindatoFormValues } from './TermindatoFaktaForm';\nimport SjekkFodselDokForm, { FormValues as SjekkFodselDokFormValues } from './SjekkFodselDokForm';\n\nconst { TERMINBEKREFTELSE, SJEKK_MANGLENDE_FODSEL } = AksjonspunktCode;\n\nconst getHelpTexts = (aksjonspunkter: Aksjonspunkt[]): ReactElement[] => {\n  const helpTexts: ReactElement[] = [];\n  if (hasAksjonspunkt(TERMINBEKREFTELSE, aksjonspunkter)) {\n    helpTexts.push(\n      <FormattedMessage key=\"KontrollerMotTerminbekreftelsen\" id=\"FodselInfoPanel.KontrollerMotTerminbekreftelsen\" />,\n    );\n  }\n  if (hasAksjonspunkt(SJEKK_MANGLENDE_FODSEL, aksjonspunkter)) {\n    helpTexts.push(\n      <FormattedMessage\n        key=\"KontrollerMotFodselsdokumentasjon\"\n        id=\"FodselInfoPanel.KontrollerMotFodselsdokumentasjon\"\n      />,\n    );\n  }\n  return helpTexts;\n};\n\ntype FormValues = TermindatoFormValues & SjekkFodselDokFormValues;\n\nconst buildInitialValues = (\n  soknad: Soknad,\n  familieHendelse: FamilieHendelseSamling,\n  terminbekreftelseAp?: Aksjonspunkt,\n  manglendeFødselAp?: Aksjonspunkt,\n) => ({\n  ...(terminbekreftelseAp\n    ? TermindatoFaktaForm.buildInitialValues(soknad, familieHendelse.gjeldende, terminbekreftelseAp)\n    : {}),\n  ...(manglendeFødselAp\n    ? SjekkFodselDokForm.buildInitialValues(soknad, familieHendelse.gjeldende, manglendeFødselAp)\n    : {}),\n});\n\ntype AksjonspunktData = Array<BekreftTerminbekreftelseAp | SjekkManglendeFodselAp>;\n\nconst transformValues = (\n  values: FormValues,\n  avklartBarn: AvklartBarn[],\n  terminbekreftelseAp?: Aksjonspunkt,\n  manglendeFødselAp?: Aksjonspunkt,\n): AksjonspunktData => {\n  const aksjonspunkterSomSkalBekreftes = [];\n  if (terminbekreftelseAp) {\n    aksjonspunkterSomSkalBekreftes.push(TermindatoFaktaForm.transformValues(values));\n  }\n  if (manglendeFødselAp) {\n    aksjonspunkterSomSkalBekreftes.push(SjekkFodselDokForm.transformValues(values, avklartBarn));\n  }\n  return aksjonspunkterSomSkalBekreftes;\n};\n\nconst EMPTY_ARRAY = [] as AvklartBarn[];\n\ninterface OwnProps {\n  familiehendelse: FamilieHendelseSamling;\n  aksjonspunkter: Aksjonspunkt[];\n  hasOpenAksjonspunkter: boolean;\n  submittable: boolean;\n  readOnly: boolean;\n  soknad: Soknad;\n  submitCallback: (data: AksjonspunktData) => Promise<void>;\n  soknadOriginalBehandling?: Soknad;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  behandlingType: string;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * FodselInfoPanel\n *\n * Har ansvar for å sette opp formen for faktapenelet til Fødselsvilkåret.\n */\nconst FodselInfoPanel: FunctionComponent<OwnProps> = ({\n  aksjonspunkter,\n  hasOpenAksjonspunkter,\n  submittable,\n  readOnly,\n  soknad,\n  submitCallback,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n  familiehendelse,\n  alleMerknaderFraBeslutter,\n  behandlingType,\n  formData,\n  setFormData,\n}) => {\n  const avklartBarn = familiehendelse?.register?.avklartBarn || EMPTY_ARRAY;\n  const termindato = familiehendelse?.gjeldende?.termindato;\n  const vedtaksDatoSomSvangerskapsuke = familiehendelse?.gjeldende?.vedtaksDatoSomSvangerskapsuke;\n\n  const terminbekreftelseAp = aksjonspunkter.find(ap => ap.definisjon === TERMINBEKREFTELSE);\n  const manglendeFødselAp = aksjonspunkter.find(ap => ap.definisjon === SJEKK_MANGLENDE_FODSEL);\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(soknad, familiehendelse, terminbekreftelseAp, manglendeFødselAp),\n  });\n\n  return (\n    <>\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={hasOpenAksjonspunkter}>\n        {getHelpTexts(aksjonspunkter)}\n      </AksjonspunktHelpTextTemp>\n      <VerticalSpacer sixteenPx />\n      <Form\n        formMethods={formMethods}\n        onSubmit={values =>\n          submitCallback(transformValues(values, avklartBarn, terminbekreftelseAp, manglendeFødselAp))\n        }\n        setDataOnUnmount={setFormData}\n      >\n        {hasAksjonspunkt(TERMINBEKREFTELSE, aksjonspunkter) && (\n          <TermindatoFaktaForm\n            readOnly={readOnly}\n            submittable={submittable}\n            alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n            soknad={soknad}\n            gjeldendeFamiliehendelse={familiehendelse.gjeldende}\n          />\n        )}\n        {hasAksjonspunkt(SJEKK_MANGLENDE_FODSEL, aksjonspunkter) && (\n          <SjekkFodselDokForm\n            behandlingType={behandlingType}\n            readOnly={readOnly}\n            submittable={submittable}\n            soknadOriginalBehandling={soknadOriginalBehandling}\n            familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n            alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n            soknad={soknad}\n            avklartBarn={avklartBarn}\n            familiehendelse={familiehendelse}\n          />\n        )}\n        {aksjonspunkter.length !== 0 && !readOnly && (\n          <>\n            <VerticalSpacer twentyPx />\n            <FaktaSubmitButtonNew\n              isSubmittable={submittable}\n              isReadOnly={readOnly}\n              isSubmitting={formMethods.formState.isSubmitting}\n              isDirty={formMethods.formState.isDirty}\n            />\n          </>\n        )}\n        {aksjonspunkter.length === 0 && (\n          <FodselSammenligningIndex\n            behandlingsTypeKode={behandlingType}\n            avklartBarn={avklartBarn}\n            termindato={termindato}\n            vedtaksDatoSomSvangerskapsuke={vedtaksDatoSomSvangerskapsuke}\n            soknad={soknad}\n            soknadOriginalBehandling={soknadOriginalBehandling}\n            familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n          />\n        )}\n      </Form>\n    </>\n  );\n};\n\nexport default FodselInfoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardFaktaPanelProps, FamilieHendelse, FamilieHendelseSamling, Soknad } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport FodselInfoPanel from './components/FodselInfoPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  soknad: Soknad;\n  familiehendelse: FamilieHendelseSamling;\n  soknadOriginalBehandling?: Soknad;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n}\n\nconst FodselFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  behandling,\n  soknad,\n  familiehendelse,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n  aksjonspunkter,\n  harApneAksjonspunkter,\n  submittable,\n  alleMerknaderFraBeslutter,\n  submitCallback,\n  readOnly,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <FodselInfoPanel\n      behandlingType={behandling.type}\n      soknad={soknad}\n      familiehendelse={familiehendelse}\n      soknadOriginalBehandling={soknadOriginalBehandling}\n      familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      aksjonspunkter={aksjonspunkter}\n      hasOpenAksjonspunkter={harApneAksjonspunkter}\n      submittable={submittable}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default FodselFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { FamilieHendelse, FamilieHendelseSamling } from '@navikt/ft-types';\n\nimport { AksjonspunktCode, fodselsvilkarene } from '@navikt/fp-kodeverk';\nimport { FodselFaktaIndex } from '@navikt/fp-fakta-fodsel';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Soknad } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.TERMINBEKREFTELSE, AksjonspunktCode.SJEKK_MANGLENDE_FODSEL];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.FAMILIEHENDELSE,\n  BehandlingApiKeys.FAMILIEHENDELSE_ORIGINAL_BEHANDLING,\n  BehandlingApiKeys.SOKNAD,\n  BehandlingApiKeys.SOKNAD_ORIGINAL_BEHANDLING,\n];\ntype EndepunktPanelData = {\n  familiehendelse: FamilieHendelseSamling;\n  familiehendelseOriginalBehandling?: FamilieHendelse;\n  soknad: Soknad;\n  soknadOriginalBehandling?: Soknad;\n};\n\n/**\n * FodselvilkaretFaktaInitPanel\n */\nconst FodselvilkaretFaktaInitPanel: FunctionComponent<FaktaPanelInitProps> = props => {\n  const {\n    behandling: { vilkår },\n  } = props;\n  return (\n    <FaktaDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      faktaPanelKode={FaktaPanelCode.FODSELSVILKARET}\n      faktaPanelMenyTekst={useIntl().formatMessage({ id: 'FodselInfoPanel.Fodsel' })}\n      skalPanelVisesIMeny={() => !!vilkår && vilkår.some(v => fodselsvilkarene.some(fv => fv === v.vilkarType))}\n      renderPanel={data => <FodselFaktaIndex {...data} />}\n    />\n  );\n};\n\nexport default FodselvilkaretFaktaInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Detail } from '@navikt/ds-react';\n\nimport { AksjonspunktCode, KodeverkType, getKodeverknavnFn } from '@navikt/fp-kodeverk';\nimport { required } from '@navikt/ft-form-validators';\nimport { VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { FamilieHendelse, AlleKodeverk } from '@navikt/fp-types';\nimport { BekreftMannAdoptererAksjonspunktAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './mannAdoptererAleneFaktaForm.module.css';\n\ninterface OwnProps {\n  readOnly: boolean;\n  farSokerType?: string;\n  alleKodeverk: AlleKodeverk;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  mannAdoptererAlene?: boolean;\n}\n\nexport type FormValues = {\n  mannAdoptererAlene?: boolean;\n};\n\ninterface StaticFunctions {\n  buildInitialValues: (familiehendelse: FamilieHendelse) => FormValues;\n  transformValues: (mannAdoptererAlene: boolean) => BekreftMannAdoptererAksjonspunktAp;\n}\n\n/**\n * MannAdoptererAleneFaktaForm\n *\n * Presentasjonskomponent. Setter opp aksjonspunktet for vurdering av om mann adopterer alene.\n */\nconst MannAdoptererAleneFaktaForm: FunctionComponent<OwnProps> & StaticFunctions = ({\n  farSokerType,\n  readOnly,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  mannAdoptererAlene,\n}) => {\n  const intl = useIntl();\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'MannAdoptererAleneFaktaForm.ApplicationInformation' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE]}\n    >\n      <div className={styles.container}>\n        <Detail>\n          <FormattedMessage id=\"MannAdoptererAleneFaktaForm.Opplysninger\" />\n        </Detail>\n        <VerticalSpacer fourPx />\n        {farSokerType && (\n          <BodyShort size=\"small\">\n            {getKodeverknavnFn(alleKodeverk)(farSokerType, KodeverkType.FAR_SOEKER_TYPE)}\n          </BodyShort>\n        )}\n        <VerticalSpacer sixteenPx />\n        <hr className={styles.hr} />\n        <RadioGroupPanel\n          name=\"mannAdoptererAlene\"\n          hideLegend\n          isEdited={mannAdoptererAlene}\n          validate={[required]}\n          isReadOnly={readOnly}\n          isHorizontal\n          isTrueOrFalseSelection\n          radios={[\n            {\n              label: intl.formatMessage({ id: 'MannAdoptererAleneFaktaForm.AdoptererAlene' }),\n              value: 'true',\n            },\n            {\n              label: intl.formatMessage({ id: 'MannAdoptererAleneFaktaForm.AdoptererIkkeAlene' }),\n              value: 'false',\n            },\n          ]}\n        />\n      </div>\n    </FaktaGruppe>\n  );\n};\n\nMannAdoptererAleneFaktaForm.buildInitialValues = (familiehendelse: FamilieHendelse): FormValues => ({\n  mannAdoptererAlene: familiehendelse ? familiehendelse.mannAdoptererAlene : undefined,\n});\n\nMannAdoptererAleneFaktaForm.transformValues = (mannAdoptererAlene: boolean): BekreftMannAdoptererAksjonspunktAp => ({\n  kode: AksjonspunktCode.OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE,\n  mannAdoptererAlene,\n});\n\nexport default MannAdoptererAleneFaktaForm;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { required } from '@navikt/ft-form-validators';\nimport { FamilieHendelse } from '@navikt/fp-types';\nimport { BekreftEktefelleAksjonspunktAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './ektefelleFaktaForm.module.css';\n\ninterface OwnProps {\n  readOnly: boolean;\n  ektefellesBarnIsEdited?: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\nexport type FormValues = {\n  ektefellesBarn?: boolean;\n};\n\ninterface StaticFunctions {\n  buildInitialValues: (familiehendelse: FamilieHendelse) => FormValues;\n  transformValues: (ektefellesBarn: boolean) => BekreftEktefelleAksjonspunktAp;\n}\n\n/**\n * EktefelleFaktaForm\n *\n * Setter opp aksjonspunktet for vurdering av om det er ektefelles barn som adopteres.\n */\nconst EktefelleFaktaForm: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  ektefellesBarnIsEdited,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'EktefelleFaktaForm.ApplicationInformation' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.OM_ADOPSJON_GJELDER_EKTEFELLES_BARN]}\n    >\n      <div className={styles.container}>\n        <BodyShort size=\"small\">\n          <FormattedMessage id=\"EktefelleFaktaForm.EktefellesBarn\" />\n        </BodyShort>\n        <VerticalSpacer twentyPx />\n        <hr className={styles.hr} />\n        <RadioGroupPanel\n          name=\"ektefellesBarn\"\n          hideLegend\n          validate={[required]}\n          isReadOnly={readOnly}\n          isEdited={ektefellesBarnIsEdited}\n          isHorizontal\n          isTrueOrFalseSelection\n          radios={[\n            {\n              label: intl.formatMessage({ id: 'EktefelleFaktaForm.ErIkkeValg' }),\n              value: 'false',\n            },\n            {\n              label: intl.formatMessage({ id: 'EktefelleFaktaForm.ErValg' }),\n              value: 'true',\n            },\n          ]}\n        />\n      </div>\n    </FaktaGruppe>\n  );\n};\n\nEktefelleFaktaForm.defaultProps = {\n  ektefellesBarnIsEdited: false,\n};\n\nEktefelleFaktaForm.buildInitialValues = (familiehendelse: FamilieHendelse): FormValues => ({\n  ektefellesBarn:\n    familiehendelse && familiehendelse.ektefellesBarn !== null ? familiehendelse.ektefellesBarn : undefined,\n});\n\nEktefelleFaktaForm.transformValues = (ektefellesBarn: boolean): BekreftEktefelleAksjonspunktAp => ({\n  kode: AksjonspunktCode.OM_ADOPSJON_GJELDER_EKTEFELLES_BARN,\n  ektefellesBarn,\n});\n\nexport default EktefelleFaktaForm;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport moment from 'moment';\nimport { Label, BodyShort, VStack, HStack } from '@navikt/ds-react';\nimport { ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\n\nimport { FieldEditedInfo } from '@navikt/fp-fakta-felles';\nimport { Datepicker } from '@navikt/ft-form-hooks';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\nimport { VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { BekreftDokumentertDatoAksjonspunktAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { useFormContext } from 'react-hook-form';\nimport styles from './dokumentasjonFaktaForm.module.css';\n\nconst findAntallBarnUnder15 = (\n  fodselsdatoer: Record<number, string>,\n  omsorgsovertakelseDato?: string,\n): number | string => {\n  const nrOfNotNullFodselsdatoer = Object.keys(fodselsdatoer).filter(id => fodselsdatoer[parseInt(id, 10)]).length;\n  if (nrOfNotNullFodselsdatoer === 0 || !omsorgsovertakelseDato) {\n    return '-';\n  }\n  const omsorgsdato = moment(omsorgsovertakelseDato).subtract(15, 'years');\n  return Object.values(fodselsdatoer)\n    .map(fodselsdato => (moment(fodselsdato).isAfter(omsorgsdato) ? 1 : 0))\n    .reduce<number>((a, b) => a + b, 0);\n};\n\nconst isAgeAbove15 = (fodselsdatoer: Record<number, string>, id: number, omsorgsovertakelseDato?: string): boolean =>\n  !!fodselsdatoer[id] &&\n  !!omsorgsovertakelseDato &&\n  moment(fodselsdatoer[id]).isSameOrBefore(moment(omsorgsovertakelseDato).subtract(15, 'years'));\n\ninterface OwnProps {\n  readOnly: boolean;\n  erForeldrepengerFagsak: boolean;\n  hasEktefellesBarnAksjonspunkt: boolean;\n  editedStatus: FieldEditedInfo;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\nexport type FormValues = {\n  omsorgsovertakelseDato?: string;\n  barnetsAnkomstTilNorgeDato?: string;\n  fodselsdatoer?: Record<number, string>;\n};\n\ninterface StaticFunctions {\n  buildInitialValues: (soknad: Soknad, familiehendelse: FamilieHendelse) => FormValues;\n  transformValues: (values: FormValues) => BekreftDokumentertDatoAksjonspunktAp;\n}\n\n/**\n * DokumentasjonFaktaForm\n *\n * Presentasjonskomponent. Setter opp aksjonspunktet for avklaring av adopsjonsopplysninger i søknaden.\n */\nconst DokumentasjonFaktaForm: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  editedStatus,\n  erForeldrepengerFagsak,\n  hasEktefellesBarnAksjonspunkt,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n\n  const { watch } = useFormContext<FormValues>();\n  const fodselsdatoer = watch('fodselsdatoer') || {};\n  const omsorgsovertakelseDato = watch('omsorgsovertakelseDato');\n  const barnetsAnkomstTilNorgeDato = watch('barnetsAnkomstTilNorgeDato');\n\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'DokumentasjonFaktaForm.ApplicationInformation' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.ADOPSJONSDOKUMENTAJON]}\n    >\n      <div className={styles.container}>\n        <Datepicker\n          name=\"omsorgsovertakelseDato\"\n          label={\n            erForeldrepengerFagsak && hasEktefellesBarnAksjonspunkt\n              ? intl.formatMessage({ id: 'DokumentasjonFaktaForm.Stebarnsadopsjon' })\n              : intl.formatMessage({ id: 'DokumentasjonFaktaForm.Omsorgsovertakelsesdato' })\n          }\n          validate={[required, hasValidDate]}\n          isReadOnly={readOnly}\n          isEdited={editedStatus.omsorgsovertakelseDato}\n        />\n        {erForeldrepengerFagsak && barnetsAnkomstTilNorgeDato && (\n          <>\n            <VerticalSpacer sixteenPx />\n            <Datepicker\n              name=\"barnetsAnkomstTilNorgeDato\"\n              label={intl.formatMessage({ id: 'DokumentasjonFaktaForm.DatoForBarnetsAnkomstTilNorge' })}\n              validate={[hasValidDate]}\n              isReadOnly={readOnly}\n              isEdited={editedStatus.barnetsAnkomstTilNorgeDato}\n            />\n          </>\n        )}\n        <VStack>\n          {Object.keys(fodselsdatoer).map((id, i) => (\n            <div key={`div-${AksjonspunktCode.ADOPSJONSDOKUMENTAJON}-${id}`}>\n              <VerticalSpacer sixteenPx />\n              <HStack gap=\"4\">\n                <Datepicker\n                  name={`fodselsdatoer.${id}`}\n                  label={intl.formatMessage(\n                    {\n                      id: 'DokumentasjonFaktaForm.Fodselsdato',\n                    },\n                    { number: i + 1 },\n                  )}\n                  validate={[required, hasValidDate]}\n                  isReadOnly={readOnly}\n                  isEdited={editedStatus.adopsjonFodelsedatoer ? editedStatus.adopsjonFodelsedatoer[id] : false}\n                />\n                {!readOnly && isAgeAbove15(fodselsdatoer, parseInt(id, 10), omsorgsovertakelseDato) && (\n                  <ExclamationmarkTriangleFillIcon\n                    className={styles.image}\n                    title={intl.formatMessage({ id: 'DokumentasjonFaktaForm.BarnErOver15Ar' })}\n                  />\n                )}\n              </HStack>\n            </div>\n          ))}\n        </VStack>\n        <VerticalSpacer twentyPx />\n        <Label size=\"small\">{intl.formatMessage({ id: 'DokumentasjonFaktaForm.AntallBarnSomFyllerVilkaret' })}</Label>\n        <BodyShort size=\"small\">{findAntallBarnUnder15(fodselsdatoer, omsorgsovertakelseDato)}</BodyShort>\n      </div>\n    </FaktaGruppe>\n  );\n};\n\nDokumentasjonFaktaForm.buildInitialValues = (soknad: Soknad, familiehendelse: FamilieHendelse): FormValues => ({\n  omsorgsovertakelseDato:\n    familiehendelse && familiehendelse.omsorgsovertakelseDato\n      ? familiehendelse.omsorgsovertakelseDato\n      : soknad.omsorgsovertakelseDato,\n  barnetsAnkomstTilNorgeDato:\n    familiehendelse && familiehendelse.ankomstNorge ? familiehendelse.ankomstNorge : soknad.barnetsAnkomstTilNorgeDato,\n  fodselsdatoer:\n    familiehendelse && familiehendelse.adopsjonFodelsedatoer\n      ? familiehendelse.adopsjonFodelsedatoer\n      : soknad.adopsjonFodelsedatoer,\n});\n\nDokumentasjonFaktaForm.transformValues = (values: FormValues): BekreftDokumentertDatoAksjonspunktAp => ({\n  kode: AksjonspunktCode.ADOPSJONSDOKUMENTAJON,\n  // Desse to variablane skal alltid ha verdi - fix i typescript og fjern ''\n  omsorgsovertakelseDato: values.omsorgsovertakelseDato || '',\n  fodselsdatoer: values.fodselsdatoer || '',\n});\n\nexport default DokumentasjonFaktaForm;\n","import React, { FunctionComponent, ReactElement, useCallback, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\n\nimport {\n  FaktaBegrunnelseTextFieldNew,\n  FaktaSubmitButtonNew,\n  isFieldEdited,\n  FieldEditedInfo,\n  FaktaBegrunnelseFormValues,\n} from '@navikt/fp-fakta-felles';\nimport { Aksjonspunkt, FamilieHendelse, AlleKodeverk, Soknad } from '@navikt/fp-types';\nimport { VerticalSpacer, AksjonspunktHelpTextTemp } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, hasAksjonspunkt } from '@navikt/fp-kodeverk';\nimport { Form } from '@navikt/ft-form-hooks';\nimport {\n  BekreftDokumentertDatoAksjonspunktAp,\n  BekreftEktefelleAksjonspunktAp,\n  BekreftMannAdoptererAksjonspunktAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { HStack } from '@navikt/ds-react';\nimport MannAdoptererAleneFaktaForm, { FormValues as MannAdoptererFormValues } from './MannAdoptererAleneFaktaForm';\nimport EktefelleFaktaForm, { FormValues as EktefelleFormValues } from './EktefelleFaktaForm';\nimport DokumentasjonFaktaForm, { FormValues as DokFormValues } from './DokumentasjonFaktaForm';\n\nimport styles from './adopsjonInfoPanel.module.css';\n\nconst { ADOPSJONSDOKUMENTAJON, OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE, OM_ADOPSJON_GJELDER_EKTEFELLES_BARN } =\n  AksjonspunktCode;\nconst adopsjonAksjonspunkter = [\n  OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE,\n  ADOPSJONSDOKUMENTAJON,\n  OM_ADOPSJON_GJELDER_EKTEFELLES_BARN,\n];\n\nconst getHelpTexts = (aksjonspunkter: Aksjonspunkt[]): ReactElement[] => {\n  const helpTexts = [<FormattedMessage key=\"KontrollerMotDok\" id=\"AdopsjonInfoPanel.KontrollerMotDok\" />];\n\n  if (hasAksjonspunkt(OM_ADOPSJON_GJELDER_EKTEFELLES_BARN, aksjonspunkter)) {\n    helpTexts.push(<FormattedMessage key=\"VurderOmEktefellesBarn\" id=\"AdopsjonInfoPanel.VurderOmEktefellesBarn\" />);\n  }\n  if (hasAksjonspunkt(OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE, aksjonspunkter)) {\n    helpTexts.push(\n      <FormattedMessage key=\"VurderOmMannAdoptererAlene\" id=\"AdopsjonInfoPanel.VurderOmMannAdoptererAlene\" />,\n    );\n  }\n  return helpTexts;\n};\n\nconst buildInitialValues = (\n  soknad: Soknad,\n  familiehendelse: FamilieHendelse,\n  allAksjonspunkter: Aksjonspunkt[],\n): FormValues => {\n  const aksjonspunkter = allAksjonspunkter.filter(ap => adopsjonAksjonspunkter.some(kode => kode === ap.definisjon));\n\n  let mannAdoptererAleneValues = {};\n  if (hasAksjonspunkt(OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE, aksjonspunkter)) {\n    mannAdoptererAleneValues = MannAdoptererAleneFaktaForm.buildInitialValues(familiehendelse);\n  }\n  let omAdopsjonGjelderEktefellesBarn = {};\n  if (hasAksjonspunkt(OM_ADOPSJON_GJELDER_EKTEFELLES_BARN, aksjonspunkter)) {\n    omAdopsjonGjelderEktefellesBarn = EktefelleFaktaForm.buildInitialValues(familiehendelse);\n  }\n\n  return {\n    ...DokumentasjonFaktaForm.buildInitialValues(soknad, familiehendelse),\n    ...omAdopsjonGjelderEktefellesBarn,\n    ...mannAdoptererAleneValues,\n    ...FaktaBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter[0]),\n  };\n};\n\nconst transformValues = (values: FormValues, aksjonspunkter: Aksjonspunkt[]): AksjonspunktData => {\n  const aksjonspunkterArray = [] as AksjonspunktData;\n  aksjonspunkterArray.push(DokumentasjonFaktaForm.transformValues(values));\n\n  if (hasAksjonspunkt(OM_ADOPSJON_GJELDER_EKTEFELLES_BARN, aksjonspunkter) && values.ektefellesBarn !== undefined) {\n    aksjonspunkterArray.push(EktefelleFaktaForm.transformValues(values.ektefellesBarn));\n  }\n  if (\n    hasAksjonspunkt(OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE, aksjonspunkter) &&\n    values.mannAdoptererAlene !== undefined\n  ) {\n    aksjonspunkterArray.push(MannAdoptererAleneFaktaForm.transformValues(values.mannAdoptererAlene));\n  }\n\n  return aksjonspunkterArray.map(ap => ({\n    ...ap,\n    begrunnelse: values.begrunnelse,\n  }));\n};\n\nconst getEditedStatus = (soknad: Soknad, gjeldendeFamiliehendelse: FamilieHendelse): FieldEditedInfo =>\n  isFieldEdited(soknad, gjeldendeFamiliehendelse);\n\ntype FormValues = EktefelleFormValues & DokFormValues & MannAdoptererFormValues & FaktaBegrunnelseFormValues;\n\ntype AksjonspunktData = Array<\n  BekreftEktefelleAksjonspunktAp | BekreftDokumentertDatoAksjonspunktAp | BekreftMannAdoptererAksjonspunktAp\n>;\n\ninterface OwnProps {\n  aksjonspunkter: Aksjonspunkt[];\n  submittable: boolean;\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  alleKodeverk: AlleKodeverk;\n  hasOpenAksjonspunkter: boolean;\n  isForeldrepengerFagsak: boolean;\n  soknad: Soknad;\n  gjeldendeFamiliehendelse: FamilieHendelse;\n  submitCallback: (aksjonspunktData: AksjonspunktData) => Promise<void>;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * AdopsjonInfoPanel\n *\n * Har ansvar for å sette opp formen for faktapenelet til Adopsjonsvilkåret.\n */\nconst AdopsjonInfoPanel: FunctionComponent<OwnProps> = ({\n  aksjonspunkter,\n  hasOpenAksjonspunkter,\n  submittable,\n  readOnly,\n  alleMerknaderFraBeslutter,\n  alleKodeverk,\n  isForeldrepengerFagsak,\n  submitCallback,\n  soknad,\n  gjeldendeFamiliehendelse,\n  formData,\n  setFormData,\n}) => {\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(soknad, gjeldendeFamiliehendelse, aksjonspunkter),\n  });\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const editedStatus = useMemo(\n    () => getEditedStatus(soknad, gjeldendeFamiliehendelse),\n    [soknad, gjeldendeFamiliehendelse],\n  );\n\n  const onSubmit = useCallback(\n    (values: FormValues): Promise<any> => submitCallback(transformValues(values, aksjonspunkter)),\n    [submitCallback, aksjonspunkter],\n  );\n\n  return (\n    <>\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={hasOpenAksjonspunkter}>\n        {getHelpTexts(aksjonspunkter)}\n      </AksjonspunktHelpTextTemp>\n      <Form formMethods={formMethods} onSubmit={onSubmit} setDataOnUnmount={setFormData}>\n        <VerticalSpacer eightPx />\n        <HStack gap=\"4\" wrap>\n          <div className={styles.leftCol}>\n            <DokumentasjonFaktaForm\n              readOnly={readOnly}\n              editedStatus={editedStatus}\n              erForeldrepengerFagsak={isForeldrepengerFagsak}\n              alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n              hasEktefellesBarnAksjonspunkt={hasAksjonspunkt(OM_ADOPSJON_GJELDER_EKTEFELLES_BARN, aksjonspunkter)}\n            />\n          </div>\n          {hasAksjonspunkt(OM_ADOPSJON_GJELDER_EKTEFELLES_BARN, aksjonspunkter) && (\n            <EktefelleFaktaForm\n              readOnly={readOnly}\n              alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n              ektefellesBarnIsEdited={editedStatus.ektefellesBarn}\n            />\n          )}\n          {hasAksjonspunkt(OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE, aksjonspunkter) && (\n            <MannAdoptererAleneFaktaForm\n              farSokerType={soknad.farSokerType}\n              readOnly={readOnly}\n              mannAdoptererAlene={editedStatus.mannAdoptererAlene}\n              alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n              alleKodeverk={alleKodeverk}\n            />\n          )}\n        </HStack>\n        {aksjonspunkter && aksjonspunkter.length > 0 && (\n          <>\n            <VerticalSpacer twentyPx />\n            <FaktaBegrunnelseTextFieldNew\n              isSubmittable={submittable}\n              isReadOnly={readOnly}\n              hasBegrunnelse={!!begrunnelse}\n            />\n            <VerticalSpacer twentyPx />\n            <FaktaSubmitButtonNew\n              isSubmittable={submittable}\n              isReadOnly={readOnly}\n              isSubmitting={formMethods.formState.isSubmitting}\n              isDirty={formMethods.formState.isDirty}\n            />\n          </>\n        )}\n      </Form>\n    </>\n  );\n};\n\nexport default AdopsjonInfoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { FamilieHendelseSamling, Soknad, StandardFaktaPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport AdopsjonInfoPanel from './components/AdopsjonInfoPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  soknad: Soknad;\n  familiehendelse: FamilieHendelseSamling;\n  isForeldrepengerFagsak: boolean;\n}\n\nconst AdopsjonFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  soknad,\n  familiehendelse,\n  aksjonspunkter,\n  alleMerknaderFraBeslutter,\n  alleKodeverk,\n  submitCallback,\n  readOnly,\n  isForeldrepengerFagsak,\n  harApneAksjonspunkter,\n  submittable,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <AdopsjonInfoPanel\n      soknad={soknad}\n      gjeldendeFamiliehendelse={familiehendelse.gjeldende}\n      aksjonspunkter={aksjonspunkter}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      alleKodeverk={alleKodeverk}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      isForeldrepengerFagsak={isForeldrepengerFagsak}\n      hasOpenAksjonspunkter={harApneAksjonspunkter}\n      submittable={submittable}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default AdopsjonFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Fagsak, FamilieHendelseSamling } from '@navikt/ft-types';\nimport { FagsakYtelseType } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode, adopsjonsvilkarene } from '@navikt/fp-kodeverk';\nimport { AdopsjonFaktaIndex } from '@navikt/fp-fakta-adopsjon';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Soknad } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE,\n  AksjonspunktCode.ADOPSJONSDOKUMENTAJON,\n  AksjonspunktCode.OM_ADOPSJON_GJELDER_EKTEFELLES_BARN,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.FAMILIEHENDELSE, BehandlingApiKeys.SOKNAD];\ntype EndepunktPanelData = {\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n}\n\n/**\n * AdopsjonsvilkaretFaktaInitPanel\n */\nconst AdopsjonsvilkaretFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({ fagsak, ...props }) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.ADOPSJONSVILKARET}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'AdopsjonInfoPanel.Adopsjon' })}\n    skalPanelVisesIMeny={() =>\n      !!props.behandling.vilkår && props.behandling.vilkår.some(v => adopsjonsvilkarene.some(av => av === v.vilkarType))\n    }\n    renderPanel={data => (\n      <AdopsjonFaktaIndex\n        isForeldrepengerFagsak={fagsak.fagsakYtelseType === FagsakYtelseType.FORELDREPENGER}\n        {...data}\n      />\n    )}\n  />\n);\n\nexport default AdopsjonsvilkaretFaktaInitPanel;\n","import React, { FunctionComponent, useCallback, useMemo, useState, MouseEvent } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { Heading, Detail, BodyShort, Button } from '@navikt/ds-react';\n\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\nimport { Form, RadioGroupPanel, TextAreaField } from '@navikt/ft-form-hooks';\nimport { behandlingType as BehandlingType, dokumentMalType, AksjonspunktCode, KodeverkType } from '@navikt/fp-kodeverk';\nimport { AksjonspunktHelpTextTemp, ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { hasValidText, minLength, maxLength, required } from '@navikt/ft-form-validators';\nimport { ISO_DATE_FORMAT, getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { FodselSammenligningIndex } from '@navikt/fp-prosess-fakta-fodsel-sammenligning';\nimport { SettPaVentModalIndex, FormValues as ModalFormValues } from '@navikt/fp-modal-sett-pa-vent';\nimport {\n  Aksjonspunkt,\n  FamilieHendelseSamling,\n  Soknad,\n  FamilieHendelse,\n  AlleKodeverk,\n  Behandling,\n  KodeverkMedNavn,\n} from '@navikt/fp-types';\nimport { VarselRevurderingAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { validerApKodeOgHentApEnum } from '@navikt/fp-prosess-felles';\n\nimport styles from './varselOmRevurderingForm.module.css';\n\nconst minLength3 = minLength(3);\nconst maxLength6000 = maxLength(6000);\n\nexport type ForhandsvisData = {\n  mottaker: string;\n  dokumentMal: string;\n  fritekst: string;\n};\n\ntype FormValues = {\n  kode: AksjonspunktCode.VARSEL_REVURDERING_ETTERKONTROLL | AksjonspunktCode.VARSEL_REVURDERING_MANUELL;\n  begrunnelse?: string;\n  sendVarsel?: boolean;\n  fritekst?: string;\n};\n\nconst buildInitialValues = (aksjonspunkter: Aksjonspunkt[]): FormValues => ({\n  kode: validerApKodeOgHentApEnum(\n    aksjonspunkter[0].definisjon,\n    AksjonspunktCode.VARSEL_REVURDERING_ETTERKONTROLL,\n    AksjonspunktCode.VARSEL_REVURDERING_MANUELL,\n  ),\n  begrunnelse: aksjonspunkter[0].begrunnelse,\n  sendVarsel: undefined,\n});\n\nconst nullSafe = (value: FamilieHendelse): FamilieHendelse => value || ({} as FamilieHendelse);\n\nconst EMPTY_ARRAY = [] as KodeverkMedNavn[];\n\ninterface OwnProps {\n  behandlingArsaker: Behandling['behandlingÅrsaker'];\n  sprakkode: string;\n  behandlingType: string;\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  soknadOriginalBehandling: Soknad;\n  familiehendelseOriginalBehandling: FamilieHendelse;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: VarselRevurderingAp) => Promise<void>;\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * VarselOmRevurderingForm\n *\n * Setter opp aksjonspunktet for avklaring av varsel om revurdering i søknad.\n */\nconst VarselOmRevurderingForm: FunctionComponent<OwnProps> = ({\n  aksjonspunkter,\n  familiehendelse,\n  behandlingArsaker,\n  readOnly,\n  behandlingType,\n  soknad,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n  alleKodeverk,\n  sprakkode,\n  submitCallback,\n  previewCallback,\n  setFormData,\n  formData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(() => buildInitialValues(aksjonspunkter), [aksjonspunkter]);\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const formVerdier = formMethods.watch();\n\n  const [skalVisePaVentModal, settSkalVisePaVentModal] = useState(false);\n  const lukkModal = useCallback(() => settSkalVisePaVentModal(false), [settSkalVisePaVentModal]);\n  const åpneModal = useCallback(() => settSkalVisePaVentModal(true), [settSkalVisePaVentModal]);\n\n  const håndterSubmitFraModal = (modalValues: ModalFormValues) => {\n    formMethods.trigger().then(isValid => {\n      if (isValid) {\n        submitCallback({\n          ...formVerdier,\n          ...modalValues,\n        });\n      }\n      settSkalVisePaVentModal(false);\n    });\n  };\n\n  const forhåndsvisMelding = useCallback(\n    (e: MouseEvent) => {\n      e.preventDefault();\n      previewCallback({\n        mottaker: '',\n        dokumentMal: dokumentMalType.VARSEL_OM_REVURDERING,\n        fritekst: formVerdier.fritekst || ' ',\n      });\n    },\n    [formVerdier.fritekst],\n  );\n\n  const { avklartBarn } = nullSafe(familiehendelse.register);\n  const { termindato } = nullSafe(familiehendelse.gjeldende);\n  const { vedtaksDatoSomSvangerskapsuke } = nullSafe(familiehendelse.gjeldende);\n\n  const erAutomatiskRevurdering = behandlingArsaker.reduce(\n    (result, current) => result || current.erAutomatiskRevurdering,\n    false,\n  );\n  const ventearsaker = alleKodeverk[KodeverkType.VENT_AARSAK] || EMPTY_ARRAY;\n  const language = getLanguageFromSprakkode(sprakkode);\n\n  return (\n    <>\n      <Form formMethods={formMethods} onSubmit={submitCallback} setDataOnUnmount={setFormData}>\n        <Heading size=\"small\">\n          <FormattedMessage id=\"VarselOmRevurderingForm.VarselOmRevurdering\" />\n        </Heading>\n        <VerticalSpacer eightPx />\n        {!readOnly && aksjonspunkter[0].status === AksjonspunktStatus.OPPRETTET && (\n          <>\n            <AksjonspunktHelpTextTemp isAksjonspunktOpen>\n              {[<FormattedMessage key=\"1\" id=\"VarselOmRevurderingForm.VarselOmRevurderingVurder\" />]}\n            </AksjonspunktHelpTextTemp>\n            <VerticalSpacer twentyPx />\n            {erAutomatiskRevurdering && (\n              <>\n                <FodselSammenligningIndex\n                  behandlingsTypeKode={behandlingType}\n                  avklartBarn={avklartBarn}\n                  termindato={termindato}\n                  vedtaksDatoSomSvangerskapsuke={vedtaksDatoSomSvangerskapsuke}\n                  soknad={soknad}\n                  soknadOriginalBehandling={soknadOriginalBehandling}\n                  familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n                />\n                <VerticalSpacer sixteenPx />\n              </>\n            )}\n            <RadioGroupPanel\n              name=\"sendVarsel\"\n              validate={[required]}\n              isHorizontal\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  value: 'true',\n                  label: intl.formatMessage({ id: 'VarselOmRevurderingForm.SendVarsel' }),\n                },\n                {\n                  value: 'false',\n                  label: intl.formatMessage({ id: 'VarselOmRevurderingForm.IkkeSendVarsel' }),\n                },\n              ]}\n            />\n            {formVerdier.sendVarsel && (\n              <>\n                <VerticalSpacer sixteenPx />\n                <ArrowBox>\n                  <TextAreaField\n                    badges={[{ type: 'info', titleText: language }]}\n                    name=\"fritekst\"\n                    label={intl.formatMessage({ id: 'VarselOmRevurderingForm.FritekstIBrev' })}\n                    validate={[required, minLength3, maxLength6000, hasValidText]}\n                    maxLength={6000}\n                  />\n                  <VerticalSpacer fourPx />\n                  <a\n                    href=\"\"\n                    onClick={forhåndsvisMelding}\n                    className={classNames(styles.previewLink, 'lenke lenke--frittstaende')}\n                  >\n                    <FormattedMessage id=\"VarselOmRevurderingForm.Preview\" />\n                  </a>\n                </ArrowBox>\n              </>\n            )}\n            <div className={styles.flexContainer}>\n              <TextAreaField\n                name=\"begrunnelse\"\n                label={intl.formatMessage({ id: 'VarselOmRevurderingForm.BegrunnelseForSvar' })}\n                validate={[required, minLength3, hasValidText]}\n              />\n            </div>\n            <VerticalSpacer sixteenPx />\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              onClick={formVerdier.sendVarsel ? åpneModal : undefined}\n              loading={formMethods.formState.isSubmitting}\n              disabled={formMethods.formState.isSubmitting}\n              type={formVerdier.sendVarsel ? 'button' : 'submit'}\n            >\n              <FormattedMessage id=\"VarselOmRevurderingForm.Bekreft\" />\n            </Button>\n          </>\n        )}\n        {(readOnly || aksjonspunkter[0].status !== AksjonspunktStatus.OPPRETTET) && (\n          <>\n            <Detail>\n              <FormattedMessage id=\"VarselOmRevurderingForm.Begrunnelse\" />\n            </Detail>\n            <BodyShort size=\"small\">{formVerdier.begrunnelse}</BodyShort>\n          </>\n        )}\n      </Form>\n      <SettPaVentModalIndex\n        showModal={skalVisePaVentModal}\n        frist={moment().add(28, 'days').format(ISO_DATE_FORMAT)}\n        cancelEvent={lukkModal}\n        submitCallback={håndterSubmitFraModal}\n        ventearsaker={ventearsaker}\n        visBrevErBestilt\n        hasManualPaVent\n        erTilbakekreving={\n          behandlingType === BehandlingType.TILBAKEKREVING ||\n          behandlingType === BehandlingType.TILBAKEKREVING_REVURDERING\n        }\n      />\n    </>\n  );\n};\n\nexport default VarselOmRevurderingForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { FamilieHendelse, FamilieHendelseSamling, Soknad, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport VarselOmRevurderingForm, { ForhandsvisData } from './components/VarselOmRevurderingForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  soknadOriginalBehandling: Soknad;\n  familiehendelseOriginalBehandling: FamilieHendelse;\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n}\n\nconst VarselOmRevurderingProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  familiehendelse,\n  soknad,\n  soknadOriginalBehandling,\n  familiehendelseOriginalBehandling,\n  aksjonspunkter,\n  submitCallback,\n  previewCallback,\n  isReadOnly,\n  alleKodeverk,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <VarselOmRevurderingForm\n      behandlingArsaker={behandling.behandlingÅrsaker}\n      sprakkode={behandling.sprakkode}\n      behandlingType={behandling.type}\n      familiehendelse={familiehendelse}\n      soknad={soknad}\n      soknadOriginalBehandling={soknadOriginalBehandling}\n      familiehendelseOriginalBehandling={familiehendelseOriginalBehandling}\n      aksjonspunkter={aksjonspunkter}\n      submitCallback={submitCallback}\n      previewCallback={previewCallback}\n      readOnly={isReadOnly}\n      alleKodeverk={alleKodeverk}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default VarselOmRevurderingProsessIndex;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { VarselOmRevurderingProsessIndex } from '@navikt/fp-prosess-varsel-om-revurdering';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  Behandling,\n  Fagsak,\n  FamilieHendelse,\n  FamilieHendelseSamling,\n  ForhåndsvisMeldingParams,\n  Soknad,\n} from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport skalViseProsessPanel from '../../felles/prosess/skalViseProsessPanel';\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst getForhandsvisCallback =\n  (\n    forhandsvisMelding: (params: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<unknown>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: { mottaker: string; dokumentMal: string; fritekst: string }) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst getLagringSideeffekter =\n  (setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void, opneSokeside: () => void) => () => {\n    setSkalOppdatereEtterBekreftelseAvAp(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt\n    return () => {\n      opneSokeside();\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.VARSEL_REVURDERING_MANUELL,\n  AksjonspunktCode.VARSEL_REVURDERING_ETTERKONTROLL,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.FAMILIEHENDELSE,\n  BehandlingApiKeys.FAMILIEHENDELSE_ORIGINAL_BEHANDLING,\n  BehandlingApiKeys.SOKNAD,\n  BehandlingApiKeys.SOKNAD_ORIGINAL_BEHANDLING,\n];\ntype EndepunktPanelData = {\n  familiehendelse: FamilieHendelseSamling;\n  familiehendelseOriginalBehandling: FamilieHendelse;\n  soknad: Soknad;\n  soknadOriginalBehandling: Soknad;\n};\n\ninterface OwnProps {\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  fagsak: Fagsak;\n  opneSokeside: () => void;\n}\n\nconst VarselProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  setSkalOppdatereEtterBekreftelseAvAp,\n  fagsak,\n  opneSokeside,\n  ...props\n}) => {\n  const lagringSideEffekter = getLagringSideeffekter(setSkalOppdatereEtterBekreftelseAvAp, opneSokeside);\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const previewCallback = useCallback(\n    getForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.VARSEL}\n      prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.CheckVarselRevurdering' })}\n      skalPanelVisesIMeny={data => skalViseProsessPanel(data.aksjonspunkter)}\n      lagringSideEffekter={lagringSideEffekter}\n      renderPanel={data => <VarselOmRevurderingProsessIndex previewCallback={previewCallback} {...data} />}\n    />\n  );\n};\n\nexport default VarselProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { VilkarType, AksjonspunktCode, fagsakYtelseType, vilkarUtfallType, KodeverkType } from '@navikt/fp-kodeverk';\nimport {\n  ProsessStegBegrunnelseTextFieldNew,\n  VilkarResultPicker,\n  ProsessPanelTemplate,\n  validerApKodeOgHentApEnum,\n} from '@navikt/fp-prosess-felles';\nimport { Aksjonspunkt, AlleKodeverk, Behandling, KodeverkMedNavn, Vilkar } from '@navikt/fp-types';\nimport {\n  VurdereYtelseSammeBarnAnnenForelderAp,\n  VurdereYtelseSammeBarnSokerAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\n\nconst avslagsarsakerES = ['1002', '1003', '1032'];\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n  begrunnelse?: string;\n};\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  vilkar: Vilkar[];\n  ytelseTypeKode: string;\n  submitCallback: (\n    aksjonspunktData: VurdereYtelseSammeBarnSokerAp | VurdereYtelseSammeBarnAnnenForelderAp,\n  ) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  isApOpen: boolean;\n  alleKodeverk: AlleKodeverk;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): FormValues => ({\n  ...VilkarResultPicker.buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n});\n\nconst transformValues = (\n  values: FormValues,\n  aksjonspunkter: Aksjonspunkt[],\n): VurdereYtelseSammeBarnSokerAp | VurdereYtelseSammeBarnAnnenForelderAp => ({\n  ...VilkarResultPicker.transformValues(values),\n  ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n  kode: validerApKodeOgHentApEnum(\n    aksjonspunkter[0].definisjon,\n    AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n    AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n  ),\n});\n\nconst getFodselVilkarAvslagsarsaker = (\n  isFpFagsak: boolean,\n  fodselsvilkarAvslagskoder: KodeverkMedNavn[],\n): KodeverkMedNavn[] =>\n  isFpFagsak\n    ? fodselsvilkarAvslagskoder.filter(arsak => !avslagsarsakerES.includes(arsak.kode))\n    : fodselsvilkarAvslagskoder;\n\n/**\n * FodselVilkarForm\n *\n * Setter opp aksjonspunktet for avklaring av Fødselsvilkåret.\n */\nconst FodselVilkarForm: FunctionComponent<OwnProps> = ({\n  isApOpen,\n  readOnly,\n  readOnlySubmitButton,\n  status,\n  behandlingsresultat,\n  aksjonspunkter,\n  erIkkeGodkjentAvBeslutter,\n  ytelseTypeKode,\n  alleKodeverk,\n  submitCallback,\n  vilkar,\n  setFormData,\n  formData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () => buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n    [behandlingsresultat, aksjonspunkter, status],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const alleAvslagsarsaker = alleKodeverk[KodeverkType.AVSLAGSARSAK][VilkarType.FODSELSVILKARET_MOR];\n  const avslagsarsaker = getFodselVilkarAvslagsarsaker(\n    ytelseTypeKode === fagsakYtelseType.FORELDREPENGER,\n    alleAvslagsarsaker,\n  );\n\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === AksjonspunktStatus.OPPRETTET);\n  const originalErVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n  const { lovReferanse } = vilkar[0];\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, aksjonspunkter))}\n      setDataOnUnmount={setFormData}\n    >\n      <ProsessPanelTemplate\n        title={intl.formatMessage({ id: 'FodselVilkarForm.Fodsel' })}\n        isAksjonspunktOpen={isApOpen}\n        readOnlySubmitButton={readOnlySubmitButton}\n        readOnly={readOnly}\n        lovReferanse={lovReferanse}\n        originalErVilkarOk={originalErVilkarOk}\n        erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        isDirty={formMethods.formState.isDirty}\n        isSubmitting={formMethods.formState.isSubmitting}\n      >\n        <Label size=\"small\">\n          <FormattedMessage id=\"FodselVilkarForm.TidligereUtbetaltStonad\" />\n        </Label>\n        <VilkarResultPicker\n          avslagsarsaker={avslagsarsaker}\n          readOnly={readOnly}\n          customVilkarOppfyltText={<FormattedMessage id=\"FodselVilkarForm.Oppfylt\" />}\n          customVilkarIkkeOppfyltText={<FormattedMessage id=\"FodselVilkarForm.IkkeOppfylt\" values={{ b: bTag }} />}\n        />\n        <ProsessStegBegrunnelseTextFieldNew useAllWidth readOnly={readOnly} />\n      </ProsessPanelTemplate>\n    </Form>\n  );\n};\n\nexport default FodselVilkarForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport FodselVilkarForm from './components/FodselVilkarForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  ytelseTypeKode: string;\n}\n\nconst FodselVilkarProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  aksjonspunkter,\n  status,\n  vilkar,\n  ytelseTypeKode,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  isAksjonspunktOpen,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <FodselVilkarForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      vilkar={vilkar}\n      ytelseTypeKode={ytelseTypeKode}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      isApOpen={isAksjonspunktOpen}\n      alleKodeverk={alleKodeverk}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default FodselVilkarProsessIndex;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\n\nimport { AksjonspunktCode, VilkarType, vilkarUtfallType, KodeverkType, aksjonspunktStatus } from '@navikt/fp-kodeverk';\nimport { Form } from '@navikt/ft-form-hooks';\nimport { Aksjonspunkt, AlleKodeverk, Behandling, Vilkar } from '@navikt/fp-types';\nimport {\n  ProsessStegBegrunnelseTextFieldNew,\n  VilkarResultPicker,\n  ProsessPanelTemplate,\n  validerApKodeOgHentApEnum,\n} from '@navikt/fp-prosess-felles';\nimport {\n  VurdereYtelseSammeBarnAnnenForelderAp,\n  VurdereYtelseSammeBarnSokerAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n  begrunnelse?: string;\n};\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  vilkar: Vilkar[];\n  submitCallback: (\n    aksjonspunktData: VurdereYtelseSammeBarnSokerAp | VurdereYtelseSammeBarnAnnenForelderAp,\n  ) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  isApOpen: boolean;\n  alleKodeverk: AlleKodeverk;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): FormValues => ({\n  ...VilkarResultPicker.buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n});\n\nconst transformValues = (\n  values: FormValues,\n  aksjonspunkter: Aksjonspunkt[],\n): VurdereYtelseSammeBarnSokerAp | VurdereYtelseSammeBarnAnnenForelderAp => ({\n  ...VilkarResultPicker.transformValues(values),\n  ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n  kode: validerApKodeOgHentApEnum(\n    aksjonspunkter[0].definisjon,\n    AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n    AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n  ),\n});\n\n/**\n * AdopsjonVilkarForm\n *\n * Setter opp aksjonspunktet for avklaring av Adopsjonsvilkåret.\n */\nconst AdopsjonVilkarForm: FunctionComponent<OwnProps> = ({\n  vilkar,\n  readOnly,\n  readOnlySubmitButton,\n  status,\n  submitCallback,\n  behandlingsresultat,\n  alleKodeverk,\n  isApOpen,\n  aksjonspunkter,\n  erIkkeGodkjentAvBeslutter,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () => buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n    [behandlingsresultat, aksjonspunkter, status],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const avslagsarsaker = alleKodeverk[KodeverkType.AVSLAGSARSAK][VilkarType.ADOPSJONSVILKARET];\n\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === aksjonspunktStatus.OPPRETTET);\n  const originalErVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n  const { lovReferanse } = vilkar[0];\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, aksjonspunkter))}\n      setDataOnUnmount={setFormData}\n    >\n      <ProsessPanelTemplate\n        title={intl.formatMessage({ id: 'AdopsjonVilkarForm.Adopsjon' })}\n        isAksjonspunktOpen={isApOpen}\n        readOnlySubmitButton={readOnlySubmitButton}\n        readOnly={readOnly}\n        lovReferanse={lovReferanse}\n        originalErVilkarOk={originalErVilkarOk}\n        erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        isDirty={formMethods.formState.isDirty}\n        isSubmitting={formMethods.formState.isSubmitting}\n      >\n        <Label size=\"small\">\n          <FormattedMessage id=\"AdopsjonVilkarForm.TidligereUtbetaltStonad\" />\n        </Label>\n        <VilkarResultPicker\n          avslagsarsaker={avslagsarsaker}\n          readOnly={readOnly}\n          customVilkarOppfyltText={<FormattedMessage id=\"AdopsjonVilkarForm.Oppfylt\" />}\n          customVilkarIkkeOppfyltText={<FormattedMessage id=\"AdopsjonVilkarForm.IkkeOppfylt\" values={{ b: bTag }} />}\n        />\n        <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n      </ProsessPanelTemplate>\n    </Form>\n  );\n};\n\nexport default AdopsjonVilkarForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport AdopsjonVilkarForm from './components/AdopsjonVilkarForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\nconst AdopsjonVilkarProsessIndex: FunctionComponent<StandardProsessPanelProps> = ({\n  behandling,\n  aksjonspunkter,\n  status,\n  vilkar,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  isAksjonspunktOpen,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <AdopsjonVilkarForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      vilkar={vilkar}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      isApOpen={isAksjonspunktOpen}\n      alleKodeverk={alleKodeverk}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default AdopsjonVilkarProsessIndex;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { VilkarType, AksjonspunktCode, KodeverkType, vilkarUtfallType, aksjonspunktStatus } from '@navikt/fp-kodeverk';\nimport {\n  VilkarResultPicker,\n  ProsessStegBegrunnelseTextFieldNew,\n  ProsessPanelTemplate,\n  validerApKodeOgHentApEnum,\n} from '@navikt/fp-prosess-felles';\nimport { Aksjonspunkt, AlleKodeverk, Behandling } from '@navikt/fp-types';\nimport {\n  OmsorgsvilkarAp,\n  VurdereYtelseSammeBarnAnnenForelderAp,\n  VurdereYtelseSammeBarnSokerAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n  begrunnelse?: string;\n};\n\ntype AksjonspunktData = Array<OmsorgsvilkarAp | VurdereYtelseSammeBarnSokerAp | VurdereYtelseSammeBarnAnnenForelderAp>;\n\nexport const buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): FormValues => ({\n  ...VilkarResultPicker.buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n});\n\nconst transformValues = (values: FormValues, aksjonspunkter: Aksjonspunkt[]): AksjonspunktData =>\n  aksjonspunkter.map(ap => ({\n    ...VilkarResultPicker.transformValues(values),\n    ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n    kode: validerApKodeOgHentApEnum(\n      ap.definisjon,\n      AksjonspunktCode.MANUELL_VURDERING_AV_OMSORGSVILKARET,\n      AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n      AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n    ),\n  }));\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  submitCallback: (aksjonspunktData: AksjonspunktData) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  alleKodeverk: AlleKodeverk;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * ErOmsorgVilkaarOppfyltForm\n *\n * Setter opp aksjonspunkter for avklaring av omsorgsvilkåret.\n */\nconst ErOmsorgVilkaarOppfyltForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  readOnlySubmitButton,\n  aksjonspunkter,\n  status,\n  submitCallback,\n  behandlingsresultat,\n  erIkkeGodkjentAvBeslutter,\n  alleKodeverk,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () => buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n    [behandlingsresultat, aksjonspunkter, status],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const avslagsarsaker = alleKodeverk[KodeverkType.AVSLAGSARSAK][VilkarType.OMSORGSVILKARET];\n\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === aksjonspunktStatus.OPPRETTET);\n  const originalErVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n\n  const bTag = useCallback((chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, aksjonspunkter))}\n      setDataOnUnmount={setFormData}\n    >\n      <ProsessPanelTemplate\n        title={intl.formatMessage({ id: 'ErOmsorgVilkaarOppfyltForm.Omsorg' })}\n        isAksjonspunktOpen={!readOnlySubmitButton}\n        readOnlySubmitButton={readOnlySubmitButton}\n        readOnly={readOnly}\n        originalErVilkarOk={originalErVilkarOk}\n        erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        isDirty={formMethods.formState.isDirty}\n        isSubmitting={formMethods.formState.isSubmitting}\n      >\n        <Label size=\"small\">\n          <FormattedMessage id=\"ErOmsorgVilkaarOppfyltForm.VilkaretOppfylt\" />\n        </Label>\n        <VilkarResultPicker\n          avslagsarsaker={avslagsarsaker}\n          readOnly={readOnly}\n          customVilkarOppfyltText={<FormattedMessage id=\"ErOmsorgVilkaarOppfyltForm.Oppfylt\" />}\n          customVilkarIkkeOppfyltText={\n            <FormattedMessage id=\"ErOmsorgVilkaarOppfyltForm.IkkeOppfylt\" values={{ b: bTag }} />\n          }\n        />\n        <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n      </ProsessPanelTemplate>\n    </Form>\n  );\n};\n\nexport default ErOmsorgVilkaarOppfyltForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport ErOmsorgVilkaarOppfyltForm from './components/ErOmsorgVilkaarOppfyltForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\nconst OmsorgVilkarProsessIndex: FunctionComponent<StandardProsessPanelProps> = ({\n  behandling,\n  aksjonspunkter,\n  status,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <ErOmsorgVilkaarOppfyltForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      alleKodeverk={alleKodeverk}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default OmsorgVilkarProsessIndex;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { AksjonspunktCode, VilkarType, vilkarUtfallType, KodeverkType, aksjonspunktStatus } from '@navikt/fp-kodeverk';\nimport {\n  ProsessStegBegrunnelseTextFieldNew,\n  VilkarResultPicker,\n  ProsessPanelTemplate,\n  validerApKodeOgHentApEnum,\n} from '@navikt/fp-prosess-felles';\nimport { Aksjonspunkt, AlleKodeverk, Behandling } from '@navikt/fp-types';\nimport {\n  Foreldreansvarsvilkar1Ap,\n  Foreldreansvarsvilkar2Ap,\n  VurdereYtelseSammeBarnAnnenForelderAp,\n  VurdereYtelseSammeBarnSokerAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n  begrunnelse?: string;\n};\n\ntype AksjonspunktData = Array<\n  | Foreldreansvarsvilkar1Ap\n  | Foreldreansvarsvilkar2Ap\n  | VurdereYtelseSammeBarnSokerAp\n  | VurdereYtelseSammeBarnAnnenForelderAp\n>;\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  isForeldreansvar2Ledd: boolean;\n  isEngangsstonad: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  submitCallback: (aksjonspunktData: AksjonspunktData) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  alleKodeverk: AlleKodeverk;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): FormValues => ({\n  ...VilkarResultPicker.buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n});\n\nconst transformValues = (values: FormValues, aksjonspunkter: Aksjonspunkt[]): AksjonspunktData =>\n  aksjonspunkter.map(ap => ({\n    ...VilkarResultPicker.transformValues(values),\n    ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n    kode: validerApKodeOgHentApEnum(\n      ap.definisjon,\n      AksjonspunktCode.MANUELL_VURDERING_AV_FORELDREANSVARSVILKARET_2_LEDD,\n      AksjonspunktCode.MANUELL_VURDERING_AV_FORELDREANSVARSVILKARET_4_LEDD,\n      AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n      AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n    ),\n  }));\n\n/**\n * ErForeldreansvarVilkaarOppfyltForm\n *\n * Setter opp aksjonspunkter for avklaring av foreldreansvarvilkåret 2 eller 4 ledd.\n */\nconst ErForeldreansvarVilkaarOppfyltForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  readOnlySubmitButton,\n  isEngangsstonad,\n  behandlingsresultat,\n  isForeldreansvar2Ledd,\n  status,\n  aksjonspunkter,\n  erIkkeGodkjentAvBeslutter,\n  alleKodeverk,\n  submitCallback,\n  setFormData,\n  formData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () => buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n    [behandlingsresultat, aksjonspunkter, status],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const vilkarTypeKode = isForeldreansvar2Ledd\n    ? VilkarType.FORELDREANSVARSVILKARET_2_LEDD\n    : VilkarType.FORELDREANSVARSVILKARET_4_LEDD;\n  const avslagsarsaker = alleKodeverk[KodeverkType.AVSLAGSARSAK][vilkarTypeKode];\n\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === aksjonspunktStatus.OPPRETTET);\n  const originalErVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, aksjonspunkter))}\n      setDataOnUnmount={setFormData}\n    >\n      <ProsessPanelTemplate\n        title={intl.formatMessage({ id: 'ErForeldreansvarVilkaarOppfyltForm.Foreldreansvar' })}\n        isAksjonspunktOpen={!readOnlySubmitButton}\n        readOnlySubmitButton={readOnlySubmitButton}\n        readOnly={readOnly}\n        originalErVilkarOk={originalErVilkarOk}\n        erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        isDirty={formMethods.formState.isDirty}\n        isSubmitting={formMethods.formState.isSubmitting}\n      >\n        <Label size=\"small\">\n          <FormattedMessage id=\"ErForeldreansvarVilkaarOppfyltForm.RettTilStonad\" />\n        </Label>\n        <VilkarResultPicker\n          avslagsarsaker={avslagsarsaker}\n          readOnly={readOnly}\n          customVilkarOppfyltText={\n            <FormattedMessage id={isEngangsstonad ? 'FodselVilkarForm.OppfyltEs' : 'FodselVilkarForm.OppfyltFp'} />\n          }\n          customVilkarIkkeOppfyltText={\n            <FormattedMessage\n              id={isEngangsstonad ? 'FodselVilkarForm.IkkeOppfyltEs' : 'FodselVilkarForm.IkkeOppfyltFp'}\n              values={{ b: bTag }}\n            />\n          }\n        />\n        <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n      </ProsessPanelTemplate>\n    </Form>\n  );\n};\n\nexport default ErForeldreansvarVilkaarOppfyltForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport ErForeldreansvarVilkaarOppfyltForm from './components/ErForeldreansvarVilkaarOppfyltForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  isForeldreansvar2Ledd: boolean;\n  isEngangsstonad: boolean;\n}\n\nconst ForeldreansvarVilkarProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  aksjonspunkter,\n  isEngangsstonad,\n  isForeldreansvar2Ledd,\n  status,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <ErForeldreansvarVilkaarOppfyltForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      isForeldreansvar2Ledd={isForeldreansvar2Ledd}\n      isEngangsstonad={isEngangsstonad}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      alleKodeverk={alleKodeverk}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default ForeldreansvarVilkarProsessIndex;\n","import React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { VilkarType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { ForeldreansvarVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-foreldreansvar';\nimport { Aksjonspunkt } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.MANUELL_VURDERING_AV_FORELDREANSVARSVILKARET_2_LEDD,\n  AksjonspunktCode.MANUELL_VURDERING_AV_FORELDREANSVARSVILKARET_4_LEDD,\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst AKSJONSPUNKT_TEKST_PER_KODE = {\n  [AksjonspunktCode.MANUELL_VURDERING_AV_FORELDREANSVARSVILKARET_2_LEDD]:\n    'ErForeldreansvarVilkaarOppfyltForm.2LeddParagrafEngangsStonad',\n  [AksjonspunktCode.MANUELL_VURDERING_AV_FORELDREANSVARSVILKARET_4_LEDD]:\n    'ErForeldreansvarVilkaarOppfyltForm.4LeddParagraf',\n  [AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderSammeBarn',\n  [AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN]:\n    'SRBVilkarForm.VurderAnnenForelderSammeBarn',\n} as Record<string, string>;\n\nconst hentAksjonspunktTekst = (intl: IntlShape, aksjonspunkter: Aksjonspunkt[] = []): string =>\n  aksjonspunkter.length > 0\n    ? intl.formatMessage({ id: AKSJONSPUNKT_TEKST_PER_KODE[aksjonspunkter[0].definisjon] })\n    : '';\n\nconst VILKAR_KODER = [VilkarType.FORELDREANSVARSVILKARET_2_LEDD, VilkarType.FORELDREANSVARSVILKARET_4_LEDD];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n}\n\nconst ForeldreansvarInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"FORELDREANSVARSVILKARET\"\n      hentInngangsvilkarPanelTekst={data => hentAksjonspunktTekst(intl, data?.aksjonspunkter)}\n      renderPanel={data => (\n        <>\n          <ForeldreansvarVilkarProsessIndex\n            isEngangsstonad\n            isForeldreansvar2Ledd={data.vilkar.some(v => v.vilkarType === VilkarType.FORELDREANSVARSVILKARET_2_LEDD)}\n            {...data}\n          />\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n    />\n  );\n};\n\nexport default ForeldreansvarInngangsvilkarInitPanel;\n"],"names":["relatertYtelseTilstand","hasValue","value","isNotEqual","value1","value2","getIsUtstedtDatoEdited","soknad","familiehendelse","getIsTerminDatoEdited","getIsAntallBarnEdited","getIsVilkarTypeEdited","getIsAdopsjonFodelsedatoerEdited","diff","getIsOmsorgsovertakelseDatoEdited","getIsBarnetsAnkomstTilNorgeDatoEdited","getIsAntallBarnOmsorgOgForeldreansvarEdited","getIsEktefellesBarnEdited","getIsMannAdoptererAleneEdited","getIsDokumentasjonForeliggerEdited","isFieldEdited","gjeldendeFamiliehendelse","getAntallBarn","antallBarn","OmsorgsovertakelseFaktaPanel","readOnly","erAksjonspunktForeldreansvar","editedStatus","alleMerknaderFraBeslutter","intl","useIntl","jsx","FaktaGruppe","AksjonspunktCode","jsxs","HStack","Datepicker","required","hasValidDate","Label","FormattedMessage","BodyShort","getLopendeOrAvsluttetYtelser","ytelse","y","RettighetFaktaPanel","relatertYtelseTypes","watch","useFormContext","farSokerType","ytelser","VerticalSpacer","styles","_a","r","DateLabel","innvilgetRelatertTilgrensendeYtelserForAnnenForelder","getKodeverknavn","KodeverkType","BarnPanel","adopsjonFodelsedatoer","key","React","moment","DDMMYYYY_DATE_FORMAT","emptyIfnull","text","constructAddress","adresse","postnummer","poststed","land","getAddresses","addresses","acc","address","opplysningAdresseType","currentAddress","linje","country","Landkode","getParentHeader","erMor","lagSøkerdata","personopplysninger","navBrukerKjonn","ForeldrePanel","personoversikt","beggeForeldre","useMemo","f","foreldre","shouldShowAdress","parentHeader","Heading","getDescriptionText","vilkarCode","VilkarType","findAksjonspunktHelpTexts","getEditedStatus","OmsorgOgForeldreansvarFaktaForm","vilkarTypes","hasOpenAksjonspunkter","vilkarType","Fragment","AksjonspunktHelpTextTemp","VStack","SelectField","d","EditedIcon","values","aksjonspunkt","transformValues","buildInitialValues","aksjonspunkter","alleKodeverk","ap","getKodeverknavnFn","FaktaBegrunnelseTextFieldNew","OmsorgOgForeldreansvarInfoPanel","submittable","submitCallback","formMethods","useForm","begrunnelse","Form","FaktaSubmitButtonNew","createIntl","messages","OmsorgOgForeldreansvarFaktaIndex","inntektArbeidYtelse","harApneAksjonspunkter","formData","setFormData","RawIntlProvider","AKSJONSPUNKT_KODER","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","OmsorgvilkaretFaktaInitPanel","props","FaktaDefaultInitPanel","FaktaPanelCode","data","formatDate","date","ISO_DATE_FORMAT","getTerminEllerFodselsdato","hasSoknad","fødselsdatoerSoknad","termindatoSoknad","termindato","FodselSammenligningOtherPanel","soknadFodselsdatoer","terminOrFodselLabel","terminFodselHeader","terminOrFodselDate","FlexContainer","FlexRow","FlexColumn","getTermindatoEllerFodselsdato","isTermin","originalSoknad","orginalFamiliehendelse","famHendelse","termDato","FodselSammenligningRevurderingPanel","vedtaksDatoSomSvangerskapsuke","soknadOriginalBehandling","familiehendelseOriginalBehandling","erTermin","shouldShowVedtaksdatoAsSvangerskapsuke","FodselSammenligningPanel","behandlingsTypeKode","avklartBarn","nrOfDodfodteBarn","behandlingType","Tag","Table","barn","TableRow","TableColumn","FodselSammenligningIndex","ab","minValue1","minValue","maxValue9","maxValue","erTerminbekreftelseUtstedtForTidlig","utstedtdato","TermindatoFaktaForm","isForTidligTerminbekreftelse","fodselsdatoTps","antallBarnTps","isOverridden","InputField","parsedValue","hasValidInteger","Alert","FIELD_ARRAY_NAME","defaultAntallBarn","AvklartBarnFieldArray","control","fields","remove","append","useFieldArray","PeriodFieldArray","field","index","getRemoveButton","dateBeforeOrEqualToToday","SjekkFodselDokForm","gjeldende","register","dokumentasjonForeligger","dokumentasjonForeliggerIsEdited","RadioGroupPanel","ArrowBox","lagBarn","antallBarnFraSoknad","childrenArray","ryddOppIAvklarteBarn","TERMINBEKREFTELSE","SJEKK_MANGLENDE_FODSEL","getHelpTexts","helpTexts","hasAksjonspunkt","familieHendelse","terminbekreftelseAp","manglendeFødselAp","aksjonspunkterSomSkalBekreftes","EMPTY_ARRAY","FodselInfoPanel","_b","_c","FodselFaktaIndex","behandling","FodselvilkaretFaktaInitPanel","vilkår","v","fodselsvilkarene","fv","MannAdoptererAleneFaktaForm","mannAdoptererAlene","Detail","EktefelleFaktaForm","ektefellesBarnIsEdited","ektefellesBarn","findAntallBarnUnder15","fodselsdatoer","omsorgsovertakelseDato","id","omsorgsdato","fodselsdato","a","b","isAgeAbove15","DokumentasjonFaktaForm","erForeldrepengerFagsak","hasEktefellesBarnAksjonspunkt","barnetsAnkomstTilNorgeDato","i","ExclamationmarkTriangleFillIcon","ADOPSJONSDOKUMENTAJON","OM_SOKER_ER_MANN_SOM_ADOPTERER_ALENE","OM_ADOPSJON_GJELDER_EKTEFELLES_BARN","adopsjonAksjonspunkter","allAksjonspunkter","kode","mannAdoptererAleneValues","omAdopsjonGjelderEktefellesBarn","aksjonspunkterArray","AdopsjonInfoPanel","isForeldrepengerFagsak","onSubmit","useCallback","AdopsjonFaktaIndex","AdopsjonsvilkaretFaktaInitPanel","fagsak","adopsjonsvilkarene","av","FagsakYtelseType","minLength3","minLength","maxLength6000","maxLength","validerApKodeOgHentApEnum","nullSafe","VarselOmRevurderingForm","behandlingArsaker","sprakkode","previewCallback","initialValues","formVerdier","skalVisePaVentModal","settSkalVisePaVentModal","useState","lukkModal","åpneModal","håndterSubmitFraModal","modalValues","isValid","forhåndsvisMelding","e","dokumentMalType","erAutomatiskRevurdering","result","current","ventearsaker","language","getLanguageFromSprakkode","AksjonspunktStatus","TextAreaField","hasValidText","classNames","Button","SettPaVentModalIndex","BehandlingType","VarselOmRevurderingProsessIndex","isReadOnly","getForhandsvisCallback","forhandsvisMelding","brevData","response","forhandsvisDokument","getLagringSideeffekter","setSkalOppdatereEtterBekreftelseAvAp","opneSokeside","VarselProsessStegInitPanel","lagringSideEffekter","restBehandlingApiHooks","standardPanelProps","useStandardProsessPanelProps","ProsessDefaultInitPanel","ProsessStegCode","skalViseProsessPanel","avslagsarsakerES","status","behandlingsresultat","VilkarResultPicker","ProsessStegBegrunnelseTextFieldNew","getFodselVilkarAvslagsarsaker","isFpFagsak","fodselsvilkarAvslagskoder","arsak","FodselVilkarForm","isApOpen","readOnlySubmitButton","erIkkeGodkjentAvBeslutter","ytelseTypeKode","vilkar","alleAvslagsarsaker","avslagsarsaker","fagsakYtelseType","originalErVilkarOk","vilkarUtfallType","lovReferanse","bTag","chunks","ProsessPanelTemplate","FodselVilkarProsessIndex","isAksjonspunktOpen","AdopsjonVilkarForm","aksjonspunktStatus","AdopsjonVilkarProsessIndex","ErOmsorgVilkaarOppfyltForm","OmsorgVilkarProsessIndex","ErForeldreansvarVilkaarOppfyltForm","isEngangsstonad","isForeldreansvar2Ledd","vilkarTypeKode","ForeldreansvarVilkarProsessIndex","AKSJONSPUNKT_TEKST_PER_KODE","hentAksjonspunktTekst","VILKAR_KODER","ForeldreansvarInngangsvilkarInitPanel","behandlingVersjon","InngangsvilkarDefaultInitPanel"],"mappings":"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"}