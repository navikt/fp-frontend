{"version":3,"file":"InnsynPaneler-605d22f7.js","sources":["../../../../packages/kodeverk/src/innsynResultatType.ts","../../../../packages/kodeverk/src/kommunikasjonsretning.ts","../../../../packages/prosess-innsyn/src/components/DocumentListInnsyn.tsx","../../../../packages/prosess-innsyn/src/components/VedtakDocuments.tsx","../../../../packages/prosess-innsyn/src/components/InnsynForm.tsx","../../../../packages/prosess-innsyn/src/InnsynProsessIndex.tsx","../../src/behandling/innsyn/prosessPaneler/BehandleInnsynProsessStegInitPanel.tsx","../../../../packages/prosess-vedtak-innsyn/src/components/DocumentListVedtakInnsyn.tsx","../../../../packages/prosess-vedtak-innsyn/src/components/InnsynVedtakForm.tsx","../../../../packages/prosess-vedtak-innsyn/src/VedtakInnsynProsessIndex.tsx","../../src/behandling/innsyn/prosessPaneler/InnsynVedtakProsessStegInitPanel.tsx","../../src/behandling/innsyn/InnsynPaneler.tsx"],"sourcesContent":["const innsynResultatType = {\n  INNVILGET: 'INNV',\n  DELVISTINNVILGET: 'DELV',\n  AVVIST: 'AVVIST',\n};\n\nexport default innsynResultatType;\n","const kommunikasjonsretning = {\n  INN: 'INN',\n  UT: 'UT',\n  NOTAT: 'N',\n};\n\nexport default kommunikasjonsretning;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { BodyShort, Heading } from '@navikt/ds-react';\n\nimport { CheckboxField } from '@navikt/ft-form-hooks';\nimport { DateTimeLabel, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\nimport { kommunikasjonsretning } from '@navikt/fp-kodeverk';\nimport { Dokument } from '@navikt/fp-types';\nimport { hentDokumentLenke } from '@navikt/fp-konstanter';\nimport { ChevronDownDoubleIcon, ChevronLeftDoubleIcon, ChevronRightDoubleIcon } from '@navikt/aksel-icons';\n\nimport styles from './documentListInnsyn.module.css';\n\nconst getDirectionImage = (document: Dokument, intl: IntlShape): ReactElement => {\n  if (document.kommunikasjonsretning === kommunikasjonsretning.INN) {\n    return (\n      <ChevronRightDoubleIcon\n        title={intl.formatMessage({ id: 'DocumentListInnsyn.Motta' })}\n        className={styles.imageInn}\n      />\n    );\n  }\n  if (document.kommunikasjonsretning === kommunikasjonsretning.UT) {\n    return (\n      <ChevronLeftDoubleIcon\n        title={intl.formatMessage({ id: 'DocumentListInnsyn.Send' })}\n        className={styles.imageSend}\n      />\n    );\n  }\n  return (\n    <ChevronDownDoubleIcon\n      title={intl.formatMessage({ id: 'DocumentListInnsyn.Intern' })}\n      className={styles.imageIntern}\n    />\n  );\n};\n\nconst noLabelHack = (): ReactElement => <span className={styles.hidden}>-</span>;\n\ninterface OwnProps {\n  saksNr: string;\n  documents: Dokument[];\n  readOnly?: boolean;\n}\n\n/**\n * DocumentListInnsyn\n *\n * Presentasjonskomponent. Viser dokumenter i en liste med Checkbox for å velge til innsyn. Tar også inn en callback-funksjon som blir\n * trigget når saksbehandler velger et dokument. Finnes ingen dokumenter blir det kun vist en label\n * som viser at ingen dokumenter finnes på fagsak.\n */\nconst DocumentListInnsyn: FunctionComponent<OwnProps> = ({ documents, saksNr, readOnly }) => {\n  const intl = useIntl();\n  if (documents.length === 0) {\n    return (\n      <BodyShort size=\"small\" className={styles.noDocuments}>\n        <FormattedMessage id=\"DocumentListInnsyn.NoDocuments\" />\n      </BodyShort>\n    );\n  }\n  const headerTextCodes = readOnly\n    ? ['DocumentListInnsyn.DocumentType']\n    : [\n        'DocumentListInnsyn.CheckBox',\n        'DocumentListInnsyn.Direction',\n        'DocumentListInnsyn.DocumentType',\n        'DocumentListInnsyn.DateTime',\n      ];\n\n  return (\n    <>\n      <Heading size=\"small\" className={styles.noDocuments}>\n        <FormattedMessage id=\"DocumentListInnsyn.VelgInnsynsDok\" />\n      </Heading>\n      <Table headerTextCodes={headerTextCodes}>\n        {documents.map(document => {\n          const img = getDirectionImage(document, intl);\n          const dokId = parseInt(document.dokumentId, 10);\n          return (\n            <TableRow key={dokId} id={dokId}>\n              <TableColumn className={styles.checkboxCol}>\n                <CheckboxField label={noLabelHack()} name={`dokument_${dokId}`} disabled={readOnly} />\n              </TableColumn>\n              <TableColumn hidden={readOnly}>{img}</TableColumn>\n              <TableColumn className={styles.linkCol}>\n                <a\n                  href={hentDokumentLenke(saksNr, document.journalpostId, document.dokumentId)}\n                  className=\"lenke lenke--frittstaende\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {document.tittel}\n                </a>\n              </TableColumn>\n              <TableColumn hidden={readOnly}>\n                {document.tidspunkt ? (\n                  <DateTimeLabel dateTimeString={document.tidspunkt} />\n                ) : (\n                  <BodyShort size=\"small\">\n                    <FormattedMessage id=\"DocumentListInnsyn.IProduksjon\" />\n                  </BodyShort>\n                )}\n              </TableColumn>\n            </TableRow>\n          );\n        })}\n      </Table>\n    </>\n  );\n};\n\nDocumentListInnsyn.defaultProps = {\n  readOnly: false,\n};\n\nexport default DocumentListInnsyn;\n","import React, { FunctionComponent, useState, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '@navikt/ds-react';\nimport { ChevronDownIcon, ChevronUpIcon } from '@navikt/aksel-icons';\n\nimport { DateLabel, FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { InnsynVedtaksdokument, KodeverkMedNavn } from '@navikt/fp-types';\nimport { hentVedtakDokumentLenke } from '@navikt/fp-konstanter';\n\ninterface OwnProps {\n  behandlingTypes: KodeverkMedNavn[];\n  vedtaksdokumenter: InnsynVedtaksdokument[];\n}\n\nconst VedtakDocuments: FunctionComponent<OwnProps> = ({ vedtaksdokumenter, behandlingTypes }) => {\n  const [showDocuments, setShowDocuments] = useState(false);\n  const toggleDocuments = useCallback(\n    (evt: React.MouseEvent) => {\n      setShowDocuments(!showDocuments);\n      evt.preventDefault();\n    },\n    [showDocuments],\n  );\n\n  if (vedtaksdokumenter.length === 0) {\n    return <FormattedMessage id=\"DocumentListInnsyn.Vedtaksdokumentasjon\" values={{ numberOfDocuments: 0 }} />;\n  }\n\n  return (\n    <>\n      <Link href=\"#\" onClick={toggleDocuments}>\n        <FormattedMessage\n          id=\"DocumentListInnsyn.Vedtaksdokumentasjon\"\n          values={{ numberOfDocuments: vedtaksdokumenter.length }}\n        />\n        {showDocuments ? <ChevronDownIcon /> : <ChevronUpIcon />}\n      </Link>\n      {showDocuments && (\n        <>\n          <VerticalSpacer fourPx />\n          <FlexContainer>\n            {vedtaksdokumenter.map(document => (\n              <FlexRow key={document.behandlingUuid}>\n                <FlexColumn>\n                  <DateLabel dateString={document.opprettetDato} />\n                </FlexColumn>\n                <FlexColumn>\n                  <Link href={hentVedtakDokumentLenke(document.behandlingUuid)} target=\"_blank\">\n                    {behandlingTypes.find(bt => bt.kode === document.tittel)?.navn || '-'}\n                  </Link>\n                </FlexColumn>\n              </FlexRow>\n            ))}\n          </FlexContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default VedtakDocuments;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport moment from 'moment';\nimport { Heading } from '@navikt/ds-react';\n\nimport {\n  kommunikasjonsretning,\n  AksjonspunktCode,\n  KodeverkType,\n  innsynResultatType as innsynResultatTyperKV,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { Form, Datepicker, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { AksjonspunktHelpTextTemp, ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { Aksjonspunkt, Dokument, InnsynDokument, InnsynVedtaksdokument, AlleKodeverk } from '@navikt/fp-types';\nimport { VurderInnsynAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport DocumentListInnsyn from './DocumentListInnsyn';\nimport VedtakDocuments from './VedtakDocuments';\n\nconst EMPTY_ARRAY = [] as InnsynVedtaksdokument[];\n\ntype FormValues = {\n  mottattDato: string;\n  innsynResultatType?: string;\n  fristDato?: string;\n  sattPaVent?: boolean;\n  begrunnelse?: string;\n};\n\nconst hentDokumenterMedNavnOgFikkInnsyn = (dokumenter: InnsynDokument[]): Record<string, boolean> =>\n  dokumenter.reduce((acc: Record<string, boolean>, d: InnsynDokument) => {\n    const dokumentNavn = `dokument_${d.dokumentId}`;\n    return {\n      [dokumentNavn]: d.fikkInnsyn,\n      ...acc,\n    };\n  }, {});\n\nconst buildInitialValues = (\n  innsynMottattDato: string,\n  innsynResultatType: string,\n  dokumenter: InnsynDokument[],\n  aksjonspunkter: Aksjonspunkt[],\n  fristBehandlingPåVent?: string,\n): FormValues => ({\n  mottattDato: innsynMottattDato,\n  innsynResultatType: innsynResultatType || undefined,\n  fristDato: fristBehandlingPåVent || moment().add(3, 'days').format(ISO_DATE_FORMAT),\n  sattPaVent: aksjonspunkter[0].status === aksjonspunktStatus.OPPRETTET ? undefined : !!fristBehandlingPåVent,\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n  ...hentDokumenterMedNavnOgFikkInnsyn(dokumenter || []),\n});\n\nconst getDocumentsStatus = (values: FormValues, documents: Dokument[]) =>\n  documents.map(document => ({\n    dokumentId: document.dokumentId,\n    journalpostId: document.journalpostId,\n    // @ts-ignore Fiks\n    fikkInnsyn: !!values[`dokument_${document.dokumentId}`],\n  }));\n\nconst getFilteredValues = (values: FormValues) =>\n  Object.keys(values)\n    .filter(valueKey => !valueKey.startsWith('dokument_'))\n    .reduce(\n      (acc, valueKey) => ({\n        ...acc,\n        // @ts-ignore Fiks\n        [valueKey]: values[valueKey],\n      }),\n      {},\n    );\n\n// @ts-ignore Fiks\nconst transformValues = (values: FormValues, documents: Dokument[]): VurderInnsynAp => ({\n  kode: AksjonspunktCode.VURDER_INNSYN,\n  innsynDokumenter: getDocumentsStatus(values, documents),\n  ...(getFilteredValues(values) as FormValues),\n});\n\n// Samme dokument kan ligge på flere behandlinger under samme fagsak.\nconst getFilteredReceivedDocuments = (allDocuments: Dokument[]): Dokument[] => {\n  const filteredDocuments = allDocuments.filter(doc => doc.kommunikasjonsretning === kommunikasjonsretning.INN);\n  allDocuments.forEach(\n    doc => !filteredDocuments.some(fd => fd.dokumentId === doc.dokumentId) && filteredDocuments.push(doc),\n  );\n  return filteredDocuments;\n};\n\ninterface OwnProps {\n  saksNr: string;\n  fristBehandlingPåVent?: string;\n  innsynMottattDato: string;\n  innsynDokumenter: InnsynDokument[];\n  innsynResultatType: string;\n  vedtaksdokumentasjon: InnsynVedtaksdokument[];\n  alleDokumenter?: Dokument[];\n  aksjonspunkter: Aksjonspunkt[];\n  alleKodeverk: AlleKodeverk;\n  submitCallback: (data: VurderInnsynAp) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * InnsynForm\n *\n * Viser panelet som håndterer avklaring av innsyn.\n */\nconst InnsynForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  readOnlySubmitButton,\n  innsynMottattDato,\n  alleKodeverk,\n  vedtaksdokumentasjon,\n  innsynResultatType,\n  fristBehandlingPåVent,\n  innsynDokumenter,\n  alleDokumenter = [],\n  aksjonspunkter,\n  submitCallback,\n  saksNr,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () =>\n      buildInitialValues(\n        innsynMottattDato,\n        innsynResultatType,\n        innsynDokumenter,\n        aksjonspunkter,\n        fristBehandlingPåVent,\n      ),\n    [innsynMottattDato, innsynResultatType, fristBehandlingPåVent, innsynDokumenter, aksjonspunkter],\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const documents = useMemo(() => getFilteredReceivedDocuments(alleDokumenter), [alleDokumenter]);\n\n  const innsynResultatTyper = useMemo(\n    () =>\n      alleKodeverk[KodeverkType.INNSYN_RESULTAT_TYPE]\n        .filter(irt => irt.kode !== '-')\n        .sort((t1, t2) => t1.navn.localeCompare(t2.navn))\n        .reverse(),\n    [alleKodeverk],\n  );\n\n  const isApOpen = aksjonspunkter[0].status === aksjonspunktStatus.OPPRETTET;\n\n  const innsynResultatTypeKode = formMethods.watch('innsynResultatType');\n  const sattPaVent = formMethods.watch('sattPaVent');\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, alleDokumenter))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">\n        <FormattedMessage id=\"InnsynForm.Innsynsbehandling\" />\n      </Heading>\n      <VerticalSpacer twentyPx />\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={isApOpen}>\n        {[<FormattedMessage id=\"InnsynForm.VurderKravetOmInnsyn\" key=\"1\" />]}\n      </AksjonspunktHelpTextTemp>\n      <VerticalSpacer twentyPx />\n      <Datepicker\n        name=\"mottattDato\"\n        label={intl.formatMessage({ id: 'InnsynForm.DatoMottattKrav' })}\n        isReadOnly={readOnly}\n        isEdited={!isApOpen}\n        validate={[required, hasValidDate]}\n      />\n      <VerticalSpacer sixteenPx />\n      <VedtakDocuments\n        vedtaksdokumenter={vedtaksdokumentasjon || EMPTY_ARRAY}\n        behandlingTypes={alleKodeverk[KodeverkType.BEHANDLING_TYPE]}\n      />\n      <VerticalSpacer twentyPx />\n      <DocumentListInnsyn saksNr={saksNr} documents={documents} readOnly={readOnly} />\n      <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"innsynResultatType\"\n        label={<FormattedMessage id=\"InnsynForm.Resultat\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isHorizontal\n        isEdited={!isApOpen}\n        radios={innsynResultatTyper.map(irt => ({\n          value: irt.kode,\n          label: irt.navn,\n        }))}\n      />\n      {(innsynResultatTypeKode === innsynResultatTyperKV.INNVILGET ||\n        innsynResultatTypeKode === innsynResultatTyperKV.DELVISTINNVILGET) && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={innsynResultatTypeKode === innsynResultatTyperKV.INNVILGET ? 28 : 176}>\n            <RadioGroupPanel\n              name=\"sattPaVent\"\n              label={<FormattedMessage id=\"InnsynForm.VelgVidereAksjon\" />}\n              validate={[required]}\n              isReadOnly={readOnly}\n              isEdited={!isApOpen}\n              isHorizontal\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  value: 'true',\n                  label: intl.formatMessage({ id: 'InnsynForm.SettBehandlingPåVent' }),\n                },\n                {\n                  value: 'false',\n                  label: intl.formatMessage({ id: 'InnsynForm.ForeslåOgFatteVedtak' }),\n                },\n              ]}\n            />\n            {sattPaVent && (\n              <>\n                <VerticalSpacer eightPx />\n                <Datepicker\n                  name=\"fristDato\"\n                  label={intl.formatMessage({ id: 'InnsynForm.FristDato' })}\n                  isReadOnly={readOnly}\n                  isEdited={!isApOpen}\n                  validate={[required, hasValidDate]}\n                />\n              </>\n            )}\n          </ArrowBox>\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n      <ProsessStegSubmitButtonNew\n        isReadOnly={readOnly}\n        isSubmittable={!readOnlySubmitButton}\n        isSubmitting={formMethods.formState.isSubmitting}\n        isDirty={formMethods.formState.isDirty}\n        text={sattPaVent ? intl.formatMessage({ id: 'SubmitButton.SettPåVent' }) : undefined}\n      />\n    </Form>\n  );\n};\n\nexport default InnsynForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { Dokument, Innsyn, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\nimport { LoadingPanel } from '@navikt/ft-ui-komponenter';\n\nimport InnsynForm from './components/InnsynForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  innsyn?: Innsyn;\n  alleDokumenter?: Dokument[];\n  saksnummer: string;\n}\n\nconst InnsynProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  innsyn,\n  alleDokumenter,\n  saksnummer,\n  aksjonspunkter,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    {!innsyn && <LoadingPanel />}\n    {innsyn && (\n      <InnsynForm\n        saksNr={saksnummer}\n        fristBehandlingPåVent={behandling.fristBehandlingPåVent}\n        innsynMottattDato={innsyn.innsynMottattDato}\n        innsynDokumenter={innsyn.dokumenter}\n        innsynResultatType={innsyn.innsynResultatType}\n        vedtaksdokumentasjon={innsyn.vedtaksdokumentasjon}\n        alleDokumenter={alleDokumenter}\n        aksjonspunkter={aksjonspunkter}\n        alleKodeverk={alleKodeverk}\n        submitCallback={submitCallback}\n        readOnly={isReadOnly}\n        readOnlySubmitButton={readOnlySubmitButton}\n        formData={formData}\n        setFormData={setFormData}\n      />\n    )}\n  </RawIntlProvider>\n);\n\nexport default InnsynProsessIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Dokument, Fagsak } from '@navikt/ft-types';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { InnsynProsessIndex } from '@navikt/fp-prosess-innsyn';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { Innsyn } from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_INNSYN];\n\nconst getEndepunkterPanelData = (saksnummer: string) => [\n  { key: BehandlingApiKeys.INNSYN_DOKUMENTER, params: { saksnummer } },\n  { key: BehandlingApiKeys.INNSYN },\n];\ntype EndepunktPanelData = {\n  innsynDokumenter?: Dokument[];\n  innsyn: Innsyn;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n}\n\nconst BehandleInnsynProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  ...props\n}) => (\n  <ProsessDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={getEndepunkterPanelData(fagsak.saksnummer)}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    prosessPanelKode={ProsessStegCode.BEHANDLE_INNSYN}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.Innsyn' })}\n    skalPanelVisesIMeny={() => true}\n    renderPanel={data => (\n      <InnsynProsessIndex saksnummer={fagsak.saksnummer} alleDokumenter={data.innsynDokumenter} {...data} />\n    )}\n  />\n);\n\nexport default BehandleInnsynProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Detail } from '@navikt/ds-react';\n\nimport { Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\nimport { Dokument } from '@navikt/fp-types';\nimport { hentDokumentLenke } from '@navikt/fp-konstanter';\n\nimport styles from './documentListVedtakInnsyn.module.css';\n\nconst headerTextCodes = ['DocumentListVedtakInnsyn.Dokument'];\n\ninterface OwnProps {\n  saksNr: string;\n  documents: ({\n    fikkInnsyn: boolean;\n  } & Dokument)[];\n}\n\n/**\n * DocumentListVedtakInnsyn\n *\n * Presentasjonskomponent. Viser dokumenter  som er valgt til innsyn i en liste . Finnes ingen dokumenter blir det kun vist en label\n * som viser at ingen dokumenter finnes på fagsak.\n */\nconst DocumentListVedtakInnsyn: FunctionComponent<OwnProps> = ({ documents, saksNr }) => {\n  if (documents.length === 0) {\n    return (\n      <BodyShort size=\"small\" className={styles.noDocuments}>\n        <FormattedMessage id=\"DocumentListVedtakInnsyn.NoDocuments\" />\n      </BodyShort>\n    );\n  }\n\n  return (\n    <>\n      <Detail className={styles.noDocuments}>\n        <FormattedMessage id=\"DocumentListVedtakInnsyn.InnsynsDok\" />\n      </Detail>\n      <Table noHover headerTextCodes={headerTextCodes}>\n        {documents.map(document => {\n          const dokId = parseInt(document.dokumentId, 10);\n          return (\n            <TableRow key={dokId} id={dokId}>\n              <TableColumn className={styles.linkCol}>\n                <a\n                  href={hentDokumentLenke(saksNr, document.journalpostId, document.dokumentId)}\n                  className=\"lenke lenke--frittstaende\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {document.tittel}\n                </a>\n              </TableColumn>\n            </TableRow>\n          );\n        })}\n      </Table>\n    </>\n  );\n};\n\nexport default DocumentListVedtakInnsyn;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, Heading } from '@navikt/ds-react';\n\nimport {\n  AksjonspunktCode,\n  kommunikasjonsretning,\n  innsynResultatType as InnsynResultatType,\n  dokumentMalType,\n} from '@navikt/fp-kodeverk';\nimport { ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Form, TextAreaField } from '@navikt/ft-form-hooks';\nimport { decodeHtmlEntity, getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength } from '@navikt/ft-form-validators';\nimport { Aksjonspunkt, Dokument, InnsynDokument } from '@navikt/fp-types';\nimport { ForeslaVedtakAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport DocumentListVedtakInnsyn from './DocumentListVedtakInnsyn';\n\nimport styles from './innsynVedtakForm.module.css';\n\nconst maxLength1500 = maxLength(1500);\nconst minLength3 = minLength(3);\n\nexport type ForhandsvisData = {\n  fritekst: string;\n  mottaker: string;\n  dokumentMal: string;\n  gjelderVedtak: boolean;\n};\n\nconst getPreviewCallback =\n  (previewCallback: (data: ForhandsvisData) => Promise<any>, begrunnelse?: string) =>\n  (e: React.KeyboardEvent | React.MouseEvent): void => {\n    e.preventDefault();\n\n    const data = {\n      fritekst: begrunnelse || ' ',\n      mottaker: '',\n      dokumentMal: dokumentMalType.INNSYN_SVAR,\n      gjelderVedtak: true,\n    };\n    previewCallback(data);\n  };\n\n// Samme dokument kan ligge på flere behandlinger under samme fagsak.\nconst getFilteredReceivedDocuments = (allDocuments: Dokument[]): Dokument[] => {\n  const filteredDocuments = allDocuments.filter(doc => doc.kommunikasjonsretning === kommunikasjonsretning.INN);\n  allDocuments.forEach(\n    doc => !filteredDocuments.some(fd => fd.dokumentId === doc.dokumentId) && filteredDocuments.push(doc),\n  );\n  return filteredDocuments;\n};\n\nconst getDocumenterMedFikkInnsynVerdi = (\n  alleDokumenter: Dokument[],\n  valgteDokumenter: InnsynDokument[],\n): DokumentMedInnsynMarkor[] =>\n  alleDokumenter\n    .filter(dokAlle => valgteDokumenter.find(dokValgte => dokValgte.dokumentId === dokAlle.dokumentId))\n    .map(dokAlle => ({\n      ...dokAlle,\n      fikkInnsyn: valgteDokumenter.find(dokValgte => dokValgte.dokumentId === dokAlle.dokumentId)?.fikkInnsyn || false,\n    }));\n\nconst findResultTypeMessage = (resultat: string): string => {\n  if (resultat === InnsynResultatType.AVVIST) {\n    return 'InnsynVedtakForm.Avslatt';\n  }\n  if (resultat === InnsynResultatType.DELVISTINNVILGET) {\n    return 'InnsynVedtakForm.Delvis';\n  }\n  return 'InnsynVedtakForm.Innvilget';\n};\n\ntype DokumentMedInnsynMarkor = {\n  fikkInnsyn: boolean;\n} & Dokument;\n\ntype FormValues = {\n  mottattDato?: string;\n  begrunnelse?: string;\n};\n\nconst buildInitialValues = (innsynMottattDato: string, aksjonspunkter: Aksjonspunkt[]): FormValues => ({\n  mottattDato: innsynMottattDato,\n  begrunnelse: aksjonspunkter.find(ap => ap.definisjon === AksjonspunktCode.FORESLA_VEDTAK)?.begrunnelse,\n});\n\nconst transformValues = (values: FormValues): ForeslaVedtakAp => ({\n  kode: AksjonspunktCode.FORESLA_VEDTAK,\n  ...values,\n});\n\ninterface OwnProps {\n  sprakkode: string;\n  innsynDokumenter: InnsynDokument[];\n  innsynMottattDato: string;\n  innsynResultatType: string;\n  alleDokumenter: Dokument[];\n  saksNr: string;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: ForeslaVedtakAp) => Promise<void>;\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n  readOnly: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * InnsynVedtakForm\n *\n * Presentasjonskomponent. Viser panelet som håndterer vedtaksforslag av innsyn.\n */\nconst InnsynVedtakForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  previewCallback,\n  saksNr,\n  innsynMottattDato,\n  aksjonspunkter,\n  submitCallback,\n  innsynResultatType,\n  innsynDokumenter,\n  sprakkode,\n  alleDokumenter,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () => buildInitialValues(innsynMottattDato, aksjonspunkter),\n    [innsynMottattDato, aksjonspunkter],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const documents = useMemo(\n    () => getDocumenterMedFikkInnsynVerdi(getFilteredReceivedDocuments(alleDokumenter), innsynDokumenter),\n    [alleDokumenter, innsynDokumenter],\n  );\n\n  const apBegrunnelse = aksjonspunkter.find(ap => ap.definisjon === AksjonspunktCode.VURDER_INNSYN)?.begrunnelse;\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const previewBrev = getPreviewCallback(previewCallback, begrunnelse);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">\n        <FormattedMessage id={readOnly ? 'InnsynVedtakForm.Vedtak' : 'InnsynVedtakForm.ForslagVedtak'} />\n      </Heading>\n      <VerticalSpacer eightPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"InnsynVedtakForm.Resultat\" />\n      </Label>\n      <BodyShort size=\"small\">\n        <FormattedMessage id={findResultTypeMessage(innsynResultatType)} />\n      </BodyShort>\n      <VerticalSpacer eightPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"InnsynVedtakForm.Vurdering\" />\n      </Label>\n      <BodyShort size=\"small\" className={styles.wordwrap}>\n        {decodeHtmlEntity(apBegrunnelse)}\n      </BodyShort>\n      <VerticalSpacer twentyPx />\n      {innsynResultatType !== InnsynResultatType.INNVILGET && (\n        <TextAreaField\n          name=\"begrunnelse\"\n          label={intl.formatMessage({ id: 'InnsynVedtakForm.Fritekst' })}\n          validate={[minLength3, maxLength1500, hasValidText]}\n          maxLength={1500}\n          readOnly={readOnly}\n          badges={[\n            {\n              type: 'info',\n              titleText: getLanguageFromSprakkode(sprakkode),\n            },\n          ]}\n        />\n      )}\n      <VerticalSpacer twentyPx />\n      {innsynResultatType !== InnsynResultatType.AVVIST && (\n        <DocumentListVedtakInnsyn\n          saksNr={saksNr}\n          documents={documents.filter(document => document.fikkInnsyn === true)}\n        />\n      )}\n      <VerticalSpacer twentyPx />\n      <FlexContainer>\n        <FlexRow>\n          {!readOnly && (\n            <FlexColumn>\n              <ProsessStegSubmitButtonNew\n                isReadOnly={readOnly}\n                isSubmittable\n                isSubmitting={formMethods.formState.isSubmitting}\n                isDirty={formMethods.formState.isDirty}\n                hasEmptyRequiredFields={false}\n              />\n            </FlexColumn>\n          )}\n          <FlexColumn>\n            <a\n              onClick={previewBrev}\n              onKeyDown={e => (e.key === 'Enter' ? previewBrev(e) : null)}\n              className=\"lenke lenke--frittstaende\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              role=\"link\"\n              tabIndex={0}\n            >\n              <FormattedMessage\n                id={readOnly ? 'InnsynVedtakForm.VisVedtaksbrev' : 'InnsynVedtakForm.ForhåndsvisBrev'}\n              />\n            </a>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n    </Form>\n  );\n};\n\nexport default InnsynVedtakForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { Dokument, Innsyn, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport InnsynVedtakForm, { ForhandsvisData } from './components/InnsynVedtakForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  innsyn: Innsyn;\n  saksnummer: string;\n  alleDokumenter?: Dokument[];\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n}\n\nconst VedtakInnsynProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  innsyn,\n  saksnummer,\n  aksjonspunkter,\n  alleDokumenter = [],\n  submitCallback,\n  previewCallback,\n  isReadOnly,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <InnsynVedtakForm\n      sprakkode={behandling.sprakkode}\n      innsynDokumenter={innsyn.dokumenter}\n      innsynMottattDato={innsyn.innsynMottattDato}\n      innsynResultatType={innsyn.innsynResultatType}\n      alleDokumenter={alleDokumenter}\n      saksNr={saksnummer}\n      aksjonspunkter={aksjonspunkter}\n      submitCallback={submitCallback}\n      previewCallback={previewCallback}\n      readOnly={isReadOnly}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default VedtakInnsynProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { AksjonspunktStatus, VilkarUtfallType } from '@navikt/ft-kodeverk';\nimport { Dokument } from '@navikt/ft-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport { AksjonspunktCode, behandlingResultatType } from '@navikt/fp-kodeverk';\nimport { VedtakInnsynProsessIndex, InnsynBrevData } from '@navikt/fp-prosess-vedtak-innsyn';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { Fagsak, Behandling, ForhåndsvisMeldingParams, Innsyn } from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport IverksetterVedtakStatusModal from '../../felles/modaler/vedtak/IverksetterVedtakStatusModal';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst getVedtakStatus = (behandling: Behandling): string => {\n  const { aksjonspunkt, behandlingsresultat } = behandling;\n  const harApentAksjonpunkt = aksjonspunkt.some(ap => ap.status === AksjonspunktStatus.OPPRETTET);\n  if (aksjonspunkt.length === 0 || harApentAksjonpunkt) {\n    return VilkarUtfallType.IKKE_VURDERT;\n  }\n  return behandlingsresultat?.type === behandlingResultatType.INNSYN_INNVILGET ||\n    behandlingsresultat?.type === behandlingResultatType.INNSYN_DELVIS_INNVILGET\n    ? VilkarUtfallType.OPPFYLT\n    : VilkarUtfallType.IKKE_OPPFYLT;\n};\n\nconst hentForhandsvisCallback =\n  (\n    forhandsvisMelding: (params?: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<unknown>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: InnsynBrevData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst getLagringSideeffekter =\n  (\n    toggleIverksetterVedtakModal: (skalViseModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n  ) =>\n  () => {\n    setSkalOppdatereEtterBekreftelseAvAp(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      toggleIverksetterVedtakModal(true);\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.FORESLA_VEDTAK];\n\nconst getEndepunkterPanelData = (saksnummer: string) => [\n  { key: BehandlingApiKeys.INNSYN },\n  { key: BehandlingApiKeys.INNSYN_DOKUMENTER, params: { saksnummer } },\n];\n\ntype EndepunktPanelData = {\n  innsyn: Innsyn;\n  innsynDokumenter?: Dokument[];\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  opneSokeside: () => void;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n}\n\nconst InnsynVedtakProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  opneSokeside,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  ...props\n}) => {\n  const intl = useIntl();\n  const [visIverksetterVedtakModal, toggleIverksetterVedtakModal] = useState(false);\n  const lagringSideeffekterCallback = getLagringSideeffekter(\n    toggleIverksetterVedtakModal,\n    setSkalOppdatereEtterBekreftelseAvAp,\n  );\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    hentForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={getEndepunkterPanelData(fagsak.saksnummer)}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.VEDTAK}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.Vedtak' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={() => getVedtakStatus(props.behandling)}\n      lagringSideEffekter={lagringSideeffekterCallback}\n      hentSkalMarkeresSomAktiv={() => getVedtakStatus(props.behandling) !== VilkarUtfallType.IKKE_VURDERT}\n      renderPanel={data => (\n        <>\n          <IverksetterVedtakStatusModal\n            visModal={visIverksetterVedtakModal}\n            lukkModal={() => {\n              toggleIverksetterVedtakModal(false);\n              opneSokeside();\n            }}\n            behandlingsresultat={standardPanelProps.behandling.behandlingsresultat}\n          />\n          <VedtakInnsynProsessIndex\n            saksnummer={fagsak.saksnummer}\n            previewCallback={previewCallback}\n            alleDokumenter={data?.innsynDokumenter}\n            {...data}\n          />\n        </>\n      )}\n    />\n  );\n};\n\nexport default InnsynVedtakProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { Behandling, Fagsak } from '@navikt/fp-types';\n\nimport ProsessPanelInitProps from '../felles/typer/prosessPanelInitProps';\nimport BehandlingContainer from '../felles/BehandlingContainer';\nimport BehandleInnsynProsessStegInitPanel from './prosessPaneler/BehandleInnsynProsessStegInitPanel';\nimport InnsynVedtakProsessStegInitPanel from './prosessPaneler/InnsynVedtakProsessStegInitPanel';\n\ninterface OwnProps {\n  behandling: Behandling;\n  fagsak: Fagsak;\n  valgtProsessSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  opneSokeside: () => void;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n}\n\nconst InnsynPaneler: FunctionComponent<OwnProps> = ({\n  behandling,\n  fagsak,\n  valgtProsessSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  opneSokeside,\n  setSkalOppdatereEtterBekreftelseAvAp,\n}) => {\n  const hentProsessPaneler = useCallback(\n    (props: ProsessPanelInitProps) => (\n      <>\n        <BehandleInnsynProsessStegInitPanel {...props} fagsak={fagsak} />\n        <InnsynVedtakProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n      </>\n    ),\n    [fagsak, opneSokeside, setSkalOppdatereEtterBekreftelseAvAp],\n  );\n\n  return (\n    <BehandlingContainer\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      hentProsessPaneler={hentProsessPaneler}\n    />\n  );\n};\n\nexport default InnsynPaneler;\n"],"names":["innsynResultatType","kommunikasjonsretning","getDirectionImage","document","intl","jsx","ChevronRightDoubleIcon","styles","ChevronLeftDoubleIcon","ChevronDownDoubleIcon","noLabelHack","DocumentListInnsyn","documents","saksNr","readOnly","useIntl","BodyShort","FormattedMessage","headerTextCodes","jsxs","Fragment","Heading","Table","img","dokId","TableRow","TableColumn","CheckboxField","hentDokumentLenke","DateTimeLabel","VedtakDocuments","vedtaksdokumenter","behandlingTypes","showDocuments","setShowDocuments","useState","toggleDocuments","useCallback","evt","Link","ChevronDownIcon","ChevronUpIcon","VerticalSpacer","FlexContainer","FlexRow","FlexColumn","DateLabel","hentVedtakDokumentLenke","_a","bt","EMPTY_ARRAY","hentDokumenterMedNavnOgFikkInnsyn","dokumenter","acc","d","buildInitialValues","innsynMottattDato","aksjonspunkter","fristBehandlingPåVent","moment","ISO_DATE_FORMAT","aksjonspunktStatus","ProsessStegBegrunnelseTextFieldNew","getDocumentsStatus","values","getFilteredValues","valueKey","transformValues","AksjonspunktCode","getFilteredReceivedDocuments","allDocuments","filteredDocuments","doc","fd","InnsynForm","readOnlySubmitButton","alleKodeverk","vedtaksdokumentasjon","innsynDokumenter","alleDokumenter","submitCallback","formData","setFormData","initialValues","useMemo","formMethods","useForm","innsynResultatTyper","KodeverkType","irt","t1","t2","isApOpen","innsynResultatTypeKode","sattPaVent","Form","AksjonspunktHelpTextTemp","Datepicker","required","hasValidDate","RadioGroupPanel","innsynResultatTyperKV","ArrowBox","ProsessStegSubmitButtonNew","createIntl","messages","InnsynProsessIndex","behandling","innsyn","saksnummer","isReadOnly","RawIntlProvider","LoadingPanel","AKSJONSPUNKT_KODER","getEndepunkterPanelData","BehandlingApiKeys","BehandleInnsynProsessStegInitPanel","fagsak","props","ProsessDefaultInitPanel","ProsessStegCode","data","DocumentListVedtakInnsyn","Detail","maxLength1500","maxLength","minLength3","minLength","getPreviewCallback","previewCallback","begrunnelse","e","dokumentMalType","getDocumenterMedFikkInnsynVerdi","valgteDokumenter","dokAlle","dokValgte","findResultTypeMessage","resultat","InnsynResultatType","ap","InnsynVedtakForm","sprakkode","apBegrunnelse","previewBrev","Label","decodeHtmlEntity","TextAreaField","hasValidText","getLanguageFromSprakkode","VedtakInnsynProsessIndex","getVedtakStatus","aksjonspunkt","behandlingsresultat","harApentAksjonpunkt","AksjonspunktStatus","VilkarUtfallType","behandlingResultatType","hentForhandsvisCallback","forhandsvisMelding","brevData","response","forhandsvisDokument","getLagringSideeffekter","toggleIverksetterVedtakModal","setSkalOppdatereEtterBekreftelseAvAp","InnsynVedtakProsessStegInitPanel","opneSokeside","visIverksetterVedtakModal","lagringSideeffekterCallback","standardPanelProps","useStandardProsessPanelProps","restBehandlingApiHooks","IverksetterVedtakStatusModal","InnsynPaneler","valgtProsessSteg","oppdaterProsessStegOgFaktaPanelIUrl","hentProsessPaneler","BehandlingContainer"],"mappings":"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"}