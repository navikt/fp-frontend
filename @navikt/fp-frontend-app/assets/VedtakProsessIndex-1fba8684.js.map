{"version":3,"file":"VedtakProsessIndex-1fba8684.js","sources":["../../../../node_modules/@navikt/aksel-icons/dist/react/esm/ArrowForward.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/PencilFill.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/QuestionmarkDiamond.js","../../../../packages/kodeverk/src/avslagsarsakCodes.ts","../../../../packages/kodeverk/src/mottakerTyper.ts","../../../../packages/kodeverk/src/opplysningAdresseType.ts","../../../../packages/kodeverk/src/personstatusType.ts","../../../../packages/kodeverk/src/region.ts","../../../../packages/kodeverk/src/relatertYtelseType.ts","../../../../packages/kodeverk/src/soknadType.ts","../../../../packages/kodeverk/src/vilkarType.ts","../../../../packages/kodeverk/src/dokumentTypeId.ts","../../../../packages/fakta-saken/src/components/innhentDok/InnhentDokOpptjeningUtlandPanel.tsx","../../../../packages/fakta-saken/src/components/startdatoForForeldrepenger/StartdatoForForeldrepengerperiodenForm.tsx","../../../../packages/fakta-saken/src/components/SakenFaktaPanel.tsx","../../../../packages/fakta-saken/src/SakenFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/SakenFaktaInitPanel.tsx","../../../../packages/fakta-ytelser/src/components/PersonYtelserTable.tsx","../../../../packages/fakta-ytelser/src/components/YtelserFaktaPanel.tsx","../../../../packages/fakta-ytelser/src/YtelserFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/YtelserFaktaInitPanel.tsx","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/MedlemskapEndringerTabell.tsx","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/OppholdstillatelseTabell.tsx","../../../../packages/fakta-medlemskap/src/getAddresses.ts","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/MedlemskapBostedSokerView.tsx","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/OppholdINorgeOgAdresserFaktaPanel.tsx","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/PerioderMedMedlemskapFaktaPanel.tsx","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/StatusForBorgerFaktaPanel.tsx","../../../../packages/fakta-medlemskap/src/components/oppholdInntektOgPerioder/OppholdInntektOgPeriodeForm.tsx","../../../../packages/fakta-medlemskap/src/components/MedlemskapInfoPanel.tsx","../../../../packages/fakta-medlemskap/src/MedlemskapFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/MedlemskapsvilkaretFaktaInitPanel.tsx","../../src/behandling/felles/prosess/skalViseProsessPanel.ts","../../../../packages/prosess-vilkar-sokers-opplysningsplikt/src/components/SokersOpplysningspliktForm.tsx","../../../../packages/prosess-vilkar-sokers-opplysningsplikt/src/SokersOpplysningspliktVilkarProsessIndex.tsx","../../src/behandling/fellesPaneler/prosess/OpplysningspliktProsessStegInitPanel.tsx","../../src/behandling/felles/prosess/useInngangsvilkarRegistrerer.ts","../../src/behandling/felles/prosess/InngangsvilkarDefaultInitPanel.tsx","../../../../packages/prosess-vilkar-overstyring/src/components/VilkarresultatMedOverstyringForm.tsx","../../../../packages/prosess-vilkar-overstyring/src/VilkarresultatMedOverstyringProsessIndex.tsx","../../src/behandling/felles/prosess/OverstyringPanelDef.tsx","../../src/behandling/felles/prosess/InngangsvilkarDefaultInitWrapper.tsx","../../src/behandling/fellesPaneler/prosess/inngangsvilkarPaneler/MedlemskapInngangsvilkarInitPanel.tsx","../../../../packages/prosess-avregning/src/components/AvregningSummary.tsx","../../../../packages/prosess-avregning/src/components/CollapseButton.tsx","../../../../packages/prosess-avregning/src/components/AvregningTable.tsx","../../../../packages/prosess-avregning/src/components/AvregningPanel.tsx","../../../../packages/prosess-avregning/src/AvregningProsessIndex.tsx","../../src/behandling/fellesPaneler/prosess/SimuleringProsessStegInitPanel.tsx","../../../../packages/prosess-vedtak/src/components/felles/VedtakHelper.ts","../../../../packages/prosess-vedtak/src/components/felles/VedtakFritekstPanel.tsx","../../../../packages/prosess-vedtak/src/components/forstegang/VedtakInnvilgetPanel.tsx","../../../../packages/prosess-vedtak/src/components/forstegang/VedtakAvslagPanel.tsx","../../../../packages/prosess-vedtak/src/components/felles/ManueltVedtaksbrevPanel.tsx","../../../../packages/prosess-vedtak/src/components/felles/VedtakHelpTextPanel.tsx","../../../../packages/prosess-vedtak/src/components/felles/VedtakFellesPanel.tsx","../../../../packages/prosess-vedtak/src/components/forstegang/VedtakForm.tsx","../../../../packages/prosess-vedtak/src/kodeverk/vedtakResultType.ts","../../../../packages/prosess-vedtak/src/components/revurdering/VedtakInnvilgetRevurderingPanel.tsx","../../../../packages/prosess-vedtak/src/components/revurdering/VedtakAvslagArsakOgBegrunnelsePanel.tsx","../../../../packages/prosess-vedtak/src/components/revurdering/VedtakOpphorRevurderingPanel.tsx","../../../../packages/prosess-vedtak/src/components/revurdering/VedtakRevurderingForm.tsx","../../../../packages/prosess-vedtak/src/VedtakProsessIndex.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgArrowForward = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M13.672 3.825a.75.75 0 0 1 .791.085l7 5.5a.75.75 0 0 1 0 1.18l-7 5.5a.75.75 0 0 1-1.213-.59v-2.724a9.14 9.14 0 0 0-2.63.565c-2.284.87-3.759 2.562-4.671 4.077a12.381 12.381 0 0 0-.957 1.965 9.83 9.83 0 0 0-.263.792l-.001.007A.75.75 0 0 1 3.25 20c0-1.654.322-3.941 1.224-6.123.903-2.184 2.413-4.32 4.823-5.558 1.133-.581 2.445-.954 3.953-1.046V4.5a.75.75 0 0 1 .422-.675ZM5.505 15.412c1.038-1.344 2.519-2.688 4.582-3.473 1.136-.432 2.435-.689 3.913-.689a.75.75 0 0 1 .75.75v1.957L19.786 10 14.75 6.043V8a.75.75 0 0 1-.75.75c-1.606 0-2.927.344-4.018.904-1.996 1.025-3.306 2.824-4.121 4.796-.132.319-.25.64-.356.962Z\", fill: \"currentColor\" })));\n});\nexport default SvgArrowForward;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgPencilFill = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M19.638 4.417a3.252 3.252 0 0 0-4.608-.008.328.328 0 0 0 .003.467l.298.292 3.841 3.84a.324.324 0 0 0 .458 0 3.252 3.252 0 0 0 .008-4.59Zm-1.651 6.235a.5.5 0 0 0 0-.707l-3.714-3.713-.184-.181a.5.5 0 0 0-.704.003l-7.733 7.734a.75.75 0 0 0-.19.324l-1.415 4.95a.75.75 0 0 0 .925.927l4.94-1.398a.751.751 0 0 0 .327-.191l7.748-7.748Z\", fill: \"currentColor\" })));\n});\nexport default SvgPencilFill;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgQuestionmarkDiamond = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M12.53 1.57a.75.75 0 0 0-1.06 0l-9.9 9.9a.75.75 0 0 0 0 1.06l9.9 9.9a.75.75 0 0 0 1.06 0l9.9-9.9a.75.75 0 0 0 0-1.06l-9.9-9.9ZM12 20.84 3.161 12l8.84-8.839 8.838 8.84L12 20.838Zm-.92-11.86c-.19.19-.33.49-.33.92a.75.75 0 0 1-1.5 0c0-.77.26-1.471.77-1.98.51-.51 1.21-.77 1.98-.77s1.47.26 1.98.77c.51.509.77 1.21.77 1.98 0 .517-.217.944-.452 1.273-.224.314-.512.601-.748.837l-.02.02c-.26.26-.463.466-.607.668-.14.196-.173.319-.173.402v.4a.75.75 0 0 1-1.5 0v-.4c0-.518.217-.945.452-1.274.224-.313.512-.6.748-.837l.02-.02c.26-.26.463-.465.607-.668.14-.196.173-.319.173-.401 0-.43-.14-.73-.33-.92-.19-.19-.49-.33-.92-.33-.43 0-.73.14-.92.33Zm-.03 6.923a.95.95 0 1 1 1.9 0 .95.95 0 0 1-1.9 0Z\", fill: \"currentColor\" })));\n});\nexport default SvgQuestionmarkDiamond;\n","const avslagsarsakCodes = {\n  INGEN_BEREGNINGSREGLER: '1099',\n};\n\nexport default avslagsarsakCodes;\n","const mottakerTyper = {\n  ARBG: 'ARBG_ORG',\n  ARBGP: 'ARBG_PRIV',\n  BRUKER: 'BRUKER',\n};\n\nexport default mottakerTyper;\n","enum OpplysningAdresseType {\n  BOSTEDSADRESSE = 'BOSTEDSADRESSE',\n  POSTADRESSE = 'POSTADRESSE',\n  UTENLANDSK_POSTADRESSE = 'POSTADRESSE_UTLAND',\n  NORSK_NAV_TILLEGGSADRESSE = 'MIDLERTIDIG_POSTADRESSE_NORGE',\n  UTENLANDSK_NAV_TILLEGSADRESSE = 'MIDLERTIDIG_POSTADRESSE_UTLAND',\n  UKJENT = 'UKJENT_ADRESSE',\n}\n\nexport default OpplysningAdresseType;\n","const personstatusType = {\n  DOD: 'DØD',\n  BOSATT: 'BOSA',\n  UTVANDRET: 'UTVA',\n  AKTIVTBOSTNR: 'ABNR',\n  AKTIVT: 'ADNR',\n  FORSVUNNET: 'FOSV',\n  FODSELSREGISTRERT: 'FØDR',\n  UFULLSTENDIGFNR: 'UFUL',\n  UREGISTRERT: 'UREG',\n  UTGATTANNULLERT: 'UTAN',\n  UTGATTPERSON: 'UTPE',\n  UDEFINERT: '-',\n};\n\nexport default personstatusType;\n","const region = {\n  UDEFINERT: '-',\n  NORDEN: 'NORDEN',\n};\n\nexport default region;\n","const relatertYtelseType = {\n  ENGANGSSTONAD: 'ENGANGSSTØNAD',\n  DAGPENGER: 'DAGPENGER',\n  FORELDREPENGER: 'FORELDREPENGER',\n  SYKEPENGER: 'SYKEPENGER',\n  ENSLIG_FORSORGER: 'ENSLIG_FORSØRGER',\n  ARBEIDSAVKLARINGSPENGER: 'ARBEIDSAVKLARINGSPENGER',\n  SVANGERSKAPSPENGER: 'SVANGERSKAPSPENGER',\n  PÅRØRENDESYKDOM: 'PÅRØRENDESYKDOM',\n};\n\nexport default relatertYtelseType;\n","const soknadType = {\n  FODSEL: 'ST-001',\n  ADOPSJON: 'ST-002',\n};\n\nexport default soknadType;\n","enum VilkarType {\n  FODSELSVILKARET_MOR = 'FP_VK_1',\n  SVANGERSKAPVILKARET = 'SVP_VK_1',\n  MEDLEMSKAPSVILKARET = 'FP_VK_2',\n  MEDLEMSKAPSVILKÅRET_LØPENDE = 'FP_VK_2_L',\n  SOKNADFRISTVILKARET = 'FP_VK_3',\n  ADOPSJONSVILKARET = 'FP_VK_4',\n  OMSORGSVILKARET = 'FP_VK_5',\n  FORELDREANSVARSVILKARET_2_LEDD = 'FP_VK_8',\n  FODSELSVILKARET_FAR = 'FP_VK_11',\n  ADOPSJONSVILKARET_FORELDREPENGER = 'FP_VK_16',\n  OPPTJENINGSPERIODE = 'FP_VK_21',\n  OPPTJENINGSVILKARET = 'FP_VK_23',\n  FORELDREANSVARSVILKARET_4_LEDD = 'FP_VK_33',\n  SOKERSOPPLYSNINGSPLIKT = 'FP_VK_34',\n  BEREGNINGSGRUNNLAGVILKARET = 'FP_VK_41',\n}\n\nexport const fodselsvilkarene = [VilkarType.FODSELSVILKARET_MOR, VilkarType.FODSELSVILKARET_FAR];\nexport const adopsjonsvilkarene = [VilkarType.ADOPSJONSVILKARET, VilkarType.ADOPSJONSVILKARET_FORELDREPENGER];\n\nexport default VilkarType;\n","const dokumentTypeId = {\n  INNTEKTSMELDING: 'INNTEKTSMELDING',\n  DOKUMENTASJON_AV_TERMIN_ELLER_FØDSEL: 'DOKUMENTASJON_AV_TERMIN_ELLER_FØDSEL',\n};\n\nexport default dokumentTypeId;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { FaktaBegrunnelseTextFieldNew, FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { AksjonspunktBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { required } from '@navikt/ft-form-validators';\nimport { RadioGroupPanel, Form } from '@navikt/ft-form-hooks';\nimport { Aksjonspunkt } from '@navikt/fp-types';\nimport { MerkOpptjeningUtlandAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './innhentDokOpptjeningUtlandPanel.module.css';\n\nconst OpptjeningIUtlandDokStatus = {\n  DOKUMENTASJON_VIL_BLI_INNHENTET: 'DOKUMENTASJON_VIL_BLI_INNHENTET',\n  DOKUMENTASJON_VIL_IKKE_BLI_INNHENTET: 'DOKUMENTASJON_VIL_IKKE_BLI_INNHENTET',\n};\n\nconst transformValues = (values: FormValues): MerkOpptjeningUtlandAp => ({\n  kode: AksjonspunktCode.AUTOMATISK_MARKERING_AV_UTENLANDSSAK,\n  ...values,\n});\n\nexport type FormValues = {\n  begrunnelse?: string;\n  dokStatus?: string;\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  harApneAksjonspunkter: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  submittable: boolean;\n  submitCallback: (data: MerkOpptjeningUtlandAp) => Promise<void>;\n  aksjonspunkt: Aksjonspunkt;\n  dokStatus?: string;\n  formData: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst InnhentDokOpptjeningUtlandPanel: FunctionComponent<OwnProps> = ({\n  readOnly,\n  harApneAksjonspunkter,\n  aksjonspunkt,\n  alleMerknaderFraBeslutter,\n  submittable,\n  submitCallback,\n  dokStatus,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || {\n      dokStatus,\n      ...FaktaBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkt),\n    },\n  });\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">\n        <FormattedMessage id=\"InnhentDokOpptjeningUtlandPanel.OpptjeningUtland\" />\n      </Heading>\n      {harApneAksjonspunkter && <VerticalSpacer sixteenPx />}\n      <AksjonspunktBox\n        className={styles.aksjonspunktMargin}\n        erAksjonspunktApent={harApneAksjonspunkter}\n        erIkkeGodkjentAvBeslutter={!!alleMerknaderFraBeslutter[aksjonspunkt.definisjon]?.notAccepted}\n      >\n        <RadioGroupPanel\n          name=\"dokStatus\"\n          label={<FormattedMessage id=\"InnhentDokOpptjeningUtlandPanel.InnhentelseDok\" />}\n          validate={[required]}\n          isReadOnly={readOnly}\n          radios={[\n            {\n              label: <FormattedMessage id=\"InnhentDokOpptjeningUtlandPanel.Innhentes\" />,\n              value: OpptjeningIUtlandDokStatus.DOKUMENTASJON_VIL_BLI_INNHENTET,\n            },\n            {\n              label: <FormattedMessage id=\"InnhentDokOpptjeningUtlandPanel.InnhentesIkke\" values={{ b: bTag }} />,\n              value: OpptjeningIUtlandDokStatus.DOKUMENTASJON_VIL_IKKE_BLI_INNHENTET,\n            },\n          ]}\n        />\n        <VerticalSpacer sixteenPx />\n        <FaktaBegrunnelseTextFieldNew\n          isSubmittable={submittable}\n          isReadOnly={readOnly}\n          hasBegrunnelse={!!begrunnelse}\n          label={intl.formatMessage({ id: 'InnhentDokOpptjeningUtlandPanel.Begrunnelse' })}\n        />\n        <VerticalSpacer sixteenPx />\n        <FaktaSubmitButtonNew\n          isSubmittable={submittable}\n          isSubmitting={formMethods.formState.isSubmitting}\n          isDirty={formMethods.formState.isDirty}\n          isReadOnly={readOnly}\n        />\n      </AksjonspunktBox>\n    </Form>\n  );\n};\n\nexport default InnhentDokOpptjeningUtlandPanel;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { useForm, UseFormGetValues } from 'react-hook-form';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { BodyShort, Heading, Button } from '@navikt/ds-react';\nimport { hasValidDate, hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\nimport { Datepicker, TextAreaField, Form } from '@navikt/ft-form-hooks';\nimport { FlexColumn, FlexContainer, FlexRow, AksjonspunktBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { PencilFillIcon } from '@navikt/aksel-icons';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, Soknad } from '@navikt/fp-types';\nimport { OverstyringAvklarStartdatoForPeriodenAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './startdatoForForeldrepengerperiodenForm.module.css';\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\ntype FormValues = {\n  startdatoFraSoknad?: string;\n  begrunnelse?: string;\n};\n\nconst buildInitialValues = (soknad: Soknad, aksjonspunkt?: Aksjonspunkt): FormValues => ({\n  startdatoFraSoknad: soknad.oppgittFordeling?.startDatoForPermisjon,\n  begrunnelse: (aksjonspunkt && aksjonspunkt.begrunnelse) || '',\n});\n\nconst transformValues = (soknad: Soknad, values: FormValues): OverstyringAvklarStartdatoForPeriodenAp => ({\n  kode: AksjonspunktCode.OVERSTYR_AVKLAR_STARTDATO,\n  opprinneligDato: soknad.oppgittFordeling?.startDatoForPermisjon,\n  startdatoFraSoknad: values.startdatoFraSoknad!,\n  begrunnelse: values.begrunnelse,\n});\n\nconst getValidateIsBefore2019 = (getValues: UseFormGetValues<FormValues>, intl: IntlShape) => () => {\n  const startdatoFraSoknad = getValues('startdatoFraSoknad');\n  return dayjs(startdatoFraSoknad).isBefore('2019-01-01')\n    ? intl.formatMessage({ id: 'StartdatoForForeldrepengerperiodenForm.StartdatoFør2019' })\n    : undefined;\n};\n\ninterface OwnProps {\n  aksjonspunkt?: Aksjonspunkt;\n  soknad: Soknad;\n  submitCallback: (data: OverstyringAvklarStartdatoForPeriodenAp) => Promise<void>;\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * StartdatoForForeldrepengerperiodenForm\n *\n * Overstyring av startdato for foreldrepengerperioden.\n */\nconst StartdatoForForeldrepengerperiodenForm: FunctionComponent<OwnProps> = ({\n  submitCallback,\n  aksjonspunkt,\n  soknad,\n  alleMerknaderFraBeslutter,\n  readOnly,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(soknad, aksjonspunkt),\n  });\n\n  const [visEditeringsmodus, toggleEdit] = useState(false);\n  const slåPåEditering = useCallback(() => toggleEdit(true), []);\n  const slaAvEditeringAvStartdato = useCallback(() => {\n    formMethods.reset();\n    toggleEdit(false);\n  }, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(soknad, values))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">\n        <FormattedMessage id=\"StartdatoForForeldrepengerperiodenForm.StartdatoForPerioden\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      {!visEditeringsmodus && (\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              <BodyShort size=\"small\">\n                <FormattedMessage id=\"StartdatoForForeldrepengerperiodenForm.StartdatoSomBenyttes\" />\n              </BodyShort>\n            </FlexColumn>\n            <FlexColumn>\n              <BodyShort size=\"small\">\n                {soknad.oppgittFordeling\n                  ? dayjs(soknad.oppgittFordeling.startDatoForPermisjon).format(DDMMYYYY_DATE_FORMAT)\n                  : '-'}\n              </BodyShort>\n            </FlexColumn>\n            <FlexColumn>\n              <PencilFillIcon\n                title={intl.formatMessage({ id: 'StartdatoForForeldrepengerperiodenForm.EndreStartdato' })}\n                className={readOnly ? styles.editIconReadonly : styles.editIcon}\n                onClick={readOnly ? undefined : slåPåEditering}\n              />\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n      )}\n      {visEditeringsmodus && (\n        <AksjonspunktBox\n          className={styles.aksjonspunktMargin}\n          erAksjonspunktApent={false}\n          erIkkeGodkjentAvBeslutter={\n            !!alleMerknaderFraBeslutter[AksjonspunktCode.OVERSTYR_AVKLAR_STARTDATO]?.notAccepted\n          }\n        >\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                <Datepicker\n                  name=\"startdatoFraSoknad\"\n                  label={intl.formatMessage({ id: 'StartdatoForForeldrepengerperiodenForm.Startdato' })}\n                  validate={[required, hasValidDate, getValidateIsBefore2019(formMethods.getValues, intl)]}\n                  isReadOnly={readOnly}\n                />\n              </FlexColumn>\n            </FlexRow>\n            <VerticalSpacer sixteenPx />\n            <FlexRow>\n              <FlexColumn className={styles.begrunnelsefelt}>\n                <TextAreaField\n                  name=\"begrunnelse\"\n                  label={<FormattedMessage id=\"StartdatoForForeldrepengerperiodenForm.Vurdering\" />}\n                  validate={[required, minLength3, maxLength1500, hasValidText]}\n                  maxLength={1500}\n                  readOnly={readOnly}\n                />\n              </FlexColumn>\n            </FlexRow>\n            <VerticalSpacer sixteenPx />\n            <FlexRow>\n              <FlexColumn>\n                <Button\n                  size=\"small\"\n                  variant=\"primary\"\n                  disabled={!formMethods.formState.isDirty || formMethods.formState.isSubmitting}\n                  loading={formMethods.formState.isSubmitting}\n                >\n                  <FormattedMessage id=\"UtlandPanel.lagre\" />\n                </Button>\n              </FlexColumn>\n              <Button variant=\"secondary\" size=\"small\" onClick={slaAvEditeringAvStartdato} type=\"button\">\n                <FormattedMessage id=\"UtlandPanel.avbryt\" />\n              </Button>\n              <FlexColumn />\n            </FlexRow>\n          </FlexContainer>\n        </AksjonspunktBox>\n      )}\n    </Form>\n  );\n};\n\nexport default StartdatoForForeldrepengerperiodenForm;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, Soknad } from '@navikt/fp-types';\nimport {\n  VerticalSpacer,\n  AksjonspunktHelpTextHTML,\n  FlexContainer,\n  FlexRow,\n  FlexColumn,\n} from '@navikt/ft-ui-komponenter';\nimport {\n  MerkOpptjeningUtlandAp,\n  OverstyringAvklarStartdatoForPeriodenAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport InnhentDokOpptjeningUtlandPanel from './innhentDok/InnhentDokOpptjeningUtlandPanel';\nimport StartdatoForForeldrepengerperiodenForm from './startdatoForForeldrepenger/StartdatoForForeldrepengerperiodenForm';\n\nimport styles from './sakenFaktaPanel.module.css';\n\ninterface OwnProps {\n  erSvangerskapspenger: boolean;\n  soknad?: Soknad;\n  aksjonspunkter: Aksjonspunkt[];\n  dokStatus?: string;\n  harApneAksjonspunkter: boolean;\n  submitCallback: (data: MerkOpptjeningUtlandAp | OverstyringAvklarStartdatoForPeriodenAp) => Promise<void>;\n  readOnly: boolean;\n  submittable: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  formData?: any;\n  setFormData: (data: any) => void;\n}\n\nconst erMarkertUtenlandssak = (aksjonspunkter: Aksjonspunkt[]): boolean =>\n  aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.AUTOMATISK_MARKERING_AV_UTENLANDSSAK);\n\nconst SakenFaktaPanel: FunctionComponent<OwnProps> = ({\n  erSvangerskapspenger,\n  soknad,\n  aksjonspunkter,\n  dokStatus,\n  harApneAksjonspunkter,\n  alleMerknaderFraBeslutter,\n  submitCallback,\n  readOnly,\n  submittable,\n  formData,\n  setFormData,\n}) => {\n  const automatiskMarkeringAvUtenlandssakAp = aksjonspunkter.find(\n    ap => ap.definisjon === AksjonspunktCode.AUTOMATISK_MARKERING_AV_UTENLANDSSAK,\n  );\n  return (\n    <>\n      {harApneAksjonspunkter && erMarkertUtenlandssak(aksjonspunkter) && (\n        <>\n          <AksjonspunktHelpTextHTML>\n            {[<FormattedMessage key=\"OpptjeningUtland\" id=\"SakenFaktaPanel.OpptjeningUtland\" />]}\n          </AksjonspunktHelpTextHTML>\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n      <FlexContainer>\n        <FlexRow>\n          {automatiskMarkeringAvUtenlandssakAp && (\n            <FlexColumn className={styles.col}>\n              <InnhentDokOpptjeningUtlandPanel\n                dokStatus={dokStatus}\n                readOnly={readOnly}\n                harApneAksjonspunkter={harApneAksjonspunkter}\n                aksjonspunkt={automatiskMarkeringAvUtenlandssakAp}\n                submittable={submittable}\n                submitCallback={submitCallback}\n                alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n                formData={formData}\n                setFormData={setFormData}\n              />\n            </FlexColumn>\n          )}\n          {!erSvangerskapspenger && !!soknad && (\n            <FlexColumn className={styles.col}>\n              <StartdatoForForeldrepengerperiodenForm\n                aksjonspunkt={aksjonspunkter.find(ap => ap.definisjon === AksjonspunktCode.OVERSTYR_AVKLAR_STARTDATO)}\n                submitCallback={submitCallback}\n                readOnly={readOnly}\n                alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n                soknad={soknad}\n                formData={formData}\n                setFormData={setFormData}\n              />\n            </FlexColumn>\n          )}\n        </FlexRow>\n      </FlexContainer>\n    </>\n  );\n};\n\nexport default SakenFaktaPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { Soknad, StandardFaktaPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport SakenFaktaPanel from './components/SakenFaktaPanel';\nimport messages from '../i18n/nb_NO.json';\n\ninterface OwnProps {\n  soknad?: Soknad;\n  erSvangerskapspenger: boolean;\n  utlandDokStatus?: {\n    dokStatus?: string;\n  };\n}\n\nconst intl = createIntl(messages);\n\nconst SakenFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  aksjonspunkter,\n  erSvangerskapspenger,\n  soknad,\n  utlandDokStatus,\n  submitCallback,\n  submittable,\n  harApneAksjonspunkter,\n  readOnly,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <SakenFaktaPanel\n      erSvangerskapspenger={erSvangerskapspenger}\n      soknad={soknad}\n      aksjonspunkter={aksjonspunkter}\n      dokStatus={utlandDokStatus?.dokStatus}\n      harApneAksjonspunkter={harApneAksjonspunkter}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      submittable={submittable}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default SakenFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Fagsak } from '@navikt/ft-types';\nimport { FagsakYtelseType } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { SakenFaktaIndex } from '@navikt/fp-fakta-saken';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Soknad } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AUTOMATISK_MARKERING_AV_UTENLANDSSAK,\n  AksjonspunktCode.OVERSTYR_AVKLAR_STARTDATO,\n];\n\nconst OVERSTYRING_AP_CODES = [AksjonspunktCode.OVERSTYR_AVKLAR_STARTDATO];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.UTLAND_DOK_STATUS, BehandlingApiKeys.SOKNAD];\ntype EndepunktPanelData = {\n  utlandDokStatus?: {\n    dokStatus?: string;\n  };\n  soknad: Soknad;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n}\n\n/**\n * SakenFaktaInitPanel\n *\n * Dette faktapanelet skal alltid vises\n */\nconst SakenFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({ fagsak, ...props }) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    overstyringApKoder={OVERSTYRING_AP_CODES}\n    faktaPanelKode={FaktaPanelCode.SAKEN}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'SakenFaktaPanel.Title' })}\n    skalPanelVisesIMeny={() => true}\n    renderPanel={data => (\n      <SakenFaktaIndex\n        {...data}\n        erSvangerskapspenger={fagsak.fagsakYtelseType === FagsakYtelseType.SVANGERSKAPSPENGER}\n      />\n    )}\n  />\n);\n\nexport default SakenFaktaInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport moment from 'moment';\nimport { BodyShort, Link } from '@navikt/ds-react';\n\nimport { DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\nimport { KodeverkMedNavn, RelatertTilgrensedYtelse } from '@navikt/fp-types';\nimport { relatertYtelseType } from '@navikt/fp-kodeverk';\n\nimport styles from './personYtelserTable.module.css';\n\ninterface OwnProps {\n  ytelser?: RelatertTilgrensedYtelse[];\n  relatertYtelseTyper: KodeverkMedNavn[];\n  relatertYtelseStatus: KodeverkMedNavn[];\n}\n\nconst HEADER_TEXT_CODES = [\n  'PersonYtelserTable.Ytelse',\n  'PersonYtelserTable.Periode',\n  'PersonYtelserTable.Status',\n  'PersonYtelserTable.Saksnummer',\n];\n\nconst formatDateToDDMMYYYY = (date: string): string => {\n  const parsedDate = moment(date, ISO_DATE_FORMAT, true);\n  return parsedDate.isValid() ? parsedDate.format(DDMMYYYY_DATE_FORMAT) : date;\n};\n\n/**\n * PersonYtelserTable\n *\n * Viser tilgrensede ytelser.\n */\nconst PersonYtelserTable: FunctionComponent<OwnProps> = ({ ytelser, relatertYtelseTyper, relatertYtelseStatus }) => {\n  const intl = useIntl();\n\n  const ytelseRows =\n    ytelser &&\n    ytelser\n      .map(ytelse => {\n        const ytelseNavn = relatertYtelseTyper.filter(type => type.kode === ytelse.relatertYtelseType)[0].navn;\n\n        const skalViseLenke =\n          ytelse.relatertYtelseType === relatertYtelseType.ENGANGSSTONAD ||\n          ytelse.relatertYtelseType === relatertYtelseType.FORELDREPENGER ||\n          ytelse.relatertYtelseType === relatertYtelseType.SVANGERSKAPSPENGER;\n\n        if (ytelse.tilgrensendeYtelserListe.length === 0) {\n          return [\n            {\n              navn: ytelseNavn,\n              periode: intl.formatMessage({ id: 'PersonYtelserTable.Ingen' }),\n              status: '',\n              saksnummer: '',\n              skalViseLenke,\n            },\n          ];\n        }\n\n        return ytelse.tilgrensendeYtelserListe.map((ytelseInfo, innerIndex) => {\n          const tilDato = formatDateToDDMMYYYY(ytelseInfo.periodeTilDato) || '';\n          const fraDato = formatDateToDDMMYYYY(ytelseInfo.periodeFraDato) || '';\n\n          const statusNavn = relatertYtelseStatus.filter(status => status.kode === ytelseInfo.status)[0].navn;\n\n          return {\n            navn: innerIndex === 0 ? ytelseNavn : '',\n            periode: `${fraDato} - ${tilDato}`,\n            status: statusNavn,\n            saksnummer: ytelseInfo.saksNummer,\n            skalViseLenke,\n          };\n        });\n      })\n      .reduce((allRows, rows) => allRows.concat(rows), []);\n\n  if (!ytelseRows) {\n    return null;\n  }\n\n  return (\n    <Table headerTextCodes={HEADER_TEXT_CODES} classNameTable={styles.tableStyle} noHover>\n      {ytelseRows.map((ytelse, index) => (\n        <TableRow key={`index${index + 1}`}>\n          <TableColumn>{ytelse.navn ? <BodyShort size=\"small\">{ytelse.navn}</BodyShort> : ''}</TableColumn>\n          <TableColumn>\n            <BodyShort size=\"small\">{ytelse.periode}</BodyShort>\n          </TableColumn>\n          <TableColumn>{ytelse.status ? <BodyShort size=\"small\">{ytelse.status}</BodyShort> : ''}</TableColumn>\n          <TableColumn>\n            {ytelse.saksnummer && ytelse.skalViseLenke && (\n              <BodyShort size=\"small\">\n                <Link href={`/fagsak/${ytelse.saksnummer}`} target=\"_blank\">\n                  {ytelse.saksnummer}\n                </Link>\n              </BodyShort>\n            )}\n            {ytelse.saksnummer && !ytelse.skalViseLenke ? <BodyShort size=\"small\">{ytelse.saksnummer}</BodyShort> : ''}\n          </TableColumn>\n        </TableRow>\n      ))}\n    </Table>\n  );\n};\n\nexport default PersonYtelserTable;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\n\nimport { InntektArbeidYtelse, KodeverkMedNavn } from '@navikt/fp-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport PersonYtelserTable from './PersonYtelserTable';\n\ninterface OwnProps {\n  inntektArbeidYtelse: InntektArbeidYtelse;\n  relatertYtelseTyper: KodeverkMedNavn[];\n  relatertYtelseStatus: KodeverkMedNavn[];\n}\n\nconst YtelserFaktaPanel: FunctionComponent<OwnProps> = ({\n  inntektArbeidYtelse,\n  relatertYtelseTyper,\n  relatertYtelseStatus,\n}) => (\n  <>\n    <Heading size=\"small\">\n      <FormattedMessage id=\"YtelserFaktaPanel.SokersYtelser\" />\n    </Heading>\n    <VerticalSpacer eightPx />\n    <PersonYtelserTable\n      ytelser={inntektArbeidYtelse.relatertTilgrensendeYtelserForSoker}\n      relatertYtelseTyper={relatertYtelseTyper}\n      relatertYtelseStatus={relatertYtelseStatus}\n    />\n    {inntektArbeidYtelse.relatertTilgrensendeYtelserForAnnenForelder &&\n      inntektArbeidYtelse.relatertTilgrensendeYtelserForAnnenForelder.length > 0 && (\n        <>\n          <VerticalSpacer fourtyPx />\n          <Heading size=\"small\">\n            <FormattedMessage id=\"YtelserFaktaPanel.AnnenPartsYtelser\" />\n          </Heading>\n          <VerticalSpacer eightPx />\n          <PersonYtelserTable\n            ytelser={inntektArbeidYtelse.relatertTilgrensendeYtelserForAnnenForelder}\n            relatertYtelseTyper={relatertYtelseTyper}\n            relatertYtelseStatus={relatertYtelseStatus}\n          />\n        </>\n      )}\n  </>\n);\n\nexport default YtelserFaktaPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { KodeverkType } from '@navikt/fp-kodeverk';\nimport { InntektArbeidYtelse, AlleKodeverk } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport YtelserFaktaPanel from './components/YtelserFaktaPanel';\nimport messages from '../i18n/nb_NO.json';\n\ninterface OwnProps {\n  inntektArbeidYtelse: InntektArbeidYtelse;\n  alleKodeverk: AlleKodeverk;\n}\n\nconst intl = createIntl(messages);\n\nconst YtelserFaktaIndex: FunctionComponent<OwnProps> = ({ inntektArbeidYtelse, alleKodeverk }) => (\n  <RawIntlProvider value={intl}>\n    <YtelserFaktaPanel\n      inntektArbeidYtelse={inntektArbeidYtelse}\n      relatertYtelseTyper={alleKodeverk[KodeverkType.RELATERT_YTELSE_TYPE]}\n      relatertYtelseStatus={[\n        ...alleKodeverk[KodeverkType.FAGSAK_STATUS],\n        ...alleKodeverk[KodeverkType.RELATERT_YTELSE_TILSTAND],\n      ]}\n    />\n  </RawIntlProvider>\n);\n\nexport default YtelserFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { YtelserFaktaIndex } from '@navikt/fp-fakta-ytelser';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { InntektArbeidYtelse } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.INNTEKT_ARBEID_YTELSE];\ntype EndepunktPanelData = {\n  inntektArbeidYtelse: InntektArbeidYtelse;\n};\n\n/**\n * YtelserFaktaInitPanel\n */\nconst YtelserFaktaInitPanel: FunctionComponent<FaktaPanelInitProps> = props => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    faktaPanelKode={FaktaPanelCode.YTELSER}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'YtelserFaktaIndex.Ytelser' })}\n    skalPanelVisesIMeny={() => true}\n    renderPanel={data => <YtelserFaktaIndex {...data} />}\n  />\n);\n\nexport default YtelserFaktaInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { DateLabel, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\n\nimport { MedlemPeriode } from '@navikt/fp-types';\nimport { Aksjonspunkt } from '@navikt/ft-types';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\n\nconst headerTextCodes = ['MedlemskapEndringerTabell.GjeldeneFom', 'MedlemskapEndringerTabell.Opplysning'];\n\ninterface OwnProps {\n  perioder: MedlemPeriode[];\n  valgtPeriodeVurderingsdato?: string;\n  velgPeriodeCallback: (_p: React.KeyboardEvent | React.MouseEvent, id?: string, periode?: MedlemPeriode) => void;\n  aksjonspunkter: Aksjonspunkt[];\n}\n\nconst MedlemskapEndringerTabell: FunctionComponent<OwnProps> = ({\n  perioder,\n  velgPeriodeCallback,\n  valgtPeriodeVurderingsdato,\n  aksjonspunkter,\n}) => (\n  <Table headerTextCodes={headerTextCodes}>\n    {perioder.map(periode => (\n      <TableRow<string, MedlemPeriode>\n        key={periode.vurderingsdato}\n        id={periode.vurderingsdato}\n        onMouseDown={velgPeriodeCallback}\n        onKeyDown={velgPeriodeCallback}\n        isSelected={periode.vurderingsdato === valgtPeriodeVurderingsdato}\n        model={periode}\n        isApLeftBorder={\n          periode.aksjonspunkter.some(periodeAp =>\n            aksjonspunkter.some(ap => ap.definisjon === periodeAp && ap.status === AksjonspunktStatus.OPPRETTET),\n          ) && periode.begrunnelse === undefined\n        }\n      >\n        <TableColumn>\n          <DateLabel dateString={periode.vurderingsdato} />\n        </TableColumn>\n        <TableColumn>{periode.årsaker.join()}</TableColumn>\n      </TableRow>\n    ))}\n  </Table>\n);\n\nexport default MedlemskapEndringerTabell;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PeriodLabel, DateLabel, Table, TableColumn, TableRow, FaktaGruppe } from '@navikt/ft-ui-komponenter';\n\nimport { AlleKodeverk, Oppholdstillatelse } from '@navikt/fp-types';\nimport { KodeverkType } from '@navikt/fp-kodeverk';\n\nconst headerTextCodes = ['OppholdstillatelseTabell.Periode', 'OppholdstillatelseTabell.Type'];\n\ninterface OwnProps {\n  oppholdstillatelse: Oppholdstillatelse[];\n  alleKodeverk: AlleKodeverk;\n}\n\nconst OppholdstillatelseTabell: FunctionComponent<OwnProps> = ({ oppholdstillatelse, alleKodeverk }) => (\n  <FaktaGruppe title={useIntl().formatMessage({ id: 'OppholdstillatelseTabell.Overskrift' })}>\n    <Table headerTextCodes={headerTextCodes} noHover>\n      {oppholdstillatelse.map(opphold => (\n        <TableRow key={opphold.fom + opphold.tom}>\n          <TableColumn>\n            {opphold.fom && <PeriodLabel dateStringFom={opphold.fom} dateStringTom={opphold.tom} />}\n            {!opphold.fom && (\n              <span>\n                <FormattedMessage id=\"OppholdstillatelseTabell.Ukjent\" />\n                -\n                <DateLabel dateString={opphold.tom} />\n              </span>\n            )}\n          </TableColumn>\n          <TableColumn>\n            {\n              alleKodeverk[KodeverkType.OPPHOLDSTILLATELSE_TYPE].find(k => k.kode === opphold.oppholdstillatelseType)\n                ?.navn\n            }\n          </TableColumn>\n        </TableRow>\n      ))}\n    </Table>\n  </FaktaGruppe>\n);\n\nexport default OppholdstillatelseTabell;\n","import { opplysningAdresseType, landkoder as Landkode } from '@navikt/fp-kodeverk';\nimport { Personadresse } from '@navikt/ft-types';\n\nconst emptyIfnull = (text?: string): string => (text == null ? '' : text);\n\nconst constructAddress = (adresse = '', postnummer = '', poststed = '', land = ''): string =>\n  `${emptyIfnull(adresse)}, ${emptyIfnull(postnummer)} ${emptyIfnull(poststed)} ${emptyIfnull(land)}`;\n\nexport type Adresser = { [key in opplysningAdresseType]?: string };\n\nconst getAddresses = (addresses: Personadresse[] = []): Adresser =>\n  addresses.reduce<Adresser>((acc, address) => {\n    if (!address.adresseType || address.adresseType === opplysningAdresseType.UKJENT) {\n      return {\n        ...acc,\n        [opplysningAdresseType.BOSTEDSADRESSE]: 'UKJENT',\n      };\n    }\n\n    const currentAddress = [address.adresselinje1, address.adresselinje2, address.adresselinje3]\n      .filter(linje => !!linje)\n      .join(', ');\n    if (!currentAddress) {\n      return acc;\n    }\n\n    const country = address.land !== Landkode.NORGE ? address.land : undefined;\n    return {\n      ...acc,\n      [address.adresseType]: constructAddress(currentAddress, address.postNummer, address.poststed, country).trim(),\n    };\n  }, {});\n\nexport default getAddresses;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, Detail, Tag, HStack } from '@navikt/ds-react';\nimport { Tooltip } from '@navikt/ft-ui-komponenter';\n\nimport { region, personstatusType, opplysningAdresseType } from '@navikt/fp-kodeverk';\nimport { KodeverkMedNavn, Personadresse, PersonopplysningMedlem } from '@navikt/fp-types';\n\nimport getAddresses from '../../getAddresses';\n\nimport styles from './medlemskapBostedSokerView.module.css';\n\nconst getAdresse = (adresser: Personadresse[]): string => {\n  const adresseListe = getAddresses(adresser);\n  const adresse = adresseListe[opplysningAdresseType.POSTADRESSE] || adresseListe[opplysningAdresseType.BOSTEDSADRESSE];\n  return adresse || '-';\n};\n\nconst getUtlandsadresse = (adresser: Personadresse[]): string => {\n  const adresseListe = getAddresses(adresser);\n  const utlandsAdresse =\n    adresseListe[opplysningAdresseType.UTENLANDSK_POSTADRESSE] ||\n    adresseListe[opplysningAdresseType.UTENLANDSK_NAV_TILLEGSADRESSE];\n  return utlandsAdresse || '-';\n};\n\ninterface OwnProps {\n  personopplysninger: PersonopplysningMedlem;\n  sokerTypeText: string;\n  regionTypes: KodeverkMedNavn[];\n  personstatusTypes: KodeverkMedNavn[];\n}\n\nexport const MedlemskapBostedSokerView: FunctionComponent<OwnProps> = ({\n  personopplysninger,\n  sokerTypeText,\n  regionTypes,\n  personstatusTypes,\n}) => {\n  const intl = useIntl();\n  return (\n    <div className={styles.defaultBostedSoker}>\n      <HStack justify=\"space-between\">\n        <div>\n          <Detail>{sokerTypeText}</Detail>\n          <Label size=\"small\">{personopplysninger.navn ? personopplysninger.navn : '-'}</Label>\n          <BodyShort size=\"small\" className={styles.paddingBottom}>\n            {getAdresse(personopplysninger.adresser)}\n          </BodyShort>\n          <Detail>\n            <FormattedMessage id=\"BostedSokerView.ForeignAddresse\" />\n          </Detail>\n          <BodyShort size=\"small\">{getUtlandsadresse(personopplysninger.adresser)}</BodyShort>\n        </div>\n        <div>\n          {personopplysninger.personstatus && (\n            <div className={styles.etikettMargin}>\n              <Tooltip content={intl.formatMessage({ id: 'Personstatus.Hjelpetekst' })} alignBottom>\n                <Tag\n                  className={personopplysninger.personstatus === personstatusType.DOD ? styles.dodEtikett : ''}\n                  variant=\"warning\"\n                >\n                  {personopplysninger.personstatus === personstatusType.UDEFINERT\n                    ? intl.formatMessage({ id: 'Personstatus.Ukjent' })\n                    : personstatusTypes.find(s => s.kode === personopplysninger.personstatus)?.navn}\n                </Tag>\n              </Tooltip>\n            </div>\n          )}\n          {personopplysninger.region && personopplysninger.region !== region.UDEFINERT && (\n            <div className={styles.etikettMargin}>\n              <Tooltip content={intl.formatMessage({ id: 'BostedSokerView.Region' })} alignBottom>\n                <Tag variant=\"warning\">{regionTypes.find(r => r.kode === personopplysninger.region)?.navn}</Tag>\n              </Tooltip>\n            </div>\n          )}\n        </div>\n      </HStack>\n    </div>\n  );\n};\n\nexport default MedlemskapBostedSokerView;\n","import React, { FunctionComponent, ReactElement, useCallback } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { Detail, BodyShort, HStack } from '@navikt/ds-react';\nimport { required } from '@navikt/ft-form-validators';\nimport { PeriodLabel, VerticalSpacer, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\nimport { CheckmarkIcon, ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\n\nimport { KodeverkType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { MedlemPeriode, Soknad, UtlandsoppholdPeriode, Aksjonspunkt, AlleKodeverk } from '@navikt/fp-types';\n\nimport MedlemskapBostedSokerView from './MedlemskapBostedSokerView';\n\nimport styles from './oppholdINorgeOgAdresserFaktaPanel.module.css';\n\nconst capitalizeFirstLetter = (landNavn: string): string => {\n  const string = landNavn.toLowerCase();\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst sjekkOpphold = (opphold: boolean, intl: IntlShape): ReactElement | null =>\n  opphold !== undefined ? (\n    <HStack gap=\"4\">\n      {opphold === true && (\n        <CheckmarkIcon\n          className={styles.checkmarkIcon}\n          title={intl.formatMessage({\n            id: 'OppholdINorgeOgAdresserFaktaPanel.Opphold',\n          })}\n        />\n      )}\n      {opphold !== true && (\n        <ExclamationmarkTriangleFillIcon\n          className={styles.exclamationmarkIcon}\n          title={intl.formatMessage({\n            id: 'OppholdINorgeOgAdresserFaktaPanel.IkkeOpphold',\n          })}\n        />\n      )}\n      <BodyShort size=\"small\">\n        <FormattedMessage\n          id={opphold === true ? 'OppholdINorgeOgAdresserFaktaPanel.Yes' : 'OppholdINorgeOgAdresserFaktaPanel.No'}\n        />\n      </BodyShort>\n    </HStack>\n  ) : null;\n\nconst lagOppholdIUtland = (utlandsOpphold: UtlandsoppholdPeriode[]): ReactElement[] | undefined =>\n  utlandsOpphold &&\n  utlandsOpphold.map(u => (\n    <div key={`${u.landNavn}${u.fom}${u.tom}`}>\n      <HStack gap=\"4\">\n        <BodyShort size=\"small\">{capitalizeFirstLetter(u.landNavn)}</BodyShort>\n        <BodyShort size=\"small\">\n          <PeriodLabel showTodayString dateStringFom={u.fom} dateStringTom={u.tom} />\n        </BodyShort>\n      </HStack>\n    </div>\n  ));\n\nexport type FormValues = {\n  bosattVurdering?: boolean;\n};\n\ninterface OwnProps {\n  valgtPeriode: MedlemPeriode;\n  soknad: Soknad;\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  alleKodeverk: AlleKodeverk;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (periode: MedlemPeriode) => FormValues;\n}\n\n/**\n * OppholdINorgeOgAdresserFaktaPanel\n *\n * Er tilknyttet faktapanelet for medlemskap.\n * Viser opphold i innland og utland som er relevante for søker. ReadOnly.\n */\nconst OppholdINorgeOgAdresserFaktaPanel: FunctionComponent<OwnProps> & StaticFunctions = ({\n  soknad,\n  valgtPeriode,\n  aksjonspunkter,\n  readOnly,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n\n  const aksjonspunktKode = valgtPeriode.aksjonspunkter.find(\n    apKode => apKode === AksjonspunktCode.AVKLAR_OM_BRUKER_ER_BOSATT,\n  );\n  const aksjonspunkt = aksjonspunkter.find(ap => aksjonspunktKode === ap.definisjon);\n\n  const isBosattAksjonspunktClosed =\n    aksjonspunktKode && aksjonspunkt ? aksjonspunkt.status !== AksjonspunktStatus.OPPRETTET : false;\n\n  const { personopplysningBruker, personopplysningAnnenPart } = valgtPeriode;\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <FaktaGruppe merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.AVKLAR_OM_BRUKER_ER_BOSATT]}>\n      <HStack>\n        <div className={styles.col}>\n          <FaktaGruppe\n            withoutBorder\n            title={intl.formatMessage({ id: 'OppholdINorgeOgAdresserFaktaPanel.OppholdINorge' })}\n          >\n            <Detail>\n              <FormattedMessage id=\"OppholdINorgeOgAdresserFaktaPanel.StayingInNorway\" />\n            </Detail>\n            <VerticalSpacer fourPx />\n            {sjekkOpphold(soknad?.oppgittTilknytning?.oppholdNorgeNa, intl)}\n            <VerticalSpacer sixteenPx />\n            <Detail>\n              <FormattedMessage id=\"OppholdINorgeOgAdresserFaktaPanel.StayingInNorwayLast12\" />\n            </Detail>\n            <VerticalSpacer fourPx />\n            {sjekkOpphold(soknad?.oppgittTilknytning?.oppholdSistePeriode, intl)}\n            <VerticalSpacer eightPx />\n            {lagOppholdIUtland(soknad?.oppgittTilknytning?.utlandsoppholdFor)}\n            <VerticalSpacer sixteenPx />\n            <Detail>\n              <FormattedMessage id=\"OppholdINorgeOgAdresserFaktaPanel.StayingInNorwayNext12\" />\n            </Detail>\n            <VerticalSpacer fourPx />\n            {sjekkOpphold(soknad?.oppgittTilknytning?.oppholdNestePeriode, intl)}\n            <VerticalSpacer eightPx />\n            {lagOppholdIUtland(soknad?.oppgittTilknytning?.utlandsoppholdEtter)}\n          </FaktaGruppe>\n        </div>\n        <div className={styles.col}>\n          <FaktaGruppe\n            withoutBorder\n            title={intl.formatMessage({ id: 'OppholdINorgeOgAdresserFaktaPanel.BosattAdresser' })}\n          >\n            <MedlemskapBostedSokerView\n              sokerTypeText={intl.formatMessage({ id: 'BostedSokerFaktaIndex.Soker' })}\n              personopplysninger={personopplysningBruker}\n              regionTypes={alleKodeverk[KodeverkType.REGION]}\n              personstatusTypes={alleKodeverk[KodeverkType.PERSONSTATUS_TYPE]}\n            />\n            {personopplysningAnnenPart && (\n              <MedlemskapBostedSokerView\n                sokerTypeText={intl.formatMessage({ id: 'OppholdINorgeOgAdresserFaktaPanel.Parent' })}\n                personopplysninger={personopplysningAnnenPart}\n                regionTypes={alleKodeverk[KodeverkType.REGION]}\n                personstatusTypes={alleKodeverk[KodeverkType.PERSONSTATUS_TYPE]}\n              />\n            )}\n          </FaktaGruppe>\n          {aksjonspunktKode && (\n            <RadioGroupPanel\n              name=\"bosattVurdering\"\n              hideLegend\n              validate={[required]}\n              isReadOnly={readOnly}\n              isHorizontal\n              isEdited={isBosattAksjonspunktClosed}\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  label: intl.formatMessage({ id: 'OppholdINorgeOgAdresserFaktaPanel.ResidingInNorway' }),\n                  value: 'true',\n                },\n                {\n                  label: (\n                    <FormattedMessage id=\"OppholdINorgeOgAdresserFaktaPanel.NotResidingInNorway\" values={{ b: bTag }} />\n                  ),\n                  value: 'false',\n                },\n              ]}\n            />\n          )}\n        </div>\n      </HStack>\n    </FaktaGruppe>\n  );\n};\n\nOppholdINorgeOgAdresserFaktaPanel.buildInitialValues = periode => ({\n  bosattVurdering: periode.bosattVurdering || periode.bosattVurdering === false ? periode.bosattVurdering : undefined,\n});\n\nexport default OppholdINorgeOgAdresserFaktaPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, HStack, VStack } from '@navikt/ds-react';\nimport moment from 'moment';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { DateLabel, PeriodLabel, Table, TableColumn, TableRow, FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { required } from '@navikt/ft-form-validators';\nimport { Aksjonspunkt } from '@navikt/ft-types';\n\nimport { AksjonspunktCode, KodeverkType, getKodeverknavnFn } from '@navikt/fp-kodeverk';\nimport { MedlemPeriode, Medlemskap, Soknad, AlleKodeverk } from '@navikt/fp-types';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\n\nconst headerTextCodes = [\n  'PerioderMedMedlemskapFaktaPanel.Period',\n  'PerioderMedMedlemskapFaktaPanel.Coverage',\n  'PerioderMedMedlemskapFaktaPanel.Status',\n  'PerioderMedMedlemskapFaktaPanel.Date',\n];\n\nexport type FormValues = {\n  medlemskapManuellVurderingType?: string;\n};\n\ninterface OwnProps {\n  valgtPeriode: MedlemPeriode;\n  alleKodeverk: AlleKodeverk;\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  medlemskap: Medlemskap;\n  soknad: Soknad;\n  aksjonspunkter: Aksjonspunkt[];\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (periode: MedlemPeriode, medlemskapPerioder: Medlemskap['medlemskapPerioder']) => FormValues;\n}\n\n/**\n * PerioderMedMedlemskapFaktaPanel\n *\n * Setter opp aksjonspunktet for avklaring av perioder (Medlemskapsvilkåret).\n */\nconst PerioderMedMedlemskapFaktaPanel: FunctionComponent<OwnProps> & StaticFunctions = ({\n  valgtPeriode,\n  readOnly,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  medlemskap,\n  soknad,\n  aksjonspunkter,\n}) => {\n  const intl = useIntl();\n\n  const vurderingstyper = alleKodeverk[KodeverkType.MEDLEMSKAP_MANUELL_VURDERING_TYPE];\n  const sorterteVurderingstyper = useMemo(() => [...vurderingstyper].sort((a, b) => a.navn.localeCompare(b.navn)), []);\n\n  const sortertePerioder = useMemo(\n    () => [...medlemskap.medlemskapPerioder].sort((p1, p2) => new Date(p1.fom).getTime() - new Date(p2.fom).getTime()),\n    [medlemskap.medlemskapPerioder],\n  );\n\n  if (!sortertePerioder || sortertePerioder.length === 0) {\n    return (\n      <FaktaGruppe title={intl.formatMessage({ id: 'PerioderMedMedlemskapFaktaPanel.ApplicationInformation' })}>\n        <BodyShort size=\"small\">\n          <FormattedMessage id=\"PerioderMedMedlemskapFaktaPanel.NoInformation\" />\n        </BodyShort>\n      </FaktaGruppe>\n    );\n  }\n\n  const aksjonspunktKode = valgtPeriode.aksjonspunkter.find(\n    apKode => apKode === AksjonspunktCode.AVKLAR_OM_BRUKER_HAR_GYLDIG_PERIODE,\n  );\n  const aksjonspunkt = aksjonspunkter.find(ap => aksjonspunktKode === ap.definisjon);\n\n  const erAksjonspunktLukket = aksjonspunkt ? aksjonspunkt.status !== AksjonspunktStatus.OPPRETTET : false;\n\n  const getKodeverk = getKodeverknavnFn(alleKodeverk);\n\n  const fodselsdato = soknad.fodselsdatoer ? Object.values(soknad.fodselsdatoer)[0] : undefined;\n  const { omsorgsovertakelseDato, termindato } = soknad;\n\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'PerioderMedMedlemskapFaktaPanel.ApplicationInformation' })}\n      merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.AVKLAR_OM_BRUKER_HAR_GYLDIG_PERIODE]}\n    >\n      <Table headerTextCodes={headerTextCodes} noHover>\n        {sortertePerioder.map(periode => {\n          const dekning = getKodeverk(periode.dekningType, KodeverkType.MEDLEMSKAP_DEKNING);\n          const status = getKodeverk(periode.medlemskapType, KodeverkType.MEDLEMSKAP_TYPE);\n          const key = periode.fom + periode.tom + dekning + status + periode.beslutningsdato;\n          return (\n            <TableRow key={key} id={key}>\n              <TableColumn>\n                <PeriodLabel showTodayString dateStringFom={periode.fom} dateStringTom={periode.tom} />\n              </TableColumn>\n              <TableColumn>{dekning}</TableColumn>\n              <TableColumn>{status}</TableColumn>\n              <TableColumn>\n                {periode.beslutningsdato ? <DateLabel dateString={periode.beslutningsdato} /> : null}\n              </TableColumn>\n            </TableRow>\n          );\n        })}\n      </Table>\n      <VStack>\n        <HStack>\n          {aksjonspunktKode && (\n            <RadioGroupPanel\n              name=\"medlemskapManuellVurderingType\"\n              hideLegend\n              isEdited={erAksjonspunktLukket}\n              validate={[required]}\n              isReadOnly={readOnly}\n              isHorizontal\n              radios={sorterteVurderingstyper.map(type => ({\n                label: type.navn,\n                value: type.kode,\n              }))}\n            />\n          )}\n        </HStack>\n        <HStack justify=\"end\">\n          {fodselsdato && (\n            <FormattedMessage\n              id=\"PerioderMedMedlemskapFaktaPanel.Fodselsdato\"\n              values={{ dato: moment(fodselsdato).format(DDMMYYYY_DATE_FORMAT) }}\n            />\n          )}\n          {termindato && (\n            <FormattedMessage\n              id=\"PerioderMedMedlemskapFaktaPanel.Termindato\"\n              values={{ dato: moment(termindato).format(DDMMYYYY_DATE_FORMAT) }}\n            />\n          )}\n          {omsorgsovertakelseDato && (\n            <FormattedMessage\n              id=\"PerioderMedMedlemskapFaktaPanel.Omsorgsovertakelse\"\n              values={{ dato: moment(omsorgsovertakelseDato).format(DDMMYYYY_DATE_FORMAT) }}\n            />\n          )}\n        </HStack>\n      </VStack>\n    </FaktaGruppe>\n  );\n};\n\nPerioderMedMedlemskapFaktaPanel.buildInitialValues = (periode, medlemskapPerioder) =>\n  medlemskapPerioder !== null\n    ? {\n        medlemskapManuellVurderingType: periode.medlemskapManuellVurderingType,\n      }\n    : {};\n\nexport default PerioderMedMedlemskapFaktaPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { required } from '@navikt/ft-form-validators';\nimport { ArrowBox, FaktaGruppe, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, MedlemPeriode } from '@navikt/fp-types';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\nimport { useFormContext } from 'react-hook-form';\n\nexport type FormValues = {\n  oppholdsrettVurdering?: boolean;\n  lovligOppholdVurdering?: boolean;\n  erEosBorger?: boolean;\n};\n\ninterface OwnProps {\n  valgtPeriode: MedlemPeriode;\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (periode: MedlemPeriode, aksjonspunkter: Aksjonspunkt[]) => FormValues;\n}\n\n/**\n * StatusForBorgerFaktaPanel\n *\n * Setter opp aksjonspunktet for avklaring av borgerstatus (Medlemskapsvilkåret).\n */\nconst StatusForBorgerFaktaPanel: FunctionComponent<OwnProps> & StaticFunctions = ({\n  valgtPeriode,\n  aksjonspunkter,\n  readOnly,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n\n  const { watch } = useFormContext<any>();\n\n  const erEosBorger = watch('erEosBorger');\n\n  const oppholdAp = valgtPeriode.aksjonspunkter.filter(\n    periodeAp =>\n      periodeAp === AksjonspunktCode.AVKLAR_OPPHOLDSRETT || periodeAp === AksjonspunktCode.AVKLAR_LOVLIG_OPPHOLD,\n  );\n  const aksjonspunkt = aksjonspunkter.find(ap => oppholdAp.includes(ap.definisjon));\n  const erAksjonspunktLukket = aksjonspunkt?.status !== AksjonspunktStatus.OPPRETTET;\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <FaktaGruppe\n      title={intl.formatMessage({ id: 'StatusForBorgerFaktaPanel.ApplicationInformation' })}\n      merknaderFraBeslutter={aksjonspunkt?.definisjon ? alleMerknaderFraBeslutter[aksjonspunkt.definisjon] : undefined}\n    >\n      <RadioGroupPanel\n        name=\"erEosBorger\"\n        hideLegend\n        validate={[required]}\n        isReadOnly={readOnly}\n        isHorizontal\n        isTrueOrFalseSelection\n        radios={[\n          {\n            label: intl.formatMessage({ id: 'StatusForBorgerFaktaPanel.CitizenEEA' }),\n            value: 'true',\n          },\n          {\n            label: intl.formatMessage({ id: 'StatusForBorgerFaktaPanel.CitizenOutsideEEA' }),\n            value: 'false',\n          },\n        ]}\n      />\n      {erEosBorger && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox>\n            <RadioGroupPanel\n              name=\"oppholdsrettVurdering\"\n              label={<FormattedMessage id=\"StatusForBorgerFaktaPanel.Oppholdsrett\" />}\n              validate={[required]}\n              isEdited={erAksjonspunktLukket}\n              isReadOnly={readOnly}\n              isHorizontal\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  label: intl.formatMessage({ id: 'StatusForBorgerFaktaPanel.HarOppholdsrett' }),\n                  value: 'true',\n                },\n                {\n                  label: <FormattedMessage id=\"StatusForBorgerFaktaPanel.HarIkkeOppholdsrett\" values={{ b: bTag }} />,\n                  value: 'false',\n                },\n              ]}\n            />\n          </ArrowBox>\n        </>\n      )}\n      {erEosBorger === false && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={130}>\n            <RadioGroupPanel\n              name=\"lovligOppholdVurdering\"\n              label={<FormattedMessage id=\"StatusForBorgerFaktaPanel.LovligOpphold\" />}\n              validate={[required]}\n              isReadOnly={readOnly}\n              isEdited={erAksjonspunktLukket}\n              isHorizontal\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  label: intl.formatMessage({ id: 'StatusForBorgerFaktaPanel.HarLovligOpphold' }),\n                  value: 'true',\n                },\n                {\n                  label: <FormattedMessage id=\"StatusForBorgerFaktaPanel.HarIkkeLovligOpphold\" values={{ b: bTag }} />,\n                  value: 'false',\n                },\n              ]}\n            />\n          </ArrowBox>\n        </>\n      )}\n    </FaktaGruppe>\n  );\n};\n\nconst getEosBorger = (periode: MedlemPeriode, aksjonspunkter: Aksjonspunkt[]): boolean =>\n  periode.erEosBorger || periode.erEosBorger === false\n    ? periode.erEosBorger\n    : aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.AVKLAR_OPPHOLDSRETT);\n\nconst getOppholdsrettVurdering = (periode: MedlemPeriode): boolean | undefined =>\n  periode.oppholdsrettVurdering || periode.oppholdsrettVurdering === false ? periode.oppholdsrettVurdering : undefined;\n\nconst getLovligOppholdVurdering = (periode: MedlemPeriode): boolean | undefined =>\n  periode.lovligOppholdVurdering || periode.lovligOppholdVurdering === false\n    ? periode.lovligOppholdVurdering\n    : undefined;\n\nStatusForBorgerFaktaPanel.buildInitialValues = (periode, aksjonspunkter) => {\n  const erEosBorger = getEosBorger(periode, aksjonspunkter);\n  return {\n    erEosBorger,\n    oppholdsrettVurdering: erEosBorger ? getOppholdsrettVurdering(periode) : undefined,\n    lovligOppholdVurdering: erEosBorger === false ? getLovligOppholdVurdering(periode) : undefined,\n  };\n};\n\nexport default StatusForBorgerFaktaPanel;\n","import React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport moment from 'moment';\nimport { Button, HStack, Label } from '@navikt/ds-react';\nimport { useForm } from 'react-hook-form';\nimport { Form } from '@navikt/ft-form-hooks';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Aksjonspunkt } from '@navikt/ft-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { FaktaBegrunnelseTextFieldNew } from '@navikt/fp-fakta-felles';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { AlleKodeverk, MedlemPeriode, Medlemskap, Soknad } from '@navikt/fp-types';\n\nimport OppholdstillatelseTabell from './OppholdstillatelseTabell';\nimport OppholdINorgeOgAdresserFaktaPanel, {\n  FormValues as OppholdFormValues,\n} from './OppholdINorgeOgAdresserFaktaPanel';\nimport PerioderMedMedlemskapFaktaPanel, { FormValues as PerioderFormValues } from './PerioderMedMedlemskapFaktaPanel';\nimport StatusForBorgerFaktaPanel, { FormValues as StatusFormValues } from './StatusForBorgerFaktaPanel';\n\nimport styles from './oppholdInntektOgPeriodeForm.module.css';\n\nconst { AVKLAR_OPPHOLDSRETT, AVKLAR_LOVLIG_OPPHOLD } = AksjonspunktCode;\n\nconst hasAksjonspunkt = (aksjonspunktCode: string, aksjonspunkter: string[]): boolean =>\n  aksjonspunkter.some((ap: string) => ap === aksjonspunktCode);\n\nexport type FormValues = OppholdFormValues &\n  StatusFormValues &\n  PerioderFormValues & {\n    begrunnelse?: string;\n  };\n\nconst buildInitialValues = (\n  valgtPeriode: MedlemPeriode,\n  alleAksjonspunkter: Aksjonspunkt[],\n  medlemskapPerioder: Medlemskap['medlemskapPerioder'],\n): FormValues => {\n  const aksjonspunkter = alleAksjonspunkter.filter(\n    ap =>\n      valgtPeriode.aksjonspunkter.includes(ap.definisjon) ||\n      ap.definisjon === AksjonspunktCode.AVKLAR_FORTSATT_MEDLEMSKAP,\n  );\n\n  let statusForBorgerInitialValues = {};\n  if (\n    hasAksjonspunkt(AVKLAR_OPPHOLDSRETT, valgtPeriode.aksjonspunkter) ||\n    hasAksjonspunkt(AVKLAR_LOVLIG_OPPHOLD, valgtPeriode.aksjonspunkter)\n  ) {\n    statusForBorgerInitialValues = StatusForBorgerFaktaPanel.buildInitialValues(valgtPeriode, aksjonspunkter);\n  }\n\n  return {\n    ...OppholdINorgeOgAdresserFaktaPanel.buildInitialValues(valgtPeriode),\n    ...PerioderMedMedlemskapFaktaPanel.buildInitialValues(valgtPeriode, medlemskapPerioder),\n    ...statusForBorgerInitialValues,\n    begrunnelse: valgtPeriode.begrunnelse,\n  };\n};\n\ninterface OwnProps {\n  valgtPeriode: MedlemPeriode;\n  aksjonspunkter: Aksjonspunkt[];\n  medlemskap: Medlemskap;\n  alleKodeverk: AlleKodeverk;\n  updateOppholdInntektPeriode: (vurderingsdato: string, values: FormValues) => void;\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  submittable: boolean;\n  soknad: Soknad;\n  lagreEnkeltPeriode?: (periode: MedlemPeriode) => void;\n  setValgtPeriode: (periode?: MedlemPeriode) => void;\n}\n\nconst OppholdInntektOgPeriodeForm: FunctionComponent<OwnProps> = ({\n  valgtPeriode,\n  readOnly,\n  submittable,\n  soknad,\n  alleKodeverk,\n  aksjonspunkter,\n  alleMerknaderFraBeslutter,\n  updateOppholdInntektPeriode,\n  medlemskap,\n  lagreEnkeltPeriode,\n  setValgtPeriode,\n}) => {\n  const [isSubmitting, setSubmitting] = useState(false);\n\n  const initialValues = useMemo(\n    () => buildInitialValues(valgtPeriode, aksjonspunkter, medlemskap.medlemskapPerioder),\n    [valgtPeriode, aksjonspunkter, soknad, medlemskap.medlemskapPerioder],\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: initialValues,\n  });\n\n  const avbryt = useCallback(() => {\n    formMethods.reset(initialValues);\n    setValgtPeriode();\n  }, []);\n\n  const harAksjonspunkt = aksjonspunkter.length > 0;\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => {\n        setSubmitting(true);\n        updateOppholdInntektPeriode(valgtPeriode.vurderingsdato, values);\n        if (lagreEnkeltPeriode) {\n          lagreEnkeltPeriode({ ...valgtPeriode, ...values });\n        }\n      }}\n    >\n      <div className={lagreEnkeltPeriode ? undefined : styles.showBorder}>\n        {!lagreEnkeltPeriode && (\n          <Label size=\"small\">\n            <FormattedMessage\n              id=\"OppholdInntektOgPeriodeForm.Periode\"\n              values={{ dato: moment(valgtPeriode.vurderingsdato).format(DDMMYYYY_DATE_FORMAT) }}\n            />\n          </Label>\n        )}\n        <OppholdINorgeOgAdresserFaktaPanel\n          valgtPeriode={valgtPeriode}\n          soknad={soknad}\n          aksjonspunkter={aksjonspunkter}\n          readOnly={readOnly}\n          alleKodeverk={alleKodeverk}\n          alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n        />\n        <VerticalSpacer twentyPx />\n        {medlemskap.opphold.length > 0 && (\n          <>\n            <OppholdstillatelseTabell oppholdstillatelse={medlemskap.opphold} alleKodeverk={alleKodeverk} />\n            <VerticalSpacer twentyPx />\n          </>\n        )}\n        <PerioderMedMedlemskapFaktaPanel\n          valgtPeriode={valgtPeriode}\n          medlemskap={medlemskap}\n          soknad={soknad}\n          aksjonspunkter={aksjonspunkter}\n          readOnly={readOnly}\n          alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n          alleKodeverk={alleKodeverk}\n        />\n        {(hasAksjonspunkt(AVKLAR_OPPHOLDSRETT, valgtPeriode.aksjonspunkter) ||\n          hasAksjonspunkt(AVKLAR_LOVLIG_OPPHOLD, valgtPeriode.aksjonspunkter)) && (\n          <StatusForBorgerFaktaPanel\n            valgtPeriode={valgtPeriode}\n            aksjonspunkter={aksjonspunkter}\n            readOnly={readOnly}\n            alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n          />\n        )}\n        <VerticalSpacer twentyPx />\n        {harAksjonspunkt && valgtPeriode.aksjonspunkter && valgtPeriode.aksjonspunkter.length > 0 && (\n          <FaktaBegrunnelseTextFieldNew\n            isReadOnly={readOnly}\n            isSubmittable={submittable}\n            hasBegrunnelse={!!initialValues.begrunnelse}\n          />\n        )}\n        <VerticalSpacer twentyPx />\n        {!readOnly && harAksjonspunkt && (\n          <HStack gap=\"4\">\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              disabled={!formMethods.formState.isDirty || isSubmitting}\n              loading={isSubmitting}\n            >\n              <FormattedMessage\n                id={lagreEnkeltPeriode ? 'OppholdInntektOgPerioder.Bekreft' : 'OppholdInntektOgPeriode.Oppdater'}\n              />\n            </Button>\n            {!lagreEnkeltPeriode && (\n              <Button size=\"small\" variant=\"secondary\" onClick={avbryt} type=\"button\">\n                <FormattedMessage id=\"OppholdInntektOgPeriode.Avbryt\" />\n              </Button>\n            )}\n          </HStack>\n        )}\n      </div>\n    </Form>\n  );\n};\n\nexport default OppholdInntektOgPeriodeForm;\n","import React, { FunctionComponent, ReactElement, useCallback, useState, useEffect, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Heading, Button } from '@navikt/ds-react';\nimport { Aksjonspunkt } from '@navikt/ft-types';\nimport { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktStatus, isAksjonspunktOpen } from '@navikt/ft-kodeverk';\n\nimport { AlleKodeverk, Medlemskap, Soknad, MedlemPeriode } from '@navikt/fp-types';\nimport {\n  AvklarFortsattMedlemskapAp,\n  BekreftBosattVurderingAp,\n  BekreftErMedlemVurderingAp,\n  BekreftLovligOppholdVurderingAp,\n  BekreftOppholdsrettVurderingAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { AksjonspunktCode, hasAksjonspunkt } from '@navikt/fp-kodeverk';\n\nimport MedlemskapEndringerTabell from './oppholdInntektOgPerioder/MedlemskapEndringerTabell';\nimport OppholdInntektOgPeriodeForm, {\n  FormValues as OppholdFormValues,\n} from './oppholdInntektOgPerioder/OppholdInntektOgPeriodeForm';\n\ntype AksjonspunktData = Array<\n  | BekreftBosattVurderingAp\n  | BekreftErMedlemVurderingAp\n  | BekreftOppholdsrettVurderingAp\n  | BekreftLovligOppholdVurderingAp\n  | AvklarFortsattMedlemskapAp\n>;\n\nconst inngangsAksjonspunkter = [\n  AksjonspunktCode.AVKLAR_OM_BRUKER_ER_BOSATT,\n  AksjonspunktCode.AVKLAR_OM_BRUKER_HAR_GYLDIG_PERIODE,\n  AksjonspunktCode.AVKLAR_OPPHOLDSRETT,\n  AksjonspunktCode.AVKLAR_LOVLIG_OPPHOLD,\n];\n\nconst mapOgFiltrerPerioder = (ap: Aksjonspunkt, perioder: MedlemPeriode[]): MedlemPeriode[] =>\n  perioder.filter(\n    periode =>\n      periode.aksjonspunkter.includes(ap.definisjon) ||\n      (periode.aksjonspunkter.length > 0 && ap.definisjon === AksjonspunktCode.AVKLAR_FORTSATT_MEDLEMSKAP),\n  );\n\nconst transformValues = (perioder: MedlemPeriode[], aksjonspunkter: Aksjonspunkt[]): AksjonspunktData => {\n  const aktiveInngangsAksjonspunkter = aksjonspunkter.filter(ap =>\n    inngangsAksjonspunkter.some(kode => kode === ap.definisjon),\n  );\n  const harÅpneInngangsAksjonspunkter = aktiveInngangsAksjonspunkter.some(ap => isAksjonspunktOpen(ap.status));\n  const aktivtFortsattMedlemskapAksjonspunkt = aksjonspunkter.filter(\n    ap => ap.definisjon === AksjonspunktCode.AVKLAR_FORTSATT_MEDLEMSKAP,\n  );\n\n  // Submit inngangsaksjonspunkt dersom åpent eller det ikke finnes aksjonspunkt fortsatt medlemskap\n  const sendInnAksjonspunkter =\n    harÅpneInngangsAksjonspunkter || aktivtFortsattMedlemskapAksjonspunkt.length === 0\n      ? aktiveInngangsAksjonspunkter\n      : aktivtFortsattMedlemskapAksjonspunkt;\n\n  // @ts-ignore Fiks\n  return sendInnAksjonspunkter.map(ap => ({\n    kode: ap.definisjon,\n    begrunnelse: '',\n    bekreftedePerioder: mapOgFiltrerPerioder(ap, perioder),\n  }));\n};\n\nconst finnAksjonspunkttekster = (aksjonspunkter: Aksjonspunkt[]): ReactElement[] => {\n  const helpTexts = [];\n  if (hasAksjonspunkt(AksjonspunktCode.AVKLAR_FORTSATT_MEDLEMSKAP, aksjonspunkter)) {\n    helpTexts.push(<FormattedMessage key=\"HarFortsattMedlemskap\" id=\"MedlemskapInfoPanel.HarFortsattMedlemskap\" />);\n  }\n  if (hasAksjonspunkt(AksjonspunktCode.AVKLAR_OM_BRUKER_ER_BOSATT, aksjonspunkter)) {\n    helpTexts.push(<FormattedMessage key=\"ErSokerBosattINorge\" id=\"MedlemskapInfoPanel.ErSokerBosattINorge\" />);\n  }\n  if (hasAksjonspunkt(AksjonspunktCode.AVKLAR_OM_BRUKER_HAR_GYLDIG_PERIODE, aksjonspunkter)) {\n    helpTexts.push(\n      <FormattedMessage key=\"GyldigMedlemFolketrygden\" id=\"MedlemskapInfoPanel.GyldigMedlemFolketrygden\" />,\n    );\n  }\n  if (hasAksjonspunkt(AksjonspunktCode.AVKLAR_OPPHOLDSRETT, aksjonspunkter)) {\n    helpTexts.push(\n      <FormattedMessage key=\"EOSBorgerMedOppholdsrett1\" id=\"MedlemskapInfoPanel.EOSBorgerMedOppholdsrett\" />,\n    );\n  }\n  if (hasAksjonspunkt(AksjonspunktCode.AVKLAR_LOVLIG_OPPHOLD, aksjonspunkter)) {\n    helpTexts.push(\n      <FormattedMessage key=\"IkkeEOSBorgerMedLovligOpphold\" id=\"MedlemskapInfoPanel.IkkeEOSBorgerMedLovligOpphold\" />,\n    );\n  }\n  return helpTexts;\n};\n\ninterface OwnProps {\n  submittable: boolean;\n  readOnly: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: AksjonspunktData) => Promise<void>;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  soknad: Soknad;\n  alleKodeverk: AlleKodeverk;\n  medlemskap: Medlemskap;\n  formData?: MedlemPeriode[];\n  setFormData: (data: MedlemPeriode[]) => void;\n}\n\n/**\n * MedlemskapInfoPanel\n *\n * Har ansvar for å vise faktapanelene for medlemskap.\n */\nconst MedlemskapInfoPanel: FunctionComponent<OwnProps> = ({\n  submittable,\n  readOnly,\n  submitCallback,\n  alleMerknaderFraBeslutter,\n  aksjonspunkter,\n  soknad,\n  alleKodeverk,\n  medlemskap,\n  formData,\n  setFormData,\n}) => {\n  const sortertePerioder = useMemo(\n    () => [...(medlemskap.perioder || [])].sort((a, b) => a.vurderingsdato.localeCompare(b.vurderingsdato)),\n    [medlemskap.perioder],\n  );\n\n  const [perioder, setPerioder] = useState<MedlemPeriode[]>(formData || sortertePerioder);\n  const [isSubmitting, setSubmitting] = useState(false);\n  const [isDirty, setDirty] = useState(false);\n\n  useEffect(\n    () => () => {\n      setFormData(perioder);\n    },\n    [perioder],\n  );\n\n  const finnFørstePeriodeMedUløstAp = (medlemPerioder: MedlemPeriode[]) =>\n    medlemPerioder.find(p => p.aksjonspunkter.length > 0 && !p.begrunnelse);\n\n  const [valgtPeriode, setValgtPeriode] = useState<MedlemPeriode | undefined>(\n    perioder.length > 1 ? finnFørstePeriodeMedUløstAp(perioder) : perioder[0],\n  );\n\n  const velgPeriodeCallback = useCallback(\n    (_p: React.KeyboardEvent | React.MouseEvent, _id?: string, periode?: MedlemPeriode): void => {\n      setValgtPeriode(periode);\n    },\n    [],\n  );\n\n  const updateOppholdInntektPeriode = useCallback(\n    (vurderingsdato: string, values: OppholdFormValues): void => {\n      const periodeIndex = perioder.findIndex(p => p.vurderingsdato === vurderingsdato);\n\n      const oppdatertPeriode = {\n        ...perioder[periodeIndex],\n        ...values,\n      };\n\n      const nyePerioder = perioder.map((p, index) => (periodeIndex === index ? oppdatertPeriode : p));\n      setPerioder(nyePerioder);\n      setDirty(true);\n      if (nyePerioder.length > 1) {\n        setValgtPeriode(finnFørstePeriodeMedUløstAp(nyePerioder));\n      }\n    },\n    [perioder],\n  );\n\n  const isConfirmButtonDisabled = (): boolean => {\n    if (!isDirty) {\n      return true;\n    }\n\n    if (perioder && perioder.length > 0) {\n      const ubekreftPerioder = perioder.filter(periode => periode.aksjonspunkter.length > 0 && !periode.begrunnelse);\n\n      if (ubekreftPerioder.length > 0) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const lagre = () => {\n    setSubmitting(true);\n    return submitCallback(transformValues(perioder, aksjonspunkter));\n  };\n\n  const lagreEnkeltPeriode = (periode: MedlemPeriode) => {\n    setSubmitting(true);\n    return submitCallback(transformValues([periode], aksjonspunkter));\n  };\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"OppholdInntektOgPerioder.Overskrift\" />\n      </Heading>\n      <VerticalSpacer thirtyTwoPx />\n      {aksjonspunkter.some(ap => ap.status === AksjonspunktStatus.OPPRETTET) && (\n        <>\n          <AksjonspunktHelpTextHTML>{finnAksjonspunkttekster(aksjonspunkter)}</AksjonspunktHelpTextHTML>\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n      <VerticalSpacer thirtyTwoPx />\n      {hasAksjonspunkt(AksjonspunktCode.AVKLAR_FORTSATT_MEDLEMSKAP, aksjonspunkter) && (\n        <MedlemskapEndringerTabell\n          perioder={perioder}\n          aksjonspunkter={aksjonspunkter}\n          valgtPeriodeVurderingsdato={valgtPeriode ? valgtPeriode.vurderingsdato : undefined}\n          velgPeriodeCallback={velgPeriodeCallback}\n        />\n      )}\n      {valgtPeriode && (\n        <OppholdInntektOgPeriodeForm\n          key={valgtPeriode.vurderingsdato}\n          readOnly={readOnly}\n          valgtPeriode={valgtPeriode}\n          soknad={soknad}\n          aksjonspunkter={aksjonspunkter}\n          submittable={submittable}\n          updateOppholdInntektPeriode={updateOppholdInntektPeriode}\n          alleKodeverk={alleKodeverk}\n          alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n          medlemskap={medlemskap}\n          lagreEnkeltPeriode={perioder.length === 1 ? lagreEnkeltPeriode : undefined}\n          setValgtPeriode={setValgtPeriode}\n        />\n      )}\n      <VerticalSpacer twentyPx />\n      {!readOnly && perioder.length > 1 && (\n        <Button\n          size=\"small\"\n          variant=\"primary\"\n          onClick={lagre}\n          disabled={isSubmitting || isConfirmButtonDisabled()}\n          loading={isSubmitting}\n          type=\"button\"\n        >\n          <FormattedMessage id=\"OppholdInntektOgPerioder.Bekreft\" />\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default MedlemskapInfoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardFaktaPanelProps, Soknad, Medlemskap } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport MedlemskapInfoPanel from './components/MedlemskapInfoPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  medlemskap: Medlemskap;\n  soknad: Soknad;\n}\n\nconst MedlemskapFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  soknad,\n  medlemskap,\n  aksjonspunkter,\n  submittable,\n  alleMerknaderFraBeslutter,\n  alleKodeverk,\n  submitCallback,\n  readOnly,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <MedlemskapInfoPanel\n      soknad={soknad}\n      medlemskap={medlemskap}\n      aksjonspunkter={aksjonspunkter}\n      submittable={submittable}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      alleKodeverk={alleKodeverk}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default MedlemskapFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { MedlemskapFaktaIndex } from '@navikt/fp-fakta-medlemskap';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Medlemskap, Soknad } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AVKLAR_OM_BRUKER_ER_BOSATT,\n  AksjonspunktCode.AVKLAR_OM_BRUKER_HAR_GYLDIG_PERIODE,\n  AksjonspunktCode.AVKLAR_OPPHOLDSRETT,\n  AksjonspunktCode.AVKLAR_LOVLIG_OPPHOLD,\n  AksjonspunktCode.AVKLAR_FORTSATT_MEDLEMSKAP,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.MEDLEMSKAP, BehandlingApiKeys.SOKNAD];\ntype EndepunktPanelData = {\n  medlemskap: Medlemskap;\n  soknad: Soknad;\n};\n\n/**\n * MedlemskapsvilkaretFaktaInitPanel\n */\nconst MedlemskapsvilkaretFaktaInitPanel: FunctionComponent<FaktaPanelInitProps> = ({ ...props }) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.MEDLEMSKAPSVILKARET}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'MedlemskapInfoPanel.Medlemskap' })}\n    skalPanelVisesIMeny={() => props.behandling.harSøknad}\n    renderPanel={data => <MedlemskapFaktaIndex {...data} />}\n  />\n);\n\nexport default MedlemskapsvilkaretFaktaInitPanel;\n","import { Aksjonspunkt } from '@navikt/ft-types';\nimport { Vilkar } from '@navikt/fp-types';\n\nconst skalViseProsessPanel = (\n  aksjonspunkter: Aksjonspunkt[] = [],\n  vilkarKoder: string[] = [],\n  vilkar: Vilkar[] = [],\n): boolean => {\n  const harAksjonspunkter = aksjonspunkter.length > 0;\n  if (vilkarKoder.length === 0) {\n    return harAksjonspunkter;\n  }\n\n  const harVilkar = vilkarKoder.some(vc => vilkar.some(v => v.vilkarType === vc));\n  if (harVilkar && !harAksjonspunkter) {\n    return true;\n  }\n\n  return harAksjonspunkter && harVilkar;\n};\n\nexport default skalViseProsessPanel;\n","import React, { FunctionComponent, ReactElement, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport moment from 'moment';\nimport { FormattedMessage, useIntl, IntlShape } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport { Form, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessPanelTemplate } from '@navikt/fp-prosess-felles';\nimport {\n  vilkarUtfallType,\n  KodeverkType,\n  VilkarType,\n  getKodeverknavnFn,\n  dokumentTypeId,\n  AksjonspunktCode,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { Table, TableColumn, TableRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { DDMMYYYY_DATE_FORMAT, isObject } from '@navikt/ft-utils';\nimport { required } from '@navikt/ft-form-validators';\nimport {\n  Aksjonspunkt,\n  ArbeidsgiverOpplysningerPerId,\n  Behandling,\n  ManglendeVedleggSoknad,\n  Soknad,\n  ArbeidsgiverOpplysninger,\n  AlleKodeverk,\n} from '@navikt/fp-types';\nimport {\n  BekreftSokersOpplysningspliktManuAp,\n  OverstyringSokersOpplysingspliktAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\nconst orgPrefix = 'org_';\nconst aktørPrefix = 'aktør_';\n\nconst findRadioButtonTextCode = (erVilkarOk: boolean): string =>\n  erVilkarOk ? 'SokersOpplysningspliktForm.VilkarOppfylt' : 'SokersOpplysningspliktForm.VilkarIkkeOppfylt';\n\nconst getLabel = (intl: IntlShape): ReactElement => (\n  <div>\n    <div>\n      <FormattedMessage\n        id={findRadioButtonTextCode(false)}\n        values={{\n          b: (chunks: any) => <b>{chunks}</b>,\n        }}\n      />\n    </div>\n    <div>{intl.formatMessage({ id: 'SokersOpplysningspliktForm.VilkarIkkeOppfyltMerInfo' })}</div>\n  </div>\n);\nconst capitalizeFirstLetters = (navn: string): string =>\n  navn\n    .toLowerCase()\n    .split(' ')\n    .map((w: string) => w.charAt(0).toUpperCase() + w.substring(1))\n    .join(' ');\n\nconst lagArbeidsgiverNavnOgFødselsdatoTekst = (navn: string, fodselsdato?: string): string =>\n  `${capitalizeFirstLetters(navn)} (${moment(fodselsdato).format(DDMMYYYY_DATE_FORMAT)})`;\n\nconst lagArbeidsgiverNavnOgOrgnrTekst = (navn: string, organisasjonsnummer: string): string =>\n  `${capitalizeFirstLetters(navn)} (${organisasjonsnummer})`;\n\nconst formatArbeidsgiver = (\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n  arbeidsgiverReferanse?: string,\n): string => {\n  if (!arbeidsgiverReferanse) {\n    return '';\n  }\n  const arbeidsgiverOpplysninger = arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse];\n  if (!arbeidsgiverOpplysninger) {\n    return '';\n  }\n  if (arbeidsgiverOpplysninger.erPrivatPerson) {\n    return lagArbeidsgiverNavnOgFødselsdatoTekst(arbeidsgiverOpplysninger.navn, arbeidsgiverOpplysninger.fødselsdato);\n  }\n  return lagArbeidsgiverNavnOgOrgnrTekst(arbeidsgiverOpplysninger.navn, arbeidsgiverOpplysninger.identifikator);\n};\n\nexport const getSortedManglendeVedlegg = (soknad: Soknad): ManglendeVedleggSoknad[] =>\n  soknad && soknad.manglendeVedlegg\n    ? soknad.manglendeVedlegg\n        .slice()\n        .sort(mv1 => (mv1.dokumentType === dokumentTypeId.DOKUMENTASJON_AV_TERMIN_ELLER_FØDSEL ? 1 : -1))\n    : [];\n\nconst harSoknad = (soknad: Soknad): boolean => soknad !== null && isObject(soknad);\n\nconst lagArbeidsgiverKey = (arbeidsgiverOpplysninger: ArbeidsgiverOpplysninger): string => {\n  if (arbeidsgiverOpplysninger.erPrivatPerson) {\n    return `${aktørPrefix}${arbeidsgiverOpplysninger.referanse}`;\n  }\n  return `${orgPrefix}${arbeidsgiverOpplysninger.identifikator}`;\n};\n\nconst buildInitialValues = (\n  sorterteManglendeVedlegg: ManglendeVedleggSoknad[],\n  soknadExists: boolean,\n  status: string,\n  aksjonspunkter: Aksjonspunkt[],\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n): FormValues => {\n  const aksjonspunkt = aksjonspunkter.length > 0 ? aksjonspunkter[0] : undefined;\n  const isOpenAksjonspunkt = aksjonspunkt && aksjonspunkt.status === aksjonspunktStatus.OPPRETTET;\n  const isVilkarGodkjent = soknadExists && vilkarUtfallType.OPPFYLT === status;\n\n  // TODO Mogleg inntektsmeldingerSomIkkeKommer kan fjernast, men trur fjerning av bruken av denne i render er ein midlertidig\n  // fiks og at dette derfor skal brukast etterkvart. Sjå TFP-3076\n  const inntektsmeldingerSomIkkeKommer = sorterteManglendeVedlegg\n    .filter(mv => mv.dokumentType === dokumentTypeId.INNTEKTSMELDING)\n    .reduce(\n      (acc, mv) => ({\n        ...acc,\n        [lagArbeidsgiverKey(arbeidsgiverOpplysningerPerId[mv.arbeidsgiverReferanse])]: mv.brukerHarSagtAtIkkeKommer,\n      }),\n      {},\n    );\n\n  return {\n    inntektsmeldingerSomIkkeKommer,\n    erVilkarOk: isOpenAksjonspunkt && soknadExists ? undefined : isVilkarGodkjent,\n    hasAksjonspunkt: aksjonspunkt !== undefined,\n    ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n  };\n};\n\nconst transformValues = (\n  values: FormValues,\n  manglendeVedlegg: ManglendeVedleggSoknad[],\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n  aksjonspunkter: Aksjonspunkt[],\n): BekreftSokersOpplysningspliktManuAp | OverstyringSokersOpplysingspliktAp => {\n  const arbeidsgiverReferanser = manglendeVedlegg\n    .filter(mv => mv.dokumentType === dokumentTypeId.INNTEKTSMELDING)\n    .map(mv => mv.arbeidsgiverReferanse);\n\n  const aksjonspunkt = aksjonspunkter.length > 0 ? aksjonspunkter[0] : undefined;\n  const kode =\n    aksjonspunkt && aksjonspunkt.definisjon === AksjonspunktCode.SOKERS_OPPLYSNINGSPLIKT_MANU\n      ? AksjonspunktCode.SOKERS_OPPLYSNINGSPLIKT_MANU\n      : AksjonspunktCode.SOKERS_OPPLYSNINGSPLIKT_OVST;\n\n  return {\n    kode,\n    erVilkarOk: values.erVilkarOk || false,\n    inntektsmeldingerSomIkkeKommer: arbeidsgiverReferanser.map(agRef => {\n      const arbeidsgiverOpplysninger = arbeidsgiverOpplysningerPerId[agRef];\n      return {\n        // backend sender fødselsdato i orgnummer feltet for privatpersoner... fiks dette\n        organisasjonsnummer: arbeidsgiverOpplysninger.erPrivatPerson\n          ? undefined\n          : arbeidsgiverOpplysninger.identifikator,\n        aktørId: arbeidsgiverOpplysninger.erPrivatPerson ? arbeidsgiverOpplysninger.referanse : undefined,\n        brukerHarSagtAtIkkeKommer: values.inntektsmeldingerSomIkkeKommer\n          ? values.inntektsmeldingerSomIkkeKommer[lagArbeidsgiverKey(arbeidsgiverOpplysninger)]\n          : false,\n      };\n    }, {}),\n    ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n  };\n};\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  begrunnelse?: string;\n  inntektsmeldingerSomIkkeKommer?: { [key: string]: boolean };\n  hasAksjonspunkt?: boolean;\n};\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  soknad: Soknad;\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  submitCallback: (\n    aksjonspunktData: BekreftSokersOpplysningspliktManuAp | OverstyringSokersOpplysingspliktAp,\n  ) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  alleKodeverk: AlleKodeverk;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * SokersOpplysningspliktForm\n *\n * Informasjon om søkers informasjonsplikt er godkjent eller avvist.\n */\nconst SokersOpplysningspliktForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  soknad,\n  readOnlySubmitButton,\n  status,\n  aksjonspunkter,\n  behandlingsresultat,\n  arbeidsgiverOpplysningerPerId,\n  alleKodeverk,\n  erIkkeGodkjentAvBeslutter,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const sorterteManglendeVedlegg = useMemo(() => getSortedManglendeVedlegg(soknad), [soknad]);\n  const hasSoknad = harSoknad(soknad);\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n\n  const initialValues = useMemo(\n    () =>\n      buildInitialValues(sorterteManglendeVedlegg, hasSoknad, status, aksjonspunkter, arbeidsgiverOpplysningerPerId),\n    [sorterteManglendeVedlegg, hasSoknad, aksjonspunkter, status, arbeidsgiverOpplysningerPerId],\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const hasAksjonspunkt = formMethods.watch('hasAksjonspunkt');\n  const erVilkarOk = formMethods.watch('erVilkarOk');\n\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === aksjonspunktStatus.OPPRETTET);\n  const originalErVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n\n  const dokumentTypeIds = alleKodeverk[KodeverkType.DOKUMENT_TYPE_ID];\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) =>\n        submitCallback(transformValues(values, sorterteManglendeVedlegg, arbeidsgiverOpplysningerPerId, aksjonspunkter))\n      }\n      setDataOnUnmount={setFormData}\n    >\n      <ProsessPanelTemplate\n        title={intl.formatMessage({ id: 'SokersOpplysningspliktForm.SokersOpplysningsplikt' })}\n        isAksjonspunktOpen={!readOnlySubmitButton}\n        isDirty={hasAksjonspunkt ? formMethods.formState.isDirty : erVilkarOk !== initialValues.erVilkarOk}\n        readOnlySubmitButton={hasSoknad ? readOnlySubmitButton : !formMethods.formState.isDirty || readOnlySubmitButton}\n        readOnly={readOnly}\n        originalErVilkarOk={originalErVilkarOk}\n        erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        isSubmitting={formMethods.formState.isSubmitting}\n      >\n        {sorterteManglendeVedlegg.length > 0 && (\n          <>\n            <VerticalSpacer twentyPx />\n            <BodyShort size=\"small\">\n              <FormattedMessage id=\"SokersOpplysningspliktForm.ManglendeDokumentasjon\" />\n            </BodyShort>\n            <VerticalSpacer eightPx />\n            <Table noHover>\n              {sorterteManglendeVedlegg.map(vedlegg => (\n                <TableRow\n                  key={vedlegg.dokumentType + (vedlegg.arbeidsgiverReferanse ? vedlegg.arbeidsgiverReferanse : '')}\n                >\n                  <TableColumn>{dokumentTypeIds.find(dti => dti.kode === vedlegg.dokumentType)?.navn}</TableColumn>\n                  <TableColumn>\n                    {vedlegg.dokumentType === dokumentTypeId.INNTEKTSMELDING &&\n                      formatArbeidsgiver(arbeidsgiverOpplysningerPerId, vedlegg.arbeidsgiverReferanse)}\n                  </TableColumn>\n                </TableRow>\n              ))}\n            </Table>\n          </>\n        )}\n        <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n        {!readOnly && (\n          <>\n            <VerticalSpacer sixteenPx />\n            <RadioGroupPanel\n              name=\"erVilkarOk\"\n              validate={[required]}\n              isHorizontal\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  value: 'true',\n                  label: <FormattedMessage id={findRadioButtonTextCode(true)} />,\n                  disabled: !hasSoknad,\n                },\n                {\n                  value: 'false',\n                  label: getLabel(intl),\n                },\n              ]}\n            />\n          </>\n        )}\n        {readOnly && (\n          <div>\n            {originalErVilkarOk === false && behandlingsresultat?.avslagsarsak && (\n              <>\n                <VerticalSpacer sixteenPx />\n                <BodyShort size=\"small\">\n                  {getKodeverknavn(\n                    behandlingsresultat.avslagsarsak,\n                    KodeverkType.AVSLAGSARSAK,\n                    VilkarType.SOKERSOPPLYSNINGSPLIKT,\n                  )}\n                </BodyShort>\n              </>\n            )}\n          </div>\n        )}\n      </ProsessPanelTemplate>\n    </Form>\n  );\n};\n\nexport default SokersOpplysningspliktForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { createIntl } from '@navikt/ft-utils';\nimport { ArbeidsgiverOpplysningerPerId, Soknad, StandardProsessPanelProps } from '@navikt/fp-types';\n\nimport SokersOpplysningspliktForm from './components/SokersOpplysningspliktForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  soknad: Soknad;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\nconst SokersOpplysningspliktVilkarProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  soknad,\n  aksjonspunkter,\n  status,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  arbeidsgiverOpplysningerPerId,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <SokersOpplysningspliktForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      soknad={soknad}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      alleKodeverk={alleKodeverk}\n      arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default SokersOpplysningspliktVilkarProsessIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { VilkarType, behandlingType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { SokersOpplysningspliktVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-sokers-opplysningsplikt';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { ArbeidsgiverOpplysningerPerId, Soknad } from '@navikt/fp-types';\n\nimport skalViseProsessPanel from '../../felles/prosess/skalViseProsessPanel';\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.SOKERS_OPPLYSNINGSPLIKT_OVST,\n  AksjonspunktCode.SOKERS_OPPLYSNINGSPLIKT_MANU,\n];\n\nconst VILKAR_KODER = [VilkarType.SOKERSOPPLYSNINGSPLIKT];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.SOKNAD];\ntype EndepunktPanelData = {\n  soknad: Soknad;\n};\n\ninterface OwnProps {\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\nconst OpplysningspliktProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  arbeidsgiverOpplysningerPerId,\n  ...props\n}) => (\n  <ProsessDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    vilkarKoder={VILKAR_KODER}\n    prosessPanelKode={ProsessStegCode.OPPLYSNINGSPLIKT}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.Opplysningsplikt' })}\n    skalPanelVisesIMeny={data =>\n      data.behandling.type !== behandlingType.REVURDERING\n        ? skalViseProsessPanel(data.aksjonspunkter, VILKAR_KODER, data.vilkar)\n        : false\n    }\n    renderPanel={data => (\n      <SokersOpplysningspliktVilkarProsessIndex\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        {...data}\n      />\n    )}\n  />\n);\n\nexport default OpplysningspliktProsessStegInitPanel;\n","import { useState, useCallback, useEffect } from 'react';\n\nimport InngangsvilkarPanelData from '../typer/inngangsvilkarPanelData';\n\nconst useInngangsvilkarRegistrerer = (\n  registrerInngangsvilkarPanel: (data: InngangsvilkarPanelData) => void,\n  behandlingVersjon: number,\n  id: string,\n  aksjonspunktTekst: string,\n  skalVises: boolean,\n  erAksjonspunktApent: boolean,\n  status: string,\n) => {\n  const [erOverstyrt, setOverstyrt] = useState(false);\n  const toggleOverstyring = useCallback(() => setOverstyrt(!erOverstyrt), [erOverstyrt]);\n\n  useEffect(() => {\n    setOverstyrt(false);\n  }, [behandlingVersjon]);\n\n  useEffect(() => {\n    if (skalVises) {\n      registrerInngangsvilkarPanel({\n        id,\n        status,\n        harApentAksjonspunkt: erOverstyrt || erAksjonspunktApent,\n        aksjonspunktTekst: erOverstyrt || erAksjonspunktApent ? aksjonspunktTekst : undefined,\n      });\n    }\n  }, [erAksjonspunktApent, skalVises, erOverstyrt]);\n\n  return { erOverstyrt, toggleOverstyring };\n};\n\nexport default useInngangsvilkarRegistrerer;\n","import React, { ReactElement } from 'react';\n\nimport { RestApiState } from '@navikt/fp-rest-api-hooks';\nimport { RestKey } from '@navikt/fp-rest-api';\nimport { LoadingPanel } from '@navikt/ft-ui-komponenter';\nimport { StandardProsessPanelProps } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../typer/inngangsvilkarPanelInitProps';\nimport useStandardProsessPanelProps from './useStandardProsessPanelProps';\nimport skalViseProsessPanel from './skalViseProsessPanel';\nimport useInngangsvilkarRegistrerer from './useInngangsvilkarRegistrerer';\nimport { restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nexport type OwnProps<PANEL_DATA> = {\n  behandlingVersjon: number;\n  panelEndepunkter?: RestKey<any, any>[];\n  aksjonspunktKoder?: string[];\n  vilkarKoder?: string[];\n  renderPanel: (\n    data: PANEL_DATA & StandardProsessPanelProps,\n    erOverstyrt: boolean,\n    toggleOverstyring: () => void,\n  ) => ReactElement;\n  inngangsvilkarPanelKode: string;\n  hentInngangsvilkarPanelTekst: (data: StandardProsessPanelProps) => string;\n};\n\nconst InngangsvilkarDefaultInitPanel = <PANEL_DATA,>({\n  erPanelValgt,\n  behandlingVersjon,\n  registrerInngangsvilkarPanel,\n  panelEndepunkter = [],\n  aksjonspunktKoder,\n  vilkarKoder,\n  renderPanel,\n  inngangsvilkarPanelKode,\n  hentInngangsvilkarPanelTekst,\n}: OwnProps<PANEL_DATA> & InngangsvilkarPanelInitProps) => {\n  const standardPanelProps = useStandardProsessPanelProps(aksjonspunktKoder, vilkarKoder);\n\n  const skalVises = skalViseProsessPanel(standardPanelProps.aksjonspunkter, vilkarKoder, standardPanelProps.vilkar);\n\n  const { erOverstyrt, toggleOverstyring } = useInngangsvilkarRegistrerer(\n    registrerInngangsvilkarPanel,\n    behandlingVersjon,\n    inngangsvilkarPanelKode,\n    hentInngangsvilkarPanelTekst(standardPanelProps),\n    skalVises,\n    standardPanelProps.isAksjonspunktOpen,\n    standardPanelProps.status,\n  );\n\n  const formatertePanelEndepunkter = panelEndepunkter.map(e => ({ key: e }));\n  const { data: panelData, state: panelDataState } = restBehandlingApiHooks.useMultipleRestApi<PANEL_DATA, any>(\n    formatertePanelEndepunkter,\n    {\n      updateTriggers: [erPanelValgt, behandlingVersjon],\n      suspendRequest: !erPanelValgt || formatertePanelEndepunkter.length === 0,\n      isCachingOn: true,\n    },\n  );\n\n  if (!erPanelValgt || !skalVises) {\n    return null;\n  }\n\n  if (formatertePanelEndepunkter.length > 0 && panelDataState !== RestApiState.SUCCESS) {\n    return <LoadingPanel />;\n  }\n\n  return renderPanel(\n    {\n      ...(panelData as PANEL_DATA),\n      ...standardPanelProps,\n    },\n    erOverstyrt,\n    toggleOverstyring,\n  );\n};\n\nexport default InngangsvilkarDefaultInitPanel;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport moment from 'moment';\nimport { useForm } from 'react-hook-form';\nimport { CheckmarkCircleFillIcon, XMarkOctagonFillIcon } from '@navikt/aksel-icons';\nimport { Heading, Label, Detail, BodyShort } from '@navikt/ds-react';\nimport { FlexContainer, FlexRow, FlexColumn, VerticalSpacer, OverstyringKnapp } from '@navikt/ft-ui-komponenter';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { KodeverkMedNavn, Aksjonspunkt, Behandling } from '@navikt/fp-types';\nimport {\n  vilkarUtfallType,\n  aksjonspunktStatus,\n  OverstyringAksjonspunkter,\n  behandlingType as BehandlingType,\n} from '@navikt/fp-kodeverk';\nimport { OverstyringPanel, VilkarResultPicker } from '@navikt/fp-prosess-felles';\nimport { DDMMYYYY_DATE_FORMAT, decodeHtmlEntity } from '@navikt/ft-utils';\nimport { OverstyringAp, OverstyringMedlemskapsvilkaretLopendeAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './vilkarresultatMedOverstyringForm.module.css';\n\ntype TextValues = {\n  id: string;\n  values: {\n    fom: string;\n    b: (chunks: any) => any;\n  };\n};\n\nconst isOverridden = (aksjonspunkter: Aksjonspunkt[], aksjonspunktCode: string): boolean =>\n  aksjonspunkter.some(ap => ap.definisjon === aksjonspunktCode);\nconst isHidden = (kanOverstyre: boolean, aksjonspunkter: Aksjonspunkt[], aksjonspunktCode: string): boolean =>\n  !isOverridden(aksjonspunkter, aksjonspunktCode) && !kanOverstyre;\n\nconst hentErOppfyltTekstkode = (customVilkarOppfyltText?: TextValues) =>\n  customVilkarOppfyltText ? customVilkarOppfyltText.id : 'VilkarresultatMedOverstyringForm.ErOppfylt';\nconst hentErIkkeOppfyltTekstkode = (customVilkarIkkeOppfyltText?: TextValues) =>\n  customVilkarIkkeOppfyltText ? customVilkarIkkeOppfyltText.id : 'VilkarresultatMedOverstyringForm.VilkarIkkeOppfylt';\n\nconst getCustomVilkarText = (\n  behandlingType: string,\n  erOppfylt: boolean,\n  medlemskapFom?: string,\n): TextValues | undefined => {\n  const isBehandlingRevurderingFortsattMedlemskap = behandlingType === BehandlingType.REVURDERING && !!medlemskapFom;\n  if (isBehandlingRevurderingFortsattMedlemskap) {\n    return {\n      id: erOppfylt\n        ? 'VilkarresultatMedOverstyringForm.VilkarOppfyltRevurderingFom'\n        : 'VilkarresultatMedOverstyringForm.VilkarIkkeOppfyltRevurderingFom',\n      values: { fom: moment(medlemskapFom).format(DDMMYYYY_DATE_FORMAT), b: (chunks: any) => <b>{chunks}</b> },\n    };\n  }\n  return undefined;\n};\n\nconst getCustomVilkarTextForOppfylt = (behandlingType: string, medlemskapFom?: string): TextValues | undefined =>\n  getCustomVilkarText(behandlingType, true, medlemskapFom);\n\nconst getCustomVilkarTextForIkkeOppfylt = (behandlingType: string, medlemskapFom?: string): TextValues | undefined =>\n  getCustomVilkarText(behandlingType, false, medlemskapFom);\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n  begrunnelse?: string;\n  isOverstyrt?: boolean;\n};\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  overstyringApKode: OverstyringAksjonspunkter,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): FormValues => {\n  const aksjonspunkt = aksjonspunkter.find(ap => ap.definisjon === overstyringApKode);\n  return {\n    isOverstyrt: aksjonspunkt !== undefined,\n    begrunnelse: decodeHtmlEntity(aksjonspunkt && aksjonspunkt.begrunnelse ? aksjonspunkt.begrunnelse : ''),\n    ...VilkarResultPicker.buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n  };\n};\n\nconst transformValues = (\n  values: FormValues,\n  overstyringApKode: OverstyringAksjonspunkter,\n): OverstyringAp | OverstyringMedlemskapsvilkaretLopendeAp => ({\n  kode: overstyringApKode,\n  begrunnelse: values.begrunnelse,\n  ...VilkarResultPicker.transformValues(values),\n});\n\ninterface OwnProps {\n  behandlingType: string;\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  medlemskapFom?: string;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: OverstyringAp | OverstyringMedlemskapsvilkaretLopendeAp) => Promise<void>;\n  overrideReadOnly: boolean;\n  kanOverstyreAccess: {\n    isEnabled: boolean;\n  };\n  toggleOverstyring: (fn: (oldArray: []) => void) => void;\n  avslagsarsaker: KodeverkMedNavn[];\n  status: string;\n  erOverstyrt: boolean;\n  panelTittelKode: string;\n  overstyringApKode: OverstyringAksjonspunkter;\n  lovReferanse?: string;\n  erMedlemskapsPanel: boolean;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * VilkarresultatForm\n *\n * Viser resultat av vilkårskjøring når det ikke finnes tilknyttede aksjonspunkter.\n * Resultatet kan overstyres av Nav-ansatt med overstyr-rettighet.\n */\nconst VilkarresultatMedOverstyringForm: FunctionComponent<OwnProps> = ({\n  panelTittelKode,\n  erOverstyrt,\n  overstyringApKode,\n  lovReferanse,\n  erMedlemskapsPanel,\n  avslagsarsaker,\n  aksjonspunkter,\n  overrideReadOnly,\n  kanOverstyreAccess,\n  behandlingsresultat,\n  toggleOverstyring,\n  submitCallback,\n  erIkkeGodkjentAvBeslutter,\n  medlemskapFom,\n  behandlingType,\n  status,\n  formData,\n  setFormData,\n}) => {\n  const initialValues = useMemo(\n    () => buildInitialValues(aksjonspunkter, status, overstyringApKode, behandlingsresultat),\n    [aksjonspunkter, status, overstyringApKode, behandlingsresultat],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const togglePa = useCallback(\n    () => toggleOverstyring(oldArray => [...oldArray, overstyringApKode]),\n    [overstyringApKode],\n  );\n  const toggleAv = useCallback(() => {\n    formMethods.reset();\n    toggleOverstyring(oldArray => oldArray.filter(code => code !== overstyringApKode));\n  }, [toggleOverstyring, overstyringApKode]);\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  const erVilkarOk = formMethods.watch('erVilkarOk');\n\n  const customVilkarOppfyltText = useMemo(\n    () => getCustomVilkarTextForOppfylt(behandlingType, medlemskapFom),\n    [medlemskapFom, behandlingType],\n  );\n  const customVilkarIkkeOppfyltText = useMemo(\n    () => getCustomVilkarTextForIkkeOppfylt(behandlingType, medlemskapFom),\n    [medlemskapFom, behandlingType],\n  );\n\n  const aksjonspunkt = aksjonspunkter.find(ap => ap.definisjon === overstyringApKode);\n  const hasAksjonspunkt = aksjonspunkt !== undefined;\n  const isSolvable =\n    aksjonspunkt !== undefined\n      ? !(aksjonspunkt.status === aksjonspunktStatus.OPPRETTET && !aksjonspunkt.kanLoses)\n      : false;\n\n  const erOppfylt = vilkarUtfallType.OPPFYLT === status;\n  const originalErVilkarOk = vilkarUtfallType.IKKE_VURDERT !== status ? erOppfylt : undefined;\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, overstyringApKode))}\n      setDataOnUnmount={setFormData}\n    >\n      <FlexContainer>\n        <FlexRow>\n          {!erOverstyrt && originalErVilkarOk !== undefined && (\n            <FlexColumn>\n              {originalErVilkarOk && <CheckmarkCircleFillIcon className={styles.godkjentImage} />}\n              {!originalErVilkarOk && <XMarkOctagonFillIcon className={styles.avslattImage} />}\n            </FlexColumn>\n          )}\n          <FlexColumn>\n            <Heading size=\"small\">\n              <FormattedMessage id={panelTittelKode} />\n            </Heading>\n          </FlexColumn>\n          {lovReferanse && (\n            <FlexColumn>\n              <Detail className={styles.vilkar}>{lovReferanse}</Detail>\n            </FlexColumn>\n          )}\n        </FlexRow>\n        <FlexRow>\n          <FlexColumn>\n            {originalErVilkarOk && (\n              <>\n                <VerticalSpacer eightPx />\n                <Label size=\"small\">\n                  <FormattedMessage id=\"VilkarresultatMedOverstyringForm.ErOppfylt\" />\n                </Label>\n              </>\n            )}\n            {originalErVilkarOk === false && (\n              <>\n                <VerticalSpacer eightPx />\n                <Label size=\"small\">\n                  <FormattedMessage id=\"VilkarresultatMedOverstyringForm.ErIkkeOppfylt\" />\n                </Label>\n              </>\n            )}\n            {originalErVilkarOk === undefined && (\n              <>\n                <VerticalSpacer eightPx />\n                <BodyShort size=\"small\">\n                  <FormattedMessage id=\"VilkarresultatMedOverstyringForm.IkkeBehandlet\" />\n                </BodyShort>\n              </>\n            )}\n          </FlexColumn>\n          {originalErVilkarOk !== undefined &&\n            !isHidden(kanOverstyreAccess.isEnabled, aksjonspunkter, overstyringApKode) && (\n              <FlexColumn>\n                <VerticalSpacer eightPx />\n                <OverstyringKnapp onClick={togglePa} erOverstyrt={erOverstyrt || overrideReadOnly} />\n              </FlexColumn>\n            )}\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer eightPx />\n      {(erOverstyrt || hasAksjonspunkt) && (\n        <OverstyringPanel\n          erOverstyrt={erOverstyrt}\n          isSolvable={erOverstyrt || isSolvable}\n          erVilkarOk={erVilkarOk}\n          hasAksjonspunkt={hasAksjonspunkt}\n          overrideReadOnly={overrideReadOnly}\n          isSubmitting={formMethods.formState.isSubmitting}\n          isPristine={!formMethods.formState.isDirty}\n          toggleAv={toggleAv}\n          erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        >\n          <VilkarResultPicker\n            avslagsarsaker={avslagsarsaker}\n            customVilkarOppfyltText={\n              <FormattedMessage\n                id={hentErOppfyltTekstkode(customVilkarOppfyltText)}\n                values={\n                  customVilkarOppfyltText\n                    ? {\n                        ...customVilkarOppfyltText.values,\n                      }\n                    : { b: bTag }\n                }\n              />\n            }\n            customVilkarIkkeOppfyltText={\n              <FormattedMessage\n                id={hentErIkkeOppfyltTekstkode(customVilkarIkkeOppfyltText)}\n                values={\n                  customVilkarIkkeOppfyltText\n                    ? {\n                        ...customVilkarIkkeOppfyltText.values,\n                      }\n                    : { b: bTag }\n                }\n              />\n            }\n            readOnly={overrideReadOnly || !erOverstyrt}\n            erMedlemskapsPanel={erMedlemskapsPanel}\n          />\n        </OverstyringPanel>\n      )}\n    </Form>\n  );\n};\n\nexport default VilkarresultatMedOverstyringForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { Medlemskap, KodeverkMedNavn, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\nimport { OverstyringAksjonspunkter } from '@navikt/fp-kodeverk';\n\nimport VilkarresultatMedOverstyringForm from './components/VilkarresultatMedOverstyringForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  medlemskap?: Medlemskap;\n  overrideReadOnly: boolean;\n  kanOverstyreAccess: {\n    isEnabled: boolean;\n  };\n  toggleOverstyring: (fn: (oldArray: []) => void) => void;\n  avslagsarsaker: KodeverkMedNavn[];\n  erOverstyrt: boolean;\n  panelTittelKode: string;\n  overstyringApKode: OverstyringAksjonspunkter;\n  lovReferanse?: string;\n  erMedlemskapsPanel: boolean;\n}\n\nconst VilkarresultatMedOverstyringProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  medlemskap,\n  aksjonspunkter,\n  submitCallback,\n  overrideReadOnly,\n  kanOverstyreAccess,\n  toggleOverstyring,\n  avslagsarsaker,\n  status,\n  erOverstyrt,\n  panelTittelKode,\n  overstyringApKode,\n  lovReferanse = '',\n  erMedlemskapsPanel,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <VilkarresultatMedOverstyringForm\n      behandlingType={behandling.type}\n      behandlingsresultat={behandling.behandlingsresultat}\n      medlemskapFom={medlemskap?.fom}\n      aksjonspunkter={aksjonspunkter}\n      submitCallback={submitCallback}\n      overrideReadOnly={overrideReadOnly}\n      kanOverstyreAccess={kanOverstyreAccess}\n      toggleOverstyring={toggleOverstyring}\n      avslagsarsaker={avslagsarsaker}\n      status={status}\n      erOverstyrt={erOverstyrt}\n      panelTittelKode={panelTittelKode}\n      overstyringApKode={overstyringApKode}\n      lovReferanse={lovReferanse}\n      erMedlemskapsPanel={erMedlemskapsPanel}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default VilkarresultatMedOverstyringProsessIndex;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { Aksjonspunkt, KodeverkMedNavn } from '@navikt/ft-types';\nimport { VilkarType } from '@navikt/ft-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { VilkarresultatMedOverstyringProsessIndex } from '@navikt/fp-prosess-vilkar-overstyring';\nimport { Medlemskap, Vilkar } from '@navikt/fp-types';\nimport { KodeverkType, OverstyringAksjonspunkter } from '@navikt/fp-kodeverk';\n\nimport skalViseProsessPanel from './skalViseProsessPanel';\nimport useStandardProsessPanelProps from './useStandardProsessPanelProps';\n\n// TODO Spesifikk ES-kodar bør ikkje ligga her\nconst avslagsarsakerES = ['1002', '1003', '1032'];\nconst filtrerAvslagsarsaker = (\n  avslagsarsaker: { [key: string]: KodeverkMedNavn[] },\n  vilkarTypeKode: string,\n): KodeverkMedNavn[] =>\n  vilkarTypeKode === VilkarType.FODSELSVILKARET_MOR\n    ? avslagsarsaker[vilkarTypeKode].filter(arsak => !avslagsarsakerES.includes(arsak.kode))\n    : avslagsarsaker[vilkarTypeKode];\n\ninterface OwnProps {\n  aksjonspunkter: Aksjonspunkt[];\n  aksjonspunktKode: OverstyringAksjonspunkter;\n  vilkar: Vilkar[];\n  vilkarKoder: string[];\n  erMedlemskapsPanel: boolean;\n  medlemskap?: Medlemskap;\n  panelTekstKode: string;\n  erOverstyrt: boolean;\n  toggleOverstyring: () => void;\n  kanOverstyreAccess: { isEnabled: boolean; employeeHasAccess: boolean };\n  overrideReadOnly: boolean;\n}\n\nconst OverstyringPanelDef: FunctionComponent<OwnProps> = ({\n  aksjonspunkter,\n  aksjonspunktKode,\n  vilkar,\n  vilkarKoder,\n  panelTekstKode,\n  erMedlemskapsPanel,\n  medlemskap,\n  erOverstyrt,\n  toggleOverstyring,\n  kanOverstyreAccess,\n  overrideReadOnly,\n}) => {\n  const overstyrteAksjonspunkter = useMemo(\n    () => aksjonspunkter.filter(ap => aksjonspunktKode === ap.definisjon),\n    [aksjonspunkter],\n  );\n\n  const standardProps = useStandardProsessPanelProps([aksjonspunktKode], vilkarKoder);\n\n  const skalVises = skalViseProsessPanel(overstyrteAksjonspunkter, vilkarKoder, vilkar);\n\n  const avslagsarsaker = filtrerAvslagsarsaker(\n    standardProps.alleKodeverk[KodeverkType.AVSLAGSARSAK],\n    vilkar[0].vilkarType,\n  );\n\n  if (!skalVises) {\n    return null;\n  }\n\n  return (\n    <>\n      <VilkarresultatMedOverstyringProsessIndex\n        medlemskap={medlemskap}\n        overrideReadOnly={overrideReadOnly}\n        kanOverstyreAccess={kanOverstyreAccess}\n        toggleOverstyring={toggleOverstyring}\n        avslagsarsaker={avslagsarsaker}\n        erOverstyrt={erOverstyrt}\n        panelTittelKode={panelTekstKode}\n        overstyringApKode={aksjonspunktKode}\n        lovReferanse={vilkar.length > 0 ? vilkar[0].lovReferanse : undefined}\n        erMedlemskapsPanel={erMedlemskapsPanel}\n        {...standardProps}\n      />\n      <VerticalSpacer thirtyTwoPx />\n    </>\n  );\n};\n\nexport default OverstyringPanelDef;\n","import React, { FunctionComponent, ReactElement, useCallback, useState, MouseEvent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { VilkarUtfallType } from '@navikt/ft-kodeverk';\nimport {\n  VerticalSpacer,\n  AksjonspunktHelpTextHTML,\n  FlexContainer,\n  FlexRow,\n  FlexColumn,\n} from '@navikt/ft-ui-komponenter';\nimport { Behandling } from '@navikt/ft-types';\n\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { RestApiState } from '@navikt/fp-rest-api-hooks';\n\nimport ProsessPanelWrapper from './ProsessPanelWrapper';\nimport useProsessMenyRegistrerer from './useProsessMenyRegistrerer';\nimport InngangsvilkarPanelData from '../typer/inngangsvilkarPanelData';\nimport ProsessPanelInitProps from '../typer/prosessPanelInitProps';\nimport InngangsvilkarPanelInitProps from '../typer/inngangsvilkarPanelInitProps';\n\nimport styles from './inngangsvilkarDefaultInitWrapper.module.css';\n\nconst harMinstEttDelPanelStatus = (paneler: InngangsvilkarPanelData[], vuType: string): boolean =>\n  paneler.some(p => p.status === vuType);\n\nconst getStatus = (paneler: InngangsvilkarPanelData[]): string => {\n  const harStatusIkkeVurdert = harMinstEttDelPanelStatus(paneler, VilkarUtfallType.IKKE_VURDERT);\n  const harStatusOppfylt = harMinstEttDelPanelStatus(paneler, VilkarUtfallType.OPPFYLT);\n  const tempStatus =\n    harStatusOppfylt && !harStatusIkkeVurdert ? VilkarUtfallType.OPPFYLT : VilkarUtfallType.IKKE_VURDERT;\n  return harMinstEttDelPanelStatus(paneler, VilkarUtfallType.IKKE_OPPFYLT) ? VilkarUtfallType.IKKE_OPPFYLT : tempStatus;\n};\n\nconst getErAksjonspunktOpen = (paneler: InngangsvilkarPanelData[], behandling: Behandling): boolean => {\n  if (behandling.behandlingHenlagt) {\n    return false;\n  }\n  if (paneler.some(p => p.harApentAksjonspunkt)) {\n    return true;\n  }\n  if (paneler.some(p => p.status === VilkarUtfallType.IKKE_OPPFYLT)) {\n    return false;\n  }\n\n  return !(\n    paneler.every(p => p.status === VilkarUtfallType.IKKE_VURDERT) ||\n    paneler.every(p => p.status === VilkarUtfallType.OPPFYLT)\n  );\n};\n\ninterface OwnProps {\n  apentFaktaPanelInfo?: { urlCode: string; text: string };\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  leftPanels: (props: InngangsvilkarPanelInitProps) => ReactElement;\n  rightPanels?: (props: InngangsvilkarPanelInitProps) => ReactElement;\n}\n\nconst InngangsvilkarDefaultInitWrapper: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  behandling,\n  valgtProsessSteg,\n  registrerProsessPanel,\n  apentFaktaPanelInfo,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  leftPanels,\n  rightPanels,\n}) => {\n  const intl = useIntl();\n\n  const [panelInfo, setPanelInfo] = useState<InngangsvilkarPanelData[]>([]);\n  const registrerInngangsvilkarPanel = useCallback((nyData: InngangsvilkarPanelData) => {\n    setPanelInfo(oldData => {\n      const newData = [...oldData];\n      const index = newData.findIndex(d => d.id === nyData.id);\n      if (index >= 0) {\n        newData.splice(index, 1, nyData);\n      } else {\n        newData.push(nyData);\n      }\n      return newData;\n    });\n  }, []);\n\n  const erIkkeFerdigbehandlet = panelInfo.some(p => p.status === VilkarUtfallType.IKKE_VURDERT);\n\n  const oppdaterUrl = useCallback(\n    (evt: MouseEvent) => {\n      oppdaterProsessStegOgFaktaPanelIUrl(undefined, apentFaktaPanelInfo?.urlCode);\n      evt.preventDefault();\n    },\n    [apentFaktaPanelInfo],\n  );\n\n  const harApentAksjonspunkt = getErAksjonspunktOpen(panelInfo, behandling);\n  const status = getStatus(panelInfo);\n\n  const skalVises = panelInfo.length > 0;\n\n  const erPanelValgt = useProsessMenyRegistrerer(\n    registrerProsessPanel,\n    ProsessStegCode.INNGANGSVILKAR,\n    intl.formatMessage({ id: 'Behandlingspunkt.Inngangsvilkar' }),\n    skalVises,\n    harApentAksjonspunkt,\n    status,\n    !apentFaktaPanelInfo && harApentAksjonspunkt,\n    valgtProsessSteg,\n  );\n\n  const aksjonspunktTekster = panelInfo.map(p => p.aksjonspunktTekst).filter(tekst => !!tekst);\n\n  return (\n    <ProsessPanelWrapper\n      erPanelValgt={erPanelValgt}\n      erAksjonspunktOpent={harApentAksjonspunkt}\n      status={status}\n      dataState={RestApiState.SUCCESS}\n      skalSkjulePanel={!erPanelValgt}\n    >\n      <>\n        {erPanelValgt && ((apentFaktaPanelInfo && erIkkeFerdigbehandlet) || aksjonspunktTekster.length > 0) && (\n          <>\n            <AksjonspunktHelpTextHTML>\n              {apentFaktaPanelInfo && erIkkeFerdigbehandlet\n                ? [\n                    <React.Fragment key=\"1\">\n                      {intl.formatMessage({ id: 'InngangsvilkarProsessStegPanelDef.AvventerAvklaringAv' })}\n                      <a href=\"\" onClick={oppdaterUrl}>\n                        {apentFaktaPanelInfo.text}\n                      </a>\n                    </React.Fragment>,\n                  ]\n                : aksjonspunktTekster.map(tekst => tekst)}\n            </AksjonspunktHelpTextHTML>\n            <VerticalSpacer thirtyTwoPx />\n          </>\n        )}\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn className={styles.col}>\n              <div className={styles.panelLeft}>\n                {leftPanels({\n                  registrerInngangsvilkarPanel,\n                  erPanelValgt,\n                  harInngangsvilkarApentAksjonspunkt: harApentAksjonspunkt,\n                })}\n              </div>\n            </FlexColumn>\n            {rightPanels && (\n              <FlexColumn className={styles.col}>\n                <div className={styles.panelRight}>\n                  {rightPanels({\n                    registrerInngangsvilkarPanel,\n                    erPanelValgt,\n                    harInngangsvilkarApentAksjonspunkt: harApentAksjonspunkt,\n                  })}\n                </div>\n              </FlexColumn>\n            )}\n          </FlexRow>\n        </FlexContainer>\n      </>\n    </ProsessPanelWrapper>\n  );\n};\n\nexport default InngangsvilkarDefaultInitWrapper;\n","import React, { FunctionComponent } from 'react';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, VilkarType } from '@navikt/fp-kodeverk';\nimport { AksessRettigheter, Medlemskap } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\nimport { BehandlingApiKeys } from '../../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODE = AksjonspunktCode.OVERSTYR_MEDLEMSKAPSVILKAR;\n\nconst VILKAR_KODER = [VilkarType.MEDLEMSKAPSVILKARET];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.MEDLEMSKAP];\ntype EndepunktPanelData = {\n  medlemskap: Medlemskap;\n};\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst MedlemskapInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => (\n  <InngangsvilkarDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    behandlingVersjon={behandlingVersjon}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={[AKSJONSPUNKT_KODE]}\n    vilkarKoder={VILKAR_KODER}\n    inngangsvilkarPanelKode=\"MEDLEMSKAP\"\n    hentInngangsvilkarPanelTekst={() => ''}\n    renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n      <>\n        <OverstyringPanelDef\n          aksjonspunkter={data.aksjonspunkter}\n          aksjonspunktKode={AKSJONSPUNKT_KODE}\n          vilkar={data.vilkar}\n          vilkarKoder={VILKAR_KODER}\n          panelTekstKode=\"Inngangsvilkar.Medlemskapsvilkaret\"\n          erMedlemskapsPanel\n          medlemskap={data.medlemskap}\n          toggleOverstyring={toggleOverstyring}\n          erOverstyrt={erOverstyrt}\n          overrideReadOnly={\n            data.isReadOnly || (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n          }\n          kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n        />\n        <VerticalSpacer thirtyTwoPx />\n      </>\n    )}\n  />\n);\n\nexport default MedlemskapInngangsvilkarInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport dayjs from 'dayjs';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\n\nimport { DDMMYYYY_DATE_FORMAT, formatCurrencyNoKr } from '@navikt/ft-utils';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport styles from './avregningSummary.module.css';\n\ninterface OwnProps {\n  fom: string;\n  tom: string;\n  feilutbetaling: number;\n  etterbetaling: number;\n  inntrekk?: number;\n  ingenPerioderMedAvvik?: boolean;\n}\n\n/**\n * Avregning oppsummering\n */\nconst AvregningSummary: FunctionComponent<OwnProps> = ({\n  fom,\n  tom,\n  feilutbetaling,\n  etterbetaling,\n  inntrekk,\n  ingenPerioderMedAvvik,\n}) => (\n  <>\n    <BodyShort size=\"small\" className={styles.summaryTitle}>\n      <FormattedMessage id=\"Avregning.bruker\" />\n    </BodyShort>\n    <VerticalSpacer eightPx />\n    <div className={styles.infoSummary}>\n      {ingenPerioderMedAvvik && (\n        <div className={styles.ingenPerioder}>\n          <FormattedMessage id=\"Avregning.ingenPerioder\" />\n        </div>\n      )}\n      {!ingenPerioderMedAvvik && (\n        <>\n          <Label size=\"small\">\n            {`${dayjs(fom).format(DDMMYYYY_DATE_FORMAT)} - ${dayjs(tom).format(DDMMYYYY_DATE_FORMAT)}`}\n          </Label>\n          <VerticalSpacer sixteenPx />\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn className={styles.resultName}>\n                <BodyShort size=\"small\">\n                  <FormattedMessage id=\"Avregning.etterbetaling\" />:\n                </BodyShort>\n              </FlexColumn>\n              <FlexColumn>\n                <BodyShort size=\"small\">{formatCurrencyNoKr(etterbetaling)}</BodyShort>\n              </FlexColumn>\n            </FlexRow>\n            <FlexRow>\n              <FlexColumn className={styles.resultName}>\n                <BodyShort size=\"small\">\n                  <FormattedMessage id=\"Avregning.tilbakekreving\" />:\n                </BodyShort>\n              </FlexColumn>\n              <FlexColumn>\n                <BodyShort size=\"small\">\n                  <span className={feilutbetaling ? styles.redNumber : styles.positivNumber}>\n                    {formatCurrencyNoKr(feilutbetaling)}\n                  </span>\n                </BodyShort>\n              </FlexColumn>\n              {inntrekk !== null && (\n                <FlexColumn>\n                  <BodyShort size=\"small\">\n                    <FormattedMessage id=\"Avregning.inntrekk\" />:\n                    <span className={inntrekk ? styles.redNumber : styles.positivNumber}>\n                      {formatCurrencyNoKr(inntrekk)}\n                    </span>\n                  </BodyShort>\n                </FlexColumn>\n              )}\n            </FlexRow>\n          </FlexContainer>\n        </>\n      )}\n    </div>\n  </>\n);\n\nexport default AvregningSummary;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ChevronDownIcon, ChevronUpIcon } from '@navikt/aksel-icons';\n\nimport styles from './collapseButton.module.css';\n\nconst buttonText = (showDetails: boolean): string =>\n  showDetails ? 'Avregning.headerText.VisFærreDetaljer' : 'Avregning.headerText.VisFlereDetaljer';\n\ninterface OwnProps {\n  toggleDetails: (id: number) => void;\n  showDetails: boolean;\n  mottakerIndex: number;\n}\n\nconst CollapseButton: FunctionComponent<OwnProps> = ({ toggleDetails, showDetails, mottakerIndex }) => (\n  <button type=\"button\" className={styles.invisibleButton} onClick={() => toggleDetails(mottakerIndex)}>\n    <FormattedMessage id={buttonText(showDetails)} />\n    {showDetails ? <ChevronUpIcon /> : <ChevronDownIcon />}\n  </button>\n);\n\nexport default CollapseButton;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classnames from 'classnames/bind';\nimport dayjs from 'dayjs';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport { Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\nimport { formatCurrencyNoKr, getRangeOfMonths } from '@navikt/ft-utils';\nimport { mottakerTyper } from '@navikt/fp-kodeverk';\nimport {\n  DetaljertSimuleringResultat,\n  Mottaker,\n  SimuleringResultatPerFagområde,\n  SimuleringResultatRad,\n  ArbeidsgiverOpplysningerPerId,\n} from '@navikt/fp-types';\n\nimport CollapseButton from './CollapseButton';\n\nimport styles from './avregningTable.module.css';\n\nconst classNames = classnames.bind(styles);\n\nexport const avregningCodes = {\n  DIFFERANSE: 'differanse',\n  INNTREKK: 'inntrekk',\n  FEILUTBETALING: 'feilutbetaling',\n  INNTREKKNESTEMÅNED: 'inntrekkNesteMåned',\n  OPPFYLT: 'oppfylt',\n  REDUKSJON: 'reduksjon',\n};\n\nconst isNextPeriod = (monthAndYear: { month: string; year: string }, nextPeriod: string): boolean =>\n  `${monthAndYear.month}${monthAndYear.year}` === (nextPeriod ? dayjs(nextPeriod).format('MMMMYY') : false);\n\nconst getHeaderCodes = (\n  showCollapseButton: boolean,\n  collapseProps: { toggleDetails: (id: number) => void; showDetails: boolean; mottakerIndex: number },\n  rangeOfMonths: { month: string; year: string }[],\n  nextPeriod: string,\n): ReactElement[] => {\n  const firstElement = showCollapseButton ? (\n    <CollapseButton {...collapseProps} key={`collapseButton-${rangeOfMonths.length}`} />\n  ) : (\n    <div />\n  );\n  return [\n    firstElement,\n    ...rangeOfMonths.map(monthAndYear => (\n      <span\n        className={classNames({\n          nextPeriod: isNextPeriod(monthAndYear, nextPeriod),\n          normalPeriod: !isNextPeriod(monthAndYear, nextPeriod),\n        })}\n        key={`${monthAndYear.month}-${monthAndYear.year}`}\n      >\n        <FormattedMessage id={`Avregning.headerText.${monthAndYear.month}`} />\n      </span>\n    )),\n  ];\n};\n\nconst skalViseCollapseButton = (mottakerResultatPerFag: SimuleringResultatPerFagområde[]): boolean =>\n  mottakerResultatPerFag.some(fag => fag.rader.length > 1);\n\nconst rowToggable = (fagOmråde: SimuleringResultatPerFagområde, rowIsFeilUtbetalt: boolean): boolean => {\n  const fagFeilUtbetalt = fagOmråde.rader.find(rad => rad.feltnavn === avregningCodes.DIFFERANSE);\n  return !!fagFeilUtbetalt && !rowIsFeilUtbetalt;\n};\n\nconst rowIsHidden = (isRowToggable: boolean, showDetails: boolean): boolean => isRowToggable && !showDetails;\n\nconst createColumns = (\n  perioder: SimuleringResultatRad['resultaterPerMåned'],\n  rangeOfMonths: { month: string; year: string }[],\n  nextPeriod: string,\n): ReactElement[] => {\n  const nextPeriodFormatted = `${dayjs(nextPeriod).format('MMMMYY')}`;\n\n  const perioderData = rangeOfMonths.map(monthAndYear => {\n    const periodeExists = perioder.find(\n      periode =>\n        dayjs(periode.periode.tom).format('MMMMYY').toLowerCase() === `${monthAndYear.month}${monthAndYear.year}`,\n    );\n    return periodeExists || { måned: `${monthAndYear.month}${monthAndYear.year}`, beløp: null };\n  });\n\n  return perioderData.map((måned, månedIndex) => (\n    <TableColumn\n      key={`columnIndex${månedIndex + 1}`}\n      className={classNames({\n        rodTekst: !måned.beløp || måned.beløp < 0,\n        lastColumn:\n          'måned' in måned\n            ? måned.måned === nextPeriodFormatted\n            : dayjs(måned.periode.tom).format('MMMMYY') === nextPeriodFormatted,\n      })}\n    >\n      {måned.beløp ? formatCurrencyNoKr(måned.beløp) : '-'}\n    </TableColumn>\n  ));\n};\n\nconst lagVisningsNavn = (mottaker: Mottaker, arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId): string => {\n  const agOpplysning = mottaker.mottakerIdentifikator ? arbeidsgiverOpplysninger[mottaker.mottakerIdentifikator] : undefined;\n  return agOpplysning ? `${agOpplysning.navn} (${mottaker.mottakerNummer})` : `${mottaker.mottakerNummer}`;\n};\n\nconst tableTitle = (mottaker: Mottaker, arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId): ReactElement | null =>\n  mottaker.mottakerType === mottakerTyper.ARBG || mottaker.mottakerType === mottakerTyper.ARBGP ? (\n    <BodyShort size=\"small\" className={styles.tableTitle}>\n      {lagVisningsNavn(mottaker, arbeidsgiverOpplysningerPerId)}\n    </BodyShort>\n  ) : null;\n\nconst getResultatRadene = (\n  ingenPerioderMedAvvik: boolean,\n  resultatPerFagområde: SimuleringResultatPerFagområde[],\n  resultatOgMotregningRader: Mottaker['resultatOgMotregningRader'],\n): Mottaker['resultatOgMotregningRader'] => {\n  if (!ingenPerioderMedAvvik) {\n    return resultatOgMotregningRader;\n  }\n  return resultatPerFagområde.length > 1\n    ? resultatOgMotregningRader.filter(resultat => resultat.feltnavn !== avregningCodes.INNTREKKNESTEMÅNED)\n    : [];\n};\n\nconst avvikBruker = (ingenPerioderMedAvvik: boolean, mottakerTypeKode: string): boolean =>\n  !!(ingenPerioderMedAvvik && mottakerTypeKode === mottakerTyper.BRUKER);\n\nconst getPeriodeFom = (periodeFom: string, nesteUtbPeriodeFom: string): string => periodeFom || nesteUtbPeriodeFom;\n\nconst getPeriod = (\n  ingenPerioderMedAvvik: boolean,\n  periodeFom: string,\n  mottaker: Mottaker,\n): { month: string; year: string }[] => {\n  const fomDato = avvikBruker(ingenPerioderMedAvvik, mottaker.mottakerType)\n    ? dayjs(mottaker.nesteUtbPeriode.tom).subtract(1, 'months').format()\n    : getPeriodeFom(periodeFom, mottaker.nesteUtbPeriode.fom);\n  return getRangeOfMonths(fomDato, mottaker.nesteUtbPeriode.tom);\n};\n\ntype Details = {\n  id: number;\n  show: boolean;\n};\n\ninterface OwnProps {\n  toggleDetails: (id: number) => void;\n  showDetails: Details[];\n  simuleringResultat: DetaljertSimuleringResultat;\n  ingenPerioderMedAvvik: boolean;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\nconst AvregningTable: FunctionComponent<OwnProps> = ({\n  simuleringResultat,\n  toggleDetails,\n  showDetails,\n  ingenPerioderMedAvvik,\n  arbeidsgiverOpplysningerPerId,\n}) => (\n  <>\n    {simuleringResultat.perioderPerMottaker.map((mottaker, mottakerIndex) => {\n      const rangeOfMonths = getPeriod(ingenPerioderMedAvvik, simuleringResultat.periode.fom, mottaker);\n      const nesteMåned = mottaker.nesteUtbPeriode.tom;\n      const visDetaljer = showDetails.find(d => d.id === mottakerIndex);\n      const array = [] as ReactElement[];\n      return (\n        <div className={styles.tableWrapper} key={`tableIndex${mottakerIndex + 1}`}>\n          {tableTitle(mottaker, arbeidsgiverOpplysningerPerId)}\n          <Table\n            headerColumnContent={getHeaderCodes(\n              skalViseCollapseButton(mottaker.resultatPerFagområde),\n              { toggleDetails, showDetails: visDetaljer ? visDetaljer.show : false, mottakerIndex },\n              rangeOfMonths,\n              nesteMåned,\n            )}\n            key={`tableIndex${mottakerIndex + 1}`}\n            classNameTable={styles.simuleringTable}\n          >\n            {array\n              .concat(\n                ...mottaker.resultatPerFagområde.map((fagOmråde, fagIndex) =>\n                  fagOmråde.rader\n                    .filter(rad => {\n                      const isFeilUtbetalt = rad.feltnavn === avregningCodes.DIFFERANSE;\n                      const isRowToggable = rowToggable(fagOmråde, isFeilUtbetalt);\n                      return !rowIsHidden(isRowToggable, visDetaljer ? visDetaljer.show : false);\n                    })\n                    .map((rad, rowIndex) => {\n                      const isFeilUtbetalt = rad.feltnavn === avregningCodes.DIFFERANSE;\n                      const isRowToggable = rowToggable(fagOmråde, isFeilUtbetalt);\n                      return (\n                        <TableRow\n                          isBold={isFeilUtbetalt || ingenPerioderMedAvvik}\n                          isDashedBottomBorder={isRowToggable}\n                          isSolidBottomBorder={!isRowToggable}\n                          key={`rowIndex${fagIndex + 1}${rowIndex + 1}`}\n                        >\n                          <TableColumn>\n                            <FormattedMessage id={`Avregning.${fagOmråde.fagOmrådeKode}.${rad.feltnavn}`} />\n                          </TableColumn>\n                          {createColumns(rad.resultaterPerMåned, rangeOfMonths, nesteMåned)}\n                        </TableRow>\n                      );\n                    }),\n                ),\n              )\n              .concat(\n                getResultatRadene(\n                  ingenPerioderMedAvvik,\n                  mottaker.resultatPerFagområde,\n                  mottaker.resultatOgMotregningRader,\n                ).map((resultat, resultatIndex) => (\n                  <TableRow\n                    isBold={resultat.feltnavn !== avregningCodes.INNTREKKNESTEMÅNED}\n                    isSolidBottomBorder\n                    key={`rowIndex${resultatIndex + 1}`}\n                  >\n                    <TableColumn>\n                      <FormattedMessage id={`Avregning.${resultat.feltnavn}`} />\n                    </TableColumn>\n                    {createColumns(resultat.resultaterPerMåned, rangeOfMonths, nesteMåned)}\n                  </TableRow>\n                )),\n              )}\n          </Table>\n        </div>\n      );\n    })}\n  </>\n);\n\nexport default AvregningTable;\n","import React, { FunctionComponent, ReactElement, useState, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, Heading, Button, HStack, VStack } from '@navikt/ds-react';\n\nimport { RadioGroupPanel, TextAreaField, Form } from '@navikt/ft-form-hooks';\nimport { AksjonspunktHelpTextTemp, ArrowBox, VerticalSpacer, Tooltip } from '@navikt/ft-ui-komponenter';\nimport { getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\nimport { fagsakYtelseType, AksjonspunktCode, tilbakekrevingVidereBehandling } from '@navikt/fp-kodeverk';\nimport {\n  Aksjonspunkt,\n  Fagsak,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  ArbeidsgiverOpplysningerPerId,\n} from '@navikt/fp-types';\nimport { VurderFeilutbetalingAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { QuestionmarkDiamondIcon } from '@navikt/aksel-icons';\nimport AvregningSummary from './AvregningSummary';\nimport AvregningTable from './AvregningTable';\n\nimport styles from './avregningPanel.module.css';\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\nconst IKKE_SEND = 'IKKE_SEND';\n\nconst lagHjelpetekstTooltip = (isForeldrepenger: boolean): ReactElement => (\n  <FormattedMessage\n    id={isForeldrepenger ? 'Avregning.HjelpetekstForeldrepenger' : 'Avregning.HjelpetekstEngangsstonad'}\n  />\n);\n\ntype Details = {\n  id: number;\n  show: boolean;\n};\n\ntype FormValues = {\n  videreBehandling?: string;\n  varseltekst?: string;\n  begrunnelse?: string;\n};\n\nconst hentToggleDetaljer =\n  (showDetails: Details[], setShowDetails: (details: Details[]) => void) =>\n  (id: number): void => {\n    const tableIndex = showDetails.findIndex((table: Details) => table.id === id);\n    let newShowDetailsArray = [];\n\n    if (tableIndex !== -1) {\n      const updatedTable = {\n        id,\n        show: !showDetails[tableIndex].show,\n      };\n\n      newShowDetailsArray = [\n        ...showDetails.slice(0, tableIndex),\n        updatedTable,\n        ...showDetails.slice(tableIndex + 1, showDetails.length - 1),\n      ];\n    } else {\n      newShowDetailsArray = showDetails.concat({\n        id,\n        show: true,\n      });\n    }\n    setShowDetails(newShowDetailsArray);\n  };\n\nconst transformValues = (values: FormValues): VurderFeilutbetalingAp => {\n  const { videreBehandling, varseltekst, begrunnelse } = values;\n  if (videreBehandling && videreBehandling.endsWith(IKKE_SEND)) {\n    return {\n      kode: AksjonspunktCode.VURDER_FEILUTBETALING,\n      begrunnelse,\n      videreBehandling: tilbakekrevingVidereBehandling.TILBAKEKR_INFOTRYGD,\n    };\n  }\n\n  return {\n    kode: AksjonspunktCode.VURDER_FEILUTBETALING,\n    begrunnelse,\n    videreBehandling: videreBehandling!,\n    varseltekst,\n  };\n};\n\nconst buildInitialValues = (\n  aksjonspunkt?: Aksjonspunkt,\n  tilbakekrevingvalg?: TilbakekrevingValg,\n): FormValues | undefined => {\n  if (!aksjonspunkt || !tilbakekrevingvalg) {\n    return undefined;\n  }\n\n  const harTypeIkkeSendt =\n    !tilbakekrevingvalg.varseltekst &&\n    tilbakekrevingvalg.videreBehandling === tilbakekrevingVidereBehandling.TILBAKEKR_INFOTRYGD;\n\n  return {\n    videreBehandling: harTypeIkkeSendt\n      ? tilbakekrevingvalg.videreBehandling + IKKE_SEND\n      : tilbakekrevingvalg.videreBehandling,\n    varseltekst: tilbakekrevingvalg.varseltekst,\n    begrunnelse: aksjonspunkt.begrunnelse,\n  };\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  sprakkode: string;\n  aksjonspunkter: Aksjonspunkt[];\n  simuleringResultat?: SimuleringResultat;\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  submitCallback: (data: VurderFeilutbetalingAp) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  isApOpen: boolean;\n  previewCallback: (mottaker: string, fritekst: string) => Promise<any>;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst AvregningPanel: FunctionComponent<OwnProps> = ({\n  simuleringResultat,\n  isApOpen,\n  readOnly,\n  sprakkode,\n  previewCallback,\n  formData,\n  setFormData,\n  submitCallback,\n  tilbakekrevingvalg,\n  aksjonspunkter,\n  fagsak,\n  arbeidsgiverOpplysningerPerId,\n}) => {\n  const intl = useIntl();\n\n  const aksjonspunkt = aksjonspunkter.find(ap => ap.definisjon === AksjonspunktCode.VURDER_FEILUTBETALING);\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(aksjonspunkt, tilbakekrevingvalg),\n  });\n\n  const varseltekst = formMethods.watch('varseltekst');\n\n  const { formState } = formMethods;\n\n  const [showDetails, setShowDetails] = useState<Details[]>([]);\n\n  const isForeldrepenger = fagsak.fagsakYtelseType === fagsakYtelseType.FORELDREPENGER;\n\n  const hasOpenTilbakekrevingsbehandling =\n    tilbakekrevingvalg !== undefined &&\n    tilbakekrevingvalg.videreBehandling === tilbakekrevingVidereBehandling.TILBAKEKR_OPPDATER;\n\n  const previewMessage = useCallback(\n    (e: React.MouseEvent): void => {\n      previewCallback('', varseltekst || ' ');\n      e.preventDefault();\n    },\n    [varseltekst],\n  );\n\n  const toggleDetaljer = hentToggleDetaljer(showDetails, setShowDetails);\n\n  const simuleringResultatOption = simuleringResultat?.simuleringResultat;\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"Avregning.Title\" />\n      </Heading>\n      <VerticalSpacer twentyPx />\n      {simuleringResultatOption && (\n        <>\n          {aksjonspunkt && (\n            <>\n              <AksjonspunktHelpTextTemp isAksjonspunktOpen={isApOpen}>\n                {[<FormattedMessage id=\"Avregning.AksjonspunktHelpText.5084\" key=\"vurderFeilutbetaling\" />]}\n              </AksjonspunktHelpTextTemp>\n              <VerticalSpacer twentyPx />\n            </>\n          )}\n          <AvregningSummary\n            fom={simuleringResultatOption.periode.fom}\n            tom={simuleringResultatOption.periode.tom}\n            feilutbetaling={simuleringResultatOption.sumFeilutbetaling}\n            etterbetaling={simuleringResultatOption.sumEtterbetaling}\n            inntrekk={simuleringResultatOption.sumInntrekk}\n            ingenPerioderMedAvvik={simuleringResultatOption.ingenPerioderMedAvvik}\n          />\n          <AvregningTable\n            arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n            showDetails={showDetails}\n            toggleDetails={toggleDetaljer}\n            simuleringResultat={simuleringResultatOption}\n            ingenPerioderMedAvvik={simuleringResultatOption.ingenPerioderMedAvvik}\n          />\n          <VerticalSpacer twentyPx />\n          {hasOpenTilbakekrevingsbehandling && (\n            <Label size=\"small\">\n              <FormattedMessage id=\"Avregning.ApenTilbakekrevingsbehandling\" />\n            </Label>\n          )}\n        </>\n      )}\n      {!simuleringResultat && <FormattedMessage id=\"Avregning.ingenData\" />}\n      {aksjonspunkt && (\n        <Form\n          formMethods={formMethods}\n          onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n          setDataOnUnmount={setFormData}\n        >\n          <VStack gap=\"10\" align=\"start\">\n            <TextAreaField\n              name=\"begrunnelse\"\n              label={intl.formatMessage({ id: 'Avregning.vurdering' })}\n              validate={[required, minLength3, maxLength1500, hasValidText]}\n              maxLength={1500}\n              readOnly={readOnly}\n            />\n            <RadioGroupPanel\n              name=\"videreBehandling\"\n              label={<FormattedMessage id=\"Avregning.videreBehandling\" />}\n              validate={[required]}\n              isReadOnly={readOnly}\n              radios={[\n                {\n                  value: tilbakekrevingVidereBehandling.TILBAKEKR_INFOTRYGD,\n                  label: <FormattedMessage id=\"Avregning.gjennomfør\" />,\n                  element: (\n                    <div className={styles.varsel}>\n                      <VerticalSpacer eightPx />\n                      <ArrowBox alignOffset={20}>\n                        <VStack gap=\"4\">\n                          <HStack gap=\"2\">\n                            <BodyShort size=\"small\" className={styles.bold}>\n                              <FormattedMessage id=\"Avregning.varseltekst\" />\n                            </BodyShort>\n                            <Tooltip content={lagHjelpetekstTooltip(isForeldrepenger)}>\n                              <QuestionmarkDiamondIcon className={styles.helpTextImage} />\n                            </Tooltip>\n                          </HStack>\n                          <TextAreaField\n                            name=\"varseltekst\"\n                            label={intl.formatMessage({ id: 'Avregning.fritekst' })}\n                            validate={[required, minLength3, maxLength1500, hasValidText]}\n                            maxLength={1500}\n                            readOnly={readOnly}\n                            badges={[\n                              {\n                                type: 'info',\n                                titleText: getLanguageFromSprakkode(sprakkode),\n                              },\n                            ]}\n                          />\n                          {!readOnly && (\n                            <a href=\"\" onClick={previewMessage} className={styles.previewLink}>\n                              <FormattedMessage id=\"Messages.PreviewText\" />\n                            </a>\n                          )}\n                        </VStack>\n                      </ArrowBox>\n                    </div>\n                  ),\n                },\n                {\n                  value: `${tilbakekrevingVidereBehandling.TILBAKEKR_INFOTRYGD}${IKKE_SEND}`,\n                  label: <FormattedMessage id=\"Avregning.OpprettMenIkkeSendVarsel\" />,\n                },\n                {\n                  value: tilbakekrevingVidereBehandling.TILBAKEKR_IGNORER,\n                  label: <FormattedMessage id=\"Avregning.avvent\" />,\n                },\n              ]}\n            />\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              disabled={!formState.isDirty || formState.isSubmitting || readOnly}\n              loading={formState.isSubmitting}\n            >\n              <FormattedMessage id=\"SubmitButton.ConfirmInformation\" />\n            </Button>\n          </VStack>\n        </Form>\n      )}\n    </>\n  );\n};\n\nexport default AvregningPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport {\n  Fagsak,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  StandardProsessPanelProps,\n  ArbeidsgiverOpplysningerPerId,\n} from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport AvregningPanel from './components/AvregningPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  simuleringResultat?: SimuleringResultat;\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  previewFptilbakeCallback: (mottaker: string, fritekst: string) => Promise<any>;\n}\n\nconst AvregningProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  fagsak,\n  behandling,\n  aksjonspunkter,\n  simuleringResultat,\n  tilbakekrevingvalg,\n  arbeidsgiverOpplysningerPerId,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  isAksjonspunktOpen,\n  previewFptilbakeCallback,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <AvregningPanel\n      fagsak={fagsak}\n      arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n      sprakkode={behandling.sprakkode}\n      aksjonspunkter={aksjonspunkter}\n      simuleringResultat={simuleringResultat}\n      tilbakekrevingvalg={tilbakekrevingvalg}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      isApOpen={isAksjonspunktOpen}\n      previewCallback={previewFptilbakeCallback}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default AvregningProsessIndex;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode, vilkarUtfallType } from '@navikt/fp-kodeverk';\nimport { AvregningProsessIndex } from '@navikt/fp-prosess-avregning';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  Behandling,\n  Fagsak,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  ArbeidsgiverOpplysningerPerId,\n} from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelMenyData from '../../felles/typer/prosessPanelMenyData';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, requestBehandlingApi, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst getForhandsvisFptilbakeCallback =\n  (\n    forhandsvisTilbakekrevingMelding: (params?: any, keepData?: boolean) => Promise<Behandling | undefined>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (mottaker: string, fritekst: string) => {\n    const data = {\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n      varseltekst: fritekst,\n    };\n    return forhandsvisTilbakekrevingMelding(data).then(response => forhandsvisDokument(response));\n  };\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_FEILUTBETALING];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.TILBAKEKREVINGVALG, BehandlingApiKeys.SIMULERING_RESULTAT];\ntype EndepunktPanelData = {\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  simuleringResultat?: SimuleringResultat;\n};\n\ninterface OwnProps {\n  menyData: ProsessPanelMenyData[];\n  fagsak: Fagsak;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\nconst SimuleringProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  menyData,\n  fagsak,\n  arbeidsgiverOpplysningerPerId,\n  ...props\n}) => {\n  const { startRequest: forhandsvisTilbakekrevingMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_TILBAKEKREVING_MESSAGE,\n  );\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const previewFptilbakeCallback = useCallback(\n    getForhandsvisFptilbakeCallback(forhandsvisTilbakekrevingMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.SIMULERING}\n      prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.Avregning' })}\n      skalPanelVisesIMeny={() => {\n        const harVedtakspanel = menyData.some(\n          d =>\n            d.id === ProsessStegCode.VEDTAK && (d.status !== vilkarUtfallType.IKKE_VURDERT || d.harApentAksjonspunkt),\n        );\n        return requestBehandlingApi.hasPath(BehandlingApiKeys.SIMULERING_RESULTAT.name) || !harVedtakspanel;\n      }}\n      hentOverstyrtStatus={() =>\n        requestBehandlingApi.hasPath(BehandlingApiKeys.SIMULERING_RESULTAT.name)\n          ? vilkarUtfallType.OPPFYLT\n          : vilkarUtfallType.IKKE_VURDERT\n      }\n      renderPanel={data => (\n        <AvregningProsessIndex\n          fagsak={fagsak}\n          previewFptilbakeCallback={previewFptilbakeCallback}\n          arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n          {...data} />\n      )}\n    />\n  );\n};\n\nexport default SimuleringProsessStegInitPanel;\n","import {\n  KodeverkType,\n  tilbakekrevingVidereBehandling,\n  vilkarUtfallType,\n  VilkarType,\n  getKodeverknavnFn,\n} from '@navikt/fp-kodeverk';\nimport { AlleKodeverk, SimuleringResultat, TilbakekrevingValg, Vilkar } from '@navikt/fp-types';\n\nconst tilbakekrevingMedInntrekk = (tilbakekrevingKode: string, simuleringResultat: SimuleringResultat): boolean =>\n  tilbakekrevingKode === tilbakekrevingVidereBehandling.TILBAKEKR_INFOTRYGD &&\n  (!!simuleringResultat.simuleringResultat.sumInntrekk || !!simuleringResultat.simuleringResultatUtenInntrekk);\n\nexport const getTilbakekrevingText = (\n  alleKodeverk: AlleKodeverk,\n  simuleringResultat?: SimuleringResultat,\n  tilbakekrevingvalg?: TilbakekrevingValg,\n): string => {\n  if (tilbakekrevingvalg !== null && tilbakekrevingvalg !== undefined && simuleringResultat) {\n    if (tilbakekrevingMedInntrekk(tilbakekrevingvalg.videreBehandling, simuleringResultat)) {\n      return 'VedtakForm.TilbakekrInfotrygdOgInntrekk';\n    }\n    const getKodeverkNavn = getKodeverknavnFn(alleKodeverk);\n    return getKodeverkNavn(tilbakekrevingvalg.videreBehandling, KodeverkType.TILBAKEKR_VIDERE_BEH);\n  }\n  return '';\n};\n\nexport const hasIkkeOppfyltSoknadsfristvilkar = (vilkar: Vilkar[]): boolean =>\n  vilkar.some(v => v.vilkarType === VilkarType.SOKNADFRISTVILKARET && v.vilkarStatus === vilkarUtfallType.IKKE_OPPFYLT);\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Detail } from '@navikt/ds-react';\n\nimport { Behandlingsresultat } from '@navikt/fp-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { TextAreaField } from '@navikt/ft-form-hooks';\nimport { decodeHtmlEntity, getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength } from '@navikt/ft-form-validators';\n\nimport styles from './vedtakFritekstPanel.module.css';\n\nconst maxLength1500 = maxLength(1500);\nconst minLength3 = minLength(3);\n\ninterface OwnProps {\n  behandlingsresultat?: Behandlingsresultat;\n  språkKode: string;\n  isReadOnly: boolean;\n  labelTextCode: string;\n}\n\nconst VedtakFritekstPanel: FunctionComponent<OwnProps> = ({\n  behandlingsresultat,\n  språkKode,\n  isReadOnly,\n  labelTextCode,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      {!isReadOnly && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <TextAreaField\n            name=\"begrunnelse\"\n            label={intl.formatMessage({ id: labelTextCode })}\n            validate={[minLength3, maxLength1500, hasValidText]}\n            maxLength={1500}\n            readOnly={isReadOnly}\n            badges={[\n              {\n                type: 'info',\n                titleText: getLanguageFromSprakkode(språkKode),\n              },\n            ]}\n          />\n        </>\n      )}\n      {isReadOnly && behandlingsresultat?.avslagsarsakFritekst && (\n        <span>\n          <VerticalSpacer twentyPx />\n          <Detail>{intl.formatMessage({ id: labelTextCode })}</Detail>\n          <VerticalSpacer eightPx />\n          <div className={styles.fritekstItem}>{decodeHtmlEntity(behandlingsresultat.avslagsarsakFritekst)}</div>\n        </span>\n      )}\n    </>\n  );\n};\n\nexport default VedtakFritekstPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Label, Detail } from '@navikt/ds-react';\n\nimport { Behandlingsresultat, BeregningsresultatDagytelse, BeregningsresultatEs } from '@navikt/fp-types';\nimport { fagsakYtelseType } from '@navikt/fp-kodeverk';\nimport { formatCurrencyWithKr } from '@navikt/ft-utils';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport VedtakFritekstPanel from '../felles/VedtakFritekstPanel';\n\ninterface OwnProps {\n  resultatstruktur?: BeregningsresultatDagytelse | BeregningsresultatEs;\n  behandlingsresultat?: Behandlingsresultat;\n  ytelseTypeKode: string;\n  språkKode: string;\n  isReadOnly: boolean;\n  skalBrukeOverstyrendeFritekstBrev: boolean;\n  beregningErManueltFastsatt: boolean;\n}\n\nconst VedtakInnvilgetPanel: FunctionComponent<OwnProps> = ({\n  behandlingsresultat,\n  ytelseTypeKode,\n  språkKode,\n  isReadOnly,\n  skalBrukeOverstyrendeFritekstBrev,\n  beregningErManueltFastsatt,\n  resultatstruktur = {},\n}) => {\n  const intl = useIntl();\n  return (\n    <>\n      {ytelseTypeKode === fagsakYtelseType.ENGANGSSTONAD && resultatstruktur && 'antallBarn' in resultatstruktur && (\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              <Detail>{intl.formatMessage({ id: 'VedtakForm.beregnetTilkjentYtelse' })}</Detail>\n              <Label size=\"small\">\n                {formatCurrencyWithKr((resultatstruktur as BeregningsresultatEs).beregnetTilkjentYtelse)}\n              </Label>\n            </FlexColumn>\n            <FlexColumn>\n              <Detail>{intl.formatMessage({ id: 'VedtakForm.AntallBarn' })}</Detail>\n              <Label size=\"small\">{resultatstruktur.antallBarn}</Label>\n            </FlexColumn>\n          </FlexRow>\n          <VerticalSpacer sixteenPx />\n        </FlexContainer>\n      )}\n      {beregningErManueltFastsatt && !skalBrukeOverstyrendeFritekstBrev && (\n        <VedtakFritekstPanel\n          isReadOnly={isReadOnly}\n          språkKode={språkKode}\n          behandlingsresultat={behandlingsresultat}\n          labelTextCode=\"VedtakForm.Fritekst.Beregningsgrunnlag\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default VedtakInnvilgetPanel;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\n\nimport { AlleKodeverk, Vilkar, Behandlingsresultat } from '@navikt/fp-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { getKodeverknavnFn, vilkarUtfallType, KodeverkType } from '@navikt/fp-kodeverk';\n\nimport VedtakFritekstPanel from '../felles/VedtakFritekstPanel';\n\nexport const getAvslagArsak = (\n  vilkar: Vilkar[],\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType, undertype?: string) => string,\n  behandlingsresultat?: Behandlingsresultat,\n): ReactElement | string => {\n  const avslatteVilkar = vilkar.filter(v => v.vilkarStatus === vilkarUtfallType.IKKE_OPPFYLT);\n  if (avslatteVilkar.length === 0) {\n    return <FormattedMessage id=\"VedtakForm.UttaksperioderIkkeGyldig\" />;\n  }\n\n  if (!behandlingsresultat?.avslagsarsak) {\n    throw new Error('Behandlingsresultat eller avslagsårsak finnes ikke');\n  }\n\n  const vilkarType = getKodeverkNavn(avslatteVilkar[0].vilkarType, KodeverkType.VILKAR_TYPE);\n  return `${vilkarType}: ${getKodeverkNavn(\n    behandlingsresultat.avslagsarsak,\n    KodeverkType.AVSLAGSARSAK,\n    avslatteVilkar[0].vilkarType,\n  )}`;\n};\n\ninterface OwnProps {\n  vilkar?: Vilkar[];\n  behandlingsresultat?: Behandlingsresultat;\n  språkKode: string;\n  isReadOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  beregningErManueltFastsatt: boolean;\n  skalBrukeOverstyrendeFritekstBrev: boolean;\n}\n\nconst EMPTY_ARRAY = [] as Vilkar[];\n\nconst VedtakAvslagPanel: FunctionComponent<OwnProps> = ({\n  vilkar = EMPTY_ARRAY,\n  behandlingsresultat,\n  språkKode,\n  isReadOnly,\n  alleKodeverk,\n  beregningErManueltFastsatt,\n  skalBrukeOverstyrendeFritekstBrev,\n}) => {\n  const intl = useIntl();\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n  const textCode = beregningErManueltFastsatt ? 'VedtakForm.Fritekst.Beregningsgrunnlag' : 'VedtakForm.Fritekst';\n  return (\n    <>\n      {getAvslagArsak(vilkar, getKodeverknavn, behandlingsresultat) && (\n        <div>\n          <Label size=\"small\">{intl.formatMessage({ id: 'VedtakForm.ArsakTilAvslag' })}</Label>\n          <BodyShort size=\"small\">{getAvslagArsak(vilkar, getKodeverknavn, behandlingsresultat)}</BodyShort>\n          <VerticalSpacer sixteenPx />\n        </div>\n      )}\n      {!skalBrukeOverstyrendeFritekstBrev && (\n        <VedtakFritekstPanel\n          isReadOnly={isReadOnly}\n          språkKode={språkKode}\n          behandlingsresultat={behandlingsresultat}\n          labelTextCode={textCode}\n        />\n      )}\n    </>\n  );\n};\n\nexport default VedtakAvslagPanel;\n","import React, { FunctionComponent, MouseEvent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Label, Alert, Link, Detail } from '@navikt/ds-react';\nimport { ArrowForwardIcon } from '@navikt/aksel-icons';\nimport {\n  FlexContainer,\n  FlexRow,\n  FlexColumn,\n  EditedIcon,\n  AvsnittSkiller,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\n\nimport { TextAreaField } from '@navikt/ft-form-hooks';\nimport { hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\nimport { getLanguageFromSprakkode } from '@navikt/ft-utils';\n\nimport styles from './manueltVedtaksbrevPanel.module.css';\n\nconst maxLength200 = maxLength(200);\nconst maxLength5000 = maxLength(5000);\nconst minLength3 = minLength(3);\n\ninterface OwnProps {\n  forhåndsvisOverstyrtBrev: (e: MouseEvent) => void;\n  isReadOnly: boolean;\n  språkKode: string;\n  skalViseLink: boolean;\n}\n\nconst ManueltVedtaksbrevPanel: FunctionComponent<OwnProps> = ({\n  forhåndsvisOverstyrtBrev,\n  isReadOnly,\n  språkKode,\n  skalViseLink,\n}) => {\n  const intl = useIntl();\n  return (\n    <>\n      <VerticalSpacer thirtyTwoPx />\n      <AvsnittSkiller />\n      <VerticalSpacer thirtyTwoPx />\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn className={styles.space}>\n            <Label size=\"small\" className={styles.avsnittOverskrift}>\n              <FormattedMessage id=\"FritekstBrevPanel.ManueltVedtaksbrev\" />\n            </Label>\n          </FlexColumn>\n          <FlexColumn className={styles.space}>\n            <Detail>{getLanguageFromSprakkode(språkKode)}</Detail>\n          </FlexColumn>\n          <FlexColumn>\n            {!isReadOnly && skalViseLink && (\n              <Link href=\"#\" onClick={forhåndsvisOverstyrtBrev}>\n                <span>\n                  <FormattedMessage id=\"FritekstBrevPanel.ForhandsvisManueltVedtaksbrev\" />\n                </span>\n                <ArrowForwardIcon className={styles.pil} />\n              </Link>\n            )}\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <hr className={styles.line} />\n      <VerticalSpacer twentyPx />\n      {!isReadOnly && (\n        <Alert variant=\"info\" size=\"small\">\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakFellesPanel.Forklaring\" />\n          </Label>\n        </Alert>\n      )}\n      <VerticalSpacer sixteenPx />\n      <TextAreaField\n        name=\"overskrift\"\n        label={intl.formatMessage({ id: 'VedtakForm.Overskrift' })}\n        validate={[required, minLength3, maxLength200, hasValidText]}\n        maxLength={200}\n        readOnly={isReadOnly}\n        className={styles.smallTextArea}\n      />\n      <VerticalSpacer thirtyTwoPx />\n      <TextAreaField\n        name=\"brødtekst\"\n        label={intl.formatMessage({ id: 'VedtakForm.Innhold' })}\n        validate={[required, minLength3, maxLength5000, hasValidText]}\n        maxLength={5000}\n        readOnly={isReadOnly}\n        // Må erstatte bindestrek kopiert inn fra Word med vanlig bindestrek\n        parse={value => value.toString().replaceAll('‑', '-').replaceAll('\\t', ' ')}\n      />\n      {isReadOnly && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                <EditedIcon />\n              </FlexColumn>\n              <FlexColumn>\n                <BodyShort size=\"small\">\n                  <FormattedMessage id=\"FritekstBrevPanel.Endret\" />\n                </BodyShort>\n              </FlexColumn>\n            </FlexRow>\n          </FlexContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default ManueltVedtaksbrevPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { Alert, BodyShort } from '@navikt/ds-react';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt } from '@navikt/fp-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nconst findHelpTexts = (intl: IntlShape, aksjonspunkter: Aksjonspunkt[]): string[] => {\n  const helpTexts = [];\n  if (aksjonspunkter && aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.VURDERE_ANNEN_YTELSE)) {\n    helpTexts.push(intl.formatMessage({ id: 'VedtakForm.VurderAnnenYtelse' }));\n  }\n  if (aksjonspunkter && aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.VURDERE_DOKUMENT)) {\n    helpTexts.push(intl.formatMessage({ id: 'VedtakForm.VurderDokument' }));\n  }\n  if (\n    aksjonspunkter &&\n    aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.KONTROLLER_REVURDERINGSBEHANDLING_VARSEL_VED_UGUNST)\n  ) {\n    helpTexts.push(intl.formatMessage({ id: 'VedtakForm.KontrollerRevurderingsbehandling' }));\n  }\n\n  return helpTexts;\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n}\n\nconst VedtakHelpTextPanel: FunctionComponent<OwnProps> = ({ isReadOnly, aksjonspunkter }) => {\n  const intl = useIntl();\n  const helpTexts = findHelpTexts(intl, aksjonspunkter);\n  if (!isReadOnly && helpTexts.length > 0) {\n    return (\n      <>\n        <VerticalSpacer sixteenPx />\n        <Alert variant=\"info\" size=\"small\">\n          <BodyShort size=\"small\">\n            <FormattedMessage id=\"VedtakHelpTextPanel.Vurder\" />\n          </BodyShort>\n          <ul>\n            {helpTexts.map(text => (\n              <li key={text}>\n                <BodyShort size=\"small\">{text}</BodyShort>\n              </li>\n            ))}\n          </ul>\n        </Alert>\n      </>\n    );\n  }\n  return null;\n};\n\nexport default VedtakHelpTextPanel;\n","import React, { FunctionComponent, useMemo, useState, useCallback, ReactNode, MouseEvent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, Button, Link, BodyShort, Heading } from '@navikt/ds-react';\nimport { ArrowForwardIcon, CheckmarkCircleFillIcon, PencilIcon, XMarkOctagonFillIcon } from '@navikt/aksel-icons';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer, OkAvbrytModal } from '@navikt/ft-ui-komponenter';\n\nimport {\n  avslagsarsakCodes,\n  behandlingStatus as behandlingStatusCode,\n  konsekvensForYtelsen,\n  isAvslag,\n  isInnvilget,\n  isOpphor,\n  AksjonspunktCode,\n} from '@navikt/fp-kodeverk';\nimport { AsyncPollingStatus } from '@navikt/fp-rest-api';\nimport { Behandling, Aksjonspunkt, Behandlingsresultat } from '@navikt/fp-types';\n\nimport { useFormContext } from 'react-hook-form';\n\nimport ManueltVedtaksbrevPanel from './ManueltVedtaksbrevPanel';\nimport VedtakHelpTextPanel from './VedtakHelpTextPanel';\n\nimport styles from './vedtakFellesPanel.module.css';\n\nexport const finnTekstkodeFraBehandlingstatus = (behandlingStatus: string): string =>\n  behandlingStatus === behandlingStatusCode.AVSLUTTET || behandlingStatus === behandlingStatusCode.IVERKSETTER_VEDTAK\n    ? 'VedtakForm.vedtak'\n    : 'VedtakForm.ForslagTilVedtak';\n\nconst kanSendesTilGodkjenning = (behandlingStatusKode: string): boolean =>\n  behandlingStatusKode === behandlingStatusCode.BEHANDLING_UTREDES;\n\nconst finnKnappetekstkode = (aksjonspunkter: Aksjonspunkt[], skalBrukeManueltBrev: boolean): string =>\n  (aksjonspunkter && aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.FORESLA_VEDTAK)) ||\n  skalBrukeManueltBrev\n    ? 'VedtakForm.TilGodkjenning'\n    : 'VedtakForm.FattVedtak';\n\nconst finnSkalViseLink = (behandlingsresultat: Behandlingsresultat): boolean =>\n  behandlingsresultat.avslagsarsak\n    ? behandlingsresultat.avslagsarsak !== avslagsarsakCodes.INGEN_BEREGNINGSREGLER\n    : true;\n\nconst harIkkeKonsekvenserForYtelsen = (\n  konsekvenserForYtelsenKoder: string[],\n  behandlingResultat?: Behandling['behandlingsresultat'],\n): boolean => {\n  if (!behandlingResultat) {\n    return true;\n  }\n  const { konsekvenserForYtelsen } = behandlingResultat;\n  if (!Array.isArray(konsekvenserForYtelsen) || konsekvenserForYtelsen.length !== 1) {\n    return true;\n  }\n  return !konsekvenserForYtelsenKoder.some(kode => kode === konsekvenserForYtelsen[0]);\n};\n\ninterface OwnProps {\n  behandling: Behandling;\n  readOnly: boolean;\n  erBehandlingEtterKlage: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n  renderPanel: (\n    skalBrukeManueltBrev: boolean,\n    erInnvilget: boolean,\n    erAvslatt: boolean,\n    erOpphor?: boolean,\n  ) => ReactNode;\n  previewAutomatiskBrev: (e: MouseEvent) => void;\n  previewOverstyrtBrev: (e: MouseEvent) => void;\n  tilbakekrevingtekst?: string;\n  vedtakstatusTekst?: string;\n}\n\nconst VedtakFellesPanel: FunctionComponent<OwnProps> = ({\n  behandling,\n  aksjonspunkter,\n  readOnly,\n  renderPanel,\n  previewAutomatiskBrev,\n  previewOverstyrtBrev,\n  tilbakekrevingtekst,\n  erBehandlingEtterKlage,\n  vedtakstatusTekst,\n}) => {\n  const intl = useIntl();\n\n  const {\n    setValue,\n    formState: { isSubmitting },\n  } = useFormContext();\n\n  const { behandlingsresultat, behandlingPaaVent, sprakkode, status, behandlingHenlagt, uuid, taskStatus } = behandling;\n\n  if (!behandlingsresultat) {\n    throw new Error(`behandlingsresultat finnes ikke på behandling ${uuid}`);\n  }\n\n  const [skalBrukeManueltBrev, toggleSkalBrukeManueltBrev] = useState(\n    !!behandlingsresultat.vedtaksbrev && behandlingsresultat.vedtaksbrev === 'FRITEKST',\n  );\n  const [skalViseModal, toggleVisModal] = useState(false);\n  const onToggleOverstyring = useCallback((e: React.MouseEvent) => {\n    toggleSkalBrukeManueltBrev(true);\n    e.preventDefault();\n  }, []);\n  const avsluttRedigering = useCallback(() => {\n    toggleSkalBrukeManueltBrev(false);\n    toggleVisModal(false);\n    setValue('overskrift', undefined);\n    setValue('brødtekst', undefined);\n  }, []);\n\n  const erInnvilget = isInnvilget(behandlingsresultat.type);\n  const erAvslatt = isAvslag(behandlingsresultat.type);\n  const erOpphor = isOpphor(behandlingsresultat.type);\n\n  const skalViseLink = finnSkalViseLink(behandlingsresultat);\n  const kanBehandles =\n    !behandlingHenlagt &&\n    taskStatus?.status !== AsyncPollingStatus.HALTED &&\n    taskStatus?.status !== AsyncPollingStatus.DELAYED;\n\n  const harIkkeKonsekvensForYtelse = useMemo(\n    () =>\n      harIkkeKonsekvenserForYtelsen(\n        [konsekvensForYtelsen.ENDRING_I_FORDELING_AV_YTELSEN, konsekvensForYtelsen.INGEN_ENDRING],\n        behandlingsresultat,\n      ),\n    [behandlingsresultat],\n  );\n\n  return (\n    <>\n      <OkAvbrytModal\n        text={intl.formatMessage({ id: 'VedtakFellesPanel.Forkast' })}\n        okButtonText={intl.formatMessage({ id: 'VedtakFellesPanel.Ok' })}\n        showModal={skalViseModal}\n        cancel={() => toggleVisModal(false)}\n        submit={avsluttRedigering}\n      />\n      <FlexContainer>\n        <FlexRow>\n          {status === behandlingStatusCode.AVSLUTTET && (\n            <FlexColumn>\n              {erInnvilget && <CheckmarkCircleFillIcon className={styles.innvilgetImage} />}\n              {!erInnvilget && <XMarkOctagonFillIcon className={styles.avslattImage} />}\n            </FlexColumn>\n          )}\n          <FlexColumn>\n            <Heading size=\"small\">\n              <FormattedMessage id={finnTekstkodeFraBehandlingstatus(status)} />\n            </Heading>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer eightPx />\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn className={styles.space}>\n            <Label size=\"small\">\n              {vedtakstatusTekst}\n              {tilbakekrevingtekst && `. ${intl.formatMessage({ id: tilbakekrevingtekst })}`}\n            </Label>\n          </FlexColumn>\n          <FlexColumn className={styles.space}>\n            {skalViseLink && harIkkeKonsekvensForYtelse && kanBehandles && (\n              <Link href=\"#\" onClick={previewAutomatiskBrev}>\n                <span>\n                  <FormattedMessage\n                    id={\n                      erBehandlingEtterKlage\n                        ? 'VedtakFellesPanel.UtkastVedtaksbrev'\n                        : 'VedtakFellesPanel.AutomatiskVedtaksbrev'\n                    }\n                  />\n                </span>\n                <ArrowForwardIcon className={styles.pil} />\n              </Link>\n            )}\n            {skalViseLink && harIkkeKonsekvensForYtelse && !kanBehandles && (\n              <BodyShort size=\"small\" className={styles.disabletLink}>\n                <FormattedMessage\n                  id={\n                    erBehandlingEtterKlage\n                      ? 'VedtakFellesPanel.UtkastVedtaksbrev'\n                      : 'VedtakFellesPanel.AutomatiskVedtaksbrev'\n                  }\n                />\n              </BodyShort>\n            )}\n          </FlexColumn>\n          <FlexColumn>\n            {!readOnly && !skalBrukeManueltBrev && (\n              <Link href=\"#\" onClick={onToggleOverstyring}>\n                <PencilIcon className={styles.blyant} />\n                <span>\n                  <FormattedMessage id=\"VedtakFellesPanel.RedigerVedtaksbrev\" />\n                </span>\n              </Link>\n            )}\n            {(readOnly || skalBrukeManueltBrev) && (\n              <>\n                <PencilIcon className={styles.blyantDisablet} />\n                <BodyShort size=\"small\" className={styles.disabletLink}>\n                  <FormattedMessage id=\"VedtakFellesPanel.RedigerVedtaksbrev\" />\n                </BodyShort>\n              </>\n            )}\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <VedtakHelpTextPanel aksjonspunkter={aksjonspunkter} isReadOnly={readOnly} />\n      <VerticalSpacer twentyPx />\n      {renderPanel(skalBrukeManueltBrev, erInnvilget, erAvslatt, erOpphor)}\n      {skalBrukeManueltBrev && (\n        <ManueltVedtaksbrevPanel\n          isReadOnly={readOnly}\n          språkKode={sprakkode}\n          forhåndsvisOverstyrtBrev={previewOverstyrtBrev}\n          skalViseLink={skalViseLink}\n        />\n      )}\n      {kanSendesTilGodkjenning(status) && (\n        <>\n          <VerticalSpacer twentyPx />\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                {!readOnly && (\n                  <Button\n                    variant=\"primary\"\n                    size=\"small\"\n                    disabled={behandlingPaaVent || isSubmitting}\n                    loading={isSubmitting}\n                  >\n                    <FormattedMessage id={finnKnappetekstkode(aksjonspunkter, skalBrukeManueltBrev)} />\n                  </Button>\n                )}\n              </FlexColumn>\n              {skalBrukeManueltBrev && (\n                <FlexColumn>\n                  <Button size=\"small\" variant=\"secondary\" onClick={() => toggleVisModal(true)} type=\"button\">\n                    <FormattedMessage id=\"VedtakFellesPanel.ForkastManueltBrev\" />\n                  </Button>\n                </FlexColumn>\n              )}\n            </FlexRow>\n          </FlexContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default VedtakFellesPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { IntlShape, useIntl } from 'react-intl';\n\nimport {\n  AlleKodeverk,\n  Behandling,\n  BeregningsresultatDagytelse,\n  BeregningsresultatEs,\n  Vilkar,\n  Aksjonspunkt,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  Behandlingsresultat,\n} from '@navikt/fp-types';\nimport {\n  isAvslag,\n  isInnvilget,\n  isKlageOmgjort,\n  behandlingResultatType,\n  behandlingArsakType as klageBehandlingArsakType,\n  fagsakYtelseType,\n  AksjonspunktCode,\n  dokumentMalType,\n} from '@navikt/fp-kodeverk';\nimport { decodeHtmlEntity } from '@navikt/ft-utils';\nimport { validerApKodeOgHentApEnum } from '@navikt/fp-prosess-felles';\nimport { Form } from '@navikt/ft-form-hooks';\nimport {\n  BekreftVedtakUtenTotrinnskontrollAp,\n  ForeslaVedtakAp,\n  ForeslaVedtakManueltAp,\n  VurdereAnnenYtelseForVedtakAp,\n  VurdereDokumentForVedtakAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { getTilbakekrevingText } from '../felles/VedtakHelper';\nimport VedtakInnvilgetPanel from './VedtakInnvilgetPanel';\nimport VedtakAvslagPanel from './VedtakAvslagPanel';\nimport VedtakFellesPanel from '../felles/VedtakFellesPanel';\n\nexport const finnAvslagResultatText = (behandlingResultatTypeKode: string, ytelseType: string): string => {\n  if (behandlingResultatTypeKode === behandlingResultatType.KLAGE_YTELSESVEDTAK_OPPHEVET) {\n    return 'VedtakForm.ResultatKlageYtelsesvedtakOpphevet';\n  }\n  if (behandlingResultatTypeKode === behandlingResultatType.KLAGE_AVVIST) {\n    return 'VedtakForm.ResultatKlageAvvist';\n  }\n\n  if (ytelseType === fagsakYtelseType.ENGANGSSTONAD) {\n    return 'VedtakForm.EngangsstonadIkkeInnvilget';\n  }\n\n  if (ytelseType === fagsakYtelseType.SVANGERSKAPSPENGER) {\n    return 'VedtakForm.SvangerskapspengerIkkeInnvilget';\n  }\n\n  return 'VedtakForm.ForeldrepengerIkkeInnvilget';\n};\n\nexport const finnInnvilgetResultatText = (behandlingResultatTypeKode: string, ytelseType: string): string => {\n  if (behandlingResultatTypeKode === behandlingResultatType.KLAGE_YTELSESVEDTAK_STADFESTET) {\n    return 'VedtakForm.ResultatOpprettholdVedtak';\n  }\n  if (isKlageOmgjort(behandlingResultatTypeKode)) {\n    return 'VedtakForm.ResultatKlageMedhold';\n  }\n\n  if (ytelseType === fagsakYtelseType.ENGANGSSTONAD) {\n    return 'VedtakForm.VilkarStatusInnvilgetEngangsstonad';\n  }\n\n  if (ytelseType === fagsakYtelseType.SVANGERSKAPSPENGER) {\n    return 'VedtakForm.SvangerskapspengerInnvilget';\n  }\n\n  return 'VedtakForm.VilkarStatusInnvilgetForeldrepenger';\n};\n\nexport type ForhandsvisData = {\n  fritekst?: string;\n  dokumentMal?: string;\n  tittel?: string;\n  gjelderVedtak: boolean;\n  automatiskVedtaksbrev?: boolean;\n};\n\nconst hentForhåndsvisManueltBrevCallback =\n  (\n    skalOverstyre: boolean,\n    forhåndsvisCallback: (data: ForhandsvisData) => Promise<any>,\n    trigger: () => void,\n    begrunnelse?: string,\n    brodtekst?: string,\n    overskrift?: string,\n  ) =>\n  (e: React.MouseEvent): void => {\n    e.preventDefault();\n\n    const erFeltUtfylt = skalOverstyre ? !!brodtekst && !!overskrift : !!begrunnelse;\n    trigger();\n\n    if (!skalOverstyre || erFeltUtfylt) {\n      const data = {\n        fritekst: skalOverstyre ? brodtekst : begrunnelse,\n        dokumentMal: skalOverstyre ? dokumentMalType.FRITEKST : undefined,\n        tittel: skalOverstyre ? overskrift : undefined,\n        gjelderVedtak: true,\n        automatiskVedtaksbrev: !skalOverstyre ? true : undefined,\n      };\n      forhåndsvisCallback(data);\n    }\n  };\n\nconst erÅrsakTypeBehandlingEtterKlage = (behandlingArsakTyper: Behandling['behandlingÅrsaker'] = []): boolean =>\n  behandlingArsakTyper\n    .map(({ behandlingArsakType }) => behandlingArsakType)\n    .some(\n      bt =>\n        bt === klageBehandlingArsakType.ETTER_KLAGE ||\n        bt === klageBehandlingArsakType.KLAGE_U_INNTK ||\n        bt === klageBehandlingArsakType.KLAGE_M_INNTK,\n    );\n\nconst finnVedtakstatusTekst = (\n  intl: IntlShape,\n  ytelseTypeKode: string,\n  behandlingsresultat?: Behandlingsresultat,\n): string => {\n  if (behandlingsresultat && isInnvilget(behandlingsresultat.type)) {\n    return intl.formatMessage({ id: finnInnvilgetResultatText(behandlingsresultat.type, ytelseTypeKode) });\n  }\n  if (behandlingsresultat && isAvslag(behandlingsresultat.type)) {\n    return intl.formatMessage({ id: finnAvslagResultatText(behandlingsresultat.type, ytelseTypeKode) });\n  }\n  return '';\n};\n\nconst transformValues = (values: FormValues): VedtakAksjonspunkter[] =>\n  values.aksjonspunktKoder.map(apCode => ({\n    kode: validerApKodeOgHentApEnum(\n      apCode,\n      AksjonspunktCode.FORESLA_VEDTAK,\n      AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n      AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n      AksjonspunktCode.VURDERE_ANNEN_YTELSE,\n      AksjonspunktCode.VURDERE_DOKUMENT,\n    ),\n    begrunnelse: values.begrunnelse,\n    fritekstBrev: values.brødtekst,\n    skalBrukeOverstyrendeFritekstBrev: !!values.brødtekst,\n    overskrift: values.overskrift,\n  }));\n\nconst finnBegrunnelse = (behandling: Behandling, beregningErManueltFastsatt: boolean): string | undefined => {\n  if (!beregningErManueltFastsatt) {\n    return undefined;\n  }\n  return behandling.behandlingsresultat?.avslagsarsakFritekst\n    ? decodeHtmlEntity(behandling.behandlingsresultat.avslagsarsakFritekst)\n    : undefined;\n};\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  behandling: Behandling,\n  beregningErManueltFastsatt: boolean,\n): FormValues => ({\n  beregningErManueltFastsatt,\n  aksjonspunktKoder: aksjonspunkter.filter(ap => ap.kanLoses).map(ap => ap.definisjon),\n  overskrift: decodeHtmlEntity(behandling.behandlingsresultat?.overskrift),\n  brødtekst: decodeHtmlEntity(behandling.behandlingsresultat?.fritekstbrev),\n  begrunnelse: finnBegrunnelse(behandling, beregningErManueltFastsatt),\n});\n\ntype VedtakAksjonspunkter =\n  | ForeslaVedtakAp\n  | ForeslaVedtakManueltAp\n  | BekreftVedtakUtenTotrinnskontrollAp\n  | VurdereAnnenYtelseForVedtakAp\n  | VurdereDokumentForVedtakAp;\n\ntype FormValues = {\n  beregningErManueltFastsatt?: boolean;\n  aksjonspunktKoder: string[];\n  overskrift?: string;\n  brødtekst?: string;\n  begrunnelse?: string;\n};\n\ninterface OwnProps {\n  behandling: Behandling;\n  readOnly: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n  ytelseTypeKode: string;\n  resultatstruktur?: BeregningsresultatDagytelse | BeregningsresultatEs;\n  alleKodeverk: AlleKodeverk;\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  simuleringResultat?: SimuleringResultat;\n  vilkar?: Vilkar[];\n  beregningErManueltFastsatt: boolean;\n  submitCallback: (data: VedtakAksjonspunkter[]) => Promise<void>;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst VedtakForm: FunctionComponent<OwnProps> = ({\n  behandling,\n  readOnly,\n  aksjonspunkter,\n  previewCallback,\n  ytelseTypeKode,\n  resultatstruktur,\n  alleKodeverk,\n  tilbakekrevingvalg,\n  simuleringResultat,\n  vilkar,\n  beregningErManueltFastsatt,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(aksjonspunkter, behandling, beregningErManueltFastsatt),\n  });\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n  const overskrift = formMethods.watch('overskrift');\n  const brødtekst = formMethods.watch('brødtekst');\n\n  const { trigger } = formMethods;\n\n  const { behandlingsresultat, sprakkode } = behandling;\n\n  const erBehandlingEtterKlage = useMemo(\n    () => erÅrsakTypeBehandlingEtterKlage(behandling.behandlingÅrsaker),\n    [behandling.behandlingÅrsaker],\n  );\n  const tilbakekrevingtekst = useMemo(\n    () => getTilbakekrevingText(alleKodeverk, simuleringResultat, tilbakekrevingvalg),\n    [simuleringResultat, tilbakekrevingvalg],\n  );\n  const vedtakstatusTekst = useMemo(\n    () => finnVedtakstatusTekst(intl, ytelseTypeKode, behandlingsresultat),\n    [behandlingsresultat],\n  );\n\n  const forhåndsvisOverstyrtBrev = hentForhåndsvisManueltBrevCallback(\n    true,\n    previewCallback,\n    trigger,\n    begrunnelse,\n    brødtekst,\n    overskrift,\n  );\n  const forhåndsvisDefaultBrev = hentForhåndsvisManueltBrevCallback(\n    false,\n    previewCallback,\n    trigger,\n    begrunnelse,\n    brødtekst,\n    overskrift,\n  );\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <VedtakFellesPanel\n        behandling={behandling}\n        vedtakstatusTekst={vedtakstatusTekst}\n        aksjonspunkter={aksjonspunkter}\n        readOnly={readOnly}\n        previewAutomatiskBrev={forhåndsvisDefaultBrev}\n        previewOverstyrtBrev={forhåndsvisOverstyrtBrev}\n        tilbakekrevingtekst={tilbakekrevingtekst}\n        erBehandlingEtterKlage={erBehandlingEtterKlage}\n        renderPanel={(skalBrukeOverstyrendeFritekstBrev, erInnvilget, erAvslatt) => {\n          if (erInnvilget) {\n            return (\n              <VedtakInnvilgetPanel\n                behandlingsresultat={behandlingsresultat}\n                isReadOnly={readOnly}\n                skalBrukeOverstyrendeFritekstBrev={skalBrukeOverstyrendeFritekstBrev}\n                ytelseTypeKode={ytelseTypeKode}\n                språkKode={sprakkode}\n                resultatstruktur={resultatstruktur}\n                beregningErManueltFastsatt={beregningErManueltFastsatt}\n              />\n            );\n          }\n\n          return erAvslatt ? (\n            <VedtakAvslagPanel\n              behandlingsresultat={behandlingsresultat}\n              isReadOnly={readOnly}\n              språkKode={sprakkode}\n              alleKodeverk={alleKodeverk}\n              vilkar={vilkar}\n              beregningErManueltFastsatt={beregningErManueltFastsatt}\n              skalBrukeOverstyrendeFritekstBrev={skalBrukeOverstyrendeFritekstBrev}\n            />\n          ) : null;\n        }}\n      />\n    </Form>\n  );\n};\n\nexport default VedtakForm;\n","enum VedtakResultType {\n  INNVILGET = 'INNVILGET',\n  AVSLAG = 'AVSLAG',\n}\n\nexport default VedtakResultType;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort, Detail } from '@navikt/ds-react';\n\nimport { formatCurrencyWithKr } from '@navikt/ft-utils';\nimport { fagsakYtelseType } from '@navikt/fp-kodeverk';\nimport { Behandlingsresultat, BeregningsresultatDagytelse, BeregningsresultatEs } from '@navikt/fp-types';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport VedtakFritekstPanel from '../felles/VedtakFritekstPanel';\n\ninterface OwnProps {\n  ytelseTypeKode: string;\n  revurderingsÅrsakString?: string;\n  isReadOnly: boolean;\n  resultatstruktur?: BeregningsresultatDagytelse | BeregningsresultatEs;\n  språkKode: string;\n  behandlingsresultat?: Behandlingsresultat;\n  beregningErManueltFastsatt: boolean;\n  skalBrukeOverstyrendeFritekstBrev: boolean;\n}\n\nconst VedtakInnvilgetRevurderingPanel: FunctionComponent<OwnProps> = ({\n  ytelseTypeKode,\n  revurderingsÅrsakString,\n  isReadOnly,\n  resultatstruktur,\n  språkKode,\n  behandlingsresultat,\n  beregningErManueltFastsatt,\n  skalBrukeOverstyrendeFritekstBrev,\n}) => (\n  <>\n    {ytelseTypeKode === fagsakYtelseType.ENGANGSSTONAD && resultatstruktur && 'antallBarn' in resultatstruktur && (\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn>\n            <Detail>\n              <FormattedMessage id=\"VedtakForm.beregnetTilkjentYtelse\" />\n            </Detail>\n            <Label size=\"small\">\n              {formatCurrencyWithKr((resultatstruktur as BeregningsresultatEs).beregnetTilkjentYtelse)}\n            </Label>\n          </FlexColumn>\n          <FlexColumn>\n            <Detail>\n              <FormattedMessage id=\"VedtakForm.AntallBarn\" />\n            </Detail>\n            <Label size=\"small\">{resultatstruktur.antallBarn}</Label>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n    )}\n    {(ytelseTypeKode === fagsakYtelseType.FORELDREPENGER || ytelseTypeKode === fagsakYtelseType.SVANGERSKAPSPENGER) && (\n      <>\n        {revurderingsÅrsakString && (\n          <>\n            <Label size=\"small\">\n              <FormattedMessage id=\"VedtakForm.RevurderingFP.Aarsak\" />\n            </Label>\n            <BodyShort size=\"small\">{revurderingsÅrsakString}</BodyShort>\n            <VerticalSpacer eightPx />\n          </>\n        )}\n        {!skalBrukeOverstyrendeFritekstBrev && beregningErManueltFastsatt && (\n          <VedtakFritekstPanel\n            isReadOnly={isReadOnly}\n            språkKode={språkKode}\n            behandlingsresultat={behandlingsresultat}\n            labelTextCode=\"VedtakForm.Fritekst.Beregningsgrunnlag\"\n          />\n        )}\n      </>\n    )}\n  </>\n);\n\nexport default VedtakInnvilgetRevurderingPanel;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort, Detail } from '@navikt/ds-react';\n\nimport { AlleKodeverk, Vilkar, Behandlingsresultat } from '@navikt/fp-types';\nimport { vilkarUtfallType, getKodeverknavnFn, KodeverkType } from '@navikt/fp-kodeverk';\nimport { TextAreaField } from '@navikt/ft-form-hooks';\nimport { hasValidText, maxLength, minLength, requiredIfCustomFunctionIsTrueNew } from '@navikt/ft-form-validators';\nimport { decodeHtmlEntity, getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { useFormContext } from 'react-hook-form';\n\nimport styles from './vedtakAvslagArsakOgBegrunnelsePanel.module.css';\n\nconst maxLength1500 = maxLength(1500);\nconst minLength3 = minLength(3);\n\nconst getAvslagArsak = (\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType, undertype?: string) => string,\n  vilkar: Vilkar[],\n  behandlingsresultat?: Behandlingsresultat,\n): string | ReactElement => {\n  const avslatteVilkar = vilkar.filter(v => v.vilkarStatus === vilkarUtfallType.IKKE_OPPFYLT);\n  if (avslatteVilkar.length === 0) {\n    return <FormattedMessage id=\"VedtakForm.UttaksperioderIkkeGyldig\" />;\n  }\n\n  if (!behandlingsresultat?.avslagsarsak) {\n    throw new Error('Ingen behandlingsresultat eller avslagsårsak finnes');\n  }\n\n  const vilkarType = getKodeverkNavn(avslatteVilkar[0].vilkarType, KodeverkType.VILKAR_TYPE);\n  return `${vilkarType}: ${getKodeverkNavn(\n    behandlingsresultat.avslagsarsak,\n    KodeverkType.AVSLAGSARSAK,\n    avslatteVilkar[0].vilkarType,\n  )}`;\n};\n\ninterface OwnProps {\n  vilkar: Vilkar[];\n  behandlingsresultat?: Behandlingsresultat;\n  språkKode: string;\n  erReadOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  skalBrukeOverstyrendeFritekstBrev: boolean;\n}\n\nconst VedtakAvslagArsakOgBegrunnelsePanel: FunctionComponent<OwnProps> = ({\n  vilkar,\n  behandlingsresultat,\n  språkKode,\n  erReadOnly,\n  alleKodeverk,\n  skalBrukeOverstyrendeFritekstBrev,\n}) => {\n  const {\n    formState: { isDirty },\n  } = useFormContext();\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n\n  const isRequiredFn = (value?: string | number | boolean) => value !== undefined || isDirty;\n  const avslagsårsak = getAvslagArsak(getKodeverknavn, vilkar, behandlingsresultat);\n\n  return (\n    <>\n      {avslagsårsak && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakForm.ArsakTilAvslag\" />\n          </Label>\n          <BodyShort size=\"small\">{avslagsårsak}</BodyShort>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {!skalBrukeOverstyrendeFritekstBrev && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <TextAreaField\n            name=\"begrunnelse\"\n            label={<FormattedMessage id=\"VedtakForm.Fritekst\" />}\n            validate={[requiredIfCustomFunctionIsTrueNew(isRequiredFn), minLength3, maxLength1500, hasValidText]}\n            maxLength={1500}\n            readOnly={erReadOnly}\n            badges={[\n              {\n                type: 'info',\n                titleText: getLanguageFromSprakkode(språkKode),\n              },\n            ]}\n          />\n        </>\n      )}\n      {erReadOnly && behandlingsresultat?.avslagsarsakFritekst && (\n        <span>\n          <VerticalSpacer twentyPx />\n          <Detail>\n            <FormattedMessage id=\"VedtakForm.Fritekst\" />\n          </Detail>\n          <VerticalSpacer eightPx />\n          <div className={styles.fritekstItem}>{decodeHtmlEntity(behandlingsresultat.avslagsarsakFritekst)}</div>\n        </span>\n      )}\n    </>\n  );\n};\n\nexport default VedtakAvslagArsakOgBegrunnelsePanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\n\nimport { Behandlingsresultat } from '@navikt/fp-types';\n\nimport VedtakFritekstPanel from '../felles/VedtakFritekstPanel';\n\ninterface OwnProps {\n  revurderingsÅrsakString?: string;\n  språkKode: string;\n  isReadOnly: boolean;\n  behandlingsresultat?: Behandlingsresultat;\n  beregningErManueltFastsatt: boolean;\n  skalBrukeOverstyrendeFritekstBrev: boolean;\n}\n\nconst VedtakOpphorRevurderingPanel: FunctionComponent<OwnProps> = ({\n  revurderingsÅrsakString,\n  språkKode,\n  isReadOnly,\n  behandlingsresultat,\n  beregningErManueltFastsatt,\n  skalBrukeOverstyrendeFritekstBrev,\n}) => (\n  <>\n    <Label size=\"small\">\n      <FormattedMessage id=\"VedtakForm.RevurderingFP.Aarsak\" />\n    </Label>\n    {revurderingsÅrsakString && <BodyShort size=\"small\">{revurderingsÅrsakString}</BodyShort>}\n    {!skalBrukeOverstyrendeFritekstBrev && beregningErManueltFastsatt && (\n      <VedtakFritekstPanel\n        isReadOnly={isReadOnly}\n        språkKode={språkKode}\n        behandlingsresultat={behandlingsresultat}\n        labelTextCode=\"VedtakForm.Fritekst.Beregningsgrunnlag\"\n      />\n    )}\n  </>\n);\n\nexport default VedtakOpphorRevurderingPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { IntlShape, useIntl } from 'react-intl';\nimport moment from 'moment';\n\nimport { DDMMYYYY_DATE_FORMAT, decodeHtmlEntity } from '@navikt/ft-utils';\nimport {\n  KodeverkType,\n  isAvslag,\n  isInnvilget,\n  isOpphor,\n  behandlingArsakType as BehandlingArsakType,\n  getKodeverknavnFn,\n  fagsakYtelseType,\n  AksjonspunktCode,\n  dokumentMalType,\n} from '@navikt/fp-kodeverk';\nimport { Form } from '@navikt/ft-form-hooks';\nimport {\n  AlleKodeverk,\n  Behandling,\n  BeregningsresultatDagytelse,\n  BeregningsresultatEs,\n  Vilkar,\n  Aksjonspunkt,\n  SimuleringResultat,\n  TilbakekrevingValg,\n} from '@navikt/fp-types';\nimport {\n  BekreftVedtakUtenTotrinnskontrollAp,\n  ForeslaVedtakAp,\n  ForeslaVedtakManueltAp,\n  KontrollAvManueltOpprettetRevurderingsbehandlingAp,\n  KontrollerRevurderingsBehandlingAp,\n  VurdereAnnenYtelseForVedtakAp,\n  VurdereDokumentForVedtakAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { validerApKodeOgHentApEnum } from '@navikt/fp-prosess-felles';\n\nimport VedtakResultType from '../../kodeverk/vedtakResultType';\nimport VedtakInnvilgetRevurderingPanel from './VedtakInnvilgetRevurderingPanel';\nimport VedtakAvslagArsakOgBegrunnelsePanel from './VedtakAvslagArsakOgBegrunnelsePanel';\nimport VedtakOpphorRevurderingPanel from './VedtakOpphorRevurderingPanel';\nimport VedtakFellesPanel from '../felles/VedtakFellesPanel';\nimport { getTilbakekrevingText } from '../felles/VedtakHelper';\n\ntype RevurderingVedtakAksjonspunkter =\n  | ForeslaVedtakAp\n  | ForeslaVedtakManueltAp\n  | BekreftVedtakUtenTotrinnskontrollAp\n  | VurdereAnnenYtelseForVedtakAp\n  | VurdereDokumentForVedtakAp\n  | KontrollerRevurderingsBehandlingAp\n  | KontrollAvManueltOpprettetRevurderingsbehandlingAp;\n\ntype ForhandsvisData = {\n  fritekst?: string;\n  dokumentMal?: string;\n  tittel?: string;\n  gjelderVedtak: boolean;\n  automatiskVedtaksbrev?: boolean;\n};\n\nconst hentForhåndsvisManueltBrevCallback =\n  (\n    skalOverstyre: boolean,\n    forhåndsvisCallback: (data: ForhandsvisData) => void,\n    overskrift?: string,\n    brodtekst?: string,\n    begrunnelse?: string,\n  ) =>\n  (e: React.MouseEvent): void => {\n    e.preventDefault();\n\n    const erFeltUtfylt = skalOverstyre ? !!brodtekst && !!overskrift : !!begrunnelse;\n\n    if (!skalOverstyre || erFeltUtfylt) {\n      const data = {\n        fritekst: skalOverstyre ? brodtekst : begrunnelse,\n        dokumentMal: skalOverstyre ? dokumentMalType.FRITEKST : undefined,\n        tittel: skalOverstyre ? overskrift : undefined,\n        gjelderVedtak: true,\n        automatiskVedtaksbrev: !skalOverstyre ? true : undefined,\n      };\n\n      forhåndsvisCallback(data);\n    }\n  };\n\nconst erÅrsakTypeBehandlingEtterKlage = (behandlingArsakTyper: Behandling['behandlingÅrsaker'] = []): boolean =>\n  behandlingArsakTyper\n    .map(({ behandlingArsakType }) => behandlingArsakType)\n    .some(\n      bt =>\n        bt === BehandlingArsakType.ETTER_KLAGE ||\n        bt === BehandlingArsakType.KLAGE_U_INNTK ||\n        bt === BehandlingArsakType.KLAGE_M_INNTK,\n    );\n\nconst lagÅrsakString = (\n  revurderingAarsaker: string[],\n  getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n): string | undefined => {\n  if (revurderingAarsaker === undefined || revurderingAarsaker.length < 1) {\n    return undefined;\n  }\n  const aarsakTekstList = [];\n  const endringFraBrukerAarsak = revurderingAarsaker.find(\n    aarsak => aarsak === BehandlingArsakType.RE_ENDRING_FRA_BRUKER,\n  );\n  const alleAndreAarsakerNavn = revurderingAarsaker\n    .filter(aarsak => aarsak !== BehandlingArsakType.RE_ENDRING_FRA_BRUKER)\n    .map(aarsak => getKodeverknavn(aarsak, KodeverkType.BEHANDLING_AARSAK));\n  // Dersom en av årsakene er \"RE_ENDRING_FRA_BRUKER\" skal alltid denne vises først\n  if (endringFraBrukerAarsak !== undefined) {\n    aarsakTekstList.push(getKodeverknavn(endringFraBrukerAarsak, KodeverkType.BEHANDLING_AARSAK));\n  }\n  aarsakTekstList.push(...alleAndreAarsakerNavn);\n  return aarsakTekstList.join(', ');\n};\n\nconst erNyttBehandlingResult = (\n  beregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n  originaltBeregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n): boolean => {\n  const vedtakResult = beregningResultat ? VedtakResultType.INNVILGET : VedtakResultType.AVSLAG;\n  const vedtakResultOriginal = originaltBeregningResultat ? VedtakResultType.INNVILGET : VedtakResultType.AVSLAG;\n  return vedtakResultOriginal !== vedtakResult;\n};\n\nexport const lagKonsekvensForYtelsenTekst = (\n  getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n  konsekvenser?: string[],\n): string => {\n  if (!konsekvenser || konsekvenser.length < 1) {\n    return '';\n  }\n  return konsekvenser.map(k => getKodeverknavn(k, KodeverkType.KONSEKVENS_FOR_YTELSEN)).join(' og ');\n};\n\nconst erTilkjentYtelseEllerAntallBarnEndret = (\n  erInnvilget: boolean,\n  beregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n  originaltBeregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n): boolean => {\n  if (!beregningResultat) {\n    return false;\n  }\n\n  if (!originaltBeregningResultat) {\n    return true;\n  }\n\n  if (\n    erInnvilget &&\n    'beregnetTilkjentYtelse' in beregningResultat &&\n    'beregnetTilkjentYtelse' in originaltBeregningResultat\n  ) {\n    return beregningResultat.beregnetTilkjentYtelse !== originaltBeregningResultat.beregnetTilkjentYtelse;\n  }\n\n  if ('antallBarn' in beregningResultat && 'antallBarn' in originaltBeregningResultat) {\n    return beregningResultat.antallBarn !== originaltBeregningResultat.antallBarn;\n  }\n  return false;\n};\n\nconst hentResultattekst = (\n  erInnvilget: boolean,\n  beregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n  originaltBeregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n): string => {\n  if (erNyttBehandlingResult(beregningResultat, originaltBeregningResultat)) {\n    return beregningResultat ? 'VedtakForm.Resultat.EndretTilInnvilget' : 'VedtakForm.Resultat.EndretTilAvslag';\n  }\n  if (erInnvilget) {\n    return erTilkjentYtelseEllerAntallBarnEndret(erInnvilget, beregningResultat, originaltBeregningResultat)\n      ? 'VedtakForm.Resultat.EndretTilkjentYtelse'\n      : 'VedtakForm.Resultat.IngenEndring';\n  }\n  return erTilkjentYtelseEllerAntallBarnEndret(erInnvilget, beregningResultat, originaltBeregningResultat)\n    ? 'VedtakForm.Resultat.EndretAntallBarn'\n    : 'VedtakForm.Resultat.IngenEndring';\n};\n\nconst finnInvilgetRevurderingTekst = (\n  intl: IntlShape,\n  ytelseTypeKode: string,\n  getKodeverknavn: (kode: string, kodeverkType: KodeverkType) => string,\n  tilbakekrevingText: string,\n  konsekvenserForYtelsen?: string[],\n  beregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n  originaltBeregningResultat?: BeregningsresultatDagytelse | BeregningsresultatEs,\n): string => {\n  if (ytelseTypeKode === fagsakYtelseType.ENGANGSSTONAD) {\n    return intl.formatMessage({ id: hentResultattekst(true, beregningResultat, originaltBeregningResultat) });\n  }\n  const konsekvens = lagKonsekvensForYtelsenTekst(getKodeverknavn, konsekvenserForYtelsen);\n  return `${konsekvens}${konsekvens !== '' ? tilbakekrevingText : '. '}`;\n};\n\nconst getOpphorsdato = (\n  resultatstruktur?: BeregningsresultatDagytelse | BeregningsresultatEs,\n  medlemskapFom?: string,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): string => {\n  if (resultatstruktur && 'opphoersdato' in resultatstruktur && resultatstruktur.opphoersdato) {\n    return resultatstruktur.opphoersdato;\n  }\n  if (medlemskapFom) {\n    return medlemskapFom;\n  }\n  return behandlingsresultat?.skjæringstidspunkt ? behandlingsresultat.skjæringstidspunkt.dato : '';\n};\n\nconst transformValues = (values: FormValues): RevurderingVedtakAksjonspunkter[] =>\n  values.aksjonspunktKoder.map(apCode => ({\n    kode: validerApKodeOgHentApEnum(\n      apCode,\n      AksjonspunktCode.FORESLA_VEDTAK,\n      AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n      AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n      AksjonspunktCode.VURDERE_ANNEN_YTELSE,\n      AksjonspunktCode.VURDERE_DOKUMENT,\n      AksjonspunktCode.KONTROLLER_REVURDERINGSBEHANDLING_VARSEL_VED_UGUNST,\n      AksjonspunktCode.KONTROLL_AV_MAUNELT_OPPRETTET_REVURDERINGSBEHANDLING,\n    ),\n    begrunnelse: values.begrunnelse,\n    fritekstBrev: values.brødtekst,\n    skalBrukeOverstyrendeFritekstBrev: !!values.brødtekst,\n    overskrift: values.overskrift,\n  }));\n\nconst buildInitialValues = (aksjonspunkter: Aksjonspunkt[], behandling: Behandling): FormValues => ({\n  aksjonspunktKoder: aksjonspunkter.filter(ap => ap.kanLoses).map(ap => ap.definisjon),\n  overskrift: decodeHtmlEntity(behandling.behandlingsresultat?.overskrift),\n  brødtekst: decodeHtmlEntity(behandling.behandlingsresultat?.fritekstbrev),\n});\n\ninterface FormValues {\n  aksjonspunktKoder: string[];\n  begrunnelse?: string;\n  brødtekst?: string;\n  overskrift?: string;\n}\n\ninterface OwnProps {\n  behandling: Behandling;\n  readOnly: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n  ytelseTypeKode: string;\n  resultatstruktur?: BeregningsresultatDagytelse | BeregningsresultatEs;\n  alleKodeverk: AlleKodeverk;\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  simuleringResultat?: SimuleringResultat;\n  vilkar: Vilkar[];\n  beregningErManueltFastsatt: boolean;\n  medlemskapFom?: string;\n  resultatstrukturOriginalBehandling?: BeregningsresultatDagytelse | BeregningsresultatEs;\n  submitCallback: (data: RevurderingVedtakAksjonspunkter[]) => Promise<void>;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\nconst VedtakRevurderingForm: FunctionComponent<OwnProps> = ({\n  behandling,\n  readOnly,\n  aksjonspunkter,\n  previewCallback,\n  ytelseTypeKode,\n  resultatstruktur,\n  alleKodeverk,\n  tilbakekrevingvalg,\n  simuleringResultat,\n  vilkar,\n  beregningErManueltFastsatt,\n  medlemskapFom,\n  resultatstrukturOriginalBehandling,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(aksjonspunkter, behandling),\n  });\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n  const overskrift = formMethods.watch('overskrift');\n  const brødtekst = formMethods.watch('brødtekst');\n\n  const { behandlingsresultat, sprakkode, behandlingÅrsaker } = behandling;\n\n  const erBehandlingEtterKlage = useMemo(\n    () => erÅrsakTypeBehandlingEtterKlage(behandling.behandlingÅrsaker),\n    [behandling.behandlingÅrsaker],\n  );\n  const revurderingsÅrsakString = useMemo(\n    () =>\n      lagÅrsakString(\n        behandlingÅrsaker.map(arsak => arsak.behandlingArsakType),\n        getKodeverknavnFn(alleKodeverk),\n      ),\n    [behandlingÅrsaker],\n  );\n  const tilbakekrevingtekst = useMemo(\n    () => getTilbakekrevingText(alleKodeverk, simuleringResultat, tilbakekrevingvalg),\n    [simuleringResultat, tilbakekrevingvalg],\n  );\n\n  let vedtakstatusTekst = '';\n  if (behandlingsresultat && isInnvilget(behandlingsresultat.type)) {\n    const konsekvenserForYtelsen =\n      behandlingsresultat !== undefined ? behandlingsresultat.konsekvenserForYtelsen : undefined;\n    vedtakstatusTekst = finnInvilgetRevurderingTekst(\n      intl,\n      ytelseTypeKode,\n      getKodeverknavnFn(alleKodeverk),\n      tilbakekrevingtekst,\n      konsekvenserForYtelsen,\n      resultatstruktur,\n      resultatstrukturOriginalBehandling,\n    );\n  }\n  if (behandlingsresultat && isAvslag(behandlingsresultat.type)) {\n    vedtakstatusTekst = intl.formatMessage({\n      id: hentResultattekst(false, resultatstruktur, resultatstrukturOriginalBehandling),\n    });\n  }\n  if (behandlingsresultat && isOpphor(behandlingsresultat.type)) {\n    vedtakstatusTekst = intl.formatMessage(\n      {\n        id:\n          ytelseTypeKode === fagsakYtelseType.SVANGERSKAPSPENGER\n            ? 'VedtakForm.RevurderingSVP.SvangerskapspengerOpphoerer'\n            : 'VedtakForm.RevurderingFP.ForeldrepengerOpphoerer',\n      },\n      {\n        dato: moment(getOpphorsdato(resultatstruktur, medlemskapFom, behandlingsresultat)).format(DDMMYYYY_DATE_FORMAT),\n      },\n    );\n  }\n\n  const forhåndsvisOverstyrtBrev = hentForhåndsvisManueltBrevCallback(\n    true,\n    previewCallback,\n    overskrift,\n    brødtekst,\n    begrunnelse,\n  );\n  const forhåndsvisDefaultBrev = hentForhåndsvisManueltBrevCallback(\n    false,\n    previewCallback,\n    overskrift,\n    brødtekst,\n    begrunnelse,\n  );\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <VedtakFellesPanel\n        behandling={behandling}\n        vedtakstatusTekst={vedtakstatusTekst}\n        aksjonspunkter={aksjonspunkter}\n        readOnly={readOnly}\n        previewAutomatiskBrev={forhåndsvisDefaultBrev}\n        previewOverstyrtBrev={forhåndsvisOverstyrtBrev}\n        tilbakekrevingtekst={tilbakekrevingtekst}\n        erBehandlingEtterKlage={erBehandlingEtterKlage}\n        renderPanel={(skalBrukeOverstyrendeFritekstBrev, erInnvilget, erAvslatt, erOpphor) => {\n          if (erInnvilget) {\n            return (\n              <VedtakInnvilgetRevurderingPanel\n                ytelseTypeKode={ytelseTypeKode}\n                revurderingsÅrsakString={revurderingsÅrsakString}\n                isReadOnly={readOnly}\n                resultatstruktur={resultatstruktur}\n                språkKode={sprakkode}\n                behandlingsresultat={behandlingsresultat}\n                beregningErManueltFastsatt={beregningErManueltFastsatt}\n                skalBrukeOverstyrendeFritekstBrev={skalBrukeOverstyrendeFritekstBrev}\n              />\n            );\n          }\n\n          if (erAvslatt) {\n            return (\n              <VedtakAvslagArsakOgBegrunnelsePanel\n                vilkar={vilkar}\n                behandlingsresultat={behandlingsresultat}\n                språkKode={sprakkode}\n                erReadOnly={readOnly}\n                alleKodeverk={alleKodeverk}\n                skalBrukeOverstyrendeFritekstBrev={skalBrukeOverstyrendeFritekstBrev}\n              />\n            );\n          }\n\n          return erOpphor ? (\n            <VedtakOpphorRevurderingPanel\n              revurderingsÅrsakString={revurderingsÅrsakString}\n              isReadOnly={readOnly}\n              behandlingsresultat={behandlingsresultat}\n              språkKode={sprakkode}\n              beregningErManueltFastsatt={beregningErManueltFastsatt}\n              skalBrukeOverstyrendeFritekstBrev={skalBrukeOverstyrendeFritekstBrev}\n            />\n          ) : null;\n        }}\n      />\n    </Form>\n  );\n};\n\nexport default VedtakRevurderingForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AksjonspunktCode, behandlingType, aksjonspunktStatus, fagsakYtelseType } from '@navikt/fp-kodeverk';\nimport {\n  BeregningsresultatDagytelse,\n  BeregningsresultatEs,\n  Vilkar,\n  TilbakekrevingValg,\n  SimuleringResultat,\n  Beregningsgrunnlag,\n  Medlemskap,\n  Aksjonspunkt,\n  StandardProsessPanelProps,\n} from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport VedtakForm, { ForhandsvisData } from './components/forstegang/VedtakForm';\nimport VedtakRevurderingForm from './components/revurdering/VedtakRevurderingForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\nconst BEREGNINGSGRUNNLAG_FRITEKSTFELT_I_VEDTAK_AKSJONSPUNKT = [\n  AksjonspunktCode.FASTSETT_BRUTTO_BEREGNINGSGRUNNLAG_SELVSTENDIG_NAERINGSDRIVENDE,\n  AksjonspunktCode.FASTSETT_BEREGNINGSGRUNNLAG_ARBEIDSTAKER_FRILANS,\n  AksjonspunktCode.FASTSETT_BEREGNINGSGRUNNLAG_TIDSBEGRENSET_ARBEIDSFORHOLD,\n];\n\nconst skalSkriveFritekstGrunnetFastsettingAvBeregning = (\n  aksjonspunkter: Aksjonspunkt[],\n  beregningsgrunnlag?: Beregningsgrunnlag,\n): boolean => {\n  if (!beregningsgrunnlag || !aksjonspunkter) {\n    return false;\n  }\n  const behandlingHarLøstBGAP = aksjonspunkter.find(\n    ap =>\n      BEREGNINGSGRUNNLAG_FRITEKSTFELT_I_VEDTAK_AKSJONSPUNKT.some(k => k === ap.definisjon) &&\n      ap.status === aksjonspunktStatus.UTFORT,\n  );\n  const førstePeriode = beregningsgrunnlag.beregningsgrunnlagPeriode[0];\n  const andelSomErManueltFastsatt = førstePeriode.beregningsgrunnlagPrStatusOgAndel?.find(\n    andel => andel.overstyrtPrAar || andel.overstyrtPrAar === 0,\n  );\n  return !!behandlingHarLøstBGAP || !!andelSomErManueltFastsatt;\n};\n\ninterface OwnProps {\n  beregningresultatDagytelse?: BeregningsresultatDagytelse;\n  beregningresultatEngangsstonad?: BeregningsresultatEs;\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  simuleringResultat?: SimuleringResultat;\n  beregningsgrunnlag?: Beregningsgrunnlag;\n  beregningsresultatOriginalBehandling?: {\n    'beregningsresultat-engangsstonad'?: BeregningsresultatEs;\n    'beregningsresultat-foreldrepenger'?: BeregningsresultatDagytelse;\n  };\n  medlemskap: Medlemskap;\n  vilkar: Vilkar[];\n  previewCallback: (data: ForhandsvisData) => Promise<any>;\n  ytelseTypeKode: string;\n}\n\nconst VedtakProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  beregningresultatDagytelse,\n  beregningresultatEngangsstonad,\n  tilbakekrevingvalg,\n  simuleringResultat,\n  beregningsgrunnlag,\n  vilkar,\n  beregningsresultatOriginalBehandling,\n  medlemskap,\n  aksjonspunkter,\n  isReadOnly,\n  previewCallback,\n  submitCallback,\n  ytelseTypeKode,\n  alleKodeverk,\n  formData,\n  setFormData,\n}) => {\n  const beregningErManueltFastsatt = skalSkriveFritekstGrunnetFastsettingAvBeregning(\n    aksjonspunkter,\n    beregningsgrunnlag,\n  );\n  const resultatstruktur =\n    ytelseTypeKode === fagsakYtelseType.ENGANGSSTONAD ? beregningresultatEngangsstonad : beregningresultatDagytelse;\n\n  let originaltBeregningsresultat;\n  if (beregningsresultatOriginalBehandling) {\n    originaltBeregningsresultat =\n      ytelseTypeKode === fagsakYtelseType.ENGANGSSTONAD\n        ? beregningsresultatOriginalBehandling['beregningsresultat-engangsstonad']\n        : beregningsresultatOriginalBehandling['beregningsresultat-foreldrepenger'];\n  }\n\n  return (\n    <RawIntlProvider value={intl}>\n      {behandling.type !== behandlingType.REVURDERING && (\n        <VedtakForm\n          behandling={behandling}\n          submitCallback={submitCallback}\n          readOnly={isReadOnly}\n          previewCallback={previewCallback}\n          tilbakekrevingvalg={tilbakekrevingvalg}\n          simuleringResultat={simuleringResultat}\n          resultatstruktur={resultatstruktur}\n          aksjonspunkter={aksjonspunkter}\n          ytelseTypeKode={ytelseTypeKode}\n          alleKodeverk={alleKodeverk}\n          vilkar={vilkar}\n          beregningErManueltFastsatt={beregningErManueltFastsatt}\n          formData={formData}\n          setFormData={setFormData}\n        />\n      )}\n      {behandling.type === behandlingType.REVURDERING && (\n        <VedtakRevurderingForm\n          behandling={behandling}\n          submitCallback={submitCallback}\n          readOnly={isReadOnly}\n          previewCallback={previewCallback}\n          tilbakekrevingvalg={tilbakekrevingvalg}\n          simuleringResultat={simuleringResultat}\n          resultatstruktur={resultatstruktur}\n          aksjonspunkter={aksjonspunkter}\n          ytelseTypeKode={ytelseTypeKode}\n          alleKodeverk={alleKodeverk}\n          vilkar={vilkar}\n          beregningErManueltFastsatt={beregningErManueltFastsatt}\n          resultatstrukturOriginalBehandling={originaltBeregningsresultat}\n          medlemskapFom={medlemskap?.fom}\n          formData={formData}\n          setFormData={setFormData}\n        />\n      )}\n    </RawIntlProvider>\n  );\n};\n\nexport default VedtakProsessIndex;\n"],"names":["__rest","this","s","e","t","p","i","SvgArrowForward","forwardRef","_a","ref","title","_titleId","props","titleId","useId","React.createElement","ArrowForwardIcon","SvgPencilFill","PencilFillIcon","SvgQuestionmarkDiamond","QuestionmarkDiamondIcon","avslagsarsakCodes","mottakerTyper","OpplysningAdresseType","personstatusType","region","relatertYtelseType","soknadType","VilkarType","fodselsvilkarene","adopsjonsvilkarene","dokumentTypeId","OpptjeningIUtlandDokStatus","transformValues","values","AksjonspunktCode","InnhentDokOpptjeningUtlandPanel","readOnly","harApneAksjonspunkter","aksjonspunkt","alleMerknaderFraBeslutter","submittable","submitCallback","dokStatus","formData","setFormData","intl","useIntl","formMethods","useForm","FaktaBegrunnelseTextFieldNew","begrunnelse","bTag","useCallback","chunks","jsx","jsxs","Form","Heading","FormattedMessage","VerticalSpacer","AksjonspunktBox","styles","RadioGroupPanel","required","FaktaSubmitButtonNew","minLength3","minLength","maxLength1500","maxLength","buildInitialValues","soknad","getValidateIsBefore2019","getValues","startdatoFraSoknad","dayjs","StartdatoForForeldrepengerperiodenForm","visEditeringsmodus","toggleEdit","useState","slåPåEditering","slaAvEditeringAvStartdato","FlexContainer","FlexRow","FlexColumn","BodyShort","DDMMYYYY_DATE_FORMAT","Datepicker","hasValidDate","TextAreaField","hasValidText","Button","erMarkertUtenlandssak","aksjonspunkter","ap","SakenFaktaPanel","erSvangerskapspenger","automatiskMarkeringAvUtenlandssakAp","Fragment","AksjonspunktHelpTextHTML","createIntl","messages","SakenFaktaIndex","utlandDokStatus","RawIntlProvider","AKSJONSPUNKT_KODER","OVERSTYRING_AP_CODES","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","SakenFaktaInitPanel","fagsak","FaktaDefaultInitPanel","FaktaPanelCode","data","FagsakYtelseType","HEADER_TEXT_CODES","formatDateToDDMMYYYY","date","parsedDate","moment","ISO_DATE_FORMAT","PersonYtelserTable","ytelser","relatertYtelseTyper","relatertYtelseStatus","ytelseRows","ytelse","ytelseNavn","type","skalViseLenke","ytelseInfo","innerIndex","tilDato","fraDato","statusNavn","status","allRows","rows","Table","index","TableRow","TableColumn","Link","YtelserFaktaPanel","inntektArbeidYtelse","YtelserFaktaIndex","alleKodeverk","KodeverkType","YtelserFaktaInitPanel","headerTextCodes","MedlemskapEndringerTabell","perioder","velgPeriodeCallback","valgtPeriodeVurderingsdato","periode","periodeAp","AksjonspunktStatus","DateLabel","OppholdstillatelseTabell","oppholdstillatelse","FaktaGruppe","opphold","PeriodLabel","k","emptyIfnull","text","constructAddress","adresse","postnummer","poststed","land","getAddresses","addresses","acc","address","opplysningAdresseType","currentAddress","linje","country","Landkode","getAdresse","adresser","adresseListe","getUtlandsadresse","MedlemskapBostedSokerView","personopplysninger","sokerTypeText","regionTypes","personstatusTypes","HStack","Detail","Label","Tooltip","Tag","_b","r","capitalizeFirstLetter","landNavn","string","sjekkOpphold","CheckmarkIcon","ExclamationmarkTriangleFillIcon","lagOppholdIUtland","utlandsOpphold","u","OppholdINorgeOgAdresserFaktaPanel","valgtPeriode","aksjonspunktKode","apKode","isBosattAksjonspunktClosed","personopplysningBruker","personopplysningAnnenPart","_c","_d","_e","PerioderMedMedlemskapFaktaPanel","medlemskap","vurderingstyper","sorterteVurderingstyper","useMemo","a","b","sortertePerioder","p1","p2","erAksjonspunktLukket","getKodeverk","getKodeverknavnFn","fodselsdato","omsorgsovertakelseDato","termindato","dekning","key","VStack","medlemskapPerioder","StatusForBorgerFaktaPanel","watch","useFormContext","erEosBorger","oppholdAp","ArrowBox","getEosBorger","getOppholdsrettVurdering","getLovligOppholdVurdering","AVKLAR_OPPHOLDSRETT","AVKLAR_LOVLIG_OPPHOLD","hasAksjonspunkt","aksjonspunktCode","alleAksjonspunkter","statusForBorgerInitialValues","OppholdInntektOgPeriodeForm","updateOppholdInntektPeriode","lagreEnkeltPeriode","setValgtPeriode","isSubmitting","setSubmitting","initialValues","avbryt","harAksjonspunkt","inngangsAksjonspunkter","mapOgFiltrerPerioder","aktiveInngangsAksjonspunkter","kode","harÅpneInngangsAksjonspunkter","isAksjonspunktOpen","aktivtFortsattMedlemskapAksjonspunkt","finnAksjonspunkttekster","helpTexts","MedlemskapInfoPanel","setPerioder","isDirty","setDirty","useEffect","finnFørstePeriodeMedUløstAp","medlemPerioder","_p","_id","vurderingsdato","periodeIndex","oppdatertPeriode","nyePerioder","isConfirmButtonDisabled","lagre","MedlemskapFaktaIndex","MedlemskapsvilkaretFaktaInitPanel","skalViseProsessPanel","vilkarKoder","vilkar","harAksjonspunkter","harVilkar","vc","v","orgPrefix","aktørPrefix","findRadioButtonTextCode","erVilkarOk","getLabel","capitalizeFirstLetters","navn","w","lagArbeidsgiverNavnOgFødselsdatoTekst","lagArbeidsgiverNavnOgOrgnrTekst","organisasjonsnummer","formatArbeidsgiver","arbeidsgiverOpplysningerPerId","arbeidsgiverReferanse","arbeidsgiverOpplysninger","getSortedManglendeVedlegg","mv1","harSoknad","isObject","lagArbeidsgiverKey","sorterteManglendeVedlegg","soknadExists","isOpenAksjonspunkt","aksjonspunktStatus","isVilkarGodkjent","vilkarUtfallType","mv","ProsessStegBegrunnelseTextFieldNew","manglendeVedlegg","arbeidsgiverReferanser","agRef","SokersOpplysningspliktForm","readOnlySubmitButton","behandlingsresultat","erIkkeGodkjentAvBeslutter","hasSoknad","getKodeverknavn","originalErVilkarOk","dokumentTypeIds","ProsessPanelTemplate","vedlegg","dti","SokersOpplysningspliktVilkarProsessIndex","behandling","isReadOnly","VILKAR_KODER","OpplysningspliktProsessStegInitPanel","ProsessDefaultInitPanel","ProsessStegCode","behandlingType","useInngangsvilkarRegistrerer","registrerInngangsvilkarPanel","behandlingVersjon","id","aksjonspunktTekst","skalVises","erAksjonspunktApent","erOverstyrt","setOverstyrt","toggleOverstyring","InngangsvilkarDefaultInitPanel","erPanelValgt","panelEndepunkter","aksjonspunktKoder","renderPanel","inngangsvilkarPanelKode","hentInngangsvilkarPanelTekst","standardPanelProps","useStandardProsessPanelProps","formatertePanelEndepunkter","panelData","panelDataState","restBehandlingApiHooks","RestApiState","LoadingPanel","isOverridden","isHidden","kanOverstyre","hentErOppfyltTekstkode","customVilkarOppfyltText","hentErIkkeOppfyltTekstkode","customVilkarIkkeOppfyltText","getCustomVilkarText","erOppfylt","medlemskapFom","BehandlingType","getCustomVilkarTextForOppfylt","getCustomVilkarTextForIkkeOppfylt","overstyringApKode","decodeHtmlEntity","VilkarResultPicker","VilkarresultatMedOverstyringForm","panelTittelKode","lovReferanse","erMedlemskapsPanel","avslagsarsaker","overrideReadOnly","kanOverstyreAccess","togglePa","oldArray","toggleAv","code","isSolvable","CheckmarkCircleFillIcon","XMarkOctagonFillIcon","OverstyringKnapp","OverstyringPanel","VilkarresultatMedOverstyringProsessIndex","avslagsarsakerES","filtrerAvslagsarsaker","vilkarTypeKode","arsak","OverstyringPanelDef","panelTekstKode","overstyrteAksjonspunkter","standardProps","harMinstEttDelPanelStatus","paneler","vuType","getStatus","harStatusIkkeVurdert","VilkarUtfallType","tempStatus","getErAksjonspunktOpen","InngangsvilkarDefaultInitWrapper","valgtProsessSteg","registrerProsessPanel","apentFaktaPanelInfo","oppdaterProsessStegOgFaktaPanelIUrl","leftPanels","rightPanels","panelInfo","setPanelInfo","nyData","oldData","newData","d","erIkkeFerdigbehandlet","oppdaterUrl","evt","harApentAksjonspunkt","useProsessMenyRegistrerer","aksjonspunktTekster","tekst","ProsessPanelWrapper","React","AKSJONSPUNKT_KODE","MedlemskapInngangsvilkarInitPanel","rettigheter","AvregningSummary","fom","tom","feilutbetaling","etterbetaling","inntrekk","ingenPerioderMedAvvik","formatCurrencyNoKr","buttonText","showDetails","CollapseButton","toggleDetails","mottakerIndex","ChevronUpIcon","ChevronDownIcon","classNames","classnames","avregningCodes","isNextPeriod","monthAndYear","nextPeriod","getHeaderCodes","showCollapseButton","collapseProps","rangeOfMonths","createElement","skalViseCollapseButton","mottakerResultatPerFag","fag","rowToggable","fagOmråde","rowIsFeilUtbetalt","rad","rowIsHidden","isRowToggable","createColumns","nextPeriodFormatted","måned","månedIndex","lagVisningsNavn","mottaker","agOpplysning","tableTitle","getResultatRadene","resultatPerFagområde","resultatOgMotregningRader","resultat","avvikBruker","mottakerTypeKode","getPeriodeFom","periodeFom","nesteUtbPeriodeFom","getPeriod","fomDato","getRangeOfMonths","AvregningTable","simuleringResultat","nesteMåned","visDetaljer","array","fagIndex","isFeilUtbetalt","rowIndex","resultatIndex","IKKE_SEND","lagHjelpetekstTooltip","isForeldrepenger","hentToggleDetaljer","setShowDetails","tableIndex","table","newShowDetailsArray","updatedTable","videreBehandling","varseltekst","tilbakekrevingVidereBehandling","tilbakekrevingvalg","AvregningPanel","isApOpen","sprakkode","previewCallback","formState","fagsakYtelseType","hasOpenTilbakekrevingsbehandling","previewMessage","toggleDetaljer","simuleringResultatOption","AksjonspunktHelpTextTemp","getLanguageFromSprakkode","AvregningProsessIndex","previewFptilbakeCallback","getForhandsvisFptilbakeCallback","forhandsvisTilbakekrevingMelding","fritekst","response","forhandsvisDokument","SimuleringProsessStegInitPanel","menyData","harVedtakspanel","requestBehandlingApi","tilbakekrevingMedInntrekk","tilbakekrevingKode","getTilbakekrevingText","VedtakFritekstPanel","språkKode","labelTextCode","VedtakInnvilgetPanel","ytelseTypeKode","skalBrukeOverstyrendeFritekstBrev","beregningErManueltFastsatt","resultatstruktur","formatCurrencyWithKr","getAvslagArsak","getKodeverkNavn","avslatteVilkar","EMPTY_ARRAY","VedtakAvslagPanel","textCode","maxLength200","maxLength5000","ManueltVedtaksbrevPanel","forhåndsvisOverstyrtBrev","skalViseLink","AvsnittSkiller","Alert","value","EditedIcon","findHelpTexts","VedtakHelpTextPanel","finnTekstkodeFraBehandlingstatus","behandlingStatus","behandlingStatusCode","kanSendesTilGodkjenning","behandlingStatusKode","finnKnappetekstkode","skalBrukeManueltBrev","finnSkalViseLink","harIkkeKonsekvenserForYtelsen","konsekvenserForYtelsenKoder","behandlingResultat","konsekvenserForYtelsen","VedtakFellesPanel","previewAutomatiskBrev","previewOverstyrtBrev","tilbakekrevingtekst","erBehandlingEtterKlage","vedtakstatusTekst","setValue","behandlingPaaVent","behandlingHenlagt","uuid","taskStatus","toggleSkalBrukeManueltBrev","skalViseModal","toggleVisModal","onToggleOverstyring","avsluttRedigering","erInnvilget","isInnvilget","erAvslatt","isAvslag","erOpphor","isOpphor","kanBehandles","AsyncPollingStatus","harIkkeKonsekvensForYtelse","konsekvensForYtelsen","OkAvbrytModal","PencilIcon","finnAvslagResultatText","behandlingResultatTypeKode","ytelseType","behandlingResultatType","finnInnvilgetResultatText","isKlageOmgjort","hentForhåndsvisManueltBrevCallback","skalOverstyre","forhåndsvisCallback","trigger","brodtekst","overskrift","erFeltUtfylt","dokumentMalType","erÅrsakTypeBehandlingEtterKlage","behandlingArsakTyper","behandlingArsakType","bt","klageBehandlingArsakType","finnVedtakstatusTekst","apCode","validerApKodeOgHentApEnum","finnBegrunnelse","VedtakForm","brødtekst","forhåndsvisDefaultBrev","VedtakResultType","VedtakInnvilgetRevurderingPanel","revurderingsÅrsakString","VedtakAvslagArsakOgBegrunnelsePanel","erReadOnly","isRequiredFn","avslagsårsak","requiredIfCustomFunctionIsTrueNew","VedtakOpphorRevurderingPanel","BehandlingArsakType","lagÅrsakString","revurderingAarsaker","aarsakTekstList","endringFraBrukerAarsak","aarsak","alleAndreAarsakerNavn","erNyttBehandlingResult","beregningResultat","originaltBeregningResultat","vedtakResult","lagKonsekvensForYtelsenTekst","konsekvenser","erTilkjentYtelseEllerAntallBarnEndret","hentResultattekst","finnInvilgetRevurderingTekst","tilbakekrevingText","konsekvens","getOpphorsdato","VedtakRevurderingForm","resultatstrukturOriginalBehandling","behandlingÅrsaker","BEREGNINGSGRUNNLAG_FRITEKSTFELT_I_VEDTAK_AKSJONSPUNKT","skalSkriveFritekstGrunnetFastsettingAvBeregning","beregningsgrunnlag","behandlingHarLøstBGAP","andelSomErManueltFastsatt","andel","VedtakProsessIndex","beregningresultatDagytelse","beregningresultatEngangsstonad","beregningsresultatOriginalBehandling","originaltBeregningsresultat"],"mappings":"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","x_google_ignoreList":[0,1,2]}