{"version":3,"file":"OverstyringPanel-4e4a22d0.js","sources":["../../../../packages/kodeverk/src/aksjonspunktStatus.ts","../../../../packages/prosess-felles/src/ProsessStegBegrunnelseTextFieldNew.tsx","../../../../packages/prosess-felles/src/ProsessStegSubmitButtonNew.tsx","../../../../packages/prosess-felles/src/vilkar/VilkarResultPicker.tsx","../../../../packages/prosess-felles/src/vilkar/ProsessPanelTemplate.tsx","../../../../packages/prosess-felles/src/vilkar/OverstyringPanel.tsx"],"sourcesContent":["const aksjonspunktStatus = {\n  OPPRETTET: 'OPPR',\n  UTFORT: 'UTFO',\n  AVBRUTT: 'AVBR',\n};\n\nexport default aksjonspunktStatus;\n\nexport const isAksjonspunktOpen = (statusKode: string): boolean => statusKode === aksjonspunktStatus.OPPRETTET;\n","import React, { FunctionComponent } from 'react';\n\nimport { TextAreaField } from '@navikt/ft-form-hooks';\nimport { decodeHtmlEntity, createIntl } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength, requiredIfCustomFunctionIsTrueNew } from '@navikt/ft-form-validators';\nimport { Aksjonspunkt } from '@navikt/fp-types';\n\nimport { useFormContext } from 'react-hook-form';\nimport messages from '../i18n/nb_NO.json';\n\nimport styles from './prosessStegBegrunnelseTextField.module.css';\n\nconst intl = createIntl(messages);\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\nconst getBegrunnelseTextCode = (readOnly: boolean): string =>\n  readOnly\n    ? 'ProsessStegBegrunnelseTextField.ExplanationRequiredReadOnly'\n    : 'ProsessStegBegrunnelseTextField.ExplanationRequired';\n\ntype FormValues = {\n  begrunnelse?: string;\n};\n\nconst getIsBegrunnelseRequired = (isDirty: boolean) => (value?: string | number | boolean) =>\n  value !== undefined || isDirty;\n\ninterface OwnProps {\n  readOnly: boolean;\n  text?: string;\n  useAllWidth?: boolean;\n  notRequired?: boolean;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (aksjonspunkter: Aksjonspunkt[]) => FormValues;\n  transformValues: (values: FormValues) => {\n    begrunnelse?: string;\n  };\n}\n\n/**\n * ProsessStegBegrunnelseTextField\n *\n * Presentasjonskomponent. Lar den NAV-ansatte skrive inn en begrunnelse før lagring av behandlingspunkter.\n */\nconst ProsessStegBegrunnelseTextField: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  text,\n  useAllWidth = false,\n  notRequired = false,\n}) => {\n  const {\n    formState: { isDirty },\n  } = useFormContext();\n  const isRequiredFn = notRequired ? () => false : getIsBegrunnelseRequired(isDirty);\n  return (\n    <div className={!useAllWidth ? styles.begrunnelseTextField : ''}>\n      <TextAreaField\n        name=\"begrunnelse\"\n        label={text || intl.formatMessage({ id: getBegrunnelseTextCode(readOnly) })}\n        validate={[requiredIfCustomFunctionIsTrueNew(isRequiredFn), minLength3, maxLength1500, hasValidText]}\n        maxLength={2000}\n        readOnly={readOnly}\n        // Må erstatte bindestrek kopiert inn fra Word med vanlig bindestrek\n        parse={value => value.toString().replaceAll('‑', '-')}\n      />\n    </div>\n  );\n};\n\nconst getBegrunnelse = (aksjonspunkter: Aksjonspunkt[]): string =>\n  aksjonspunkter.length > 0 && aksjonspunkter[0].begrunnelse ? aksjonspunkter[0].begrunnelse : '';\n\nProsessStegBegrunnelseTextField.buildInitialValues = (aksjonspunkter: Aksjonspunkt[]): FormValues => ({\n  begrunnelse: decodeHtmlEntity(getBegrunnelse(aksjonspunkter)),\n});\n\nProsessStegBegrunnelseTextField.transformValues = (values: FormValues): any => ({\n  begrunnelse: values.begrunnelse,\n});\n\nexport default ProsessStegBegrunnelseTextField;\n","import React, { FunctionComponent } from 'react';\nimport { Button } from '@navikt/ds-react';\n\nimport { ariaCheck } from '@navikt/ft-form-validators';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\nconst isDisabled = (\n  isSubmitting: boolean,\n  isSubmittable: boolean,\n  isDirty?: boolean,\n  hasEmptyRequiredFields?: boolean,\n): boolean => {\n  if ((!isDirty && !isSubmittable) || isSubmitting) {\n    return true;\n  }\n  if (hasEmptyRequiredFields === undefined) {\n    return !isDirty;\n  }\n  return (!isDirty && hasEmptyRequiredFields) || hasEmptyRequiredFields;\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n  isSubmittable: boolean;\n  isSubmitting: boolean;\n  isDirty?: boolean;\n  text?: string;\n  onClick?: (event: React.MouseEvent) => void;\n  hasEmptyRequiredFields?: boolean;\n}\n\n/**\n * ProsessStegSubmitButton\n */\nconst ProsessStegSubmitButton: FunctionComponent<OwnProps> = ({\n  isReadOnly,\n  isSubmittable,\n  isSubmitting,\n  isDirty,\n  text,\n  onClick,\n  hasEmptyRequiredFields,\n}) => {\n  if (!isReadOnly) {\n    return (\n      <Button\n        size=\"small\"\n        variant=\"primary\"\n        loading={isSubmitting}\n        disabled={isDisabled(isSubmitting, isSubmittable, isDirty, hasEmptyRequiredFields)}\n        onClick={onClick || ariaCheck}\n        type={onClick ? 'button' : 'submit'}\n      >\n        {text || intl.formatMessage({ id: 'SubmitButton.ConfirmInformation' })}\n      </Button>\n    );\n  }\n  return null;\n};\n\nexport default ProsessStegSubmitButton;\n","import React, { FunctionComponent, ReactElement, useMemo } from 'react';\nimport { BodyShort } from '@navikt/ds-react';\nimport { CheckmarkIcon, XMarkOctagonIcon } from '@navikt/aksel-icons';\nimport { FlexContainer, FlexRow, FlexColumn, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\n\nimport { vilkarUtfallType } from '@navikt/fp-kodeverk';\nimport { Datepicker, RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport { createIntl } from '@navikt/ft-utils';\nimport { hasValidDate, required, requiredIfCustomFunctionIsTrueNew } from '@navikt/ft-form-validators';\nimport { Aksjonspunkt, Behandlingsresultat, KodeverkMedNavn } from '@navikt/fp-types';\nimport { useFormContext } from 'react-hook-form';\n\nimport messages from '../../i18n/nb_NO.json';\n\nimport styles from './vilkarResultPicker.module.css';\n\nconst intl = createIntl(messages);\n\nconst getIsAvslagCodeRequired = (erVilkarOk: boolean, avslagCode?: string) => () => erVilkarOk === false && !avslagCode;\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n};\n\ninterface OwnProps {\n  avslagsarsaker?: KodeverkMedNavn[];\n  customVilkarIkkeOppfyltText: string | ReactElement;\n  customVilkarOppfyltText: string | ReactElement;\n  readOnly: boolean;\n  erMedlemskapsPanel?: boolean;\n  skalKunneInnvilge?: boolean;\n  validatorsForRadioOptions?: ((value: boolean) => any)[];\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (\n    aksjonspunkter: Aksjonspunkt[],\n    status: string,\n    behandlingsresultat?: Behandlingsresultat,\n  ) => FormValues;\n  transformValues: (values: FormValues) =>\n    | {\n        erVilkarOk: boolean;\n      }\n    | {\n        erVilkarOk: boolean;\n        avslagskode: string;\n        avslagDato: string;\n      };\n}\n\n/**\n * VilkarResultPicker\n *\n * Presentasjonskomponent. Lar NAV-ansatt velge om vilkåret skal oppfylles eller avvises.\n */\nconst VilkarResultPicker: FunctionComponent<OwnProps> & StaticFunctions = ({\n  avslagsarsaker,\n  customVilkarIkkeOppfyltText,\n  customVilkarOppfyltText,\n  readOnly,\n  erMedlemskapsPanel = false,\n  skalKunneInnvilge = true,\n  validatorsForRadioOptions,\n}) => {\n  const { getValues, watch } = useFormContext();\n  const erVilkarOk = watch('erVilkarOk');\n\n  const radioValidators = useMemo(\n    () => (validatorsForRadioOptions ? validatorsForRadioOptions.concat(required) : [required]),\n    [validatorsForRadioOptions],\n  );\n\n  return (\n    <div className={styles.container}>\n      <VerticalSpacer sixteenPx />\n      {readOnly && erVilkarOk !== undefined && (\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              {erVilkarOk && <CheckmarkIcon className={styles.godkjentImage} />}\n              {!erVilkarOk && <XMarkOctagonIcon className={styles.avslattImage} />}\n            </FlexColumn>\n            <FlexColumn>\n              {erVilkarOk && <BodyShort size=\"small\">{customVilkarOppfyltText}</BodyShort>}\n              {!erVilkarOk && <BodyShort size=\"small\">{customVilkarIkkeOppfyltText}</BodyShort>}\n            </FlexColumn>\n          </FlexRow>\n          <VerticalSpacer eightPx />\n        </FlexContainer>\n      )}\n      {(!readOnly || erVilkarOk === undefined) && (\n        <RadioGroupPanel\n          name=\"erVilkarOk\"\n          // @ts-ignore Fiks denne!\n          validate={radioValidators}\n          isReadOnly={readOnly}\n          isTrueOrFalseSelection\n          radios={[\n            {\n              value: 'true',\n              label: customVilkarOppfyltText,\n              disabled: !skalKunneInnvilge,\n            },\n            {\n              value: 'false',\n              label: customVilkarIkkeOppfyltText,\n            },\n          ]}\n        />\n      )}\n      {erVilkarOk !== undefined && !erVilkarOk && avslagsarsaker && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <SelectField\n            name=\"avslagCode\"\n            label={intl.formatMessage({ id: 'VilkarResultPicker.Arsak' })}\n            selectValues={avslagsarsaker.map(aa => (\n              <option key={aa.kode} value={aa.kode}>\n                {aa.navn}\n              </option>\n            ))}\n            readOnly={readOnly}\n            className={styles.selectBredde}\n            validate={[requiredIfCustomFunctionIsTrueNew(getIsAvslagCodeRequired(erVilkarOk, getValues('avslagCode')))]}\n          />\n          {erMedlemskapsPanel && (\n            <>\n              <VerticalSpacer sixteenPx />\n              <Datepicker\n                name=\"avslagDato\"\n                label={intl.formatMessage({ id: 'VilkarResultPicker.VilkarDato' })}\n                isReadOnly={readOnly}\n                validate={[required, hasValidDate]}\n              />\n            </>\n          )}\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n    </div>\n  );\n};\n\nVilkarResultPicker.buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  behandlingsresultat?: Behandlingsresultat,\n): FormValues => {\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === AksjonspunktStatus.OPPRETTET);\n  const erVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n  return {\n    erVilkarOk,\n    avslagCode:\n      erVilkarOk === false && behandlingsresultat && behandlingsresultat.avslagsarsak\n        ? behandlingsresultat.avslagsarsak\n        : undefined,\n  };\n};\n\nVilkarResultPicker.transformValues = values =>\n  values.erVilkarOk\n    ? { erVilkarOk: values.erVilkarOk! }\n    : {\n        erVilkarOk: values.erVilkarOk!,\n        avslagskode: values.avslagCode,\n        avslagDato: values.avslagDato,\n      };\n\nexport default VilkarResultPicker;\n","import React, { ReactNode, FunctionComponent } from 'react';\nimport { Heading, Detail, Label, BodyShort } from '@navikt/ds-react';\nimport { CheckmarkCircleFillIcon, XMarkOctagonFillIcon } from '@navikt/aksel-icons';\nimport { FlexContainer, FlexRow, FlexColumn, VerticalSpacer, AksjonspunktBox } from '@navikt/ft-ui-komponenter';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport ProsessStegSubmitButton from '../ProsessStegSubmitButtonNew';\nimport messages from '../../i18n/nb_NO.json';\n\nimport styles from './prosessPanelTemplate.module.css';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  title: string;\n  lovReferanse?: string;\n  isAksjonspunktOpen: boolean;\n  readOnlySubmitButton: boolean;\n  originalErVilkarOk?: boolean;\n  erIkkeGodkjentAvBeslutter: boolean;\n  rendreFakta?: () => void;\n  readOnly: boolean;\n  isDirty?: boolean;\n  isSubmitting: boolean;\n  children: ReactNode | ReactNode[];\n}\n\n/*\n * ProsessPanelTemplate\n *\n * Presentasjonskomponent.\n */\nconst ProsessPanelTemplate: FunctionComponent<OwnProps> = ({\n  lovReferanse,\n  title,\n  originalErVilkarOk,\n  isAksjonspunktOpen,\n  readOnlySubmitButton,\n  readOnly,\n  rendreFakta,\n  isDirty,\n  erIkkeGodkjentAvBeslutter,\n  isSubmitting,\n  children,\n}) => (\n  <>\n    <FlexContainer>\n      <FlexRow>\n        {originalErVilkarOk !== undefined && (\n          <FlexColumn>\n            {originalErVilkarOk && <CheckmarkCircleFillIcon className={styles.godkjentImage} />}\n            {!originalErVilkarOk && <XMarkOctagonFillIcon className={styles.avslattImage} />}\n          </FlexColumn>\n        )}\n        <FlexColumn>\n          <Heading size=\"small\">{title}</Heading>\n        </FlexColumn>\n        {lovReferanse && (\n          <FlexColumn>\n            <Detail className={styles.vilkar}>{lovReferanse}</Detail>\n          </FlexColumn>\n        )}\n      </FlexRow>\n\n      <FlexRow>\n        <FlexColumn>\n          {originalErVilkarOk && (\n            <>\n              <VerticalSpacer eightPx />\n              <Label size=\"small\">{intl.formatMessage({ id: 'ProsessPanelTemplate.ErOppfylt' })}</Label>\n            </>\n          )}\n          {originalErVilkarOk === false && (\n            <>\n              <VerticalSpacer eightPx />\n              <Label size=\"small\">{intl.formatMessage({ id: 'ProsessPanelTemplate.ErIkkeOppfylt' })}</Label>\n            </>\n          )}\n          {!isAksjonspunktOpen && originalErVilkarOk === undefined && (\n            <>\n              <VerticalSpacer eightPx />\n              <BodyShort size=\"small\">{intl.formatMessage({ id: 'ProsessPanelTemplate.IkkeBehandlet' })}</BodyShort>\n            </>\n          )}\n        </FlexColumn>\n      </FlexRow>\n    </FlexContainer>\n    {isAksjonspunktOpen && <VerticalSpacer eightPx />}\n    <AksjonspunktBox\n      className={styles.aksjonspunktMargin}\n      erAksjonspunktApent={isAksjonspunktOpen}\n      erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n    >\n      {children}\n      {!readOnly && <VerticalSpacer sixteenPx />}\n      <ProsessStegSubmitButton\n        isReadOnly={readOnly}\n        isSubmittable={!readOnlySubmitButton}\n        isDirty={isDirty}\n        isSubmitting={isSubmitting}\n      />\n    </AksjonspunktBox>\n    {rendreFakta && (\n      <>\n        <VerticalSpacer sixteenPx />\n        {rendreFakta()}\n      </>\n    )}\n  </>\n);\n\nexport default ProsessPanelTemplate;\n","import React, { ReactNode, FunctionComponent } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { BodyShort, Label, Button } from '@navikt/ds-react';\nimport { ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\n\nimport {\n  FlexContainer,\n  FlexRow,\n  FlexColumn,\n  EditedIcon,\n  VerticalSpacer,\n  AksjonspunktBox,\n} from '@navikt/ft-ui-komponenter';\n\nimport { TextAreaField } from '@navikt/ft-form-hooks';\nimport { createIntl } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength } from '@navikt/ft-form-validators';\n\nimport messages from '../../i18n/nb_NO.json';\n\nimport styles from './overstyringPanel.module.css';\n\nconst intl = createIntl(messages);\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\nconst getIsBegrunnelseRequired = (isDirty: boolean) => (value?: string) => value !== undefined || isDirty;\n\ninterface OwnProps {\n  erOverstyrt: boolean;\n  isSolvable: boolean;\n  erVilkarOk?: boolean;\n  hasAksjonspunkt: boolean;\n  overrideReadOnly: boolean;\n  isSubmitting: boolean;\n  isPristine: boolean;\n  toggleAv: () => void;\n  erIkkeGodkjentAvBeslutter: boolean;\n  children: ReactNode;\n}\n\nconst OverstyringPanel: FunctionComponent<OwnProps> = ({\n  erOverstyrt,\n  isSolvable,\n  erVilkarOk,\n  hasAksjonspunkt,\n  overrideReadOnly,\n  isSubmitting,\n  isPristine,\n  toggleAv,\n  erIkkeGodkjentAvBeslutter,\n  children,\n}) => {\n  const {\n    formState: { isDirty },\n  } = useFormContext();\n  const isRequiredFn = getIsBegrunnelseRequired(isDirty);\n  return (\n    <AksjonspunktBox\n      className={styles.aksjonspunktMargin}\n      erAksjonspunktApent={erOverstyrt}\n      erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n    >\n      <Label size=\"small\">{intl.formatMessage({ id: 'OverstyringPanel.AutomatiskVurdering' })}</Label>\n      <VerticalSpacer eightPx />\n      {children}\n      {(erOverstyrt || hasAksjonspunkt) && (\n        <>\n          <VerticalSpacer eightPx />\n          <TextAreaField\n            name=\"begrunnelse\"\n            label={intl.formatMessage({ id: 'OverstyringPanel.Vilkar' })}\n            validate={[isRequiredFn, minLength3, maxLength1500, hasValidText]}\n            maxLength={1500}\n            readOnly={overrideReadOnly || !erOverstyrt}\n          />\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n      {!erOverstyrt && erVilkarOk !== undefined && (\n        <>\n          <VerticalSpacer fourPx />\n          <FlexRow>\n            <FlexColumn>\n              <EditedIcon />\n            </FlexColumn>\n            <FlexColumn>\n              <BodyShort size=\"small\">{intl.formatMessage({ id: 'OverstyringPanel.Endret' })}</BodyShort>\n            </FlexColumn>\n          </FlexRow>\n        </>\n      )}\n      {erOverstyrt && (\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              <ExclamationmarkTriangleFillIcon className={styles.exclamationmarkIcon} />\n            </FlexColumn>\n            <FlexColumn>\n              <BodyShort size=\"small\">{intl.formatMessage({ id: 'OverstyringPanel.Unntakstilfeller' })}</BodyShort>\n            </FlexColumn>\n          </FlexRow>\n          <VerticalSpacer sixteenPx />\n          <FlexRow>\n            <FlexColumn>\n              {!overrideReadOnly && (\n                <Button\n                  size=\"small\"\n                  variant=\"primary\"\n                  loading={isSubmitting}\n                  disabled={isSubmitting || !isSolvable || isPristine}\n                >\n                  {intl.formatMessage({ id: 'OverstyringPanel.ConfirmInformation' })}\n                </Button>\n              )}\n            </FlexColumn>\n            <FlexColumn>\n              <Button\n                size=\"small\"\n                variant=\"secondary\"\n                loading={isSubmitting}\n                disabled={isSubmitting}\n                onClick={toggleAv}\n                type=\"button\"\n              >\n                {intl.formatMessage({ id: 'OverstyringPanel.Avbryt' })}\n              </Button>\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n      )}\n    </AksjonspunktBox>\n  );\n};\n\nexport default OverstyringPanel;\n"],"names":["aksjonspunktStatus","intl","createIntl","messages","minLength3","minLength","maxLength1500","maxLength","getBegrunnelseTextCode","readOnly","getIsBegrunnelseRequired","isDirty","value","ProsessStegBegrunnelseTextField","text","useAllWidth","notRequired","useFormContext","isRequiredFn","jsx","styles","TextAreaField","requiredIfCustomFunctionIsTrueNew","hasValidText","getBegrunnelse","aksjonspunkter","decodeHtmlEntity","values","isDisabled","isSubmitting","isSubmittable","hasEmptyRequiredFields","ProsessStegSubmitButton","isReadOnly","onClick","Button","ariaCheck","getIsAvslagCodeRequired","erVilkarOk","avslagCode","VilkarResultPicker","avslagsarsaker","customVilkarIkkeOppfyltText","customVilkarOppfyltText","erMedlemskapsPanel","skalKunneInnvilge","validatorsForRadioOptions","getValues","watch","radioValidators","useMemo","required","jsxs","VerticalSpacer","FlexContainer","FlexRow","FlexColumn","CheckmarkIcon","XMarkOctagonIcon","BodyShort","RadioGroupPanel","Fragment","SelectField","aa","Datepicker","hasValidDate","status","behandlingsresultat","ap","AksjonspunktStatus","vilkarUtfallType","ProsessPanelTemplate","lovReferanse","title","originalErVilkarOk","isAksjonspunktOpen","readOnlySubmitButton","rendreFakta","erIkkeGodkjentAvBeslutter","children","CheckmarkCircleFillIcon","XMarkOctagonFillIcon","Heading","Detail","Label","AksjonspunktBox","OverstyringPanel","erOverstyrt","isSolvable","hasAksjonspunkt","overrideReadOnly","isPristine","toggleAv","EditedIcon","ExclamationmarkTriangleFillIcon"],"mappings":"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"}