{"version":3,"file":"EngangsstonadPaneler-6d722c07.js","sources":["../../src/behandling/engangsstonad/prosessPaneler/inngangsvilkarPaneler/FodselInngangsvilkarInitPanel.tsx","../../src/behandling/engangsstonad/prosessPaneler/inngangsvilkarPaneler/AdopsjonInngangsvilkarInitPanel.tsx","../../src/behandling/engangsstonad/prosessPaneler/inngangsvilkarPaneler/OmsorgInngangsvilkarInitPanel.tsx","../../src/behandling/engangsstonad/prosessPaneler/InngangsvilkarEsProsessStegInitPanel.tsx","../../../../packages/prosess-beregningsresultat/src/components/BeregningsresultatEngangsstonadForm.tsx","../../../../packages/prosess-beregningsresultat/src/BeregningsresultatProsessIndex.tsx","../../src/behandling/engangsstonad/prosessPaneler/BeregningEsProsessStegInitPanel.tsx","../../src/behandling/engangsstonad/prosessPaneler/VedtakEsProsessStegInitPanel.tsx","../../../../packages/prosess-vilkar-soknadsfrist/src/components/ErSoknadsfristVilkaretOppfyltForm.tsx","../../../../packages/prosess-vilkar-soknadsfrist/src/SoknadsfristVilkarProsessIndex.tsx","../../src/behandling/engangsstonad/prosessPaneler/SoknadsfristEsProsessStegInitPanel.tsx","../../src/behandling/engangsstonad/EngangsstonadPaneler.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, VilkarType, fagsakYtelseType } from '@navikt/fp-kodeverk';\nimport { FodselVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-fodsel';\nimport { Aksjonspunkt, AksessRettigheter } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\n\nconst AKSJONSPUNKT_TEKST_PER_KODE = {\n  [AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderSammeBarn',\n  [AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderAnnenForelderSammeBarn',\n} as Record<string, string>;\n\nconst hentAksjonspunktTekst = (intl: IntlShape, aksjonspunkter: Aksjonspunkt[] = []): string =>\n  aksjonspunkter.length > 0\n    ? intl.formatMessage({ id: AKSJONSPUNKT_TEKST_PER_KODE[aksjonspunkter[0].definisjon] })\n    : '';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst VILKAR_KODER = [VilkarType.FODSELSVILKARET_MOR];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst FodselInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"FODSEL\"\n      hentInngangsvilkarPanelTekst={data => hentAksjonspunktTekst(intl, data.aksjonspunkter)}\n      renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n        <>\n          {data.aksjonspunkter.length === 0 && (\n            <OverstyringPanelDef\n              aksjonspunkter={data.aksjonspunkter}\n              aksjonspunktKode={AksjonspunktCode.OVERSTYR_FODSELSVILKAR}\n              vilkar={data.vilkar}\n              vilkarKoder={VILKAR_KODER}\n              panelTekstKode=\"Inngangsvilkar.Fodselsvilkaret\"\n              erMedlemskapsPanel={false}\n              toggleOverstyring={toggleOverstyring}\n              erOverstyrt={erOverstyrt}\n              overrideReadOnly={\n                data.isReadOnly ||\n                (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n              }\n              kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n            />\n          )}\n          {data.aksjonspunkter.length > 0 && (\n            <>\n              <FodselVilkarProsessIndex ytelseTypeKode={fagsakYtelseType.ENGANGSSTONAD} {...data} />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default FodselInngangsvilkarInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\nimport { VilkarType } from '@navikt/ft-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { AdopsjonVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-adopsjon';\nimport { Aksjonspunkt, AksessRettigheter } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\n\nconst AKSJONSPUNKT_TEKST_PER_KODE = {\n  [AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderSammeBarn',\n  [AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderAnnenForelderSammeBarn',\n} as Record<string, string>;\n\nconst hentAksjonspunktTekst = (intl: IntlShape, aksjonspunkter: Aksjonspunkt[] = []): string =>\n  aksjonspunkter.length > 0\n    ? intl.formatMessage({ id: AKSJONSPUNKT_TEKST_PER_KODE[aksjonspunkter[0].definisjon] })\n    : '';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst VILKAR_KODER = [VilkarType.ADOPSJONSVILKARET];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst AdopsjonInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"ADOPSJON\"\n      hentInngangsvilkarPanelTekst={data => hentAksjonspunktTekst(intl, data.aksjonspunkter)}\n      renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n        <>\n          {data.aksjonspunkter.length === 0 && (\n            <OverstyringPanelDef\n              aksjonspunkter={data.aksjonspunkter}\n              aksjonspunktKode={AksjonspunktCode.OVERSTYR_ADOPSJONSVILKAR}\n              vilkar={data.vilkar}\n              vilkarKoder={VILKAR_KODER}\n              panelTekstKode=\"Inngangsvilkar.Adopsjonsvilkaret\"\n              erMedlemskapsPanel={false}\n              toggleOverstyring={toggleOverstyring}\n              erOverstyrt={erOverstyrt}\n              overrideReadOnly={\n                data.isReadOnly ||\n                (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n              }\n              kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n            />\n          )}\n          {data.aksjonspunkter.length > 0 && (\n            <>\n              <AdopsjonVilkarProsessIndex {...data} />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default AdopsjonInngangsvilkarInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { VilkarType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OmsorgVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-omsorg';\nimport { Aksjonspunkt } from '@navikt/fp-types';\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\n\nconst AKSJONSPUNKT_TEKST_PER_KODE = {\n  [AksjonspunktCode.MANUELL_VURDERING_AV_OMSORGSVILKARET]: 'ErOmsorgVilkaarOppfyltForm.Paragraf',\n  [AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderSammeBarn',\n  [AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN]: 'SRBVilkarForm.VurderAnnenForelderSammeBarn',\n} as Record<string, string>;\n\nconst hentAksjonspunktTekst = (intl: IntlShape, aksjonspunkter: Aksjonspunkt[] = []): string =>\n  aksjonspunkter.length > 0\n    ? intl.formatMessage({ id: AKSJONSPUNKT_TEKST_PER_KODE[aksjonspunkter[0].definisjon] })\n    : '';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.MANUELL_VURDERING_AV_OMSORGSVILKARET,\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst VILKAR_KODER = [VilkarType.OMSORGSVILKARET];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n}\n\nconst OmsorgInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"OMSORG\"\n      hentInngangsvilkarPanelTekst={data => hentAksjonspunktTekst(intl, data.aksjonspunkter)}\n      renderPanel={data => (\n        <>\n          <OmsorgVilkarProsessIndex {...data} />\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n    />\n  );\n};\n\nexport default OmsorgInngangsvilkarInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { AksessRettigheter } from '@navikt/fp-types';\n\nimport FodselInngangsvilkarInitPanel from './inngangsvilkarPaneler/FodselInngangsvilkarInitPanel';\nimport AdopsjonInngangsvilkarInitPanel from './inngangsvilkarPaneler/AdopsjonInngangsvilkarInitPanel';\nimport MedlemskapInngangsvilkarInitPanel from '../../fellesPaneler/prosess/inngangsvilkarPaneler/MedlemskapInngangsvilkarInitPanel';\nimport ForeldreansvarInngangsvilkarInitPanel from '../../fellesPaneler/prosess/inngangsvilkarPaneler/ForeldreansvarInngangsvilkarInitPanel';\nimport OmsorgInngangsvilkarInitPanel from './inngangsvilkarPaneler/OmsorgInngangsvilkarInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport InngangsvilkarDefaultInitWrapper from '../../felles/prosess/InngangsvilkarDefaultInitWrapper';\nimport InngangsvilkarPanelInitProps from '../../felles/typer/inngangsvilkarPanelInitProps';\n\ninterface OwnProps {\n  apentFaktaPanelInfo?: { urlCode: string; text: string };\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  rettigheter: AksessRettigheter;\n}\n\nconst InngangsvilkarEsProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  behandling,\n  valgtProsessSteg,\n  registrerProsessPanel,\n  apentFaktaPanelInfo,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  rettigheter,\n}) => {\n  const leftPanels = useCallback(\n    (props: InngangsvilkarPanelInitProps) => (\n      <>\n        <FodselInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} rettigheter={rettigheter} {...props} />\n        <AdopsjonInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} rettigheter={rettigheter} {...props} />\n        <OmsorgInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} {...props} />\n        <MedlemskapInngangsvilkarInitPanel\n          behandlingVersjon={behandling.versjon}\n          rettigheter={rettigheter}\n          {...props}\n        />\n        <ForeldreansvarInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} {...props} />\n      </>\n    ),\n    [behandling.versjon, rettigheter],\n  );\n\n  return (\n    <InngangsvilkarDefaultInitWrapper\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      registrerProsessPanel={registrerProsessPanel}\n      apentFaktaPanelInfo={apentFaktaPanelInfo}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      leftPanels={leftPanels}\n    />\n  );\n};\n\nexport default InngangsvilkarEsProsessStegInitPanel;\n","import React, { FunctionComponent, useState, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, Detail, Heading } from '@navikt/ds-react';\n\nimport { Aksjonspunkt, BeregningsresultatEs } from '@navikt/fp-types';\nimport { VerticalSpacer, OverstyringKnapp, FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport { hasValidInteger, maxValue, minValue, required } from '@navikt/ft-form-validators';\nimport { formatCurrencyWithKr, decodeHtmlEntity } from '@navikt/ft-utils';\nimport { InputField, Form } from '@navikt/ft-form-hooks';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OverstyringPanel } from '@navikt/fp-prosess-felles';\nimport { OverstyringBeregningAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './beregningsresultatEngangsstonadForm.module.css';\n\nconst minValue1 = minValue(1);\nconst maxValue500000 = maxValue(500000);\n\ntype FormValues = {\n  beregnetTilkjentYtelse?: number;\n  begrunnelse?: string;\n};\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  behandlingResultatstruktur?: BeregningsresultatEs,\n): FormValues => {\n  const aksjonspunkt = aksjonspunkter.find(ap => ap.definisjon === AksjonspunktCode.OVERSTYR_BEREGNING);\n  return {\n    begrunnelse: decodeHtmlEntity(aksjonspunkt && aksjonspunkt.begrunnelse ? aksjonspunkt.begrunnelse : ''),\n    beregnetTilkjentYtelse: behandlingResultatstruktur?.beregnetTilkjentYtelse,\n  };\n};\n\nconst transformValues = (values: FormValues): OverstyringBeregningAp => ({\n  kode: AksjonspunktCode.OVERSTYR_BEREGNING,\n  beregnetTilkjentYtelse: values.beregnetTilkjentYtelse!,\n  begrunnelse: values.begrunnelse,\n});\n\ninterface OwnProps {\n  overrideReadOnly: boolean;\n  kanOverstyre: boolean;\n  toggleOverstyring: (fn: (oldArray: []) => void) => void;\n  behandlingResultatstruktur?: BeregningsresultatEs;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: OverstyringBeregningAp) => Promise<void>;\n  erIkkeGodkjentAvBeslutter: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * BeregningsresultatEngangsstonadForm\n *\n * Viser beregnet engangsstønad. Resultatet kan overstyres av Nav-ansatt med overstyr-rettighet.\n */\nconst BeregningsresultatEngangsstonadForm: FunctionComponent<OwnProps> = ({\n  overrideReadOnly,\n  kanOverstyre,\n  toggleOverstyring,\n  behandlingResultatstruktur,\n  aksjonspunkter,\n  erIkkeGodkjentAvBeslutter,\n  formData,\n  setFormData,\n  submitCallback,\n}) => {\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(aksjonspunkter, behandlingResultatstruktur),\n  });\n\n  const [erIOverstyringsmodus, toggleOverstyringsmodus] = useState(false);\n  const toggleAv = useCallback(() => {\n    toggleOverstyringsmodus(false);\n    formMethods.reset();\n    toggleOverstyring(oldArray => oldArray.filter(code => code !== AksjonspunktCode.OVERSTYR_BEREGNING));\n  }, []);\n  const togglePa = useCallback(() => {\n    toggleOverstyringsmodus(true);\n    toggleOverstyring(oldArray => [...oldArray, AksjonspunktCode.OVERSTYR_BEREGNING]);\n  }, []);\n\n  const harOverstyringAksjonspunkt =\n    aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.OVERSTYR_BEREGNING) || false;\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn>\n            <Heading size=\"small\">\n              <FormattedMessage id=\"BeregningEngangsstonadForm.Beregning\" />\n            </Heading>\n          </FlexColumn>\n          {(kanOverstyre || overrideReadOnly) && (\n            <FlexColumn>\n              <OverstyringKnapp onClick={togglePa} erOverstyrt={erIOverstyringsmodus || !kanOverstyre} />\n            </FlexColumn>\n          )}\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer eightPx />\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn className={styles.firstColWidth}>\n            <Detail>\n              <FormattedMessage id=\"BeregningEngangsstonadForm.Sats\" />\n            </Detail>\n          </FlexColumn>\n          <FlexColumn>\n            <Label size=\"small\">\n              {behandlingResultatstruktur?.satsVerdi ? formatCurrencyWithKr(behandlingResultatstruktur.satsVerdi) : '-'}\n            </Label>\n          </FlexColumn>\n        </FlexRow>\n        <FlexRow>\n          <FlexColumn className={styles.firstColWidth}>\n            <Detail>\n              <FormattedMessage id=\"BeregningEngangsstonadForm.AntallBarn\" />\n            </Detail>\n          </FlexColumn>\n          <FlexColumn>\n            <Label size=\"small\">\n              {behandlingResultatstruktur?.antallBarn ? behandlingResultatstruktur.antallBarn : '-'}\n            </Label>\n          </FlexColumn>\n        </FlexRow>\n        {!erIOverstyringsmodus && !harOverstyringAksjonspunkt && (\n          <>\n            <FlexRow>\n              <FlexColumn className={styles.dividerWidth}>\n                <hr className={styles.divider} />\n              </FlexColumn>\n            </FlexRow>\n            <FlexRow>\n              <FlexColumn className={styles.firstColWidth}>\n                <Detail>\n                  <FormattedMessage id=\"BeregningEngangsstonadForm.BeregnetEngangsstonad\" />\n                </Detail>\n              </FlexColumn>\n              <FlexColumn>\n                <Label size=\"small\">\n                  {behandlingResultatstruktur?.beregnetTilkjentYtelse\n                    ? formatCurrencyWithKr(behandlingResultatstruktur.beregnetTilkjentYtelse)\n                    : '-'}\n                </Label>\n              </FlexColumn>\n            </FlexRow>\n          </>\n        )}\n      </FlexContainer>\n      {(erIOverstyringsmodus || harOverstyringAksjonspunkt) && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <OverstyringPanel\n            erOverstyrt={erIOverstyringsmodus}\n            isSolvable\n            erVilkarOk\n            hasAksjonspunkt={harOverstyringAksjonspunkt}\n            overrideReadOnly={overrideReadOnly}\n            isSubmitting={formMethods.formState.isSubmitting}\n            isPristine={!formMethods.formState.isDirty}\n            toggleAv={toggleAv}\n            erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n          >\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Label size=\"small\" className={!erIOverstyringsmodus || overrideReadOnly ? '' : styles.text}>\n                    <FormattedMessage id=\"BeregningEngangsstonadForm.BeregnetEngangsstonad\" />\n                  </Label>\n                </FlexColumn>\n                <FlexColumn>\n                  <InputField\n                    name=\"beregnetTilkjentYtelse\"\n                    parse={value => {\n                      // @ts-ignore Fiks\n                      const parsedValue = parseInt(value, 10);\n                      return Number.isNaN(parsedValue) ? value : parsedValue;\n                    }}\n                    className={styles.bredde}\n                    validate={[required, hasValidInteger, minValue1, maxValue500000]}\n                    readOnly={!erIOverstyringsmodus || overrideReadOnly}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <Label size=\"small\" className={!erIOverstyringsmodus || overrideReadOnly ? '' : styles.text}>\n                    <FormattedMessage id=\"BeregningEngangsstonadForm.Kroner\" />\n                  </Label>\n                </FlexColumn>\n              </FlexRow>\n            </FlexContainer>\n            <VerticalSpacer sixteenPx />\n          </OverstyringPanel>\n        </>\n      )}\n    </Form>\n  );\n};\n\nBeregningsresultatEngangsstonadForm.defaultProps = {\n  behandlingResultatstruktur: {\n    beregnetTilkjentYtelse: 0,\n    antallBarn: 0,\n    satsVerdi: 0,\n  },\n};\n\nexport default BeregningsresultatEngangsstonadForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { BeregningsresultatEs, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport BeregningsresultatEngangsstonadForm from './components/BeregningsresultatEngangsstonadForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  beregningresultatEngangsstonad: BeregningsresultatEs;\n  overrideReadOnly: boolean;\n  kanOverstyreAccess: {\n    isEnabled: boolean;\n  };\n  toggleOverstyring: (fn: (oldArray: []) => void) => void;\n}\n\nconst BeregningsresultatProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  beregningresultatEngangsstonad,\n  aksjonspunkter,\n  overrideReadOnly,\n  submitCallback,\n  kanOverstyreAccess,\n  toggleOverstyring,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <BeregningsresultatEngangsstonadForm\n      behandlingResultatstruktur={beregningresultatEngangsstonad}\n      aksjonspunkter={aksjonspunkter}\n      overrideReadOnly={overrideReadOnly}\n      submitCallback={submitCallback}\n      kanOverstyre={kanOverstyreAccess.isEnabled}\n      toggleOverstyring={toggleOverstyring}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default BeregningsresultatProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { vilkarUtfallType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { BeregningsresultatProsessIndex } from '@navikt/fp-prosess-beregningsresultat';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { AksessRettigheter, BeregningsresultatEs } from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, requestBehandlingApi } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.OVERSTYR_BEREGNING];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.BEREGNINGRESULTAT_ENGANGSSTONAD];\ntype EndepunktPanelData = {\n  beregningresultatEngangsstonad: BeregningsresultatEs;\n};\n\ninterface OwnProps {\n  rettigheter: AksessRettigheter;\n}\n\nconst BeregningEsProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  rettigheter,\n  ...props\n}) => {\n  const [erOverstyrt, setOverstyrt] = useState(false);\n  const toggleOverstyring = useCallback(() => setOverstyrt(!erOverstyrt), [erOverstyrt]);\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.BEREGNING}\n      prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.Beregning' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={() =>\n        requestBehandlingApi.hasPath(BehandlingApiKeys.BEREGNINGRESULTAT_ENGANGSSTONAD.name)\n          ? vilkarUtfallType.OPPFYLT\n          : vilkarUtfallType.IKKE_VURDERT\n      }\n      erOverstyrt={erOverstyrt}\n      renderPanel={data => (\n        <BeregningsresultatProsessIndex\n          overrideReadOnly={data.isReadOnly}\n          kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n          toggleOverstyring={toggleOverstyring}\n          {...data}\n        />\n      )}\n    />\n  );\n};\n\nexport default BeregningEsProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  isAvslag,\n  fagsakYtelseType,\n  AksjonspunktCode,\n  vilkarUtfallType,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { VedtakProsessIndex, ForhandsvisData } from '@navikt/fp-prosess-vedtak';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  Aksjonspunkt,\n  Behandling,\n  Behandlingsresultat,\n  BeregningsresultatEs,\n  Fagsak,\n  ForhåndsvisMeldingParams,\n  Medlemskap,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  Vilkar,\n} from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport IverksetterVedtakStatusModal from '../../felles/modaler/vedtak/IverksetterVedtakStatusModal';\nimport FatterVedtakStatusModal from '../../felles/modaler/vedtak/FatterVedtakStatusModal';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst hasOnlyClosedAps = (aksjonspunkter: Aksjonspunkt[], vedtakAksjonspunkter: Aksjonspunkt[]): boolean =>\n  aksjonspunkter\n    .filter(ap => !vedtakAksjonspunkter.some(vap => vap.definisjon === ap.definisjon))\n    .every(ap => ap.status !== aksjonspunktStatus.OPPRETTET);\n\nconst hasAksjonspunkt = (ap: Aksjonspunkt): boolean =>\n  ap.definisjon === AksjonspunktCode.OVERSTYR_BEREGNING ||\n  ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG ||\n  ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG ||\n  ap.definisjon === AksjonspunktCode.VURDER_SOKNADSFRIST_FORELDREPENGER;\n\nconst isAksjonspunktOpenAndOfType = (ap: Aksjonspunkt): boolean =>\n  hasAksjonspunkt(ap) && ap.status === aksjonspunktStatus.OPPRETTET;\n\nconst findStatusForVedtak = (\n  vilkar: Vilkar[],\n  aksjonspunkter: Aksjonspunkt[],\n  vedtakAksjonspunkter: Aksjonspunkt[],\n  behandlingsresultat?: Behandlingsresultat,\n): string => {\n  if (vilkar.length === 0) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (\n    hasOnlyClosedAps(aksjonspunkter, vedtakAksjonspunkter) &&\n    vilkar.some(v => v.vilkarStatus === vilkarUtfallType.IKKE_OPPFYLT)\n  ) {\n    return vilkarUtfallType.IKKE_OPPFYLT;\n  }\n\n  if (\n    vilkar.some(v => v.vilkarStatus === vilkarUtfallType.IKKE_VURDERT) ||\n    aksjonspunkter.some(isAksjonspunktOpenAndOfType)\n  ) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (!hasOnlyClosedAps(aksjonspunkter, vedtakAksjonspunkter)) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (behandlingsresultat && isAvslag(behandlingsresultat.type)) {\n    return vilkarUtfallType.IKKE_OPPFYLT;\n  }\n  return vilkarUtfallType.OPPFYLT;\n};\n\nconst getForhandsvisCallback =\n  (\n    forhandsvisMelding: (params: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<unknown>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: ForhandsvisData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FATTER_VEDTAK,\n  AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n  AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n  AksjonspunktCode.VURDERE_ANNEN_YTELSE,\n  AksjonspunktCode.VURDERE_DOKUMENT,\n  AksjonspunktCode.KONTROLLER_REVURDERINGSBEHANDLING_VARSEL_VED_UGUNST,\n  AksjonspunktCode.KONTROLL_AV_MAUNELT_OPPRETTET_REVURDERINGSBEHANDLING,\n];\n\nconst getLagringSideeffekter =\n  (\n    toggleIverksetterVedtakModal: (visIverksetterModal: boolean) => void,\n    toggleFatterVedtakModal: (skalFatterModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n  ) =>\n  (aksjonspunktModels: { kode: string; skalBrukeOverstyrendeFritekstBrev: boolean }[]) => {\n    setSkalOppdatereEtterBekreftelseAvAp(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      const skalTilTotrinnskontroll = aksjonspunktModels.some(\n        ap => ap.kode === AksjonspunktCode.FORESLA_VEDTAK || ap.skalBrukeOverstyrendeFritekstBrev,\n      );\n      if (skalTilTotrinnskontroll) {\n        toggleFatterVedtakModal(true);\n      } else {\n        toggleIverksetterVedtakModal(true);\n      }\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [...IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER, AksjonspunktCode.FORESLA_VEDTAK];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.TILBAKEKREVINGVALG,\n  BehandlingApiKeys.BEREGNINGSRESULTAT_DAGYTELSE_ORIGINAL_BEHANDLING,\n  BehandlingApiKeys.MEDLEMSKAP,\n  BehandlingApiKeys.SIMULERING_RESULTAT,\n  BehandlingApiKeys.BEREGNINGRESULTAT_ENGANGSSTONAD,\n];\ntype EndepunktPanelData = {\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  beregningsresultatOriginalBehandling?: {\n    'beregningsresultat-engangsstonad'?: BeregningsresultatEs;\n  };\n  medlemskap: Medlemskap;\n  simuleringResultat: SimuleringResultat;\n  beregningresultatEngangsstonad?: BeregningsresultatEs;\n};\n\ninterface OwnProps {\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  fagsak: Fagsak;\n  opneSokeside: () => void;\n}\n\nconst VedtakEsProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  setSkalOppdatereEtterBekreftelseAvAp,\n  fagsak,\n  opneSokeside,\n  ...props\n}) => {\n  const intl = useIntl();\n\n  const [visIverksetterVedtakModal, toggleIverksetterVedtakModal] = useState(false);\n  const [visFatterVedtakModal, toggleFatterVedtakModal] = useState(false);\n  const lagringSideEffekter = getLagringSideeffekter(\n    toggleIverksetterVedtakModal,\n    toggleFatterVedtakModal,\n    setSkalOppdatereEtterBekreftelseAvAp,\n  );\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    getForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const lukkIverksetterModal = useCallback(() => {\n    toggleIverksetterVedtakModal(false);\n    opneSokeside();\n  }, []);\n  const lukkFatterModal = useCallback(() => {\n    toggleFatterVedtakModal(false);\n    opneSokeside();\n  }, []);\n\n  const { vilkår } = props.behandling;\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.VEDTAK}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.Vedtak' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={standardData =>\n        findStatusForVedtak(\n          vilkår || [],\n          props.behandling.aksjonspunkt || [],\n          standardData.aksjonspunkter,\n          standardData.behandling.behandlingsresultat,\n        )\n      }\n      lagringSideEffekter={lagringSideEffekter}\n      hentSkalMarkeresSomAktiv={standardData =>\n        !standardData.behandling.behandlingHenlagt &&\n        findStatusForVedtak(\n          vilkår || [],\n          props.behandling.aksjonspunkt || [],\n          standardData.aksjonspunkter,\n          standardData.behandling.behandlingsresultat,\n        ) !== vilkarUtfallType.IKKE_VURDERT\n      }\n      renderPanel={data => (\n        <>\n          <IverksetterVedtakStatusModal\n            visModal={visIverksetterVedtakModal}\n            lukkModal={lukkIverksetterModal}\n            behandlingsresultat={data.behandling.behandlingsresultat}\n          />\n          <FatterVedtakStatusModal\n            visModal={visFatterVedtakModal}\n            lukkModal={lukkFatterModal}\n            tekst={intl.formatMessage({ id: 'FatterVedtakStatusModal.SendtBeslutter' })}\n          />\n          <VedtakProsessIndex\n            ytelseTypeKode={fagsakYtelseType.ENGANGSSTONAD}\n            previewCallback={previewCallback}\n            {...data}\n            aksjonspunkter={props.behandling.aksjonspunkt}\n            vilkar={vilkår}\n          />\n        </>\n      )}\n    />\n  );\n};\n\nexport default VedtakEsProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport moment from 'moment';\nimport { Detail, Heading, Panel, BodyShort } from '@navikt/ds-react';\n\nimport { Form, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport {\n  KodeverkType,\n  soknadType,\n  vilkarUtfallType,\n  getKodeverknavnFn,\n  AksjonspunktCode,\n  aksjonspunktStatus,\n  VilkarType,\n} from '@navikt/fp-kodeverk';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { required } from '@navikt/ft-form-validators';\nimport { DateLabel, FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { Aksjonspunkt, AlleKodeverk, Behandling, FamilieHendelse, Soknad } from '@navikt/fp-types';\nimport { SoknadsfristAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './erSoknadsfristVilkaretOppfyltForm.module.css';\n\nconst findRadioButtonTextCode = (erVilkarOk?: boolean): string =>\n  erVilkarOk\n    ? 'ErSoknadsfristVilkaretOppfyltForm.VilkarOppfylt'\n    : 'ErSoknadsfristVilkaretOppfyltForm.VilkarIkkeOppfylt';\n\nconst findSoknadsfristDate = (mottattDato: string, antallDagerSoknadLevertForSent?: number): string =>\n  moment(mottattDato).subtract(antallDagerSoknadLevertForSent, 'days').format(ISO_DATE_FORMAT);\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  begrunnelse?: string;\n};\n\nconst findTextCode = (soknad: Soknad, familiehendelse: FamilieHendelse): string => {\n  if (soknad.soknadType === soknadType.FODSEL) {\n    const soknadFodselsdato = soknad.fodselsdatoer ? Object.values(soknad.fodselsdatoer)[0] : undefined;\n    const fodselsdato =\n      familiehendelse && familiehendelse.avklartBarn && familiehendelse.avklartBarn.length > 0\n        ? familiehendelse.avklartBarn[0].fodselsdato\n        : soknadFodselsdato;\n    return fodselsdato\n      ? 'ErSoknadsfristVilkaretOppfyltForm.Fodselsdato'\n      : 'ErSoknadsfristVilkaretOppfyltForm.Termindato';\n  }\n  return 'ErSoknadsfristVilkaretOppfyltForm.Omsorgsovertakelsesdato';\n};\n\nconst findDate = (soknad: Soknad, familiehendelse: FamilieHendelse): string | undefined => {\n  if (soknad.soknadType === soknadType.FODSEL) {\n    const soknadFodselsdato = soknad.fodselsdatoer ? Object.values(soknad.fodselsdatoer)[0] : undefined;\n    const fodselsdato =\n      familiehendelse && familiehendelse.avklartBarn && familiehendelse.avklartBarn.length > 0\n        ? familiehendelse.avklartBarn[0].fodselsdato\n        : soknadFodselsdato;\n    const termindato = familiehendelse && familiehendelse.termindato ? familiehendelse.termindato : soknad.termindato;\n    return fodselsdato || termindato;\n  }\n  return familiehendelse && familiehendelse.omsorgsovertakelseDato\n    ? familiehendelse.omsorgsovertakelseDato\n    : soknad.omsorgsovertakelseDato;\n};\n\nexport const buildInitialValues = (aksjonspunkter: Aksjonspunkt[], status: string): FormValues => ({\n  erVilkarOk:\n    aksjonspunkter[0].status === aksjonspunktStatus.OPPRETTET ? undefined : vilkarUtfallType.OPPFYLT === status,\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n});\n\nconst transformValues = (values: FormValues): SoknadsfristAp => ({\n  erVilkarOk: values.erVilkarOk || false,\n  kode: AksjonspunktCode.SOKNADSFRISTVILKARET,\n  ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n});\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  soknad: Soknad;\n  gjeldendeFamiliehendelse: FamilieHendelse;\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  submitCallback: (aksjonspunktData: SoknadsfristAp) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  alleKodeverk: AlleKodeverk;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * ErSoknadsfristVilkaretOppfyltForm\n *\n * Setter opp aksjonspunktet for vurdering av søknadsfristvilkåret.\n */\nconst ErSoknadsfristVilkaretOppfyltForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  readOnlySubmitButton,\n  soknad,\n  gjeldendeFamiliehendelse,\n  behandlingsresultat,\n  alleKodeverk,\n  aksjonspunkter,\n  status,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const initialValues = useMemo(() => buildInitialValues(aksjonspunkter, status), [aksjonspunkter, status]);\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n  const dato = useMemo(() => findDate(soknad, gjeldendeFamiliehendelse), [soknad, gjeldendeFamiliehendelse]);\n  const textCode = useMemo(() => findTextCode(soknad, gjeldendeFamiliehendelse), [soknad, gjeldendeFamiliehendelse]);\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  const erVilkarOk = formMethods.watch('erVilkarOk');\n\n  const antallDagerSoknadLevertForSent = soknad?.søknadsfrist?.dagerOversittetFrist;\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">{intl.formatMessage({ id: 'ErSoknadsfristVilkaretOppfyltForm.Soknadsfrist' })}</Heading>\n      <span className=\"typo-normal\">\n        <FormattedMessage id=\"ErSoknadsfristVilkaretOppfyltForm.ApplicationReceivedPart1\" />\n        <span className={styles.days}>\n          <FormattedMessage\n            id=\"ErSoknadsfristVilkaretOppfyltForm.ApplicationReceivedPart2\"\n            values={{ numberOfDays: antallDagerSoknadLevertForSent }}\n          />\n        </span>\n        <FormattedMessage id=\"ErSoknadsfristVilkaretOppfyltForm.ApplicationReceivedPart3\" />\n        {soknad.mottattDato && antallDagerSoknadLevertForSent && (\n          <DateLabel dateString={findSoknadsfristDate(soknad.mottattDato, antallDagerSoknadLevertForSent)} />\n        )}\n      </span>\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn className={styles.col}>\n            <Panel className={styles.panel}>\n              <Heading size=\"small\">{intl.formatMessage({ id: 'ErSoknadsfristVilkaretOppfyltForm.Consider' })}</Heading>\n              <ul className={styles.hyphen}>\n                <li>\n                  <FormattedMessage id=\"ErSoknadsfristVilkaretOppfyltForm.Question1\" />\n                </li>\n                <li>\n                  <FormattedMessage id=\"ErSoknadsfristVilkaretOppfyltForm.Question2\" />\n                </li>\n                <li>\n                  <FormattedMessage id=\"ErSoknadsfristVilkaretOppfyltForm.Question3\" />\n                </li>\n              </ul>\n            </Panel>\n          </FlexColumn>\n          <FlexColumn className={styles.col}>\n            <Panel className={styles.panelDates}>\n              <FlexContainer>\n                <FlexRow>\n                  <FlexColumn className={styles.col}>\n                    <Detail>{intl.formatMessage({ id: 'ErSoknadsfristVilkaretOppfyltForm.MottattDato' })}</Detail>\n                    <span className=\"typo-normal\">\n                      {soknad.mottattDato && <DateLabel dateString={soknad.mottattDato} />}\n                    </span>\n                  </FlexColumn>\n                  <FlexColumn className={styles.col}>\n                    {textCode && <Detail>{intl.formatMessage({ id: textCode })}</Detail>}\n                    <span className=\"typo-normal\">{dato && <DateLabel dateString={dato} />}</span>\n                  </FlexColumn>\n                </FlexRow>\n                <VerticalSpacer twentyPx />\n                <Detail>\n                  {intl.formatMessage({ id: 'ErSoknadsfristVilkaretOppfyltForm.ExplanationFromApplication' })}\n                </Detail>\n                <span className=\"typo-normal\">{soknad.begrunnelseForSenInnsending || '-'}</span>\n              </FlexContainer>\n            </Panel>\n          </FlexColumn>\n        </FlexRow>\n        <VerticalSpacer sixteenPx />\n        <FlexRow>\n          <FlexColumn className={styles.col}>\n            <RadioGroupPanel\n              name=\"erVilkarOk\"\n              validate={[required]}\n              isReadOnly={readOnly}\n              isHorizontal\n              isTrueOrFalseSelection\n              radios={[\n                {\n                  value: 'true',\n                  label: <FormattedMessage id={findRadioButtonTextCode(true)} values={{ b: bTag }} />,\n                },\n                {\n                  value: 'false',\n                  label: <FormattedMessage id={findRadioButtonTextCode(false)} values={{ b: bTag }} />,\n                },\n              ]}\n            />\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      {readOnly && erVilkarOk === false && !!behandlingsresultat?.avslagsarsak && (\n        <BodyShort size=\"small\">\n          {getKodeverknavn(behandlingsresultat.avslagsarsak, KodeverkType.AVSLAGSARSAK, VilkarType.SOKNADFRISTVILKARET)}\n        </BodyShort>\n      )}\n      <VerticalSpacer sixteenPx />\n      <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n      <VerticalSpacer sixteenPx />\n      <ProsessStegSubmitButtonNew\n        isReadOnly={readOnly}\n        isSubmittable={!readOnlySubmitButton}\n        isSubmitting={formMethods.formState.isSubmitting}\n        isDirty={formMethods.formState.isDirty}\n      />\n    </Form>\n  );\n};\n\nexport default ErSoknadsfristVilkaretOppfyltForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { FamilieHendelseSamling, Soknad, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport ErSoknadsfristVilkaretOppfyltForm from './components/ErSoknadsfristVilkaretOppfyltForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  soknad: Soknad;\n  familiehendelse: FamilieHendelseSamling;\n}\n\nconst SoknadsfristVilkarProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  soknad,\n  familiehendelse,\n  aksjonspunkter,\n  status,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <ErSoknadsfristVilkaretOppfyltForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      soknad={soknad}\n      gjeldendeFamiliehendelse={familiehendelse.gjeldende}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      alleKodeverk={alleKodeverk}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default SoknadsfristVilkarProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { SoknadsfristVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-soknadsfrist';\nimport { AksjonspunktCode, VilkarType } from '@navikt/fp-kodeverk';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { AksessRettigheter, FamilieHendelseSamling, Soknad } from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport OverstyringPanelDef from '../../felles/prosess/OverstyringPanelDef';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport skalViseProsessPanel from '../../felles/prosess/skalViseProsessPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.SOKNADSFRISTVILKARET, AksjonspunktCode.OVERSTYR_SOKNADSFRISTVILKAR];\n\nconst VILKAR_KODER = [VilkarType.SOKNADFRISTVILKARET];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.SOKNAD, BehandlingApiKeys.FAMILIEHENDELSE];\ntype EndepunktPanelData = {\n  soknad: Soknad;\n  familiehendelse: FamilieHendelseSamling;\n};\n\ninterface OwnProps {\n  rettigheter: AksessRettigheter;\n}\n\nconst SoknadsfristEsProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  const [erOverstyrt, setOverstyrt] = useState(false);\n  const toggleOverstyring = useCallback(() => setOverstyrt(!erOverstyrt), [erOverstyrt]);\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      prosessPanelKode={ProsessStegCode.SOEKNADSFRIST}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.Soknadsfristvilkaret' })}\n      skalPanelVisesIMeny={data => skalViseProsessPanel(data?.aksjonspunkter, VILKAR_KODER, data?.vilkar)}\n      erOverstyrt={erOverstyrt}\n      renderPanel={data => {\n        const harSoknadsfristAp = data.aksjonspunkter.some(\n          ap => ap.definisjon === AksjonspunktCode.SOKNADSFRISTVILKARET,\n        );\n        return (\n          <>\n            {!harSoknadsfristAp && (\n              <OverstyringPanelDef\n                aksjonspunkter={data?.aksjonspunkter}\n                aksjonspunktKode={AksjonspunktCode.OVERSTYR_SOKNADSFRISTVILKAR}\n                vilkar={data.vilkar}\n                vilkarKoder={VILKAR_KODER}\n                panelTekstKode=\"Behandlingspunkt.Soknadsfristvilkaret\"\n                erMedlemskapsPanel={false}\n                toggleOverstyring={toggleOverstyring}\n                erOverstyrt={erOverstyrt}\n                overrideReadOnly={data.isReadOnly}\n                kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n              />\n            )}\n            {harSoknadsfristAp && <SoknadsfristVilkarProsessIndex {...data} />}\n          </>\n        );\n      }}\n    />\n  );\n};\n\nexport default SoknadsfristEsProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { AksessRettigheter, ArbeidsgiverOpplysningerPerId, Behandling, Fagsak, Personoversikt } from '@navikt/fp-types';\n\nimport BehandlingContainer from '../felles/BehandlingContainer';\nimport SakenFaktaInitPanel from '../fellesPaneler/fakta/SakenFaktaInitPanel';\nimport YtelserFaktaInitPanel from '../fellesPaneler/fakta/YtelserFaktaInitPanel';\nimport VergeFaktaInitPanel from '../fellesPaneler/fakta/VergeFaktaInitPanel';\nimport OmsorgvilkaretFaktaInitPanel from '../fellesPaneler/fakta/OmsorgvilkaretFaktaInitPanel';\nimport AdopsjonsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/AdopsjonsvilkaretFaktaInitPanel';\nimport FodselvilkaretFaktaInitPanel from '../fellesPaneler/fakta/FodselvilkaretFaktaInitPanel';\nimport MedlemskapsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/MedlemskapsvilkaretFaktaInitPanel';\nimport VarselProsessStegInitPanel from '../fellesPaneler/prosess/VarselProsessStegInitPanel';\nimport InngangsvilkarProsessStegInitPanel from './prosessPaneler/InngangsvilkarEsProsessStegInitPanel';\nimport OpplysningspliktProsessStegInitPanel from '../fellesPaneler/prosess/OpplysningspliktProsessStegInitPanel';\nimport BeregningEsProsessStegInitPanel from './prosessPaneler/BeregningEsProsessStegInitPanel';\nimport SimuleringProsessStegInitPanel from '../fellesPaneler/prosess/SimuleringProsessStegInitPanel';\nimport VedtakEsProsessStegInitPanel from './prosessPaneler/VedtakEsProsessStegInitPanel';\nimport SoknadsfristEsProsessStegInitPanel from './prosessPaneler/SoknadsfristEsProsessStegInitPanel';\nimport FaktaPanelInitProps from '../felles/typer/faktaPanelInitProps';\nimport ProsessPanelInitProps, { ProsessPanelExtraInitProps } from '../felles/typer/prosessPanelInitProps';\n\ninterface OwnProps {\n  behandling: Behandling;\n  fagsak: Fagsak;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  opneSokeside: () => void;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  arbeidsgivere: ArbeidsgiverOpplysningerPerId;\n  personoversikt: Personoversikt;\n  rettigheter: AksessRettigheter;\n}\n\nconst EngangsstonadPaneler: FunctionComponent<OwnProps> = ({\n  behandling,\n  fagsak,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  opneSokeside,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  arbeidsgivere,\n  personoversikt,\n  rettigheter,\n}) => {\n  const faktaPaneler = useCallback(\n    (props: FaktaPanelInitProps) => (\n      <>\n        <SakenFaktaInitPanel {...props} fagsak={fagsak} />\n        <YtelserFaktaInitPanel {...props} />\n        <VergeFaktaInitPanel {...props} />\n        <OmsorgvilkaretFaktaInitPanel {...props} personoversikt={personoversikt} />\n        <AdopsjonsvilkaretFaktaInitPanel {...props} fagsak={fagsak} />\n        <FodselvilkaretFaktaInitPanel {...props} />\n        <MedlemskapsvilkaretFaktaInitPanel {...props} />\n      </>\n    ),\n    [personoversikt, fagsak],\n  );\n  const emptyArbeidsgiverOpplysningerPerId = {\n  };\n\n  const prosessPaneler = useCallback(\n    (props: ProsessPanelInitProps, ekstraProps: ProsessPanelExtraInitProps) => (\n      <>\n        <VarselProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n        <OpplysningspliktProsessStegInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <InngangsvilkarProsessStegInitPanel\n          {...props}\n          rettigheter={rettigheter}\n          oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n          apentFaktaPanelInfo={ekstraProps.apentFaktaPanelInfo}\n        />\n        <SoknadsfristEsProsessStegInitPanel {...props} rettigheter={rettigheter} />\n        <BeregningEsProsessStegInitPanel {...props} rettigheter={rettigheter} />\n        <SimuleringProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          menyData={ekstraProps.allMenyData}\n          arbeidsgiverOpplysningerPerId={emptyArbeidsgiverOpplysningerPerId}\n        />\n        <VedtakEsProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n      </>\n    ),\n    [\n      fagsak,\n      opneSokeside,\n      setSkalOppdatereEtterBekreftelseAvAp,\n      arbeidsgivere,\n      rettigheter,\n      oppdaterProsessStegOgFaktaPanelIUrl,\n    ],\n  );\n\n  return (\n    <BehandlingContainer\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      valgtFaktaSteg={valgtFaktaSteg}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      hentFaktaPaneler={faktaPaneler}\n      hentProsessPaneler={prosessPaneler}\n    />\n  );\n};\n\nexport default EngangsstonadPaneler;\n"],"names":["AKSJONSPUNKT_TEKST_PER_KODE","AksjonspunktCode","hentAksjonspunktTekst","intl","aksjonspunkter","AKSJONSPUNKT_KODER","VILKAR_KODER","VilkarType","FodselInngangsvilkarInitPanel","behandlingVersjon","rettigheter","props","useIntl","jsx","InngangsvilkarDefaultInitPanel","data","erOverstyrt","toggleOverstyring","jsxs","Fragment","OverstyringPanelDef","FodselVilkarProsessIndex","fagsakYtelseType","VerticalSpacer","AdopsjonInngangsvilkarInitPanel","AdopsjonVilkarProsessIndex","OmsorgInngangsvilkarInitPanel","OmsorgVilkarProsessIndex","InngangsvilkarEsProsessStegInitPanel","behandling","valgtProsessSteg","registrerProsessPanel","apentFaktaPanelInfo","oppdaterProsessStegOgFaktaPanelIUrl","leftPanels","useCallback","MedlemskapInngangsvilkarInitPanel","ForeldreansvarInngangsvilkarInitPanel","InngangsvilkarDefaultInitWrapper","minValue1","minValue","maxValue500000","maxValue","buildInitialValues","behandlingResultatstruktur","aksjonspunkt","ap","decodeHtmlEntity","transformValues","values","BeregningsresultatEngangsstonadForm","overrideReadOnly","kanOverstyre","erIkkeGodkjentAvBeslutter","formData","setFormData","submitCallback","formMethods","useForm","erIOverstyringsmodus","toggleOverstyringsmodus","useState","toggleAv","oldArray","code","togglePa","harOverstyringAksjonspunkt","Form","FlexContainer","FlexRow","FlexColumn","Heading","FormattedMessage","OverstyringKnapp","styles","Detail","Label","formatCurrencyWithKr","OverstyringPanel","InputField","value","parsedValue","required","hasValidInteger","createIntl","messages","BeregningsresultatProsessIndex","beregningresultatEngangsstonad","kanOverstyreAccess","alleMerknaderFraBeslutter","RawIntlProvider","a","_a","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","BeregningEsProsessStegInitPanel","setOverstyrt","ProsessDefaultInitPanel","ProsessStegCode","requestBehandlingApi","vilkarUtfallType","hasOnlyClosedAps","vedtakAksjonspunkter","vap","aksjonspunktStatus","hasAksjonspunkt","isAksjonspunktOpenAndOfType","findStatusForVedtak","vilkar","behandlingsresultat","v","isAvslag","getForhandsvisCallback","forhandsvisMelding","fagsak","brevData","response","forhandsvisDokument","IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER","getLagringSideeffekter","toggleIverksetterVedtakModal","toggleFatterVedtakModal","setSkalOppdatereEtterBekreftelseAvAp","aksjonspunktModels","VedtakEsProsessStegInitPanel","opneSokeside","visIverksetterVedtakModal","visFatterVedtakModal","lagringSideEffekter","standardPanelProps","useStandardProsessPanelProps","restBehandlingApiHooks","previewCallback","lukkIverksetterModal","lukkFatterModal","vilkår","standardData","IverksetterVedtakStatusModal","FatterVedtakStatusModal","VedtakProsessIndex","findRadioButtonTextCode","erVilkarOk","findSoknadsfristDate","mottattDato","antallDagerSoknadLevertForSent","moment","ISO_DATE_FORMAT","findTextCode","soknad","familiehendelse","soknadType","soknadFodselsdato","findDate","fodselsdato","termindato","status","ProsessStegBegrunnelseTextFieldNew","ErSoknadsfristVilkaretOppfyltForm","readOnly","readOnlySubmitButton","gjeldendeFamiliehendelse","alleKodeverk","initialValues","useMemo","getKodeverknavn","getKodeverknavnFn","dato","textCode","bTag","chunks","DateLabel","Panel","RadioGroupPanel","BodyShort","KodeverkType","ProsessStegSubmitButtonNew","SoknadsfristVilkarProsessIndex","isReadOnly","SoknadsfristEsProsessStegInitPanel","skalViseProsessPanel","harSoknadsfristAp","EngangsstonadPaneler","valgtFaktaSteg","arbeidsgivere","personoversikt","faktaPaneler","SakenFaktaInitPanel","YtelserFaktaInitPanel","VergeFaktaInitPanel","OmsorgvilkaretFaktaInitPanel","AdopsjonsvilkaretFaktaInitPanel","FodselvilkaretFaktaInitPanel","MedlemskapsvilkaretFaktaInitPanel","emptyArbeidsgiverOpplysningerPerId","prosessPaneler","ekstraProps","VarselProsessStegInitPanel","OpplysningspliktProsessStegInitPanel","InngangsvilkarProsessStegInitPanel","SimuleringProsessStegInitPanel","BehandlingContainer"],"mappings":"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"}