{"version":3,"file":"ForeldrepengerPaneler-90f294bb.js","sources":["../../../../node_modules/@navikt/aksel-icons/dist/react/esm/ChildEyes.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/FileXMark.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/Pause.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/PersonPencil.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/Trash.js","../../../../node_modules/@navikt/ds-react/esm/form/error-summary/ErrorSummaryItem.js","../../../../node_modules/@navikt/ds-react/esm/form/error-summary/ErrorSummary.js","../../../../packages/types/src/dokumentasjonVurderingBehovTsType.ts","../../../../packages/kodeverk/src/periodeResultatType.ts","../../../../packages/kodeverk/src/relasjonsRolleType.ts","../../../../packages/kodeverk/src/stonadskontoType.ts","../../../../packages/kodeverk/src/utsettelseArsakCodes.ts","../../../../packages/kodeverk/src/uttakArbeidType.ts","../../../../packages/fakta-felles/src/utils/validerApKodeOgHentApEnum.ts","../../../../node_modules/dayjs/locale/nb.js","../../../../packages/fakta-besteberegning/src/components/BesteManederVisningPanel.tsx","../../../../packages/fakta-besteberegning/src/components/BesteberegningResultatGrunnlagPanel.tsx","../../../../packages/fakta-besteberegning/src/components/KontrollerBesteberegningPanel.tsx","../../../../packages/fakta-besteberegning/src/components/BesteberegningPanel.tsx","../../../../packages/fakta-besteberegning/src/BesteberegningFaktaIndex.tsx","../../src/behandling/foreldrepenger/faktaPaneler/BesteberegningFaktaInitPanel.tsx","../../../../packages/fakta-omsorg/src/components/OmsorgFaktaForm.tsx","../../../../packages/fakta-omsorg/src/components/Boks.tsx","../../../../packages/fakta-omsorg/src/components/personer/AdresseVisning.tsx","../../../../packages/fakta-omsorg/src/components/personer/AlleBarnPanel.tsx","../../../../packages/fakta-omsorg/src/components/personer/ForelderPanel.tsx","../../../../packages/fakta-omsorg/src/components/OmsorgInfoPanel.tsx","../../../../packages/fakta-omsorg/src/OmsorgFaktaIndex.tsx","../../src/behandling/foreldrepenger/faktaPaneler/OmsorgFaktaInitPanel.tsx","../../../../packages/fakta-uttak/src/kodeverk/fordelingPeriodeKilde.ts","../../../../packages/fakta-uttak/src/components/GraderingOgSamtidigUttakPanel.tsx","../../../../packages/fakta-uttak/src/components/UttakFaktaDetailForm.tsx","../../../../packages/fakta-uttak/src/components/UttakFaktaTable.tsx","../../../../packages/fakta-uttak/src/typer/kontrollerFaktaPeriodeMedApMarkering.ts","../../../../packages/fakta-uttak/src/components/UttakFaktaForm.tsx","../../../../packages/fakta-uttak/src/UttakFaktaIndex.tsx","../../src/behandling/foreldrepenger/faktaPaneler/UttakFaktaInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/inngangsvilkarPaneler/FodselInngangsvilkarFpInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/inngangsvilkarPaneler/AdopsjonInngangsvilkarFpInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/inngangsvilkarPaneler/OpptjeningInngangsvilkarFpInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/inngangsvilkarPaneler/OmsorgInngangsvilkarFpInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/InngangsvilkarFpProsessStegInitPanel.tsx","../../../../packages/prosess-uttak/src/utils/uttakArbeidTypeCodes.ts","../../../../packages/prosess-uttak/src/utils/lagVisningsNavn.tsx","../../../../packages/prosess-uttak/src/components/stonadsdagerOversikt/StonadsdagerTab.tsx","../../../../packages/prosess-uttak/src/components/stonadsdagerOversikt/DisponibleStonadskontoerPanel.tsx","../../../../packages/prosess-uttak/src/components/tidslinje/UttakTidslinje.tsx","../../../../packages/prosess-uttak/src/components/tidslinje/UttakTidslinjeIndex.tsx","../../../../packages/prosess-uttak/src/components/periodeDetaljer/splitt/SplittPeriodeModal.tsx","../../../../packages/prosess-uttak/src/components/periodeDetaljer/UttakAktiviteterTabell.tsx","../../../../packages/prosess-uttak/src/components/periodeDetaljer/UttakPeriodeInfo.tsx","../../../../packages/prosess-uttak/src/components/periodeDetaljer/UttakPeriodeForm.tsx","../../../../packages/prosess-uttak/src/components/periodeDetaljer/UttakPeriodePanel.tsx","../../../../packages/prosess-uttak/src/components/UttakProsessPanel.tsx","../../../../packages/prosess-uttak/src/UttakProsessIndex.tsx","../../src/behandling/foreldrepenger/prosessPaneler/UttakProsessStegInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/TilkjentYtelseFpProsessStegInitPanel.tsx","../../src/behandling/foreldrepenger/prosessPaneler/VedtakFpProsessStegInitPanel.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/Boks.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/personer/AdresseVisning.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/personer/AlleBarnPanel.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/personer/ForelderPanel.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/forms/HarAnnenForelderRettFelter.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/forms/AleneomsorgForm.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/forms/HarAnnenForelderRettForm.tsx","../../../../packages/fakta-omsorg-og-rett/src/components/OmsorgOgRettFaktaForm.tsx","../../../../packages/fakta-omsorg-og-rett/src/OmsorgOgRettFaktaIndex.tsx","../../src/behandling/foreldrepenger/faktaPaneler/OmsorgOgRettFaktaInitPanel.tsx","../../../../packages/fakta-uttaksdokumentasjon/src/components/DelOppPeriodeModal.tsx","../../../../packages/fakta-uttaksdokumentasjon/src/components/UttakDokumentasjonFaktaDetailForm.tsx","../../../../packages/fakta-uttaksdokumentasjon/src/components/UttakDokumentasjonFaktaTable.tsx","../../../../packages/fakta-uttaksdokumentasjon/src/components/UttakDokumentasjonFaktaForm.tsx","../../../../packages/fakta-uttaksdokumentasjon/src/UttakDokumentasjonFaktaIndex.tsx","../../src/behandling/foreldrepenger/faktaPaneler/UttakDokumentasjonFaktaInitPanel.tsx","../../src/behandling/foreldrepenger/ForeldrepengerPaneler.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgChildEyes = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M7.25 8.5a4.75 4.75 0 1 1 9.5 0 4.75 4.75 0 0 1-9.5 0ZM12 2.25a6.25 6.25 0 1 0 0 12.5 6.25 6.25 0 0 0 0-12.5Zm-1.5 5.5a.75.75 0 0 0 0 1.5h.01a.75.75 0 0 0 0-1.5h-.01Zm2.25.75a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 0 1.5h-.01a.75.75 0 0 1-.75-.75Zm-3.402 9.848A3.75 3.75 0 0 1 15.75 21a.75.75 0 0 0 1.5 0 5.25 5.25 0 1 0-10.5 0 .75.75 0 0 0 1.5 0 3.75 3.75 0 0 1 1.098-2.652Z\", fill: \"currentColor\" })));\n});\nexport default SvgChildEyes;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgFileXMark = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M6.75 19.25V4.75h6.5V7.5c0 .69.56 1.25 1.25 1.25h2.75v10.5H6.75Zm9.44-12-1.44-1.44v1.44h1.44Zm-9.69-4c-.69 0-1.25.56-1.25 1.25v15c0 .69.56 1.25 1.25 1.25h11c.69 0 1.25-.56 1.25-1.25V8a.75.75 0 0 0-.22-.53l-4-4a.75.75 0 0 0-.53-.22H6.5Zm7.53 8.72a.75.75 0 0 1 0 1.06l-.97.97.97.97a.75.75 0 1 1-1.06 1.06l-.97-.97-.97.97a.75.75 0 1 1-1.06-1.06l.97-.97-.97-.97a.75.75 0 1 1 1.06-1.06l.97.97.97-.97a.75.75 0 0 1 1.06 0Z\", fill: \"currentColor\" })));\n});\nexport default SvgFileXMark;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgPause = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M7 6.25a.75.75 0 0 0-.75.75v10c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75V7a.75.75 0 0 0-.75-.75H7Zm.75 10v-8.5h1.5v8.5h-1.5Zm6.25-10a.75.75 0 0 0-.75.75v10c0 .414.336.75.75.75h3a.75.75 0 0 0 .75-.75V7a.75.75 0 0 0-.75-.75h-3Zm.75 10v-8.5h1.5v8.5h-1.5Z\", fill: \"currentColor\" })));\n});\nexport default SvgPause;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgPersonPencil = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M12 3.75a3.75 3.75 0 1 0 0 7.5 3.75 3.75 0 0 0 0-7.5ZM6.75 7.5a5.25 5.25 0 1 1 10.5 0 5.25 5.25 0 0 1-10.5 0ZM12 15.75A5.25 5.25 0 0 0 6.75 21a.75.75 0 0 1-1.5 0 6.75 6.75 0 0 1 7.875-6.656.75.75 0 0 1-.25 1.48A5.254 5.254 0 0 0 12 15.75Zm8.53-.28a2.164 2.164 0 0 0-3.06 0l-2.5 2.5a.75.75 0 0 0-.205.383l-.5 2.5a.75.75 0 0 0 .882.882l2.5-.5a.75.75 0 0 0 .383-.205l2.5-2.5a2.164 2.164 0 0 0 0-3.06Zm-2 1.06a.664.664 0 0 1 .94.94l-2.34 2.339-1.174.235.235-1.174 2.34-2.34Z\", fill: \"currentColor\" })));\n});\nexport default SvgPersonPencil;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgTrash = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M8.75 6c0-.69.56-1.25 1.25-1.25h4c.69 0 1.25.56 1.25 1.25v.25h-6.5V6Zm-1.5.25V6A2.75 2.75 0 0 1 10 3.25h4A2.75 2.75 0 0 1 16.75 6v.25h2.75a.75.75 0 0 1 0 1.5h-.805l-.876 11.384a1.75 1.75 0 0 1-1.745 1.616H7.926a1.75 1.75 0 0 1-1.745-1.616L5.305 7.75H4.5a.75.75 0 0 1 0-1.5h2.75Zm-.44 1.5h10.38l-.867 11.27a.25.25 0 0 1-.249.23H7.926a.25.25 0 0 1-.25-.23L6.81 7.75Zm3.19 2a.75.75 0 0 1 .75.75v6a.75.75 0 0 1-1.5 0v-6a.75.75 0 0 1 .75-.75Zm4.75.75a.75.75 0 0 0-1.5 0v6a.75.75 0 0 0 1.5 0v-6Z\", fill: \"currentColor\" })));\n});\nexport default SvgTrash;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\nexport const ErrorSummaryItem = forwardRef((_a, ref) => {\n    var { children, as: Component = \"a\", className } = _a, rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n    return (React.createElement(Component, Object.assign({}, rest, { ref: ref, className: cl(className, \"navds-error-summary__item\", \"navds-link\") }), children));\n});\nexport default ErrorSummaryItem;\n//# sourceMappingURL=ErrorSummaryItem.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\nimport { Heading, BodyShort } from \"../../typography\";\nimport ErrorSummaryItem from \"./ErrorSummaryItem\";\nimport { useId } from \"../../util\";\n/**\n * A component that displays a summary of errors.\n *\n * @see [📝 Documentation](https://aksel.nav.no/komponenter/core/errorsummary)\n * @see 🏷️ {@link ErrorSummaryProps}\n *\n * @example\n * ```jsx\n * <ErrorSummary heading=\"Du må fikse disse feilene før du kan sende inn søknad.\">\n *   <ErrorSummary.Item href=\"#1\">\n *     Felt må fylles ut med alder\n *   </ErrorSummary.Item>\n *   <ErrorSummary.Item href=\"#2\">\n *     Tekstfeltet må ha en godkjent e-mail\n *   </ErrorSummary.Item>\n * </ErrorSummary>\n * ```\n */\nexport const ErrorSummary = forwardRef((_a, ref) => {\n    var { children, className, size = \"medium\", headingTag = \"h2\", heading } = _a, rest = __rest(_a, [\"children\", \"className\", \"size\", \"headingTag\", \"heading\"]);\n    const headingId = useId();\n    return (React.createElement(\"section\", Object.assign({ ref: ref }, rest, { className: cl(className, \"navds-error-summary\", `navds-error-summary--${size}`), tabIndex: -1, \"aria-live\": \"polite\", \"aria-relevant\": \"all\", \"aria-labelledby\": headingId }),\n        React.createElement(Heading, { className: \"navds-error-summary__heading\", as: headingTag, size: \"small\", id: headingId }, heading),\n        React.createElement(BodyShort, { as: \"ul\", size: size, className: \"navds-error-summary__list\" }, React.Children.map(children, (child) => {\n            return React.createElement(\"li\", { key: child === null || child === void 0 ? void 0 : child.toString() }, child);\n        }))));\n});\nErrorSummary.Item = ErrorSummaryItem;\nexport default ErrorSummary;\n//# sourceMappingURL=ErrorSummary.js.map","export enum UttakType {\n  UTSETTELSE = 'UTSETTELSE',\n  OVERFØRING = 'OVERFØRING',\n  UTTAK = 'UTTAK',\n}\n\nexport enum UttakVurdering {\n  GODKJENT = 'GODKJENT',\n  IKKE_GODKJENT = 'IKKE_GODKJENT',\n  IKKE_DOKUMENTERT = 'IKKE_DOKUMENTERT',\n}\n\nexport enum UttakÅrsak {\n  INNLEGGELSE_SØKER = 'INNLEGGELSE_SØKER',\n  INNLEGGELSE_BARN = 'INNLEGGELSE_BARN',\n  HV_ØVELSE = 'HV_ØVELSE',\n  NAV_TILTAK = 'NAV_TILTAK',\n  SYKDOM_SØKER = 'SYKDOM_SØKER',\n  INNLEGGELSE_ANNEN_FORELDER = 'INNLEGGELSE_ANNEN_FORELDER',\n  SYKDOM_ANNEN_FORELDER = 'SYKDOM_ANNEN_FORELDER',\n  BARE_SØKER_RETT = 'BARE_SØKER_RETT',\n  ALENEOMSORG = 'ALENEOMSORG',\n  TIDLIG_OPPSTART_FAR = 'TIDLIG_OPPSTART_FAR',\n  AKTIVITETSKRAV_ARBEID = 'AKTIVITETSKRAV_ARBEID',\n  AKTIVITETSKRAV_UTDANNING = 'AKTIVITETSKRAV_UTDANNING',\n  AKTIVITETSKRAV_KVALPROG = 'AKTIVITETSKRAV_KVALPROG',\n  AKTIVITETSKRAV_INTROPROG = 'AKTIVITETSKRAV_INTROPROG',\n  AKTIVITETSKRAV_TRENGER_HJELP = 'AKTIVITETSKRAV_TRENGER_HJELP',\n  AKTIVITETSKRAV_INNLAGT = 'AKTIVITETSKRAV_INNLAGT',\n  AKTIVITETSKRAV_ARBEID_OG_UTDANNING = 'AKTIVITETSKRAV_ARBEID_OG_UTDANNING',\n  AKTIVITETSKRAV_IKKE_OPPGITT = 'AKTIVITETSKRAV_IKKE_OPPGITT',\n}\n\ntype DokumentasjonVurderingBehov = Readonly<{\n  fom: string;\n  tom: string;\n  type: UttakType;\n  årsak: UttakÅrsak;\n  vurdering?: UttakVurdering;\n}>;\n\nexport default DokumentasjonVurderingBehov;\n","const periodeResultatType = {\n  INNVILGET: 'INNVILGET',\n  AVSLATT: 'AVSLÅTT',\n  IKKE_FASTSATT: 'IKKE_FASTSATT',\n  GYLDIG_UTSETTELSE: 'GYLDIG_UTSETTELSE',\n  UGYLDIG_UTSETTELSE: 'UGYLDIG_UTSETTELSE',\n  MANUELL_BEHANDLING: 'MANUELL_BEHANDLING',\n};\n\nexport default periodeResultatType;\n","const relasjonsRolleType = {\n  MOR: 'MORA',\n  FAR: 'FARA',\n  MEDMOR: 'MMOR',\n};\n\nexport default relasjonsRolleType;\n","enum StonadskontoType {\n  FELLESPERIODE = 'FELLESPERIODE',\n  MØDREKVOTE = 'MØDREKVOTE',\n  FEDREKVOTE = 'FEDREKVOTE',\n  FORELDREPENGER = 'FORELDREPENGER',\n  UTEN_AKTIVITETSKRAV = 'UTEN_AKTIVITETSKRAV',\n  MINSTERETT_NESTE_STØNADSPERIODE = 'MINSTERETT_NESTE_STØNADSPERIODE',\n  MINSTERETT = 'MINSTERETT',\n  FLERBARNSDAGER = 'FLERBARNSDAGER',\n  FORELDREPENGER_FØR_FØDSEL = 'FORELDREPENGER_FØR_FØDSEL',\n  UDEFINERT = '-',\n}\n\nexport default StonadskontoType;\n","const utsettelseArsakCodes = {\n  ARBEID: 'ARBEID',\n  LOVBESTEMT_FERIE: 'LOVBESTEMT_FERIE',\n  SYKDOM: 'SYKDOM',\n  INSTITUSJONSOPPHOLD_SØKER: 'INSTITUSJONSOPPHOLD_SØKER',\n  INSTITUSJONSOPPHOLD_BARNET: 'INSTITUSJONSOPPHOLD_BARNET',\n  HV_OVELSE: 'HV_OVELSE',\n  NAV_TILTAK: 'NAV_TILTAK',\n  UDEFINERT: '-',\n};\n\nexport const utsettelseArsakTexts = {\n  ARBEID: 'Arbeid',\n  LOVBESTEMT_FERIE: 'Ferie',\n  SYKDOM: 'Sykdom',\n  INSTITUSJONSOPPHOLD_SØKER: 'Innleggelse søker',\n  INSTITUSJONSOPPHOLD_BARNET: 'Innleggelse barn',\n  UDEFINERT: '-',\n};\n\nexport default utsettelseArsakCodes;\n","const uttakArbeidType = {\n  ORDINÆRT_ARBEID: 'ORDINÆRT_ARBEID',\n  FRILANS: 'FRILANS',\n  SELVSTENDIG_NÆRINGSDRIVENDE: 'SELVSTENDIG_NÆRINGSDRIVENDE',\n  ANNET: 'ANNET',\n};\n\nexport default uttakArbeidType;\n","import { AksjonspunktCode } from '@navikt/fp-kodeverk';\n\nconst validerApKodeOgHentApEnum = <T extends AksjonspunktCode>(kode: string, ...kodeEnums: T[]): T => {\n  const kodeEnum = kodeEnums.find(k => k === kode);\n  if (!kodeEnum) {\n    throw Error(`Det finnes ikke enum for kode ${kode}`);\n  }\n  return kodeEnum;\n};\n\nexport default validerApKodeOgHentApEnum;\n","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t(require(\"dayjs\")):\"function\"==typeof define&&define.amd?define([\"dayjs\"],t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_locale_nb=t(e.dayjs)}(this,(function(e){\"use strict\";function t(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var n=t(e),a={name:\"nb\",weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"sø._ma._ti._on._to._fr._lø.\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),monthsShort:\"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,yearStart:4,formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] HH:mm\",LLLL:\"dddd D. MMMM YYYY [kl.] HH:mm\"},relativeTime:{future:\"om %s\",past:\"%s siden\",s:\"noen sekunder\",m:\"ett minutt\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dager\",M:\"en måned\",MM:\"%d måneder\",y:\"ett år\",yy:\"%d år\"}};return n.default.locale(a,null,!0),a}));","import React, { FunctionComponent, ReactElement, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport dayjs from 'dayjs';\nimport norskFormat from 'dayjs/locale/nb';\nimport { Label, BodyShort } from '@navikt/ds-react';\nimport {\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  Table,\n  TableColumn,\n  TableRow,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\nimport { DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT, formatCurrencyNoKr } from '@navikt/ft-utils';\nimport { BesteberegningInntekt, Månedsgrunnlag, ArbeidsgiverOpplysningerPerId } from '@navikt/fp-types';\nimport { KodeverkType } from '@navikt/fp-kodeverk';\n\nimport styles from './besteManederVisningPanel.module.css';\n\nconst lagMånedVisning = (dato: dayjs.Dayjs): string => {\n  const år = dato.year();\n  const maanedNavn = dato.locale(norskFormat).format('MMMM');\n  const formattedMaaned = maanedNavn.charAt(0).toUpperCase() + maanedNavn.slice(1);\n  return `${formattedMaaned} - ${år}`;\n};\n\nconst formatDate = (date: string): string => (date ? lagMånedVisning(dayjs(date, ISO_DATE_FORMAT)) : '-');\n\ninterface BesteMånederProps {\n  besteMåneder: Månedsgrunnlag[];\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId;\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType) => string;\n}\n\nconst headerColumnContent = [\n  <Label size=\"small\" key=\"AktivitetNøkkel\">\n    {' '}\n    <FormattedMessage id=\"BesteberegningProsessPanel.Måned.Inntekt.Aktivitet\" />{' '}\n  </Label>,\n  <Label size=\"small\" key=\"InntektNøkkel\">\n    {' '}\n    <FormattedMessage id=\"BesteberegningProsessPanel.Måned.Inntekt.Inntekt\" />{' '}\n  </Label>,\n];\n\ninterface InntekttabellProps {\n  inntekter: BesteberegningInntekt[];\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId;\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType) => string;\n}\n\nconst lagVisningsNavn = (\n  inntekt: BesteberegningInntekt,\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId,\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType) => string,\n): string => {\n  const agOpplysning = inntekt.arbeidsgiverId ? arbeidsgiverOpplysninger[inntekt.arbeidsgiverId] : undefined;\n  if (!agOpplysning) {\n    return getKodeverkNavn(inntekt.opptjeningAktivitetType, KodeverkType.OPPTJENING_AKTIVITET_TYPE);\n  }\n  if (agOpplysning.erPrivatPerson) {\n    return agOpplysning.fødselsdato\n      ? `${agOpplysning.navn} (${dayjs(agOpplysning.fødselsdato).format(DDMMYYYY_DATE_FORMAT)})`\n      : agOpplysning.navn;\n  }\n  return `${agOpplysning.navn} (${agOpplysning.identifikator})`;\n};\n\nconst lagInntektRader = (\n  inntekter: BesteberegningInntekt[],\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId,\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType) => string,\n): ReactElement[] =>\n  inntekter.map((inntekt: BesteberegningInntekt) => (\n    <TableRow\n      key={`${inntekt.arbeidsforholdId}-${inntekt.arbeidsgiverId}-${inntekt.inntekt}`}\n      className={styles.månedRad}\n    >\n      <TableColumn className={styles.månedAktivitet}>\n        <BodyShort size=\"small\">{lagVisningsNavn(inntekt, arbeidsgiverOpplysninger, getKodeverkNavn)}</BodyShort>\n      </TableColumn>\n      <TableColumn className={styles.månedInntekt}>\n        <BodyShort size=\"small\">{formatCurrencyNoKr(inntekt.inntekt)}</BodyShort>\n      </TableColumn>\n    </TableRow>\n  ));\n\nconst lagSummeringsRad = (inntekter: BesteberegningInntekt[], labelId: string): ReactElement =>\n  inntekter.length === 0 ? (\n    <div />\n  ) : (\n    <TableRow key=\"sum\">\n      <TableColumn>\n        <Label size=\"small\">\n          <FormattedMessage id={labelId} />\n        </Label>\n      </TableColumn>\n      <TableColumn>\n        <Label size=\"small\">\n          {formatCurrencyNoKr(inntekter.map(({ inntekt }) => inntekt).reduce((i1, i2) => i1 + i2, 0))}\n        </Label>\n      </TableColumn>\n    </TableRow>\n  );\n\nconst Inntekttabell: FunctionComponent<InntekttabellProps> = ({\n  inntekter,\n  arbeidsgiverOpplysninger,\n  getKodeverkNavn,\n}) => {\n  const rows: ReactElement[] = [];\n  lagInntektRader(inntekter, arbeidsgiverOpplysninger, getKodeverkNavn).forEach(rad => rows.push(rad));\n  rows.push(lagSummeringsRad(inntekter, 'Inntekttabell.Sum'));\n  return (\n    <div>\n      <Table headerColumnContent={headerColumnContent} noHover>\n        {rows}\n      </Table>\n    </div>\n  );\n};\n\nconst lagRadMedMåneder = (\n  måneder: Månedsgrunnlag[],\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId,\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType) => string,\n): ReactElement => (\n  <FlexContainer>\n    <FlexRow>\n      {måneder.map((månedsgrunnlag: Månedsgrunnlag) => {\n        const key = månedsgrunnlag.fom;\n        return (\n          <FlexColumn className={styles.colWidth} key={key}>\n            <BodyShort size=\"small\">{formatDate(månedsgrunnlag.fom)}</BodyShort>\n            <Inntekttabell\n              inntekter={månedsgrunnlag.inntekter}\n              arbeidsgiverOpplysninger={arbeidsgiverOpplysninger}\n              getKodeverkNavn={getKodeverkNavn}\n            />\n          </FlexColumn>\n        );\n      })}\n    </FlexRow>\n  </FlexContainer>\n);\n\nconst finnÅrsinntekt = (besteMåneder: Månedsgrunnlag[]): number => {\n  const snittPrMnd =\n    besteMåneder\n      .flatMap(måned => måned.inntekter)\n      .map(({ inntekt }) => inntekt)\n      .reduce((i1, i2) => i1 + i2, 0) / 6;\n  return snittPrMnd * 12;\n};\n\nconst sorterEtterMåned = (besteMåneder: Månedsgrunnlag[]) =>\n  [...besteMåneder].sort((a, b) => dayjs(a.fom).diff(dayjs(b.fom)));\n\n/**\n * BesteManederVisningPanel\n *\n * Presentasjonskomponent. Viser månedene som brukes i beregning etter §14-7, tredje ledd\n */\nconst BesteManederVisningPanel: FunctionComponent<BesteMånederProps> = ({\n  besteMåneder,\n  arbeidsgiverOpplysninger,\n  getKodeverkNavn,\n}) => {\n  const sorterteMåneder = useMemo(() => sorterEtterMåned(besteMåneder), [besteMåneder]);\n  return (\n    <>\n      <Label size=\"small\">\n        {' '}\n        <FormattedMessage id=\"Inntekttabell.Tittel\" />{' '}\n      </Label>\n      <VerticalSpacer twentyPx />\n      {lagRadMedMåneder(sorterteMåneder.slice(0, 2), arbeidsgiverOpplysninger, getKodeverkNavn)}\n      <VerticalSpacer twentyPx />\n      {lagRadMedMåneder(sorterteMåneder.slice(2, 4), arbeidsgiverOpplysninger, getKodeverkNavn)}\n      <VerticalSpacer twentyPx />\n      {lagRadMedMåneder(sorterteMåneder.slice(4, 6), arbeidsgiverOpplysninger, getKodeverkNavn)}\n      <VerticalSpacer twentyPx />\n      <Label size=\"small\">\n        <FormattedMessage\n          id=\"Inntekttabell.BeregnetÅrsinntekt\"\n          values={{ inntekt: formatCurrencyNoKr(finnÅrsinntekt(besteMåneder)) }}\n        />\n      </Label>\n    </>\n  );\n};\n\nexport default BesteManederVisningPanel;\n","import React, { FunctionComponent } from 'react';\nimport { BeregningsgrunnlagAndel, BeregningsgrunnlagPeriodeProp, Månedsgrunnlag } from '@navikt/fp-types';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { formatCurrencyNoKr } from '@navikt/ft-utils';\nimport { VerticalSpacer, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\n\nimport { FormattedMessage } from 'react-intl';\n\ninterface OwnProps {\n  periode: BeregningsgrunnlagPeriodeProp;\n  besteMåneder: Månedsgrunnlag[];\n}\n\nconst erBeløpSatt = (beløp?: number): boolean => !!beløp || beløp === 0;\n\nconst hentBeløpEller0 = (beløp?: number): number => beløp || 0;\n\nconst finnGjeldendeBeløp = (andel: BeregningsgrunnlagAndel): number =>\n  erBeløpSatt(andel.overstyrtPrAar) ? hentBeløpEller0(andel.overstyrtPrAar) : hentBeløpEller0(andel.beregnetPrAar);\n\nconst finnKap8Beregning = (periode: BeregningsgrunnlagPeriodeProp): number => {\n  const andeler = periode.beregningsgrunnlagPrStatusOgAndel || [];\n  return andeler.map(andel => finnGjeldendeBeløp(andel)).reduce((i1, i2) => i1 + i2, 0);\n};\nconst finnBesteberegnet = (besteMåneder: Månedsgrunnlag[]): number =>\n  besteMåneder\n    .flatMap(måned => måned.inntekter)\n    .map(({ inntekt }) => inntekt)\n    .reduce((i1, i2) => i1 + i2, 0) * 2;\n\nconst girKap8Besteberegning = (kap8Beregning: number, kap1473Beregning: number): boolean =>\n  kap8Beregning > kap1473Beregning;\n\nconst headerColumnContent = [\n  // For å lage tom kolonne først\n  <div key=\"TomKolNøkkel\" />,\n  <Label size=\"small\" key=\"Kap8Nøkkel\">\n    {' '}\n    <FormattedMessage id=\"ResultatGrunnlag.BeregningEtterKap8\" />{' '}\n  </Label>,\n  <Label size=\"small\" key=\"BBNøkkel\">\n    {' '}\n    <FormattedMessage id=\"ResultatGrunnlag.BeregningEtterBesteberegning\" />{' '}\n  </Label>,\n];\n\n/**\n * BesteberegningResultatGrunnlagPanel\n *\n * Presentasjonskomponent. Viser sammenligning av kap 8 beregning og §14-7, ledd 3 beregning.\n */\nconst BesteberegningResultatGrunnlagPanel: FunctionComponent<OwnProps> = ({ periode, besteMåneder }) => (\n  <>\n    <Table headerColumnContent={headerColumnContent} noHover>\n      <TableRow>\n        <TableColumn>\n          <BodyShort size=\"small\">\n            <FormattedMessage id=\"ResultatGrunnlag.BruttoBeregningsgrunnlag\" />\n          </BodyShort>\n        </TableColumn>\n        <TableColumn>\n          <BodyShort size=\"small\">{formatCurrencyNoKr(finnKap8Beregning(periode))}</BodyShort>\n        </TableColumn>\n        <TableColumn>\n          <BodyShort size=\"small\">{formatCurrencyNoKr(finnBesteberegnet(besteMåneder))}</BodyShort>\n        </TableColumn>\n      </TableRow>\n    </Table>\n    <VerticalSpacer twentyPx />\n    <BodyShort size=\"small\">\n      {girKap8Besteberegning(finnKap8Beregning(periode), finnBesteberegnet(besteMåneder)) && (\n        <FormattedMessage id=\"ResultatGrunnlag.Kap8GirBesteBeregning\" />\n      )}\n      {!girKap8Besteberegning(finnKap8Beregning(periode), finnBesteberegnet(besteMåneder)) && (\n        <FormattedMessage id=\"ResultatGrunnlag.Kap1473GirBesteBeregning\" />\n      )}\n    </BodyShort>\n    <VerticalSpacer twentyPx />\n  </>\n);\n\nexport default BesteberegningResultatGrunnlagPanel;\n","import React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Aksjonspunkt } from '@navikt/fp-types';\nimport { FaktaBegrunnelseTextFieldNew, FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\nimport { AksjonspunktCode, aksjonspunktStatus } from '@navikt/fp-kodeverk';\nimport { Form, CheckboxField } from '@navikt/ft-form-hooks';\nimport { ManuellKontrollBesteberegningAP } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nexport const buildInitialValues = (aksjonspunkt: Aksjonspunkt): FormValues => {\n  const apErLøst = aksjonspunkt.status === aksjonspunktStatus.UTFORT;\n  return {\n    ...FaktaBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkt),\n    besteberegningErKorrektValg: apErLøst ? true : undefined,\n  };\n};\n\nexport const transformValues = (values: FormValues): ManuellKontrollBesteberegningAP => ({\n  kode: AksjonspunktCode.MANUELL_KONTROLL_AV_BESTEBEREGNING,\n  begrunnelse: values.begrunnelse,\n  besteberegningErKorrekt: !!values.besteberegningErKorrektValg,\n});\n\nexport type FormValues = {\n  begrunnelse?: string;\n  besteberegningErKorrektValg?: boolean;\n};\n\ninterface OwnProps {\n  aksjonspunkt: Aksjonspunkt;\n  submitCallback: (data: ManuellKontrollBesteberegningAP) => Promise<void>;\n  readOnly: boolean;\n  submittable: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * KontrollerBesteberegningPanel\n *\n * Formkomponent. Lar saksbehandler vurdere om den automatiske besteberegningen er korrekt utført.\n */\nconst KontrollerBesteberegningPanel: FunctionComponent<OwnProps> = ({\n  aksjonspunkt,\n  readOnly,\n  submittable,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const [erKnappEnabled, toggleKnapp] = useState(false);\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(aksjonspunkt),\n  });\n  const begrunnelse = formMethods.watch('begrunnelse');\n  return (\n    <>\n      {aksjonspunkt.status === AksjonspunktStatus.OPPRETTET && (\n        <AksjonspunktHelpTextHTML>\n          {[\n            <FormattedMessage\n              key=\"BesteberegningAksjonspunktTekst\"\n              id=\"BesteberegningProsessPanel.Aksjonspunkt.HelpTextKontroll\"\n            />,\n          ]}\n        </AksjonspunktHelpTextHTML>\n      )}\n      <VerticalSpacer twentyPx />\n      <Form\n        formMethods={formMethods}\n        onSubmit={values => submitCallback(transformValues(values))}\n        setDataOnUnmount={setFormData}\n      >\n        <CheckboxField\n          name=\"besteberegningErKorrektValg\"\n          label={<FormattedMessage id=\"BesteberegningProsessPanel.Aksjonspunkt.Radiotekst\" />}\n          readOnly={readOnly}\n          onChange={() => toggleKnapp(!erKnappEnabled)}\n        />\n        <VerticalSpacer twentyPx />\n        <FaktaBegrunnelseTextFieldNew\n          isSubmittable={submittable}\n          isReadOnly={readOnly}\n          hasBegrunnelse={!!begrunnelse}\n          hasVurderingText\n        />\n        <VerticalSpacer twentyPx />\n        <FaktaSubmitButtonNew\n          isSubmittable={submittable && erKnappEnabled}\n          isSubmitting={formMethods.formState.isSubmitting}\n          isDirty={formMethods.formState.isDirty}\n          isReadOnly={readOnly}\n        />\n      </Form>\n    </>\n  );\n};\n\nexport default KontrollerBesteberegningPanel;\n","import React, { FunctionComponent } from 'react';\nimport { Aksjonspunkt, ArbeidsgiverOpplysningerPerId, Beregningsgrunnlag } from '@navikt/fp-types';\nimport { BorderBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, KodeverkType } from '@navikt/fp-kodeverk';\nimport { BesteberegningAP } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport BesteMånederVisningPanel from './BesteManederVisningPanel';\nimport BesteberegningResultatGrunnlagPanel from './BesteberegningResultatGrunnlagPanel';\nimport KontrollerBesteberegningPanel, { FormValues } from './KontrollerBesteberegningPanel';\n\ninterface OwnProps {\n  beregningsgrunnlag: Beregningsgrunnlag;\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId;\n  getKodeverkNavn: (kodeverk: string, kodeverkType: KodeverkType) => string;\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  submitCallback: (aksjonspunktData: BesteberegningAP) => Promise<void>;\n  submittable: boolean;\n  formData?: FormValues;\n  setFormData: (data: any) => void;\n}\n\n/**\n * BesteberegningPanel\n *\n * Container komponent. Holder paneler for resultat av besteberegning og inntektsgrunnlag\n */\nconst BesteberegningPanel: FunctionComponent<OwnProps> = ({\n  beregningsgrunnlag,\n  arbeidsgiverOpplysninger,\n  getKodeverkNavn,\n  aksjonspunkter,\n  readOnly,\n  submitCallback,\n  submittable,\n  formData,\n  setFormData,\n}) => {\n  const { ytelsesspesifiktGrunnlag, beregningsgrunnlagPeriode } = beregningsgrunnlag;\n  const besteberegninggrunnlag = ytelsesspesifiktGrunnlag?.besteberegninggrunnlag;\n  if (!besteberegninggrunnlag) {\n    return null;\n  }\n  const førstePeriode = beregningsgrunnlagPeriode[0];\n  const besteberegningAP = aksjonspunkter.find(\n    ap =>\n      ap.definisjon === AksjonspunktCode.KONTROLLER_AUTOMATISK_BESTEBEREGNING ||\n      ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_BESTEBEREGNING,\n  );\n  return (\n    <div>\n      {!!besteberegningAP && (\n        <KontrollerBesteberegningPanel\n          aksjonspunkt={besteberegningAP}\n          submitCallback={submitCallback}\n          submittable={submittable}\n          readOnly={readOnly}\n          formData={formData}\n          setFormData={setFormData}\n        />\n      )}\n      <BorderBox>\n        <BesteberegningResultatGrunnlagPanel\n          periode={førstePeriode}\n          besteMåneder={besteberegninggrunnlag.besteMåneder}\n        />\n      </BorderBox>\n      <VerticalSpacer twentyPx />\n      <BorderBox>\n        <BesteMånederVisningPanel\n          besteMåneder={besteberegninggrunnlag.besteMåneder}\n          arbeidsgiverOpplysninger={arbeidsgiverOpplysninger}\n          getKodeverkNavn={getKodeverkNavn}\n        />\n      </BorderBox>\n    </div>\n  );\n};\n\nexport default BesteberegningPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport {\n  Aksjonspunkt,\n  ArbeidsgiverOpplysningerPerId,\n  Beregningsgrunnlag,\n  AlleKodeverk,\n  StandardFaktaPanelProps,\n} from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport { getKodeverknavnFn } from '@navikt/fp-kodeverk';\n\nimport messages from '../i18n/nb_NO.json';\nimport BesteberegningPanel from './components/BesteberegningPanel';\nimport { FormValues } from './components/KontrollerBesteberegningPanel';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  beregningsgrunnlag: Beregningsgrunnlag;\n  arbeidsgiverOpplysninger: ArbeidsgiverOpplysningerPerId;\n  alleKodeverk: AlleKodeverk;\n  formData?: FormValues;\n  setFormData: (data: any) => void;\n  aksjonspunkter: Aksjonspunkt[];\n}\n\nconst BesteberegningFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  beregningsgrunnlag,\n  arbeidsgiverOpplysninger,\n  alleKodeverk,\n  aksjonspunkter,\n  readOnly,\n  submitCallback,\n  formData,\n  setFormData,\n  submittable,\n}) => (\n  <RawIntlProvider value={intl}>\n    <BesteberegningPanel\n      beregningsgrunnlag={beregningsgrunnlag}\n      arbeidsgiverOpplysninger={arbeidsgiverOpplysninger}\n      getKodeverkNavn={getKodeverknavnFn(alleKodeverk)}\n      aksjonspunkter={aksjonspunkter}\n      readOnly={readOnly}\n      submitCallback={submitCallback}\n      submittable={submittable}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default BesteberegningFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { BesteberegningFaktaIndex } from '@navikt/fp-fakta-besteberegning';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { ArbeidsgiverOpplysningerPerId, Beregningsgrunnlag } from '@navikt/fp-types';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys, requestBehandlingApi } from '../../../data/behandlingContextApi';\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.BEREGNINGSGRUNNLAG];\ntype EndepunktPanelData = {\n  beregningsgrunnlag: Beregningsgrunnlag;\n};\n\ninterface OwnProps {\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\n/**\n * BesteberegningFaktaInitPanel\n */\nconst BesteberegningFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({\n  arbeidsgiverOpplysningerPerId,\n  ...props\n}) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    aksjonspunktKoder={[\n      AksjonspunktCode.KONTROLLER_AUTOMATISK_BESTEBEREGNING,\n      AksjonspunktCode.MANUELL_KONTROLL_AV_BESTEBEREGNING,\n    ]}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    faktaPanelKode={FaktaPanelCode.BESTEBEREGNING}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'BesteberegningInfoPanel.Title' })}\n    skalPanelVisesIMeny={() => requestBehandlingApi.hasPath(BehandlingApiKeys.BEREGNINGSGRUNNLAG_BESTEBEREGNING.name)}\n    renderPanel={data => (\n      <BesteberegningFaktaIndex arbeidsgiverOpplysninger={arbeidsgiverOpplysningerPerId} {...data} />\n    )}\n  />\n);\n\nexport default BesteberegningFaktaInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { required } from '@navikt/ft-form-validators';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { FaktaGruppe } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktStatus } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode, hasAksjonspunkt } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, Ytelsefordeling } from '@navikt/fp-types';\nimport { BekreftOmsorgVurderingAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport styles from './omsorgFaktaForm.module.css';\n\nconst { MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG } = AksjonspunktCode;\n\nconst getAksjonspunkt = (aksjonspunktCode: string, aksjonspunkter: Aksjonspunkt[]): Aksjonspunkt[] =>\n  aksjonspunkter.filter(ap => ap.definisjon === aksjonspunktCode);\n\nexport type FormValues = {\n  omsorg?: boolean;\n};\n\ninterface OwnProps {\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  className?: string;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (ytelsefordeling: Ytelsefordeling, aksjonspunkter: Aksjonspunkt[]) => FormValues;\n  transformOmsorgValues: (values: FormValues) => BekreftOmsorgVurderingAp;\n  validate?: (values: FormValues) => any;\n}\n\nconst OmsorgFaktaForm: FunctionComponent<OwnProps> & StaticFunctions = ({\n  aksjonspunkter,\n  readOnly,\n  className,\n  alleMerknaderFraBeslutter,\n}) => {\n  const intl = useIntl();\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <div className={className || styles.defaultAleneOmsorgFakta}>\n      {hasAksjonspunkt(MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG, aksjonspunkter) && (\n        <FaktaGruppe\n          withoutBorder\n          merknaderFraBeslutter={alleMerknaderFraBeslutter[MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG]}\n        >\n          <RadioGroupPanel\n            name=\"omsorg\"\n            label={<FormattedMessage id=\"OmsorgFaktaForm.OppgittOmsorg\" />}\n            validate={[required]}\n            isReadOnly={readOnly}\n            isTrueOrFalseSelection\n            radios={[\n              {\n                label: intl.formatMessage({ id: 'OmsorgFaktaForm.HarOmsorg' }),\n                value: 'true',\n              },\n              {\n                label: <FormattedMessage id=\"OmsorgFaktaForm.HarIkkeOmsorg\" values={{ b: bTag }} />,\n                value: 'false',\n              },\n            ]}\n          />\n        </FaktaGruppe>\n      )}\n    </div>\n  );\n};\n\nOmsorgFaktaForm.buildInitialValues = (ytelsefordeling: Ytelsefordeling, aksjonspunkter: Aksjonspunkt[]): FormValues => {\n  const omsorgAp = getAksjonspunkt(MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG, aksjonspunkter);\n  let omsorg;\n\n  if (omsorgAp.length > 0 && omsorgAp[0].status !== AksjonspunktStatus.OPPRETTET) {\n    omsorg = ytelsefordeling.overstyrtOmsorg;\n  }\n\n  return {\n    omsorg,\n  };\n};\n\nOmsorgFaktaForm.transformOmsorgValues = (values: FormValues): BekreftOmsorgVurderingAp => ({\n  kode: MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG,\n  omsorg: values.omsorg || false,\n});\n\nexport default OmsorgFaktaForm;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport classnames from 'classnames/bind';\n\nimport styles from './boks.module.css';\n\nconst classNames = classnames.bind(styles);\n\ninterface OwnProps {\n  harBorderTop: boolean;\n  children: ReactElement | ReactElement[];\n}\n\nconst Boks: FunctionComponent<OwnProps> = ({ harBorderTop, children }) => (\n  <div\n    className={classNames(styles.boks, {\n      harBorderTop,\n    })}\n  >\n    {children}\n  </div>\n);\n\nexport default Boks;\n","import { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\nimport { PersonopplysningerBasis } from '@navikt/fp-types';\nimport { opplysningAdresseType } from '@navikt/fp-kodeverk';\n\ninterface OwnProps {\n  personopplysninger: PersonopplysningerBasis;\n}\n\nconst AdresseVisning: FunctionComponent<OwnProps> = ({ personopplysninger }) => {\n  const postadr = personopplysninger.adresser.find(\n    adresse => adresse.adresseType === opplysningAdresseType.POSTADRESSE,\n  );\n  const bostedsadr = personopplysninger.adresser.find(\n    adresse => adresse.adresseType === opplysningAdresseType.BOSTEDSADRESSE,\n  );\n  if (!postadr && !bostedsadr) {\n    return null;\n  }\n\n  const adr = postadr || bostedsadr || {};\n\n  return (\n    <>\n      <Label size=\"small\">\n        <FormattedMessage id=\"AdresseVisning.Adresse\" />\n      </Label>\n      <VerticalSpacer fourPx />\n      <BodyShort size=\"small\">{adr.adresselinje1}</BodyShort>\n      <VerticalSpacer fourPx />\n      {adr.adresselinje2 && (\n        <>\n          <BodyShort size=\"small\">{adr.adresselinje2}</BodyShort>\n          <VerticalSpacer fourPx />\n        </>\n      )}\n      {adr.adresselinje3 && (\n        <>\n          <BodyShort size=\"small\">{adr.adresselinje3}</BodyShort>\n          <VerticalSpacer fourPx />\n        </>\n      )}\n      <BodyShort size=\"small\">{`${adr.postNummer} ${adr.poststed}, ${adr.land}`}</BodyShort>\n    </>\n  );\n};\n\nexport default AdresseVisning;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport React, { FunctionComponent } from 'react';\nimport { ChildEyesIcon } from '@navikt/aksel-icons';\nimport { Label, BodyShort, HStack, VStack } from '@navikt/ds-react';\nimport { DateLabel } from '@navikt/ft-ui-komponenter';\nimport { PersonopplysningerBasis } from '@navikt/fp-types';\n\nimport Boks from '../Boks';\nimport AdresseVisning from './AdresseVisning';\n\nimport styles from './alleBarnPanel.module.css';\n\ninterface OwnProps {\n  alleBarn: PersonopplysningerBasis[];\n}\n\nconst AlleBarnPanel: FunctionComponent<OwnProps> = ({ alleBarn }) => {\n  const intl = useIntl();\n  return (\n    <>\n      {alleBarn.map((barn, index) => (\n        <Boks key={barn.aktoerId} harBorderTop={index === 0}>\n          <HStack>\n            <HStack gap=\"5\" className={styles.leftCol}>\n              <ChildEyesIcon className={styles.image} title={intl.formatMessage({ id: 'AlleBarnPanel.Barn' })} />\n              <VStack gap=\"2\">\n                <div>\n                  <Label size=\"small\">\n                    <FormattedMessage id=\"AlleBarnPanel.BarnNr\" values={{ nummer: index + 1 }} />\n                  </Label>\n                  <BodyShort size=\"small\">{barn.navn ? barn.navn : '-'}</BodyShort>\n                </div>\n                <div>\n                  <Label size=\"small\">\n                    <FormattedMessage id=\"AlleBarnPanel.Fodt\" />\n                  </Label>\n                  <BodyShort size=\"small\">\n                    <DateLabel dateString={barn.fødselsdato ? barn.fødselsdato : '-'} />\n                  </BodyShort>\n                </div>\n                {barn.dødsdato && (\n                  <div>\n                    <Label size=\"small\" className={styles.dodTekst}>\n                      <FormattedMessage id=\"AlleBarnPanel.Dod\" />\n                    </Label>\n                    <BodyShort size=\"small\" className={styles.dodTekst}>\n                      <DateLabel dateString={barn.dødsdato} />\n                    </BodyShort>\n                  </div>\n                )}\n              </VStack>\n            </HStack>\n            <div>\n              <AdresseVisning personopplysninger={barn} />\n            </div>\n          </HStack>\n        </Boks>\n      ))}\n    </>\n  );\n};\n\nexport default AlleBarnPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { FigureOutwardIcon, FigureInwardIcon } from '@navikt/aksel-icons';\nimport { Label, BodyShort, HStack } from '@navikt/ds-react';\nimport { AlleKodeverk, KjønnkodeEnum, PersonopplysningerBasis } from '@navikt/fp-types';\nimport { KodeverkType, getKodeverknavnFraKode } from '@navikt/fp-kodeverk';\n\nimport Boks from '../Boks';\nimport AdresseVisning from './AdresseVisning';\n\nimport styles from './forelderPanel.module.css';\n\ninterface OwnProps {\n  forelder: PersonopplysningerBasis;\n  erSøker: boolean;\n  alleKodeverk: AlleKodeverk;\n  kjønn: string;\n}\n\nconst ForelderPanel: FunctionComponent<OwnProps> = ({ forelder, erSøker, alleKodeverk, kjønn }) => {\n  const intl = useIntl();\n\n  const erKvinne = kjønn === KjønnkodeEnum.KVINNE;\n\n  return (\n    <Boks harBorderTop={false}>\n      <HStack>\n        <HStack gap=\"5\" className={styles.leftCol}>\n          {erKvinne && (\n            <FigureOutwardIcon\n              className={styles.imageKvinne}\n              title={intl.formatMessage({ id: 'ForelderPanel.Soker' })}\n            />\n          )}\n          {!erKvinne && (\n            <FigureInwardIcon className={styles.imageMann} title={intl.formatMessage({ id: 'ForelderPanel.Soker' })} />\n          )}\n          <div>\n            <Label size=\"small\">\n              <FormattedMessage id={erSøker ? 'ForelderPanel.Soker' : 'ForelderPanel.AnnenForelder'} />\n            </Label>\n            <BodyShort size=\"small\">{forelder.navn}</BodyShort>\n            <BodyShort size=\"small\">\n              {getKodeverknavnFraKode(alleKodeverk, KodeverkType.SIVILSTAND_TYPE, forelder.sivilstand)}\n            </BodyShort>\n          </div>\n        </HStack>\n        <div>\n          <AdresseVisning personopplysninger={forelder} />\n        </div>\n      </HStack>\n    </Boks>\n  );\n};\n\nexport default ForelderPanel;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useForm } from 'react-hook-form';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { Heading } from '@navikt/ds-react';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { FaktaBegrunnelseTextFieldNew, FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { Aksjonspunkt, AlleKodeverk, KjønnkodeEnum, Personoversikt, Ytelsefordeling } from '@navikt/fp-types';\nimport { BekreftOmsorgVurderingAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport OmsorgFaktaForm, { FormValues as OmsorgFormValues } from './OmsorgFaktaForm';\nimport AlleBarnPanel from './personer/AlleBarnPanel';\nimport ForelderPanel from './personer/ForelderPanel';\nimport Boks from './Boks';\n\nconst { MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG } = AksjonspunktCode;\n\nconst getHelpTexts = (aksjonspunkter: Aksjonspunkt[]): ReactElement[] => {\n  const helpTexts = [];\n  const harOmsorgAp = aksjonspunkter.filter(ap => ap.definisjon === MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG);\n  if (harOmsorgAp.length > 0) {\n    helpTexts.push(<FormattedMessage key=\"VurderOmsorg\" id=\"OmsorgInfoPanel.VurderOmsorg\" />);\n  }\n  return helpTexts;\n};\n\nconst buildInitialValues = (ytelsefordeling: Ytelsefordeling, aksjonspunkter: Aksjonspunkt[]): FormValues => {\n  const omsorgAp = aksjonspunkter.filter(\n    ap => ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG,\n  );\n  return {\n    ...OmsorgFaktaForm.buildInitialValues(ytelsefordeling, omsorgAp),\n    ...FaktaBegrunnelseTextFieldNew.buildInitialValues(omsorgAp),\n  };\n};\n\nconst finnMotsattKjønn = (kjønn: string) =>\n  kjønn === KjønnkodeEnum.KVINNE ? KjønnkodeEnum.MANN : KjønnkodeEnum.KVINNE;\n\nconst transformValues = (values: FormValues): BekreftOmsorgVurderingAp => ({\n  ...OmsorgFaktaForm.transformOmsorgValues(values),\n  begrunnelse: values.begrunnelse,\n});\n\ntype FormValues = OmsorgFormValues & {\n  begrunnelse?: string;\n};\n\ninterface OwnProps {\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  hasOpenAksjonspunkter: boolean;\n  submittable: boolean;\n  alleKodeverk: AlleKodeverk;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  personoversikt: Personoversikt;\n  ytelsefordeling: Ytelsefordeling;\n  submitCallback: (data: BekreftOmsorgVurderingAp) => Promise<void>;\n  formData?: any;\n  setFormData: (data: any) => void;\n}\n\nconst OmsorgInfoPanel: FunctionComponent<OwnProps> = ({\n  personoversikt,\n  readOnly,\n  hasOpenAksjonspunkter,\n  submittable,\n  aksjonspunkter,\n  alleKodeverk,\n  ytelsefordeling,\n  submitCallback,\n  alleMerknaderFraBeslutter,\n  formData,\n  setFormData,\n}) => {\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(ytelsefordeling, aksjonspunkter),\n  });\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"OmsorgInfoPanel.Overskrift\" />\n      </Heading>\n      <VerticalSpacer thirtyTwoPx />\n      {!readOnly && hasOpenAksjonspunkter && (\n        <AksjonspunktHelpTextHTML>{getHelpTexts(aksjonspunkter)}</AksjonspunktHelpTextHTML>\n      )}\n      <VerticalSpacer thirtyTwoPx />\n      <AlleBarnPanel alleBarn={personoversikt.barn} />\n      <ForelderPanel\n        forelder={personoversikt.bruker}\n        kjønn={personoversikt.bruker.kjønn}\n        erSøker\n        alleKodeverk={alleKodeverk}\n      />\n      {personoversikt.annenPart && (\n        <ForelderPanel\n          forelder={personoversikt.annenPart}\n          kjønn={personoversikt.annenPart.kjønn || finnMotsattKjønn(personoversikt.bruker.kjønn)}\n          erSøker={false}\n          alleKodeverk={alleKodeverk}\n        />\n      )}\n      <Form\n        formMethods={formMethods}\n        onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n        setDataOnUnmount={setFormData}\n      >\n        <Boks harBorderTop={false}>\n          <VerticalSpacer sixteenPx />\n          <OmsorgFaktaForm\n            readOnly={readOnly}\n            aksjonspunkter={aksjonspunkter}\n            alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n          />\n          <VerticalSpacer thirtyTwoPx />\n          <FaktaBegrunnelseTextFieldNew\n            isSubmittable={submittable}\n            isReadOnly={readOnly}\n            hasBegrunnelse\n            hasVurderingText\n          />\n          <VerticalSpacer sixteenPx />\n          <FaktaSubmitButtonNew\n            isSubmittable={submittable}\n            isReadOnly={readOnly}\n            isSubmitting={formMethods.formState.isSubmitting}\n            isDirty={formMethods.formState.isDirty}\n          />\n        </Boks>\n      </Form>\n    </>\n  );\n};\n\nexport default OmsorgInfoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport { StandardFaktaPanelProps, Personoversikt, Ytelsefordeling } from '@navikt/fp-types';\n\nimport OmsorgInfoPanel from './components/OmsorgInfoPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  ytelsefordeling: Ytelsefordeling;\n  personoversikt: Personoversikt;\n}\n\nconst OmsorgFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  ytelsefordeling,\n  personoversikt,\n  aksjonspunkter,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  submitCallback,\n  readOnly,\n  harApneAksjonspunkter,\n  submittable,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <OmsorgInfoPanel\n      aksjonspunkter={aksjonspunkter}\n      ytelsefordeling={ytelsefordeling}\n      personoversikt={personoversikt}\n      alleKodeverk={alleKodeverk}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      hasOpenAksjonspunkter={harApneAksjonspunkter}\n      submittable={submittable}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default OmsorgFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OmsorgFaktaIndex } from '@navikt/fp-fakta-omsorg';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Personoversikt, Ytelsefordeling } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.YTELSEFORDELING];\ntype EndepunktPanelData = {\n  ytelsefordeling: Ytelsefordeling;\n};\n\ninterface OwnProps {\n  personoversikt: Personoversikt;\n}\n\n/**\n * OmsorgFaktaInitPanel\n */\nconst OmsorgFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({ personoversikt, ...props }) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.OMSORG}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'OmsorgInfoPanel.Omsorg' })}\n    skalPanelVisesIMeny={() =>\n      !!props.behandling.aksjonspunkt?.some(ap => AKSJONSPUNKT_KODER.some(kode => kode === ap.definisjon))\n    }\n    renderPanel={data => <OmsorgFaktaIndex personoversikt={personoversikt} {...data} />}\n  />\n);\n\nexport default OmsorgFaktaInitPanel;\n","enum FordelingPeriodeKilde {\n  SAKSBEHANDLER = 'SAKSBEHANDLER',\n  SØKNAD = 'SØKNAD',\n}\n\nexport default FordelingPeriodeKilde;\n","import React, { FunctionComponent, ReactElement, useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { required } from '@navikt/ft-form-validators';\nimport { DDMMYYYY_DATE_FORMAT, guid } from '@navikt/ft-utils';\nimport { ArbeidsgiverOpplysninger } from '@navikt/ft-types';\nimport { SelectField, NumberField, CheckboxField } from '@navikt/ft-form-hooks';\nimport { FlexColumn, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Alert } from '@navikt/ds-react';\nimport { uttakArbeidType, KodeverkType } from '@navikt/fp-kodeverk';\n\nimport { AlleKodeverk, ArbeidsgiverOpplysningerPerId, FaktaArbeidsforhold } from '@navikt/fp-types';\nimport { useFormContext } from 'react-hook-form';\nimport KontrollerFaktaPeriodeMedApMarkering from '../typer/kontrollerFaktaPeriodeMedApMarkering';\n\nimport styles from './graderingOgSamtidigUttakPanel.module.css';\n\nexport enum Årsakstype {\n  UTTAK = 'UTTAK',\n  OVERFØRING = 'OVERFØRING',\n  UTSETTELSE = 'UTSETTELSE',\n  OPPHOLD = 'OPPHOLD',\n}\n\nexport type FormValues = KontrollerFaktaPeriodeMedApMarkering & {\n  arbeidsgiverId?: string;\n  harGradering?: boolean;\n  harSamtidigUttaksprosent?: boolean;\n};\n\n// vanlig arbeidsgivernavn (orgnr)...arbeidsforholdid\n// privatperson - KLANG...(18.08.1980)\nconst formatDate = (dato: string): string => dayjs(dato).format(DDMMYYYY_DATE_FORMAT);\nconst getEndCharFromId = (id: any): string => (id ? `...${id.substring(id.length - 4, id.length)}` : '');\n\nconst lagVisningsNavn = (arbeidsgiverOpplysning: ArbeidsgiverOpplysninger, eksternArbeidsforholdId?: any) => {\n  const { navn, fødselsdato, erPrivatPerson, identifikator } = arbeidsgiverOpplysning;\n\n  let visningsNavn = `${navn}`;\n  if (!erPrivatPerson) {\n    visningsNavn = identifikator ? `${visningsNavn} (${identifikator})` : visningsNavn;\n    visningsNavn = `${visningsNavn}${getEndCharFromId(eksternArbeidsforholdId)}`;\n  } else {\n    visningsNavn = `${navn.substring(0, 5)}...(${fødselsdato ? formatDate(fødselsdato) : '-'})`;\n  }\n  return visningsNavn;\n};\n\nconst mapArbeidsforhold = (\n  faktaArbeidsforhold: FaktaArbeidsforhold[],\n  alleKodeverk: AlleKodeverk,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n): ReactElement[] =>\n  faktaArbeidsforhold.map(andel => {\n    const { arbeidType, arbeidsgiverReferanse } = andel;\n\n    const arbeidsgiverOpplysninger = arbeidsgiverReferanse\n      ? arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse]\n      : undefined;\n\n    let periodeArbeidsforhold = '';\n    if (arbeidType && arbeidType !== uttakArbeidType.ORDINÆRT_ARBEID) {\n      periodeArbeidsforhold = alleKodeverk[KodeverkType.UTTAK_ARBEID_TYPE].find(k => k.kode === arbeidType)?.navn || '';\n    } else if (arbeidsgiverOpplysninger) {\n      periodeArbeidsforhold = lagVisningsNavn(arbeidsgiverOpplysninger);\n    }\n\n    return (\n      <option value={`${arbeidsgiverReferanse}-${arbeidType}`} key={guid()}>\n        {periodeArbeidsforhold}\n      </option>\n    );\n  });\n\ninterface OwnProps {\n  valgtPeriode?: KontrollerFaktaPeriodeMedApMarkering;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  faktaArbeidsforhold: FaktaArbeidsforhold[];\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\nconst GraderingOgSamtidigUttakPanel: FunctionComponent<OwnProps> = ({\n  valgtPeriode,\n  arbeidsgiverOpplysningerPerId,\n  faktaArbeidsforhold,\n  readOnly,\n  alleKodeverk,\n}) => {\n  const aRef = valgtPeriode?.arbeidsforhold?.arbeidsgiverReferanse;\n  const arbeidsgiverFinnesIkke = aRef && aRef !== 'null' && !arbeidsgiverOpplysningerPerId[aRef];\n\n  const [visGradering, setGradering] = useState(!!valgtPeriode?.arbeidstidsprosent);\n  const [visSamtidigUttaksgradering, setSamtidigUttaksgradering] = useState(!!valgtPeriode?.samtidigUttaksprosent);\n  const toggleGradering = useCallback(() => setGradering(old => !old), []);\n  const toggleSamtidigUttaksprosent = useCallback(() => setSamtidigUttaksgradering(old => !old), []);\n\n  const { unregister } = useFormContext<FormValues>();\n\n  useEffect(() => {\n    if (!visGradering) {\n      unregister('arbeidstidsprosent');\n      unregister('arbeidsgiverId');\n    }\n  }, [visGradering]);\n  useEffect(() => {\n    if (!visSamtidigUttaksgradering) {\n      unregister('samtidigUttaksprosent');\n    }\n  }, [visSamtidigUttaksgradering]);\n\n  return (\n    <>\n      <VerticalSpacer sixteenPx />\n      <FlexRow>\n        <FlexColumn>\n          <CheckboxField\n            name=\"harGradering\"\n            label={<FormattedMessage id=\"UttakFaktaDetailForm.HarGradering\" />}\n            readOnly={readOnly}\n            onChange={toggleGradering}\n          />\n        </FlexColumn>\n        <FlexColumn>\n          <CheckboxField\n            name=\"harSamtidigUttaksprosent\"\n            label={<FormattedMessage id=\"UttakFaktaDetailForm.HarSamtidigUttaksprosent\" />}\n            readOnly={readOnly}\n            onChange={toggleSamtidigUttaksprosent}\n          />\n        </FlexColumn>\n      </FlexRow>\n      {!readOnly && arbeidsgiverFinnesIkke && (\n        <div className={styles.alert}>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"info\">\n            <FormattedMessage id=\"UttakFaktaDetailForm.UkjentArbeidsgiver\" values={{ aRef }} />\n          </Alert>\n        </div>\n      )}\n      {(visGradering || visSamtidigUttaksgradering) && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <FlexRow>\n            {visGradering && (\n              <>\n                <FlexColumn>\n                  <NumberField\n                    name=\"arbeidstidsprosent\"\n                    label={<FormattedMessage id=\"UttakFaktaDetailForm.GraderingProsent\" />}\n                    forceTwoDecimalDigits\n                    validate={[required]}\n                    className={styles.gradering}\n                    readOnly={readOnly}\n                  />\n                </FlexColumn>\n                <FlexColumn className={styles.marginGradering}>\n                  <SelectField\n                    name=\"arbeidsgiverId\"\n                    label={<FormattedMessage id=\"UttakFaktaDetailForm.Arbeidsgiver\" />}\n                    validate={[required]}\n                    selectValues={mapArbeidsforhold(faktaArbeidsforhold, alleKodeverk, arbeidsgiverOpplysningerPerId)}\n                    readOnly={readOnly}\n                  />\n                </FlexColumn>\n              </>\n            )}\n            {visSamtidigUttaksgradering && (\n              <FlexColumn>\n                <NumberField\n                  name=\"samtidigUttaksprosent\"\n                  label={<FormattedMessage id=\"UttakFaktaDetailForm.SamtidigUttaksprosent\" />}\n                  validate={[required]}\n                  forceTwoDecimalDigits\n                  readOnly={readOnly}\n                />\n              </FlexColumn>\n            )}\n          </FlexRow>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default GraderingOgSamtidigUttakPanel;\n","import React, { FunctionComponent, useCallback, useState, useMemo, useEffect } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useForm, UseFormGetValues } from 'react-hook-form';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\nimport { Datepicker, RadioGroupPanel, Form, SelectField, CheckboxField } from '@navikt/ft-form-hooks';\nimport { FlexColumn, FlexContainer, FlexRow, OkAvbrytModal, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { BodyShort, Button, Label } from '@navikt/ds-react';\nimport { omitMany } from '@navikt/ft-utils';\n\nimport { AlleKodeverk, ArbeidsgiverOpplysningerPerId, Fagsak, FaktaArbeidsforhold } from '@navikt/fp-types';\nimport { KodeverkType, StonadskontoType, uttakPeriodeType } from '@navikt/fp-kodeverk';\n\nimport { RelasjonsRolleType } from '@navikt/ft-kodeverk';\nimport FordelingPeriodeKilde from '../kodeverk/fordelingPeriodeKilde';\n\nimport styles from './uttakFaktaDetailForm.module.css';\nimport KontrollerFaktaPeriodeMedApMarkering from '../typer/kontrollerFaktaPeriodeMedApMarkering';\nimport GraderingOgSamtidigUttakPanel, {\n  FormValues as FormValuesGraderingOgSamtidigUttak,\n} from './GraderingOgSamtidigUttakPanel';\n\ntype FormValues = FormValuesGraderingOgSamtidigUttak & {\n  arsakstype: string;\n};\n\nexport enum Årsakstype {\n  UTTAK = 'UTTAK',\n  OVERFØRING = 'OVERFØRING',\n  UTSETTELSE = 'UTSETTELSE',\n  OPPHOLD = 'OPPHOLD',\n}\n\nconst ÅRSAKSTYPE_TEKST_KODER = {\n  [Årsakstype.UTTAK]: 'UttakFaktaDetailForm.Uttak',\n  [Årsakstype.OVERFØRING]: 'UttakFaktaDetailForm.Overføring',\n  [Årsakstype.UTSETTELSE]: 'UttakFaktaDetailForm.Utsettelse',\n  [Årsakstype.OPPHOLD]: 'UttakFaktaDetailForm.Opphold',\n} as Record<string, string>;\n\nexport const utledÅrsakstype = (valgtPeriode: KontrollerFaktaPeriodeMedApMarkering): Årsakstype => {\n  if (valgtPeriode.utsettelseÅrsak) {\n    return Årsakstype.UTSETTELSE;\n  }\n  if (valgtPeriode.overføringÅrsak) {\n    return Årsakstype.OVERFØRING;\n  }\n  if (valgtPeriode.oppholdÅrsak) {\n    return Årsakstype.OPPHOLD;\n  }\n  return Årsakstype.UTTAK;\n};\n\nconst lagDefaultVerdier = (\n  valgtPeriode: KontrollerFaktaPeriodeMedApMarkering,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n): FormValues => {\n  const arsakstype = utledÅrsakstype(valgtPeriode);\n\n  const aRef =\n    valgtPeriode.arbeidsforhold?.arbeidsgiverReferanse !== 'null'\n      ? valgtPeriode.arbeidsforhold?.arbeidsgiverReferanse\n      : undefined;\n  const aOpplysninger = aRef ? arbeidsgiverOpplysningerPerId[aRef] : undefined;\n\n  let arbeidsgiverId;\n\n  if ((!!aRef && aOpplysninger) || (valgtPeriode.arbeidsforhold && !aRef)) {\n    arbeidsgiverId = `${valgtPeriode.arbeidsforhold?.arbeidsgiverReferanse}-${valgtPeriode.arbeidsforhold?.arbeidType}`;\n  }\n\n  return {\n    ...valgtPeriode,\n    arsakstype,\n    arbeidsgiverId,\n    harGradering: !!valgtPeriode.arbeidstidsprosent,\n    harSamtidigUttaksprosent: !!valgtPeriode.samtidigUttaksprosent,\n  };\n};\n\nconst transformValues = (values: FormValues): KontrollerFaktaPeriodeMedApMarkering => ({\n  ...omitMany(values, ['arsakstype', 'arbeidsgiverId', 'harGradering', 'harSamtidigUttaksprosent']),\n  arbeidsforhold: values.arbeidsgiverId\n    ? {\n        arbeidsgiverReferanse:\n          values.arbeidsgiverId.split('-')[0] === 'null' ? undefined : values.arbeidsgiverId.split('-')[0],\n        arbeidType: values.arbeidsgiverId.split('-')[1],\n      }\n    : undefined,\n  periodeKilde: FordelingPeriodeKilde.SAKSBEHANDLER,\n  aksjonspunktType: undefined,\n  arbeidstidsprosent: values.arbeidstidsprosent,\n  samtidigUttaksprosent: values.samtidigUttaksprosent,\n});\n\nconst validerTomEtterFom = (intl: IntlShape, getValues: UseFormGetValues<FormValues>) => (tom?: string) =>\n  dayjs(tom).isBefore(getValues('fom')) ? intl.formatMessage({ id: 'UttakFaktaDetailForm.TomForFom' }) : null;\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  valgtPeriode?: KontrollerFaktaPeriodeMedApMarkering;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  faktaArbeidsforhold: FaktaArbeidsforhold[];\n  slettPeriode?: () => void;\n  avbrytEditering: () => void;\n  readOnly: boolean;\n  oppdaterPeriode: (uttaksperiode: KontrollerFaktaPeriodeMedApMarkering) => void;\n  alleKodeverk: AlleKodeverk;\n  defaultMonth?: Date;\n}\n\nconst UttakFaktaDetailForm: FunctionComponent<OwnProps> = ({\n  fagsak,\n  valgtPeriode,\n  arbeidsgiverOpplysningerPerId,\n  faktaArbeidsforhold,\n  slettPeriode,\n  avbrytEditering,\n  oppdaterPeriode,\n  readOnly,\n  alleKodeverk,\n  defaultMonth,\n}) => {\n  const intl = useIntl();\n\n  const defaultValues = useMemo(\n    () => (valgtPeriode ? lagDefaultVerdier(valgtPeriode, arbeidsgiverOpplysningerPerId) : undefined),\n    [valgtPeriode, arbeidsgiverOpplysningerPerId],\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues,\n  });\n\n  const [visSletteDialog, settVisSletteDialog] = useState(false);\n  const slettUttaksperiode = useCallback(() => {\n    settVisSletteDialog(false);\n    if (slettPeriode) {\n      slettPeriode();\n    }\n  }, []);\n\n  const sorterteUttakPeriodeTyper = useMemo(\n    () =>\n      [...alleKodeverk[KodeverkType.UTTAK_PERIODE_TYPE]]\n        .sort((k1, k2) => k1.navn.localeCompare(k2.navn))\n        .filter(k => k.kode !== uttakPeriodeType.ANNET),\n    [],\n  );\n  const sorterteOverføringÅrsaker = useMemo(\n    () => [...alleKodeverk[KodeverkType.OVERFOERING_AARSAK_TYPE]].sort((k1, k2) => k1.navn.localeCompare(k2.navn)),\n    [],\n  );\n  const sorterteUtsettelseÅrsaker = useMemo(\n    () => [...alleKodeverk[KodeverkType.UTSETTELSE_AARSAK_TYPE]].sort((k1, k2) => k1.navn.localeCompare(k2.navn)),\n    [],\n  );\n  const sorterteOppholdÅrsaker = useMemo(\n    () => [...alleKodeverk[KodeverkType.OPPHOLD_ARSAK]].sort((k1, k2) => k1.navn.localeCompare(k2.navn)),\n    [],\n  );\n  const sorterteMorsAktiviteter = useMemo(\n    () => [...alleKodeverk[KodeverkType.MORS_AKTIVITET]].sort((k1, k2) => k1.navn.localeCompare(k2.navn)),\n    [],\n  );\n\n  const årsakstype = formMethods.watch('arsakstype');\n  const flerbarnsdager = formMethods.watch('flerbarnsdager');\n  const stønadskonto = formMethods.watch('uttakPeriodeType');\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  useEffect(() => {\n    if (defaultValues?.arsakstype !== årsakstype) {\n      formMethods.unregister('uttakPeriodeType');\n      formMethods.unregister('overføringÅrsak');\n      formMethods.unregister('oppholdÅrsak');\n      formMethods.unregister('utsettelseÅrsak');\n      formMethods.unregister('arbeidstidsprosent');\n      formMethods.unregister('utsettelseÅrsak');\n      formMethods.unregister('arbeidsgiverId');\n      formMethods.unregister('samtidigUttaksprosent');\n      formMethods.unregister('morsAktivitet');\n      formMethods.unregister('flerbarnsdager');\n    }\n  }, [årsakstype]);\n\n  const onSubmit = useCallback((values: FormValues) => oppdaterPeriode(transformValues(values)), [oppdaterPeriode]);\n\n  const erUttakOgFellesperiodeEllerForeldrepenger =\n    årsakstype === Årsakstype.UTTAK &&\n    (stønadskonto === StonadskontoType.FELLESPERIODE || stønadskonto === StonadskontoType.FORELDREPENGER);\n  const visMorsAktivitet =\n    fagsak.relasjonsRolleType !== RelasjonsRolleType.MOR &&\n    (erUttakOgFellesperiodeEllerForeldrepenger || årsakstype === Årsakstype.UTSETTELSE);\n\n  return (\n    <>\n      {visSletteDialog && (\n        <OkAvbrytModal\n          text={intl.formatMessage({ id: 'UttakFaktaDetailForm.VilDuSlette' })}\n          submit={slettUttaksperiode}\n          cancel={() => settVisSletteDialog(false)}\n          showModal\n        />\n      )}\n      <Form formMethods={formMethods} onSubmit={onSubmit}>\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              <Datepicker\n                name=\"fom\"\n                label={<FormattedMessage id=\"UttakFaktaDetailForm.Fom\" />}\n                validate={[required, hasValidDate]}\n                isReadOnly={readOnly}\n                defaultMonth={defaultMonth}\n              />\n            </FlexColumn>\n            <FlexColumn>\n              <Datepicker\n                name=\"tom\"\n                label={<FormattedMessage id=\"UttakFaktaDetailForm.Tom\" />}\n                validate={[required, hasValidDate, validerTomEtterFom(intl, formMethods.getValues)]}\n                isReadOnly={readOnly}\n                defaultMonth={defaultMonth}\n              />\n            </FlexColumn>\n            {slettPeriode && !readOnly && (\n              <FlexColumn className={styles.marginBtn}>\n                <Button\n                  size=\"small\"\n                  variant=\"tertiary\"\n                  type=\"button\"\n                  icon={<TrashIcon />}\n                  onClick={() => settVisSletteDialog(true)}\n                >\n                  <FormattedMessage id=\"UttakFaktaDetailForm.Slett\" />\n                </Button>\n              </FlexColumn>\n            )}\n          </FlexRow>\n          <VerticalSpacer sixteenPx />\n          <FlexRow>\n            <FlexColumn>\n              {readOnly && (\n                <>\n                  <Label size=\"small\">\n                    <FormattedMessage id=\"UttakFaktaDetailForm.Periodetype\" />\n                  </Label>\n                  <BodyShort size=\"small\">\n                    <FormattedMessage id={ÅRSAKSTYPE_TEKST_KODER[årsakstype]} />\n                  </BodyShort>\n                </>\n              )}\n              {!readOnly && (\n                <RadioGroupPanel\n                  name=\"arsakstype\"\n                  label={<FormattedMessage id=\"UttakFaktaDetailForm.Periodetype\" />}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  radios={Object.keys(Årsakstype).map(type => ({\n                    value: type,\n                    label: intl.formatMessage({ id: ÅRSAKSTYPE_TEKST_KODER[type] }),\n                  }))}\n                />\n              )}\n            </FlexColumn>\n          </FlexRow>\n          {(årsakstype === Årsakstype.UTTAK || årsakstype === Årsakstype.OVERFØRING) && (\n            <>\n              <VerticalSpacer sixteenPx />\n              <FlexRow>\n                <FlexColumn>\n                  <SelectField\n                    name=\"uttakPeriodeType\"\n                    label={<FormattedMessage id=\"UttakFaktaDetailForm.Stonadskonto\" />}\n                    validate={[required]}\n                    selectValues={sorterteUttakPeriodeTyper.map(vt => (\n                      <option key={vt.kode} value={vt.kode}>\n                        {vt.navn}\n                      </option>\n                    ))}\n                    readOnly={readOnly}\n                  />\n                </FlexColumn>\n              </FlexRow>\n            </>\n          )}\n          {årsakstype !== Årsakstype.UTTAK && (\n            <>\n              <VerticalSpacer sixteenPx />\n              <FlexRow>\n                <FlexColumn>\n                  {årsakstype === Årsakstype.UTSETTELSE && (\n                    <SelectField\n                      name=\"utsettelseÅrsak\"\n                      label={<FormattedMessage id=\"UttakFaktaDetailForm.Årsak\" />}\n                      validate={[required]}\n                      className={styles.selectArsak}\n                      selectValues={sorterteUtsettelseÅrsaker.map(vt => (\n                        <option key={vt.kode} value={vt.kode}>\n                          {vt.navn}\n                        </option>\n                      ))}\n                      readOnly={readOnly}\n                    />\n                  )}\n                  {årsakstype === Årsakstype.OVERFØRING && (\n                    <SelectField\n                      name=\"overføringÅrsak\"\n                      label={<FormattedMessage id=\"UttakFaktaDetailForm.Årsak\" />}\n                      validate={[required]}\n                      className={styles.selectArsak}\n                      selectValues={sorterteOverføringÅrsaker.map(vt => (\n                        <option key={vt.kode} value={vt.kode}>\n                          {vt.navn}\n                        </option>\n                      ))}\n                      readOnly={readOnly}\n                    />\n                  )}\n                  {årsakstype === Årsakstype.OPPHOLD && (\n                    <SelectField\n                      name=\"oppholdÅrsak\"\n                      label={<FormattedMessage id=\"UttakFaktaDetailForm.Årsak\" />}\n                      validate={[required]}\n                      className={styles.selectArsak}\n                      selectValues={sorterteOppholdÅrsaker.map(vt => (\n                        <option key={vt.kode} value={vt.kode}>\n                          {vt.navn}\n                        </option>\n                      ))}\n                      readOnly={readOnly}\n                    />\n                  )}\n                </FlexColumn>\n              </FlexRow>\n            </>\n          )}\n          {årsakstype === Årsakstype.UTTAK && (\n            <GraderingOgSamtidigUttakPanel\n              valgtPeriode={valgtPeriode}\n              arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n              faktaArbeidsforhold={faktaArbeidsforhold}\n              readOnly={readOnly}\n              alleKodeverk={alleKodeverk}\n            />\n          )}\n          {visMorsAktivitet && (\n            <>\n              <VerticalSpacer sixteenPx />\n              <FlexRow>\n                <FlexColumn>\n                  <SelectField\n                    name=\"morsAktivitet\"\n                    label={<FormattedMessage id=\"UttakFaktaDetailForm.MorsAktivitet\" />}\n                    className={styles.select}\n                    selectValues={sorterteMorsAktiviteter.map(vt => (\n                      <option key={vt.kode} value={vt.kode}>\n                        {vt.navn}\n                      </option>\n                    ))}\n                    readOnly={readOnly}\n                  />\n                </FlexColumn>\n              </FlexRow>\n            </>\n          )}\n          {årsakstype === Årsakstype.UTTAK && (\n            <>\n              <VerticalSpacer sixteenPx />\n              <FlexRow>\n                <FlexColumn>\n                  {readOnly && (\n                    <>\n                      <Label size=\"small\">\n                        <FormattedMessage id=\"UttakFaktaDetailForm.HarFlerbarnsdager\" />\n                      </Label>\n                      <BodyShort size=\"small\">\n                        <FormattedMessage\n                          id={flerbarnsdager === true ? 'UttakFaktaDetailForm.Ja' : 'UttakFaktaDetailForm.Nei'}\n                        />\n                      </BodyShort>\n                    </>\n                  )}\n                  {!readOnly && (\n                    <CheckboxField\n                      name=\"flerbarnsdager\"\n                      label={<FormattedMessage id=\"UttakFaktaDetailForm.Flerbarnsdager\" />}\n                    />\n                  )}\n                </FlexColumn>\n              </FlexRow>\n            </>\n          )}\n          {begrunnelse && (\n            <>\n              <VerticalSpacer sixteenPx />\n              <Label size=\"small\">\n                <FormattedMessage id=\"UttakFaktaDetailForm.Begrunnelse\" />\n              </Label>\n              <BodyShort size=\"small\">{begrunnelse}</BodyShort>\n            </>\n          )}\n          {!readOnly && (\n            <>\n              <VerticalSpacer thirtyTwoPx />\n              <FlexRow>\n                <FlexColumn>\n                  <Button\n                    size=\"small\"\n                    variant=\"secondary\"\n                    loading={false}\n                    disabled={!formMethods.formState.isDirty || readOnly}\n                  >\n                    <FormattedMessage id=\"UttakFaktaDetailForm.Oppdater\" />\n                  </Button>\n                </FlexColumn>\n                <FlexColumn>\n                  <Button size=\"small\" variant=\"tertiary\" onClick={avbrytEditering} disabled={readOnly} type=\"button\">\n                    <FormattedMessage id=\"UttakFaktaDetailForm.Avbryt\" />\n                  </Button>\n                </FlexColumn>\n              </FlexRow>\n            </>\n          )}\n        </FlexContainer>\n        <VerticalSpacer thirtyTwoPx />\n      </Form>\n    </>\n  );\n};\n\nexport default UttakFaktaDetailForm;\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Table, ExpandableTableRow, TableColumn, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { calcDaysAndWeeks, dateFormat } from '@navikt/ft-utils';\nimport { Button, Heading } from '@navikt/ds-react';\nimport { PlusCircleIcon } from '@navikt/aksel-icons';\n\nimport { AlleKodeverk, ArbeidsgiverOpplysningerPerId, Fagsak, FaktaArbeidsforhold } from '@navikt/fp-types';\nimport { KodeverkType } from '@navikt/fp-kodeverk';\n\nimport UttakFaktaDetailForm, { utledÅrsakstype, Årsakstype } from './UttakFaktaDetailForm';\nimport KontrollerFaktaPeriodeMedApMarkering from '../typer/kontrollerFaktaPeriodeMedApMarkering';\n\nimport styles from './uttakFaktaTable.module.css';\n\nconst HEADER_TEXT_CODES = [\n  'UttakFaktaTable.Periode',\n  'UttakFaktaTable.AntallDager',\n  'UttakFaktaTable.Type',\n  'UttakFaktaTable.Kilde',\n  'EMPTY',\n];\n\nconst getTypeTekst = (\n  alleKodeverk: AlleKodeverk,\n  periode: KontrollerFaktaPeriodeMedApMarkering,\n  intl: IntlShape,\n): string | undefined => {\n  const årsaktype = utledÅrsakstype(periode);\n  if (årsaktype === Årsakstype.UTTAK || årsaktype === Årsakstype.OVERFØRING) {\n    const tekst = alleKodeverk[KodeverkType.UTTAK_PERIODE_TYPE].find(k => k.kode === periode.uttakPeriodeType)?.navn;\n    return periode.arbeidstidsprosent && periode.arbeidstidsprosent > 0\n      ? `${tekst} - Gradert ${periode.arbeidstidsprosent}%`\n      : tekst;\n  }\n  if (årsaktype === Årsakstype.OPPHOLD) {\n    const navn = alleKodeverk[KodeverkType.OPPHOLD_ARSAK].find(k => k.kode === periode.oppholdÅrsak)?.navn;\n    return intl.formatMessage({ id: 'UttakFaktaTabel.Opphold' }, { arsak: navn?.replace('har uttak av', '') });\n  }\n  if (årsaktype === Årsakstype.UTSETTELSE) {\n    const navn = alleKodeverk[KodeverkType.UTSETTELSE_AARSAK_TYPE].find(k => k.kode === periode.utsettelseÅrsak)?.navn;\n    return intl.formatMessage({ id: 'UttakFaktaTabel.Utsettelse' }, { arsak: navn });\n  }\n  return '';\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  valgteFomDatoer: string[];\n  setValgteFomDatoer: React.Dispatch<React.SetStateAction<string[]>>;\n  uttakKontrollerFaktaPerioder: KontrollerFaktaPeriodeMedApMarkering[];\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  faktaArbeidsforhold: FaktaArbeidsforhold[];\n  oppdaterUttakPerioder: (perioder: KontrollerFaktaPeriodeMedApMarkering[]) => void;\n  alleKodeverk: AlleKodeverk;\n  readOnly: boolean;\n  setDirty: (isDirty: boolean) => void;\n  erRedigerbart: boolean;\n  visNyPeriode: boolean;\n  settVisNyPeriode: (vis: boolean) => void;\n}\n\nconst UttakFaktaTable: FunctionComponent<OwnProps> = ({\n  fagsak,\n  valgteFomDatoer,\n  setValgteFomDatoer,\n  uttakKontrollerFaktaPerioder,\n  arbeidsgiverOpplysningerPerId,\n  faktaArbeidsforhold,\n  oppdaterUttakPerioder,\n  alleKodeverk,\n  readOnly,\n  setDirty,\n  erRedigerbart,\n  visNyPeriode,\n  settVisNyPeriode,\n}) => {\n  const intl = useIntl();\n\n  const velgPeriodeFomDato = useCallback(\n    (fom?: string, lukkAlleAndre = false) => {\n      if (fom && valgteFomDatoer.includes(fom)) {\n        setValgteFomDatoer(foms => foms.filter(f => f !== fom));\n      } else if (lukkAlleAndre) {\n        const nye = fom ? [fom] : [];\n        setValgteFomDatoer(() => nye);\n      } else if (fom) {\n        setValgteFomDatoer(foms => foms.concat(fom));\n      }\n    },\n    [valgteFomDatoer, setValgteFomDatoer],\n  );\n\n  const oppdaterPeriode = useCallback(\n    (uPeriode: KontrollerFaktaPeriodeMedApMarkering) => {\n      const oppdatertePerioder = uttakKontrollerFaktaPerioder\n        .filter(p => p.originalFom !== uPeriode.originalFom)\n        .concat(uPeriode)\n        .sort((a1, a2) => dayjs(a1.fom).diff(dayjs(a2.fom)));\n\n      setDirty(true);\n      oppdaterUttakPerioder(oppdatertePerioder);\n      velgPeriodeFomDato(undefined, true);\n    },\n    [uttakKontrollerFaktaPerioder],\n  );\n\n  const slettPeriode = useCallback(\n    (fom: string) => {\n      const oppdatertePerioder = uttakKontrollerFaktaPerioder.filter(p => p.originalFom !== fom);\n      oppdaterUttakPerioder(oppdatertePerioder);\n      setDirty(true);\n    },\n    [uttakKontrollerFaktaPerioder],\n  );\n\n  const sisteMåned =\n    uttakKontrollerFaktaPerioder.length > 0\n      ? new Date(uttakKontrollerFaktaPerioder[uttakKontrollerFaktaPerioder.length - 1].tom)\n      : undefined;\n\n  return (\n    <>\n      <Table headerTextCodes={HEADER_TEXT_CODES} noHover hasGrayHeader>\n        {uttakKontrollerFaktaPerioder.map(periode => {\n          const numberOfDaysAndWeeks = calcDaysAndWeeks(periode.fom, periode.tom);\n          return (\n            <ExpandableTableRow\n              key={periode.fom + periode.tom}\n              isApLeftBorder={!!periode.aksjonspunktType}\n              showContent={valgteFomDatoer.includes(periode.fom)}\n              toggleContent={() => velgPeriodeFomDato(periode.fom)}\n              content={\n                valgteFomDatoer.includes(periode.fom) && (\n                  <UttakFaktaDetailForm\n                    fagsak={fagsak}\n                    valgtPeriode={periode}\n                    readOnly={readOnly || !erRedigerbart}\n                    oppdaterPeriode={oppdaterPeriode}\n                    slettPeriode={() => slettPeriode(periode.originalFom)}\n                    avbrytEditering={() => velgPeriodeFomDato(periode.fom)}\n                    alleKodeverk={alleKodeverk}\n                    arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n                    faktaArbeidsforhold={faktaArbeidsforhold}\n                  />\n                )\n              }\n            >\n              <TableColumn>{`${dateFormat(periode.fom)} - ${dateFormat(periode.tom)}`}</TableColumn>\n              <TableColumn>{numberOfDaysAndWeeks.formattedString}</TableColumn>\n              <TableColumn>{getTypeTekst(alleKodeverk, periode, intl)}</TableColumn>\n              <TableColumn>\n                {alleKodeverk[KodeverkType.FORDELING_PERIODE_KILDE].find(k => k.kode === periode.periodeKilde)?.navn}\n              </TableColumn>\n            </ExpandableTableRow>\n          );\n        })}\n      </Table>\n      {erRedigerbart && (\n        <>\n          {!visNyPeriode && (\n            <Button\n              size=\"small\"\n              variant=\"tertiary\"\n              type=\"button\"\n              icon={<PlusCircleIcon />}\n              onClick={() => {\n                velgPeriodeFomDato(undefined, true);\n                settVisNyPeriode(true);\n              }}\n            >\n              <FormattedMessage id=\"UttakFaktaForm.LeggTilPeriode\" />\n            </Button>\n          )}\n          {visNyPeriode && (\n            <div className={styles.panel}>\n              <Heading size=\"small\">\n                <FormattedMessage id=\"UttakFaktaForm.NyPeriode\" />\n              </Heading>\n              <VerticalSpacer sixteenPx />\n              <UttakFaktaDetailForm\n                fagsak={fagsak}\n                avbrytEditering={() => settVisNyPeriode(false)}\n                readOnly={false}\n                alleKodeverk={alleKodeverk}\n                oppdaterPeriode={(uttaksperiode: KontrollerFaktaPeriodeMedApMarkering) => {\n                  const nyeSortertePerioder = uttakKontrollerFaktaPerioder\n                    .concat(uttaksperiode)\n                    .sort((a1, a2) => dayjs(a1.fom).diff(dayjs(a2.fom)));\n                  setDirty(true);\n                  oppdaterUttakPerioder(nyeSortertePerioder);\n                  settVisNyPeriode(false);\n                }}\n                arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n                faktaArbeidsforhold={faktaArbeidsforhold}\n                defaultMonth={sisteMåned}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default UttakFaktaTable;\n","import { KontrollerFaktaPeriode } from '@navikt/fp-types';\n\nexport enum PeriodeApType {\n  START_FOM = 'START_FOM',\n  INGEN_PERIODER = 'INGEN_PERIODER',\n  MANGLENDE_ARBEIDSFORHOLD = 'MANGLENDE_ARBEIDSFORHOLD',\n}\n\ntype KontrollerFaktaPeriodeMedApMarkering = KontrollerFaktaPeriode &\n  Readonly<{\n    originalFom: string;\n    aksjonspunktType?: PeriodeApType;\n  }>;\n\nexport default KontrollerFaktaPeriodeMedApMarkering;\n","import React, { useCallback, FunctionComponent, useState, useEffect, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Form } from '@navikt/ft-form-hooks';\nimport { ErrorSummary, Heading } from '@navikt/ds-react';\nimport {\n  AksjonspunktHelpTextHTML,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  OverstyringKnapp,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { AksjonspunktStatus, FamilieHendelseType, isAksjonspunktOpen } from '@navikt/ft-kodeverk';\n\nimport { FaktaSubmitButtonNew, FaktaBegrunnelseTextFieldNew, validerApKodeOgHentApEnum } from '@navikt/fp-fakta-felles';\nimport {\n  Aksjonspunkt,\n  KontrollerFaktaPeriode,\n  Ytelsefordeling,\n  AlleKodeverk,\n  ArbeidsgiverOpplysningerPerId,\n  FaktaArbeidsforhold,\n  Fagsak,\n} from '@navikt/fp-types';\nimport { BekreftUttaksperioderAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { AksjonspunktCode, relasjonsRolleType } from '@navikt/fp-kodeverk';\n\nimport { dateRangesNotOverlapping } from '@navikt/ft-form-validators';\nimport UttakFaktaTable from './UttakFaktaTable';\nimport KontrollerFaktaPeriodeMedApMarkering, { PeriodeApType } from '../typer/kontrollerFaktaPeriodeMedApMarkering';\n\nconst finnAksjonspunktTekster = (aksjonspunkter: Aksjonspunkt[], ytelsefordeling: Ytelsefordeling) =>\n  aksjonspunkter\n    .filter(ap => ap.status === AksjonspunktStatus.OPPRETTET)\n    .map(ap => {\n      const førsteUttaksdato =\n        ytelsefordeling && ytelsefordeling.førsteUttaksdato ? ytelsefordeling.førsteUttaksdato : undefined;\n      const førsteUttak = {\n        value: dayjs(førsteUttaksdato).format(DDMMYYYY_DATE_FORMAT),\n      };\n\n      return (\n        <FormattedMessage\n          key={`UttakFaktaForm.Aksjonspunkt.${ap.definisjon}`}\n          id={`UttakFaktaForm.Aksjonspunkt.${ap.definisjon}`}\n          values={førsteUttak}\n        />\n      );\n    });\n\nconst leggTilAksjonspunktMarkering = (\n  perioder: KontrollerFaktaPeriode[],\n  aksjonspunkter: Aksjonspunkt[],\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n): KontrollerFaktaPeriodeMedApMarkering[] =>\n  perioder.map(periode => {\n    if (\n      aksjonspunkter.some(\n        ap =>\n          (ap.definisjon === AksjonspunktCode.FAKTA_UTTAK_GRADERING_UKJENT_AKTIVITET_KODE ||\n            ap.definisjon === AksjonspunktCode.FAKTA_UTTAK_GRADERING_AKTIVITET_UTEN_BEREGNINGSGRUNNLAG_KODE) &&\n          ap.status === AksjonspunktStatus.OPPRETTET,\n      ) &&\n      periode.arbeidsforhold?.arbeidsgiverReferanse &&\n      !arbeidsgiverOpplysningerPerId[periode.arbeidsforhold?.arbeidsgiverReferanse]\n    ) {\n      return {\n        ...periode,\n        originalFom: periode.fom,\n        aksjonspunktType: PeriodeApType.MANGLENDE_ARBEIDSFORHOLD,\n      };\n    }\n\n    return {\n      ...periode,\n      originalFom: periode.fom,\n    };\n  });\n\nconst periodeSkalVurderesIftFørsteDato = (periode: KontrollerFaktaPeriode): boolean =>\n  !(periode.utsettelseÅrsak || periode.oppholdÅrsak);\n\nconst valider = (\n  uttakPerioder: KontrollerFaktaPeriodeMedApMarkering[],\n  erMor: boolean,\n  intl: IntlShape,\n  dato: string,\n  erFørsteUttaktsdato: boolean,\n) => {\n  if (\n    uttakPerioder.filter(up => erMor || periodeSkalVurderesIftFørsteDato(up)).some(up => dayjs(up.fom).isBefore(dato))\n  ) {\n    return intl.formatMessage(\n      {\n        id: erFørsteUttaktsdato\n          ? 'UttakFaktaDetailForm.ErFørFørsteUttaktsdato'\n          : 'UttakFaktaDetailForm.ErFørFødselsdato',\n      },\n      { dato: dayjs(dato).format(DDMMYYYY_DATE_FORMAT) },\n    );\n  }\n\n  return undefined;\n};\n\nconst validerPerioder = (\n  fagsak: Fagsak,\n  uttakPerioder: KontrollerFaktaPeriodeMedApMarkering[],\n  erMor: boolean,\n  aksjonspunkter: Aksjonspunkt[],\n  førsteUttaksdato: string,\n  intl: IntlShape,\n): string | null => {\n  const periodeMap = uttakPerioder.map(({ fom, tom }) => [fom, tom]);\n  const erOverlappendePerioder = periodeMap.length > 0 ? !!dateRangesNotOverlapping(periodeMap) : undefined;\n  if (erOverlappendePerioder) {\n    return intl.formatMessage({ id: 'UttakFaktaForm.OverlappendePerioder' });\n  }\n\n  const fødselsdato =\n    fagsak.familiehendelse?.hendelseType === FamilieHendelseType.FODSEL\n      ? fagsak.familiehendelse.hendelseDato\n      : undefined;\n  const brukFødselsdato = erMor && !!fødselsdato && dayjs(fødselsdato).isBefore(førsteUttaksdato);\n  const tidligsteDato = brukFødselsdato ? fødselsdato : førsteUttaksdato;\n\n  if (uttakPerioder.every(up => !dayjs(up.fom).isSame(førsteUttaksdato))) {\n    return intl.formatMessage(\n      {\n        id: 'UttakFaktaDetailForm.ErIkkeLikForsteUttaksdato',\n      },\n      { dato: dayjs(førsteUttaksdato).format(DDMMYYYY_DATE_FORMAT) },\n    );\n  }\n\n  const feilmelding = valider(uttakPerioder, erMor, intl, tidligsteDato, brukFødselsdato);\n  if (feilmelding) {\n    return feilmelding;\n  }\n\n  const harApIngenPerioder = aksjonspunkter.some(\n    ap => ap.definisjon === AksjonspunktCode.FAKTA_UTTAK_INGEN_PERIODER_KODE,\n  );\n\n  return uttakPerioder.every(a => a.aksjonspunktType === undefined) &&\n    (!harApIngenPerioder || (harApIngenPerioder && uttakPerioder.length > 0))\n    ? null\n    : '';\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  ytelsefordeling: Ytelsefordeling;\n  uttakKontrollerFaktaPerioder: KontrollerFaktaPeriode[];\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  faktaArbeidsforhold: FaktaArbeidsforhold[];\n  alleKodeverk: AlleKodeverk;\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  formData: { uttakPerioder: KontrollerFaktaPeriodeMedApMarkering[]; begrunnelse: string };\n  setFormData: (data: { uttakPerioder: KontrollerFaktaPeriodeMedApMarkering[]; begrunnelse: string }) => void;\n  submitCallback: (aksjonspunkter: BekreftUttaksperioderAp[]) => Promise<void>;\n  submittable: boolean;\n  kanOverstyre: boolean;\n}\n\nconst UttakFaktaForm: FunctionComponent<OwnProps> = ({\n  fagsak,\n  uttakKontrollerFaktaPerioder,\n  arbeidsgiverOpplysningerPerId,\n  faktaArbeidsforhold,\n  ytelsefordeling,\n  alleKodeverk,\n  aksjonspunkter,\n  readOnly,\n  formData,\n  setFormData,\n  submitCallback,\n  submittable,\n  kanOverstyre,\n}) => {\n  const intl = useIntl();\n\n  const sortertePerioder = useMemo(() => {\n    const sortertListe = [...uttakKontrollerFaktaPerioder].sort((krav1, krav2) =>\n      dayjs(krav1.fom).diff(dayjs(krav2.fom)),\n    );\n    return leggTilAksjonspunktMarkering(sortertListe, aksjonspunkter, arbeidsgiverOpplysningerPerId);\n  }, [uttakKontrollerFaktaPerioder, aksjonspunkter, arbeidsgiverOpplysningerPerId]);\n\n  const [uttakPerioder, oppdaterUttakPerioder] = useState<KontrollerFaktaPeriodeMedApMarkering[]>(\n    formData?.uttakPerioder || sortertePerioder,\n  );\n\n  const [valgteFomDatoer, setValgteFomDatoer] = useState<string[]>([]);\n\n  const formMethods = useForm<{ begrunnelse: string }>({\n    defaultValues: {\n      begrunnelse: formData?.begrunnelse || (aksjonspunkter.length > 0 ? aksjonspunkter[0].begrunnelse : undefined),\n    },\n  });\n\n  useEffect(\n    () => () => {\n      setFormData({ uttakPerioder, begrunnelse: formMethods.getValues('begrunnelse') });\n    },\n    [uttakPerioder],\n  );\n\n  const automatiskeAksjonspunkter = aksjonspunkter.filter(a => a.definisjon !== AksjonspunktCode.OVERSTYR_FAKTA_UTTAK);\n  const bekreft = useCallback(\n    (begrunnelse: string) => {\n      const overstyrAp = [\n        {\n          // TODO Fiks hack\n          kode: validerApKodeOgHentApEnum(AksjonspunktCode.OVERSTYR_FAKTA_UTTAK, AksjonspunktCode.OVERSTYR_FAKTA_UTTAK),\n          perioder: uttakPerioder,\n          begrunnelse,\n        },\n      ];\n\n      const aksjonspunkterSomSkalBekreftes = automatiskeAksjonspunkter.map(ap => ({\n        kode: validerApKodeOgHentApEnum(\n          ap.definisjon,\n          AksjonspunktCode.FAKTA_UTTAK_MANUELT_SATT_STARTDATO_ULIK_SØKNAD_STARTDATO_KODE,\n          AksjonspunktCode.FAKTA_UTTAK_INGEN_PERIODER_KODE,\n          AksjonspunktCode.FAKTA_UTTAK_GRADERING_UKJENT_AKTIVITET_KODE,\n          AksjonspunktCode.FAKTA_UTTAK_GRADERING_AKTIVITET_UTEN_BEREGNINGSGRUNNLAG_KODE,\n        ),\n        perioder: uttakPerioder,\n        begrunnelse,\n      }));\n\n      return submitCallback(aksjonspunkterSomSkalBekreftes.length > 0 ? aksjonspunkterSomSkalBekreftes : overstyrAp);\n    },\n    [uttakPerioder],\n  );\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const [isDirty, setDirty] = useState(false);\n\n  const feilmelding = useMemo(() => {\n    if (isDirty || formMethods.formState.isDirty) {\n      const erMor = fagsak.relasjonsRolleType === relasjonsRolleType.MOR;\n      return validerPerioder(fagsak, uttakPerioder, erMor, aksjonspunkter, ytelsefordeling.førsteUttaksdato, intl);\n    }\n    return null;\n  }, [uttakPerioder, isDirty, formMethods.formState.isDirty]);\n\n  const [visNyPeriode, settVisNyPeriode] = useState(false);\n\n  const isSubmittable =\n    submittable && feilmelding === null && !!begrunnelse && !visNyPeriode && valgteFomDatoer.length === 0;\n\n  const [erOverstyrt, setOverstyrt] = useState(false);\n\n  const harApneAksjonspunkter = aksjonspunkter.some(ap => isAksjonspunktOpen(ap.status));\n  const aksjonspunktTekster = useMemo(\n    () => finnAksjonspunktTekster(aksjonspunkter, ytelsefordeling),\n    [aksjonspunkter, ytelsefordeling],\n  );\n\n  const erRedigerbart = !readOnly && (automatiskeAksjonspunkter.length > 0 || erOverstyrt);\n\n  return (\n    <>\n      <FlexContainer>\n        <FlexRow spaceBetween>\n          <FlexColumn>\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Heading size=\"small\">\n                    <FormattedMessage id=\"UttakFaktaForm.FaktaUttak\" />\n                  </Heading>\n                </FlexColumn>\n                {kanOverstyre && !readOnly && automatiskeAksjonspunkter.length === 0 && (\n                  <FlexColumn>\n                    <OverstyringKnapp onClick={() => setOverstyrt(true)} erOverstyrt={erOverstyrt} />\n                  </FlexColumn>\n                )}\n              </FlexRow>\n            </FlexContainer>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer thirtyTwoPx />\n      {harApneAksjonspunkter && (\n        <>\n          <AksjonspunktHelpTextHTML>{aksjonspunktTekster}</AksjonspunktHelpTextHTML>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {feilmelding && (\n        <>\n          <ErrorSummary>\n            <ErrorSummary.Item>{feilmelding}</ErrorSummary.Item>\n          </ErrorSummary>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      <UttakFaktaTable\n        fagsak={fagsak}\n        valgteFomDatoer={valgteFomDatoer}\n        setValgteFomDatoer={setValgteFomDatoer}\n        uttakKontrollerFaktaPerioder={uttakPerioder}\n        oppdaterUttakPerioder={oppdaterUttakPerioder}\n        alleKodeverk={alleKodeverk}\n        readOnly={readOnly}\n        setDirty={setDirty}\n        erRedigerbart={erRedigerbart}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        faktaArbeidsforhold={faktaArbeidsforhold}\n        visNyPeriode={visNyPeriode}\n        settVisNyPeriode={settVisNyPeriode}\n      />\n      <VerticalSpacer sixteenPx />\n      <VerticalSpacer sixteenPx />\n      <Form formMethods={formMethods} onSubmit={(values: { begrunnelse: string }) => bekreft(values.begrunnelse)}>\n        <FaktaBegrunnelseTextFieldNew name=\"begrunnelse\" isSubmittable isReadOnly={!erRedigerbart} hasBegrunnelse />\n        {erRedigerbart && (\n          <>\n            <VerticalSpacer twentyPx />\n            <FaktaSubmitButtonNew\n              isSubmittable={isSubmittable}\n              isReadOnly={readOnly}\n              isSubmitting={formMethods.formState.isSubmitting}\n              isDirty={isDirty || formMethods.formState.isDirty}\n            />\n          </>\n        )}\n      </Form>\n    </>\n  );\n};\n\nexport default UttakFaktaForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport {\n  KontrollerFaktaPeriode,\n  Ytelsefordeling,\n  ArbeidsgiverOpplysningerPerId,\n  FaktaArbeidsforhold,\n  Aksjonspunkt,\n  AlleKodeverk,\n  Fagsak,\n} from '@navikt/fp-types';\nimport { FaktaAksjonspunkt } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport UttakFaktaForm from './components/UttakFaktaForm';\n\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  ytelsefordeling: Ytelsefordeling;\n  uttakKontrollerFaktaPerioder: KontrollerFaktaPeriode[];\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  faktaArbeidsforhold: FaktaArbeidsforhold[];\n  kanOverstyre: boolean;\n  aksjonspunkter: Aksjonspunkt[];\n  readOnly: boolean;\n  submittable: boolean;\n  submitCallback: (aksjonspunktData: FaktaAksjonspunkt | FaktaAksjonspunkt[]) => Promise<void>;\n  alleKodeverk: AlleKodeverk;\n  formData?: any;\n  setFormData: (data: any) => void;\n}\n\nconst UttakFaktaIndex: FunctionComponent<OwnProps> = ({\n  fagsak,\n  aksjonspunkter,\n  submitCallback,\n  ytelsefordeling,\n  uttakKontrollerFaktaPerioder,\n  arbeidsgiverOpplysningerPerId,\n  faktaArbeidsforhold,\n  alleKodeverk,\n  readOnly,\n  kanOverstyre,\n  submittable,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <UttakFaktaForm\n      fagsak={fagsak}\n      ytelsefordeling={ytelsefordeling}\n      uttakKontrollerFaktaPerioder={uttakKontrollerFaktaPerioder}\n      arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n      faktaArbeidsforhold={faktaArbeidsforhold}\n      alleKodeverk={alleKodeverk}\n      aksjonspunkter={aksjonspunkter}\n      submittable={submittable}\n      formData={formData}\n      setFormData={setFormData}\n      readOnly={readOnly}\n      submitCallback={submitCallback}\n      kanOverstyre={kanOverstyre}\n    />\n  </RawIntlProvider>\n);\n\nexport default UttakFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { UttakFaktaIndex } from '@navikt/fp-fakta-uttak';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport {\n  AksessRettigheter,\n  ArbeidsgiverOpplysningerPerId,\n  FaktaArbeidsforhold,\n  KontrollerFaktaPeriode,\n  Ytelsefordeling,\n  Fagsak,\n} from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys, requestBehandlingApi } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FAKTA_UTTAK_MANUELT_SATT_STARTDATO_ULIK_SØKNAD_STARTDATO_KODE,\n  AksjonspunktCode.FAKTA_UTTAK_INGEN_PERIODER_KODE,\n  AksjonspunktCode.FAKTA_UTTAK_GRADERING_UKJENT_AKTIVITET_KODE,\n  AksjonspunktCode.FAKTA_UTTAK_GRADERING_AKTIVITET_UTEN_BEREGNINGSGRUNNLAG_KODE,\n  AksjonspunktCode.OVERSTYR_FAKTA_UTTAK,\n];\n\nconst OVERSTYRING_AP_CODES = [AksjonspunktCode.OVERSTYR_FAKTA_UTTAK];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.UTTAK_KONTROLLER_FAKTA_PERIODER_V2,\n  BehandlingApiKeys.FAKTA_ARBEIDSFORHOLD,\n  BehandlingApiKeys.YTELSEFORDELING,\n];\ntype EndepunktPanelData = {\n  uttakKontrollerFaktaPerioderV2: KontrollerFaktaPeriode[];\n  faktaArbeidsforhold: FaktaArbeidsforhold[];\n  ytelsefordeling: Ytelsefordeling;\n};\n\ninterface OwnProps {\n  rettigheter: AksessRettigheter;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  fagsak: Fagsak;\n}\n\n/**\n * UttakFaktaInitPanel\n */\nconst UttakFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({\n  rettigheter,\n  arbeidsgiverOpplysningerPerId,\n  fagsak,\n  ...props\n}) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    overstyringApKoder={OVERSTYRING_AP_CODES}\n    faktaPanelKode={FaktaPanelCode.UTTAK}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'UttakInfoPanel.FaktaUttak' })}\n    skalPanelVisesIMeny={() =>\n      props.behandling.harSattEndringsdato &&\n      requestBehandlingApi.hasPath(BehandlingApiKeys.UTTAK_KONTROLLER_FAKTA_PERIODER_V2.name)\n    }\n    renderPanel={data => (\n      <UttakFaktaIndex\n        fagsak={fagsak}\n        kanOverstyre={rettigheter.kanOverstyreAccess.isEnabled}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        {...data}\n        uttakKontrollerFaktaPerioder={data.uttakKontrollerFaktaPerioderV2}\n      />\n    )}\n  />\n);\n\nexport default UttakFaktaInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { FodselVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-fodsel';\nimport { AksessRettigheter } from '@navikt/fp-types';\nimport { VilkarType, AksjonspunktCode, fagsakYtelseType } from '@navikt/fp-kodeverk';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst VILKAR_KODER = [VilkarType.FODSELSVILKARET_MOR, VilkarType.FODSELSVILKARET_FAR];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst FodselInngangsvilkarFpInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"FODSEL\"\n      hentInngangsvilkarPanelTekst={() => intl.formatMessage({ id: 'SRBVilkarForm.VurderSammeBarn' })}\n      renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n        <>\n          {data.aksjonspunkter.length === 0 && (\n            <OverstyringPanelDef\n              aksjonspunkter={data.aksjonspunkter}\n              aksjonspunktKode={\n                data.vilkar.some(v => v.vilkarType === VilkarType.FODSELSVILKARET_MOR)\n                  ? AksjonspunktCode.OVERSTYR_FODSELSVILKAR\n                  : AksjonspunktCode.OVERSTYR_FODSELSVILKAR_FAR_MEDMOR\n              }\n              vilkar={data.vilkar}\n              vilkarKoder={VILKAR_KODER}\n              panelTekstKode=\"Inngangsvilkar.Fodselsvilkaret\"\n              erMedlemskapsPanel={false}\n              toggleOverstyring={toggleOverstyring}\n              erOverstyrt={erOverstyrt}\n              overrideReadOnly={\n                data.isReadOnly ||\n                (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n              }\n              kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n            />\n          )}\n          {data.aksjonspunkter.length > 0 && (\n            <>\n              <FodselVilkarProsessIndex ytelseTypeKode={fagsakYtelseType.FORELDREPENGER} {...data} />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default FodselInngangsvilkarFpInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AksjonspunktCode, VilkarType } from '@navikt/fp-kodeverk';\nimport { AdopsjonVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-adopsjon';\nimport { AksessRettigheter } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst VILKAR_KODER = [VilkarType.ADOPSJONSVILKARET_FORELDREPENGER];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst AdopsjonInngangsvilkarFpInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"ADOPSJON\"\n      hentInngangsvilkarPanelTekst={() => intl.formatMessage({ id: 'SRBVilkarForm.VurderSammeBarn' })}\n      renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n        <>\n          {data.aksjonspunkter.length === 0 && (\n            <OverstyringPanelDef\n              aksjonspunkter={data.aksjonspunkter}\n              aksjonspunktKode={AksjonspunktCode.OVERSTYRING_AV_ADOPSJONSVILKÅRET_FP}\n              vilkar={data.vilkar}\n              vilkarKoder={VILKAR_KODER}\n              panelTekstKode=\"Inngangsvilkar.Adopsjonsvilkaret\"\n              erMedlemskapsPanel={false}\n              toggleOverstyring={toggleOverstyring}\n              erOverstyrt={erOverstyrt}\n              overrideReadOnly={\n                data.isReadOnly ||\n                (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n              }\n              kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n            />\n          )}\n          {data.aksjonspunkter.length > 0 && (\n            <>\n              <AdopsjonVilkarProsessIndex {...data} />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default AdopsjonInngangsvilkarFpInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { VilkarType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OpptjeningVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-opptjening';\nimport { AksessRettigheter, Opptjening } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\nimport { BehandlingApiKeys } from '../../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_OPPTJENINGSVILKARET];\n\nconst VILKAR_KODER = [VilkarType.OPPTJENINGSPERIODE, VilkarType.OPPTJENINGSVILKARET];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.OPPTJENING];\ntype EndepunktPanelData = {\n  opptjening: Opptjening;\n};\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst OpptjeningInngangsvilkarFpInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"OPPTJENINGSVILKARET\"\n      hentInngangsvilkarPanelTekst={() => intl.formatMessage({ id: 'OpptjeningVilkarView.VurderOmSøkerHarRett' })}\n      renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n        <>\n          {data.aksjonspunkter.length === 0 && (\n            <OverstyringPanelDef\n              aksjonspunkter={data.aksjonspunkter}\n              aksjonspunktKode={AksjonspunktCode.OVERSTYRING_AV_OPPTJENINGSVILKARET}\n              vilkar={data.vilkar}\n              vilkarKoder={VILKAR_KODER}\n              panelTekstKode=\"Inngangsvilkar.Opptjeningsvilkaret\"\n              erMedlemskapsPanel={false}\n              toggleOverstyring={toggleOverstyring}\n              erOverstyrt={erOverstyrt}\n              overrideReadOnly={\n                data.isReadOnly ||\n                (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n              }\n              kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n            />\n          )}\n          {data.aksjonspunkter.length > 0 && (\n            <>\n              <OpptjeningVilkarProsessIndex lovReferanse={data.vilkar[0].lovReferanse} {...data} />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default OpptjeningInngangsvilkarFpInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { VilkarType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OmsorgVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-omsorg';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.AVKLAR_OM_STONAD_GJELDER_SAMME_BARN,\n  AksjonspunktCode.AVKLAR_OM_STONAD_TIL_ANNEN_FORELDER_GJELDER_SAMME_BARN,\n];\n\nconst VILKAR_KODER = [VilkarType.OMSORGSVILKARET];\n\ninterface OwnProps {\n  behandlingVersjon: number;\n}\n\nconst OmsorgInngangsvilkarFpInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"OMSORG\"\n      hentInngangsvilkarPanelTekst={() => intl.formatMessage({ id: 'SRBVilkarForm.VurderSammeBarn' })}\n      renderPanel={data => (\n        <>\n          <OmsorgVilkarProsessIndex {...data} />\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n    />\n  );\n};\n\nexport default OmsorgInngangsvilkarFpInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { AksessRettigheter } from '@navikt/fp-types';\n\nimport FodselInngangsvilkarFpInitPanel from './inngangsvilkarPaneler/FodselInngangsvilkarFpInitPanel';\nimport AdopsjonInngangsvilkarFpInitPanel from './inngangsvilkarPaneler/AdopsjonInngangsvilkarFpInitPanel';\nimport OpptjeningInngangsvilkarFpInitPanel from './inngangsvilkarPaneler/OpptjeningInngangsvilkarFpInitPanel';\nimport OmsorgInngangsvilkarFpInitPanel from './inngangsvilkarPaneler/OmsorgInngangsvilkarFpInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport InngangsvilkarDefaultInitWrapper from '../../felles/prosess/InngangsvilkarDefaultInitWrapper';\nimport MedlemskapInngangsvilkarInitPanel from '../../fellesPaneler/prosess/inngangsvilkarPaneler/MedlemskapInngangsvilkarInitPanel';\nimport ForeldreansvarInngangsvilkarInitPanel from '../../fellesPaneler/prosess/inngangsvilkarPaneler/ForeldreansvarInngangsvilkarInitPanel';\nimport InngangsvilkarPanelInitProps from '../../felles/typer/inngangsvilkarPanelInitProps';\n\ninterface OwnProps {\n  apentFaktaPanelInfo?: { urlCode: string; text: string };\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  rettigheter: AksessRettigheter;\n}\n\nconst InngangsvilkarFpProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  behandling,\n  valgtProsessSteg,\n  registrerProsessPanel,\n  apentFaktaPanelInfo,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  rettigheter,\n}) => {\n  const leftPanels = useCallback(\n    (props: InngangsvilkarPanelInitProps) => (\n      <>\n        <FodselInngangsvilkarFpInitPanel behandlingVersjon={behandling.versjon} rettigheter={rettigheter} {...props} />\n        <AdopsjonInngangsvilkarFpInitPanel\n          behandlingVersjon={behandling.versjon}\n          rettigheter={rettigheter}\n          {...props}\n        />\n        <OmsorgInngangsvilkarFpInitPanel behandlingVersjon={behandling.versjon} {...props} />\n        <MedlemskapInngangsvilkarInitPanel\n          behandlingVersjon={behandling.versjon}\n          rettigheter={rettigheter}\n          {...props}\n        />\n        <ForeldreansvarInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} {...props} />\n      </>\n    ),\n    [behandling, rettigheter],\n  );\n\n  const rightPanels = useCallback(\n    (props: InngangsvilkarPanelInitProps) => (\n      <OpptjeningInngangsvilkarFpInitPanel\n        behandlingVersjon={behandling?.versjon}\n        rettigheter={rettigheter}\n        {...props}\n      />\n    ),\n    [behandling, rettigheter],\n  );\n\n  return (\n    <InngangsvilkarDefaultInitWrapper\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      registrerProsessPanel={registrerProsessPanel}\n      apentFaktaPanelInfo={apentFaktaPanelInfo}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      leftPanels={leftPanels}\n      rightPanels={rightPanels}\n    />\n  );\n};\n\nexport default InngangsvilkarFpProsessStegInitPanel;\n","// Burde bruka tekstar fra kodeverket. Fiks dette når prosess uttak blir refaktorert\nconst uttakArbeidTypeCodes = {\n  ORDINÆRT_ARBEID: 'RenderUttakTable.ArbeidType.ORDINÆRT_ARBEID',\n  FRILANS: 'RenderUttakTable.ArbeidType.FRILANS',\n  SELVSTENDIG_NÆRINGSDRIVENDE: 'RenderUttakTable.ArbeidType.SELVSTENDIG_NÆRINGSDRIVENDE',\n  ANNET: 'RenderUttakTable.ArbeidType.ANNET',\n} as Record<string, string>;\n\nexport default uttakArbeidTypeCodes;\n","import moment from 'moment';\n\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { ArbeidsgiverOpplysninger } from '@navikt/fp-types';\n\n// vanlig arbeidsgivernavn (orgnr)...arbeidsforholdid\n// privatperson - KLANG...(18.08.1980)\nconst formatDate = (dato: string) => moment(dato).format(DDMMYYYY_DATE_FORMAT);\nconst getEndCharFromId = (id: any) => (id ? `...${id.substring(id.length - 4, id.length)}` : '');\n\nconst lagVisningsNavn = (arbeidsgiverOpplysninger: ArbeidsgiverOpplysninger, eksternArbeidsforholdId?: any): string => {\n  const { navn, fødselsdato, erPrivatPerson, identifikator } = arbeidsgiverOpplysninger;\n\n  let visningsNavn = `${navn}`;\n  if (!erPrivatPerson) {\n    visningsNavn = identifikator ? `${visningsNavn} (${identifikator})` : visningsNavn;\n    visningsNavn = `${visningsNavn}${getEndCharFromId(eksternArbeidsforholdId)}`;\n  } else {\n    visningsNavn = `${navn.substring(0, 5)}...(${fødselsdato ? formatDate(fødselsdato) : '-'})`;\n  }\n  return visningsNavn;\n};\n\nexport default lagVisningsNavn;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classnames from 'classnames/bind';\nimport { BodyShort, Detail } from '@navikt/ds-react';\nimport { FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\n\nimport { StonadskontoType } from '@navikt/fp-kodeverk';\nimport { Stonadskonto } from '@navikt/fp-types';\n\nimport styles from './stonadsdagerTab.module.css';\n\nconst classNames = classnames.bind(styles);\n\nconst finnKorrektLabelForKvote = (stonadtype: string): string => {\n  switch (stonadtype) {\n    case StonadskontoType.FEDREKVOTE:\n      return 'TimeLineTab.Stonadinfo.Fedrekvote';\n    case StonadskontoType.MØDREKVOTE:\n      return 'TimeLineTab.Stonadinfo.Modrekvote';\n    case StonadskontoType.FELLESPERIODE:\n      return 'TimeLineTab.Stonadinfo.Fellesperiode';\n    case StonadskontoType.FORELDREPENGER_FØR_FØDSEL:\n      return 'TimeLineTab.Stonadinfo.ForeldrepengerFF';\n    case StonadskontoType.FLERBARNSDAGER:\n      return 'TimeLineTab.Stonadinfo.Flerbarnsdager';\n    case StonadskontoType.FORELDREPENGER:\n      return 'TimeLineTab.Stonadinfo.ForeldrePenger';\n    case StonadskontoType.UTEN_AKTIVITETSKRAV:\n      return 'TimeLineTab.Stonadinfo.UtenAktivitetskrav';\n    case StonadskontoType.MINSTERETT:\n      return 'TimeLineTab.Stonadinfo.Minsterett';\n    case StonadskontoType.MINSTERETT_NESTE_STØNADSPERIODE:\n      return 'TimeLineTab.Stonadinfo.MinsterettNesteStønadsperiode';\n    default:\n      return 'TimeLineTab.Stonadinfo.Empty';\n  }\n};\n\nexport const finnAntallUkerOgDager = (saldo: number): { uker: number; dager: number } => {\n  const modifier = saldo < 0 ? -1 : 1;\n  const justertSaldo = saldo * modifier;\n  return {\n    uker: Math.floor(justertSaldo / 5) * modifier,\n    dager: (justertSaldo % 5) * modifier,\n  };\n};\n\ninterface OwnProps {\n  stønadskonto: Stonadskonto;\n  visDagerForKonto: (stønadskontotype: string) => void;\n  aktiv?: boolean;\n}\n\nconst StonadsdagerTab: FunctionComponent<OwnProps> = ({ stønadskonto, visDagerForKonto, aktiv = false }) => {\n  const fordelteDager = useMemo(() => finnAntallUkerOgDager(stønadskonto.saldo), [stønadskonto]);\n  const kontonavnTekst = useMemo(() => finnKorrektLabelForKvote(stønadskonto.stonadskontotype), [stønadskonto]);\n\n  const velgKonto = useCallback(() => visDagerForKonto(stønadskonto.stonadskontotype), [stønadskonto]);\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <div className={styles.tabs}>\n      <li\n        role=\"presentation\"\n        className={classNames('tab', { aktiv, error: stønadskonto && !stønadskonto.gyldigForbruk })}\n      >\n        <button\n          role=\"tab\"\n          className={classNames('tabInner', { error: stønadskonto && !stønadskonto.gyldigForbruk })}\n          type=\"button\"\n          onClick={velgKonto}\n          aria-selected={aktiv}\n        >\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                <Detail>\n                  <FormattedMessage\n                    id={kontonavnTekst}\n                    values={{\n                      uker: Math.floor(stønadskonto.maxDager / 5),\n                    }}\n                  />\n                </Detail>\n              </FlexColumn>\n            </FlexRow>\n            <FlexRow>\n              <FlexColumn>\n                <BodyShort size=\"small\">\n                  <FormattedMessage\n                    id=\"TimeLineTab.Stonadinfo.UkerDager\"\n                    values={{\n                      ukerVerdi: fordelteDager.uker,\n                      dagerVerdi: fordelteDager.dager,\n                      b: bTag,\n                    }}\n                  />\n                </BodyShort>\n              </FlexColumn>\n            </FlexRow>\n          </FlexContainer>\n        </button>\n      </li>\n    </div>\n  );\n};\n\nexport default StonadsdagerTab;\n","import React, { FunctionComponent, useMemo, useState, useCallback } from 'react';\nimport { FormattedMessage, useIntl, IntlShape } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\n\nimport { FlexColumn, FlexContainer, FlexRow, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\nimport { StonadskontoType, uttakArbeidType as uttakArbeidTypeKodeverk } from '@navikt/fp-kodeverk';\nimport { AktivitetIdentifikator, AktivitetSaldo, ArbeidsgiverOpplysningerPerId, Stonadskonto } from '@navikt/fp-types';\n\nimport uttakArbeidTypeTekstCodes from '../../utils/uttakArbeidTypeCodes';\nimport lagVisningsNavn from '../../utils/lagVisningsNavn';\nimport StonadsdagerTab, { finnAntallUkerOgDager } from './StonadsdagerTab';\n\nimport styles from './disponibleStonadskontoerPanel.module.css';\n\nconst HEADER_TEXT_CODES = ['TimeLineInfo.Aktivitet', 'TimeLineInfo.Disponibelt'];\n\nconst STØNADSKONTOER_SORTERINGSREKKEFØLGE = {\n  [StonadskontoType.FORELDREPENGER_FØR_FØDSEL]: 0,\n  [StonadskontoType.FELLESPERIODE]: 1,\n  [StonadskontoType.MØDREKVOTE]: 2,\n  [StonadskontoType.FEDREKVOTE]: 3,\n  [StonadskontoType.FORELDREPENGER]: 4,\n  [StonadskontoType.UTEN_AKTIVITETSKRAV]: 5,\n  [StonadskontoType.MINSTERETT]: 6,\n  [StonadskontoType.MINSTERETT_NESTE_STØNADSPERIODE]: 7,\n  [StonadskontoType.FLERBARNSDAGER]: 8,\n} as Record<string, number>;\n\nconst sorterKontoer = (s1: Stonadskonto, s2: Stonadskonto): number =>\n  STØNADSKONTOER_SORTERINGSREKKEFØLGE[s1.stonadskontotype] - STØNADSKONTOER_SORTERINGSREKKEFØLGE[s2.stonadskontotype];\n\nconst lagTabellRadKey = (\n  arbeidsforhold: AktivitetSaldo,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n) => {\n  const { uttakArbeidType, arbeidsgiverReferanse, arbeidsforholdId } = arbeidsforhold.aktivitetIdentifikator;\n  const arbeidsgiverOpplysninger = arbeidsgiverReferanse\n    ? arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse]\n    : undefined;\n\n  let arbKey = uttakArbeidType;\n  arbKey = arbeidsgiverOpplysninger ? `${arbKey} ${arbeidsgiverOpplysninger.navn}` : arbKey;\n  arbKey = arbeidsforholdId ? `${arbKey} ${arbeidsforholdId}` : arbKey;\n  arbKey = arbeidsgiverOpplysninger ? `${arbKey} ${arbeidsgiverOpplysninger.identifikator}` : arbKey;\n\n  return `${arbKey} ${arbeidsforhold.saldo}`;\n};\n\nconst finnTilgjengeligeUker = (stønadskontoer?: Stonadskonto[]): number => {\n  if (!stønadskontoer) {\n    return 0;\n  }\n\n  const sumDager = stønadskontoer.reduce((sum, konto) => {\n    const type = konto.stonadskontotype;\n    if (\n      type !== StonadskontoType.FLERBARNSDAGER &&\n      type !== StonadskontoType.UTEN_AKTIVITETSKRAV &&\n      type !== StonadskontoType.MINSTERETT &&\n      type !== StonadskontoType.MINSTERETT_NESTE_STØNADSPERIODE\n    ) {\n      return sum + (konto.maxDager ? konto.maxDager : 0);\n    }\n    return sum;\n  }, 0);\n  return Math.floor(sumDager / 5);\n};\n\nconst utledNavn = (\n  arbforhold: AktivitetIdentifikator,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n  intl: IntlShape,\n): string => {\n  const { arbeidsgiverReferanse, uttakArbeidType } = arbforhold;\n\n  if (uttakArbeidType && uttakArbeidType !== uttakArbeidTypeKodeverk.ORDINÆRT_ARBEID) {\n    return intl.formatMessage({ id: uttakArbeidTypeTekstCodes[uttakArbeidType] });\n  }\n  if (arbeidsgiverReferanse) {\n    const arbeidsgiverOpplysninger = arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse];\n    return arbeidsgiverOpplysninger ? lagVisningsNavn(arbeidsgiverOpplysninger) : arbeidsgiverReferanse;\n  }\n\n  return intl.formatMessage({ id: 'RenderUttakTable.ArbeidType.ANNET' });\n};\n\ninterface OwnProps {\n  stønadskontoer?: Stonadskonto[];\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\nconst DisponibleStonadskontoerPanel: FunctionComponent<OwnProps> = ({\n  stønadskontoer,\n  arbeidsgiverOpplysningerPerId,\n}) => {\n  const intl = useIntl();\n  const [valgtKontoType, setValgtKontoType] = useState<string>();\n\n  const visDagerForKonto = useCallback((stonadskontotype: string): void => {\n    setValgtKontoType(forrigeKontoType => (forrigeKontoType === stonadskontotype ? undefined : stonadskontotype));\n  }, []);\n\n  const stønadskontoerMedNavn = useMemo(\n    () => (stønadskontoer ? Object.values(stønadskontoer).sort(sorterKontoer) : []),\n    [stønadskontoer],\n  );\n\n  const tilgjengeligeUker = useMemo(() => finnTilgjengeligeUker(stønadskontoer), [stønadskontoer]);\n\n  const sorterteAktiviteter = useMemo(() => {\n    if (!valgtKontoType) {\n      return undefined;\n    }\n\n    const konto = stønadskontoerMedNavn.find(s => s.stonadskontotype === valgtKontoType);\n\n    const aktiviteterMedNavn = (konto?.aktivitetSaldoDtoList || []).map(aktivitet => ({\n      ...aktivitet,\n      navn: utledNavn(aktivitet.aktivitetIdentifikator, arbeidsgiverOpplysningerPerId, intl),\n    }));\n    return aktiviteterMedNavn.sort((akt1, akt2) => akt1.navn.localeCompare(akt2.navn));\n  }, [valgtKontoType, stønadskontoerMedNavn]);\n\n  const bTag = useCallback((chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <div className={styles.disponibeltUttak}>\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn>\n            <Label size=\"small\">\n              <FormattedMessage id=\"TimeLineInfo.Stonadinfo.DisponibleStonadsdager\" />\n            </Label>\n          </FlexColumn>\n          <FlexColumn>\n            <BodyShort size=\"small\">\n              <FormattedMessage id=\"TimeLineInfo.Stonadinfo.Total\" values={{ ukerVerdi: tilgjengeligeUker, b: bTag }} />\n            </BodyShort>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <div className={styles.tabs}>\n        <ul role=\"tablist\">\n          {stønadskontoerMedNavn.map(konto => (\n            <StonadsdagerTab\n              key={konto.stonadskontotype}\n              aktiv={konto.stonadskontotype === valgtKontoType}\n              stønadskonto={konto}\n              visDagerForKonto={visDagerForKonto}\n            />\n          ))}\n        </ul>\n      </div>\n      {valgtKontoType && sorterteAktiviteter && sorterteAktiviteter.length > 0 && (\n        <div className={styles.visKonto}>\n          <Table headerTextCodes={HEADER_TEXT_CODES}>\n            {sorterteAktiviteter.map(arbforhold => {\n              const ukerOgDager = finnAntallUkerOgDager(arbforhold.saldo);\n              return (\n                <TableRow key={lagTabellRadKey(arbforhold, arbeidsgiverOpplysningerPerId)}>\n                  <TableColumn>\n                    <BodyShort size=\"small\">{arbforhold.navn}</BodyShort>\n                  </TableColumn>\n                  <TableColumn>\n                    <BodyShort size=\"small\">\n                      {arbforhold.saldo && (\n                        <FormattedMessage\n                          id=\"TimeLineInfo.Stonadinfo.UkerDager\"\n                          values={{\n                            ukerVerdi: ukerOgDager.uker,\n                            dagerVerdi: ukerOgDager.dager,\n                            b: bTag,\n                          }}\n                        />\n                      )}\n                    </BodyShort>\n                  </TableColumn>\n                </TableRow>\n              );\n            })}\n          </Table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DisponibleStonadskontoerPanel;\n","import React, { FunctionComponent, ReactElement, useMemo, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { DDMMYY_DATE_FORMAT, ISO_DATE_FORMAT, calcDaysAndWeeks } from '@navikt/ft-utils';\nimport {\n  FigureCombinationIcon,\n  PlusIcon,\n  MinusIcon,\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  PersonPregnantIcon,\n  StrollerIcon,\n  PercentIcon,\n  DoorOpenIcon,\n  PersonPencilIcon,\n  PauseIcon,\n  FigureOutwardFillIcon,\n  SilhouetteFillIcon,\n} from '@navikt/aksel-icons';\nimport { BodyShort, Button, Label, Timeline } from '@navikt/ds-react';\nimport { DateLabel, FloatRight, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { AlleKodeverk, Fagsak, PeriodeSoker } from '@navikt/fp-types';\nimport {\n  KodeverkType,\n  behandlingStatus,\n  oppholdArsakType,\n  periodeResultatType,\n  relasjonsRolleType,\n  uttakPeriodeType,\n} from '@navikt/fp-kodeverk';\n\nimport styles from './uttakTidslinje.module.css';\n\nexport type PeriodeSøkerMedTidslinjedata = {\n  id: number;\n  periode: PeriodeSoker;\n  hovedsoker: boolean;\n  group: number;\n};\n\nexport type TidslinjeTimes = {\n  soknad: string;\n  fodsel?: string;\n  revurdering?: string;\n  dodSoker?: string;\n};\n\nconst PERIODE_TYPE_IKON_MAP = {\n  [uttakPeriodeType.MODREKVOTE]: <StrollerIcon />,\n  [uttakPeriodeType.FEDREKVOTE]: <StrollerIcon />,\n  [uttakPeriodeType.FELLESPERIODE]: <StrollerIcon />,\n  [uttakPeriodeType.FORELDREPENGER]: <StrollerIcon />,\n  [uttakPeriodeType.ANNET]: <StrollerIcon />,\n  [uttakPeriodeType.FORELDREPENGER_FOR_FODSEL]: <PersonPregnantIcon />,\n};\n\nconst PERIODE_TYPE_LABEL_MAP = {\n  [uttakPeriodeType.MODREKVOTE]: 'UttakTidslinje.Modrekvote',\n  [uttakPeriodeType.FEDREKVOTE]: 'UttakTidslinje.Fedrekvote',\n  [uttakPeriodeType.FELLESPERIODE]: 'UttakTidslinje.Fellesperiode',\n  [uttakPeriodeType.FORELDREPENGER]: 'UttakTidslinje.Foreldrepenger',\n  [uttakPeriodeType.ANNET]: 'UttakTidslinje.Annet',\n  [uttakPeriodeType.FORELDREPENGER_FOR_FODSEL]: 'UttakTidslinje.ForeldrepengerForFodsel',\n};\n\nconst sortByDate = (a: PeriodeSøkerMedTidslinjedata, b: PeriodeSøkerMedTidslinjedata): number => {\n  if (a.periode.fom < b.periode.fom) {\n    return -1;\n  }\n  if (a.periode.fom > b.periode.fom) {\n    return 1;\n  }\n  return 0;\n};\n\ntype PeriodeMedStartOgSlutt = {\n  start: string;\n  end: string;\n  status: 'success' | 'warning' | 'danger';\n  periodeType: string;\n  erGradert: boolean;\n  erOpphold: boolean;\n  harUtsettelse: boolean;\n  begrunnelse?: string;\n} & PeriodeSøkerMedTidslinjedata;\n\nconst getStatus = (periode: PeriodeSoker, tilknyttetStortinget: boolean): 'success' | 'warning' | 'danger' => {\n  if (periode.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING || tilknyttetStortinget) {\n    return 'warning';\n  }\n  if (\n    periode.gradertAktivitet &&\n    periode.graderingInnvilget &&\n    periode.periodeResultatType === periodeResultatType.INNVILGET\n  ) {\n    return 'success';\n  }\n  if ('erOppfylt' in periode && periode.erOppfylt === false) {\n    return 'danger';\n  }\n  if (\n    ('erOppfylt' in periode && periode.erOppfylt === true) ||\n    (periode.periodeResultatType === periodeResultatType.INNVILGET && !tilknyttetStortinget)\n  ) {\n    return 'success';\n  }\n\n  return 'danger';\n};\n\nconst finnPeriodeType = (valgtPeriode: PeriodeSoker): string => {\n  const kontoIkkeSatt =\n    valgtPeriode.aktiviteter.length === 0 ||\n    (!valgtPeriode.periodeType && valgtPeriode.aktiviteter[0].stønadskontoType === '-');\n  return !kontoIkkeSatt && valgtPeriode.aktiviteter[0]?.stønadskontoType\n    ? valgtPeriode.aktiviteter[0]?.stønadskontoType\n    : '';\n};\n\nconst formatPaneler = (\n  tilknyttetStortinget: boolean,\n  perioder: PeriodeSøkerMedTidslinjedata[] = [],\n): PeriodeMedStartOgSlutt[] =>\n  perioder.map(periode => ({\n    ...periode,\n    start: periode.periode.fom,\n    end: periode.periode.tom,\n    status: getStatus(periode.periode, tilknyttetStortinget),\n    periodeType: finnPeriodeType(periode.periode),\n    erGradert: !!periode.periode.gradertAktivitet && !!periode.periode.graderingInnvilget,\n    erOpphold: periode.periode.oppholdÅrsak !== oppholdArsakType.UDEFINERT,\n    harUtsettelse: periode.periode.utsettelseType !== '-',\n    begrunnelse: periode.periode.begrunnelse,\n  }));\n\nconst lagGruppeIder = (perioder: PeriodeSøkerMedTidslinjedata[] = []) => {\n  if (perioder.every(p => !p.hovedsoker)) {\n    return [1, 2];\n  }\n\n  return perioder\n    .reduce<PeriodeSøkerMedTidslinjedata[]>((accPerioder, periode) => {\n      const harPeriode = accPerioder.some(p => p.group === periode.group);\n      if (!harPeriode) accPerioder.push(periode);\n      return accPerioder;\n    }, [])\n    .map(activity => activity.group);\n};\n\nconst finnIkonGittKjønnkode = (rrType: string) => {\n  if (rrType === relasjonsRolleType.MOR || rrType === relasjonsRolleType.MEDMOR) {\n    return <FigureOutwardFillIcon width={20} height={20} color=\"var(--a-red-200)\" />;\n  }\n  if (rrType === relasjonsRolleType.FAR) {\n    return <SilhouetteFillIcon width={20} height={20} color=\"var(--a-blue-600)\" />;\n  }\n  return <FigureCombinationIcon width={20} height={20} />;\n};\n\nconst finnIkon = (fagsak: Fagsak, erHovedsøker: boolean) =>\n  finnIkonGittKjønnkode(erHovedsøker ? fagsak.relasjonsRolleType : fagsak.annenpartBehandling.relasjonsRolleType);\n\ntype PinData = {\n  dato: string;\n  datoITidslinjen: string;\n  tekstIder: string[];\n};\n\nconst finnSisteDato = (familiehendelseDato: string, førstePeriodeFom: dayjs.Dayjs): string =>\n  dayjs(familiehendelseDato).isBefore(førstePeriodeFom)\n    ? førstePeriodeFom.subtract(1, 'days').format(ISO_DATE_FORMAT)\n    : familiehendelseDato;\n\nconst slåSammenPinDataOmLikDato = (pinData: PinData[]): PinData[] =>\n  pinData.reduce<PinData[]>((accData, data) => {\n    const index = accData.findIndex(d => d.datoITidslinjen === data.datoITidslinjen);\n    if (index !== -1) {\n      return accData\n        .filter((_d, i) => i !== index)\n        .concat({\n          dato: data.dato,\n          datoITidslinjen: data.datoITidslinjen,\n          tekstIder: data.tekstIder.concat(accData[index].tekstIder),\n        });\n    }\n    return accData.concat(data);\n  }, []);\n\nconst lagPinData = (tidslinjeTider: TidslinjeTimes, fomDato: dayjs.Dayjs): PinData[] => {\n  const pinData = [] as PinData[];\n\n  if (tidslinjeTider.dodSoker) {\n    pinData.push({\n      dato: tidslinjeTider.dodSoker,\n      datoITidslinjen: finnSisteDato(tidslinjeTider.dodSoker, fomDato),\n      tekstIder: ['UttakTidslinje.DodSoker'],\n    });\n  }\n  if (tidslinjeTider.fodsel) {\n    pinData.push({\n      dato: tidslinjeTider.fodsel,\n      datoITidslinjen: finnSisteDato(tidslinjeTider.fodsel, fomDato),\n      tekstIder: ['UttakTidslinje.Fodsel'],\n    });\n  }\n  if (tidslinjeTider.revurdering) {\n    pinData.push({\n      dato: tidslinjeTider.revurdering,\n      datoITidslinjen: finnSisteDato(tidslinjeTider.revurdering, fomDato),\n      tekstIder: ['UttakTidslinje.Revurdering'],\n    });\n  }\n  if (tidslinjeTider.soknad) {\n    pinData.push({\n      dato: tidslinjeTider.soknad,\n      datoITidslinjen: finnSisteDato(tidslinjeTider.soknad, fomDato),\n      tekstIder: ['UttakTidslinje.Soknad'],\n    });\n  }\n\n  return slåSammenPinDataOmLikDato(pinData);\n};\n\nconst finnLabelForPeriode = (\n  periode: PeriodeMedStartOgSlutt,\n  behandlingStatusKode: string,\n  intl: IntlShape,\n): ReactElement => {\n  const periodeString = `${dayjs(periode.start).format(DDMMYY_DATE_FORMAT)} - ${dayjs(periode.end).format(\n    DDMMYY_DATE_FORMAT,\n  )}`;\n  const dager = calcDaysAndWeeks(\n    dayjs(periode.start).format(ISO_DATE_FORMAT),\n    dayjs(periode.end).format(ISO_DATE_FORMAT),\n  ).formattedString;\n\n  let periodeType = '';\n  if (periode.periodeType !== '-' && periode.periodeType !== '') {\n    periodeType = intl.formatMessage({ id: PERIODE_TYPE_LABEL_MAP[periode.periodeType] });\n  }\n\n  let type = '';\n  if (periode.erGradert) {\n    type = intl.formatMessage({ id: 'UttakTidslinje.GradertPeriode' });\n  } else if (periode.harUtsettelse) {\n    type = intl.formatMessage({ id: 'UttakTidslinje.UtsettelsePeriode' });\n  } else if (periode.erOpphold) {\n    type = intl.formatMessage({ id: 'UttakTidslinje.OppholdPeriode' });\n  }\n\n  const manueltEndret =\n    periode.begrunnelse && behandlingStatusKode === behandlingStatus.FATTER_VEDTAK\n      ? intl.formatMessage({ id: 'UttakTidslinje.ManueltEditert' })\n      : '';\n\n  return (\n    <>\n      <BodyShort>\n        <FormattedMessage id=\"UttakTidslinje.Stonadskonto\" values={{ periodeType: periodeType || '-' }} />\n      </BodyShort>\n      <BodyShort>\n        <FormattedMessage id=\"UttakTidslinje.Periode\" values={{ periodeString }} />\n      </BodyShort>\n      <BodyShort>\n        <FormattedMessage id=\"UttakTidslinje.Dager\" values={{ dager }} />\n      </BodyShort>\n      <VerticalSpacer eightPx />\n      {type}\n      {manueltEndret}\n    </>\n  );\n};\n\nconst finnIkonForPeriode = (periode: PeriodeMedStartOgSlutt, behandlingStatusKode: string) => {\n  if (periode.erGradert) {\n    return <PercentIcon />;\n  }\n  if (periode.begrunnelse && behandlingStatusKode === behandlingStatus.FATTER_VEDTAK) {\n    return <PersonPencilIcon />;\n  }\n  if (periode.harUtsettelse) {\n    return <PauseIcon />;\n  }\n  return periode.erOpphold ? <DoorOpenIcon /> : PERIODE_TYPE_IKON_MAP[periode.periodeType];\n};\n\nconst finnRolle = (fagsak: Fagsak, alleKodeverk: AlleKodeverk, erHovedsøker: boolean): string => {\n  const kodeverk = alleKodeverk[KodeverkType.RELASJONSROLLE_TYPE];\n  const rrType = erHovedsøker ? fagsak.relasjonsRolleType : fagsak.annenpartBehandling.relasjonsRolleType;\n  return kodeverk.find(k => k.kode === rrType)?.navn || '-';\n};\n\ninterface TidslinjeProps {\n  tidslinjeTider: TidslinjeTimes;\n  selectedPeriod?: PeriodeSøkerMedTidslinjedata;\n  uttakPerioder: PeriodeSøkerMedTidslinjedata[];\n  tilknyttetStortinget: boolean;\n  setValgtPeriodeIndex: React.Dispatch<React.SetStateAction<number | undefined>>;\n  behandlingStatusKode: string;\n  fagsak: Fagsak;\n  alleKodeverk: AlleKodeverk;\n}\n\n/**\n * UttakTidslinje\n *\n * Formaterer tidslinjen for uttak\n */\nconst UttakTidslinje: FunctionComponent<TidslinjeProps> = ({\n  tidslinjeTider,\n  selectedPeriod,\n  uttakPerioder,\n  tilknyttetStortinget,\n  setValgtPeriodeIndex,\n  behandlingStatusKode,\n  fagsak,\n  alleKodeverk,\n}) => {\n  const intl = useIntl();\n\n  const radIder = useMemo(() => lagGruppeIder(uttakPerioder), [uttakPerioder]);\n  const perioder = useMemo(\n    () => formatPaneler(tilknyttetStortinget, uttakPerioder),\n    [tilknyttetStortinget, uttakPerioder],\n  );\n\n  const sorterteUttaksperioder = [...uttakPerioder].sort(sortByDate);\n\n  const valgtPeriode = useMemo(\n    () =>\n      selectedPeriod\n        ? {\n            fom: selectedPeriod.periode.fom,\n            tom: selectedPeriod.periode.tom,\n            id: selectedPeriod.id,\n          }\n        : undefined,\n    [selectedPeriod],\n  );\n\n  const originalFomDato = dayjs(sorterteUttaksperioder[0].periode.fom);\n  const originalTomDato = dayjs(sorterteUttaksperioder[sorterteUttaksperioder.length - 1].periode.tom);\n\n  const pinData = lagPinData(tidslinjeTider, originalFomDato);\n\n  const [fomDato, setFomDato] = useState(originalFomDato);\n  const [tomDato, setTomDato] = useState(originalTomDato);\n\n  const goBackward = () => {\n    if (!fomDato.subtract(1, 'month').isBefore(originalFomDato)) {\n      setFomDato(fomDato.subtract(1, 'month'));\n      setTomDato(tomDato.subtract(1, 'month'));\n    }\n  };\n  const goForward = () => {\n    if (!tomDato.add(1, 'month').isAfter(originalTomDato)) {\n      setFomDato(fomDato.add(1, 'month'));\n      setTomDato(tomDato.add(1, 'month'));\n    }\n  };\n\n  const zoomIn = () => {\n    if (!fomDato.add(3, 'month').isAfter(tomDato)) {\n      setFomDato(fomDato.add(1, 'month'));\n      setTomDato(tomDato.subtract(1, 'month'));\n    }\n  };\n\n  const zoomOut = () => {\n    if (tomDato.add(1, 'month').diff(fomDato.subtract(1, 'month'), 'months') < 36) {\n      setFomDato(fomDato.subtract(1, 'month'));\n      setTomDato(tomDato.add(1, 'month'));\n    }\n  };\n\n  return (\n    <>\n      <VerticalSpacer thirtyTwoPx />\n      <Timeline startDate={dayjs(fomDato).toDate()} endDate={dayjs(tomDato).add(1, 'days').toDate()}>\n        {pinData.map(data => (\n          <Timeline.Pin key={data.dato} date={dayjs(data.datoITidslinjen).toDate()}>\n            {data.tekstIder.map(id => (\n              <>\n                <Label key={id} size=\"small\">\n                  <FormattedMessage id={id} />\n                </Label>\n                <VerticalSpacer fourPx />\n              </>\n            ))}\n            <BodyShort size=\"small\">\n              <DateLabel dateString={data.dato} />\n            </BodyShort>\n          </Timeline.Pin>\n        ))}\n        {radIder.map((radId, index) => {\n          const erHovedsøker = radIder.length === 1 || index > 0;\n          return (\n            <Timeline.Row\n              key={radId}\n              label={finnRolle(fagsak, alleKodeverk, erHovedsøker)}\n              icon={finnIkon(fagsak, erHovedsøker)}\n            >\n              {perioder\n                .filter(periode => periode.group === radId)\n                .map(periode => (\n                  <Timeline.Period\n                    key={periode.id}\n                    start={dayjs(periode.start).toDate()}\n                    end={dayjs(periode.end).toDate()}\n                    status={periode.status}\n                    onSelectPeriod={() => setValgtPeriodeIndex(periode.id)}\n                    isActive={periode.id === valgtPeriode?.id}\n                    icon={finnIkonForPeriode(periode, behandlingStatusKode)}\n                  >\n                    {finnLabelForPeriode(periode, behandlingStatusKode, intl)}\n                  </Timeline.Period>\n                ))}\n            </Timeline.Row>\n          );\n        })}\n      </Timeline>\n      <VerticalSpacer twentyPx />\n      <FloatRight>\n        <Button\n          className={styles.margin}\n          size=\"small\"\n          icon={<PlusIcon aria-hidden />}\n          onClick={zoomIn}\n          variant=\"primary-neutral\"\n          type=\"button\"\n          title={intl.formatMessage({ id: 'UttakTidslinje.ZoomInn' })}\n        />\n        <Button\n          className={styles.margin}\n          size=\"small\"\n          icon={<MinusIcon aria-hidden />}\n          onClick={zoomOut}\n          variant=\"primary-neutral\"\n          type=\"button\"\n          title={intl.formatMessage({ id: 'UttakTidslinje.ZoomUt' })}\n        />\n        <Button\n          className={styles.margin}\n          size=\"small\"\n          icon={<ArrowLeftIcon aria-hidden />}\n          onClick={goBackward}\n          variant=\"primary-neutral\"\n          type=\"button\"\n          title={intl.formatMessage({ id: 'UttakTidslinje.ScrollTilVenstre' })}\n        />\n        <Button\n          className={styles.margin}\n          size=\"small\"\n          icon={<ArrowRightIcon aria-hidden />}\n          onClick={goForward}\n          variant=\"primary-neutral\"\n          type=\"button\"\n          title={intl.formatMessage({ id: 'UttakTidslinje.ScrollTilHogre' })}\n        />\n      </FloatRight>\n    </>\n  );\n};\n\nexport default UttakTidslinje;\n","import React, { useMemo, FunctionComponent } from 'react';\nimport dayjs from 'dayjs';\nimport { calcDays, ISO_DATE_FORMAT } from '@navikt/ft-utils';\n\nimport {\n  Behandling,\n  FamilieHendelseSamling,\n  Personoversikt,\n  Soknad,\n  FamilieHendelse,\n  Ytelsefordeling,\n  PeriodeSoker,\n  Fagsak,\n  AlleKodeverk,\n} from '@navikt/fp-types';\nimport {\n  soknadType,\n  oppholdArsakType,\n  oppholdArsakMapper,\n  behandlingType as BehandlingType,\n} from '@navikt/fp-kodeverk';\n\nimport UttakTidslinje, { PeriodeSøkerMedTidslinjedata, TidslinjeTimes } from './UttakTidslinje';\n\nconst finnSøknadsdato = (søknad: Soknad): string => {\n  const { mottattDato } = søknad;\n  const søknadsdato = søknad.søknadsfrist?.mottattDato || søknad.mottattDato;\n  if (dayjs(mottattDato) < dayjs(søknadsdato)) {\n    return mottattDato;\n  }\n  return søknadsdato;\n};\n\nconst getFodselTerminDato = (søknad: Soknad, gjeldendeFamiliehendelse: FamilieHendelse): string | undefined => {\n  if (\n    gjeldendeFamiliehendelse &&\n    gjeldendeFamiliehendelse.avklartBarn &&\n    gjeldendeFamiliehendelse.avklartBarn.length > 0\n  ) {\n    return gjeldendeFamiliehendelse.avklartBarn[0].fodselsdato;\n  }\n  const { fodselsdatoer, termindato, adopsjonFodelsedatoer } = søknad;\n  if (fodselsdatoer && Object.keys(fodselsdatoer).length > 0) {\n    return Object.values(fodselsdatoer)[0];\n  }\n  if (termindato) {\n    return termindato;\n  }\n  if (adopsjonFodelsedatoer && Object.keys(adopsjonFodelsedatoer).length > 0) {\n    return Object.values(adopsjonFodelsedatoer)[0];\n  }\n  return undefined;\n};\n\nconst finnTidslinjeTider = (\n  behandling: Behandling,\n  søknad: Soknad,\n  familiehendelse: FamilieHendelseSamling,\n  ytelsefordeling: Ytelsefordeling,\n  personoversikt: Personoversikt,\n): TidslinjeTimes => {\n  const gjeldendeFamiliehendelse = familiehendelse?.gjeldende;\n  const familiehendelseDate = getFodselTerminDato(søknad, gjeldendeFamiliehendelse);\n  const endringsdato = ytelsefordeling.endringsdato ? ytelsefordeling.endringsdato : undefined;\n  const endredFodselsDato =\n    gjeldendeFamiliehendelse && gjeldendeFamiliehendelse.avklartBarn && gjeldendeFamiliehendelse.avklartBarn.length > 0\n      ? gjeldendeFamiliehendelse.avklartBarn[0].fodselsdato\n      : undefined;\n  const fødselsdato =\n    søknad.soknadType === soknadType.FODSEL ? endredFodselsDato || familiehendelseDate : søknad.omsorgsovertakelseDato;\n  const isRevurdering = behandling.type === BehandlingType.REVURDERING;\n\n  const barnFraTps = familiehendelse.register?.avklartBarn ? familiehendelse.register.avklartBarn : [];\n  const dodeBarn =\n    gjeldendeFamiliehendelse &&\n    !gjeldendeFamiliehendelse.brukAntallBarnFraTps &&\n    gjeldendeFamiliehendelse.avklartBarn &&\n    gjeldendeFamiliehendelse.avklartBarn.length > 0\n      ? gjeldendeFamiliehendelse.avklartBarn.filter(barn => barn.dodsdato)\n      : barnFraTps.filter(barn => barn.dodsdato);\n\n  const customTimesBuilder = {\n    soknad: finnSøknadsdato(søknad),\n    fodsel: fødselsdato,\n    revurdering: isRevurdering ? endringsdato : undefined,\n    dodSoker: personoversikt?.bruker?.dødsdato ? personoversikt.bruker.dødsdato : undefined,\n  };\n\n  dodeBarn.forEach((barn, index: number) => {\n    Object.defineProperty(customTimesBuilder, `barndod${index}`, {\n      value: dayjs(barn.dodsdato, ISO_DATE_FORMAT).toDate(),\n      enumerable: true,\n    });\n  });\n  return customTimesBuilder;\n};\n\nconst leggTidslinjedataTilPeriode = (\n  erHovedsøker: boolean,\n  hovedsøkerPerioder: PeriodeSoker[],\n  annenpartPerioder: PeriodeSoker[],\n): PeriodeSøkerMedTidslinjedata[] => {\n  const perioder = erHovedsøker ? hovedsøkerPerioder : annenpartPerioder;\n\n  return perioder.map((periode, index) => ({\n    periode,\n    id: index,\n    tomMoment: dayjs(periode.tom).add(1, 'days'),\n    hovedsoker: erHovedsøker,\n    group: annenpartPerioder.length > 0 && erHovedsøker ? 2 : 1,\n  }));\n};\n\nconst lagUttakMedOpphold = (perioderSøker: PeriodeSoker[]): PeriodeSoker[] =>\n  perioderSøker.map(uttak => {\n    const { ...uttakPerioder } = uttak;\n\n    if (uttak.oppholdÅrsak !== oppholdArsakType.UDEFINERT) {\n      const stonadskonto = oppholdArsakMapper[uttak.oppholdÅrsak];\n      const oppholdInfo = {\n        stønadskontoType: stonadskonto,\n        trekkdagerDesimaler: calcDays(uttak.fom, uttak.tom),\n      };\n      uttakPerioder.aktiviteter = [oppholdInfo];\n    }\n    return uttakPerioder;\n  });\n\ninterface OwnProps {\n  behandling: Behandling;\n  søknad: Soknad;\n  personoversikt: Personoversikt;\n  perioderSøker: PeriodeSoker[];\n  perioderAnnenpart: PeriodeSoker[];\n  valgtPeriodeIndex: number | undefined;\n  familiehendelse: FamilieHendelseSamling;\n  ytelsefordeling: Ytelsefordeling;\n  tilknyttetStortinget: boolean;\n  setValgtPeriodeIndex: React.Dispatch<React.SetStateAction<number | undefined>>;\n  fagsak: Fagsak;\n  alleKodeverk: AlleKodeverk;\n}\n\nconst UttakTidslinjeIndex: FunctionComponent<OwnProps> = ({\n  behandling,\n  søknad,\n  personoversikt,\n  perioderSøker,\n  perioderAnnenpart,\n  valgtPeriodeIndex,\n  familiehendelse,\n  ytelsefordeling,\n  tilknyttetStortinget,\n  setValgtPeriodeIndex,\n  fagsak,\n  alleKodeverk,\n}) => {\n  const uttakMedOpphold = lagUttakMedOpphold(perioderSøker);\n\n  const hovedsøkerPerioder = leggTidslinjedataTilPeriode(true, uttakMedOpphold, perioderAnnenpart);\n  const annenForelderPerioder = leggTidslinjedataTilPeriode(false, uttakMedOpphold, perioderAnnenpart);\n\n  const alleUttaksperioderMedId = useMemo(\n    () =>\n      annenForelderPerioder.concat(\n        hovedsøkerPerioder.map(p => ({\n          ...p,\n          id: p.id + annenForelderPerioder.length,\n        })),\n      ),\n    [hovedsøkerPerioder, annenForelderPerioder],\n  );\n\n  const tidslinjeTider = useMemo(\n    () => finnTidslinjeTider(behandling, søknad, familiehendelse, ytelsefordeling, personoversikt),\n    [behandling, søknad, familiehendelse, ytelsefordeling, personoversikt],\n  );\n\n  return (\n    <UttakTidslinje\n      tidslinjeTider={tidslinjeTider}\n      selectedPeriod={valgtPeriodeIndex !== undefined ? alleUttaksperioderMedId[valgtPeriodeIndex] : undefined}\n      uttakPerioder={alleUttaksperioderMedId}\n      tilknyttetStortinget={tilknyttetStortinget}\n      setValgtPeriodeIndex={setValgtPeriodeIndex}\n      behandlingStatusKode={behandling.status}\n      fagsak={fagsak}\n      alleKodeverk={alleKodeverk}\n    />\n  );\n};\n\nexport default UttakTidslinjeIndex;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { Detail, BodyShort, Modal, Button, Heading } from '@navikt/ds-react';\nimport { Datepicker, Form } from '@navikt/ft-form-hooks';\nimport { FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\n\nimport { calcDaysAndWeeks, DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\n\nimport styles from './splittPeriodeModal.module.css';\n\nexport type DeltPeriodeData = {\n  periodeId: number;\n  hovedsoker: boolean;\n  gradertProsentandelArbeid?: number;\n  gradertTrekkdager?: number;\n  forstePeriode: {\n    fom: string;\n    tom: string;\n  };\n  andrePeriode: {\n    fom: string;\n    tom: string;\n  };\n};\n\nconst validerInnenforIntervall = (fom: string, tom: string, intl: IntlShape) => (dato: string) => {\n  if (!dayjs(dato).isBefore(fom) && dayjs(dato).isBefore(tom)) {\n    return null;\n  }\n  return intl.formatMessage({ id: 'DelOppPeriodeModal.UgyldigDato' });\n};\n\ninterface OwnProps {\n  fomDato: string;\n  tomDato: string;\n  cancel: () => void;\n  submit: (dato: string) => void;\n}\n\nconst SplittPeriodeModal: FunctionComponent<OwnProps> = ({ fomDato, tomDato, submit, cancel }) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<{ dato: string }>();\n\n  const dato = formMethods.watch('dato');\n\n  const numberOfDaysAndWeeks = calcDaysAndWeeks(fomDato, dato);\n\n  return (\n    <Form formMethods={formMethods} onSubmit={values => submit(values.dato)}>\n      <Modal\n        open\n        aria-label={intl.formatMessage({ id: 'DelOppPeriodeModalImpl.ModalDescription' })}\n        onClose={cancel}\n        className={styles.modal}\n      >\n        <Modal.Header>\n          <Heading size=\"small\">\n            <FormattedMessage id=\"DelOppPeriodeModalImpl.DelOppPerioden\" />\n          </Heading>\n        </Modal.Header>\n        <Modal.Body>\n          <FlexContainer wrap>\n            <FlexRow wrap className={styles.marginTop}>\n              <FlexColumn>\n                <Detail>\n                  <FormattedMessage id=\"DelOppPeriodeModalImpl.Periode\" />\n                </Detail>\n                <BodyShort size=\"small\">\n                  {`${dayjs(fomDato.toString()).format(DDMMYYYY_DATE_FORMAT)} - ${dayjs(tomDato.toString()).format(\n                    DDMMYYYY_DATE_FORMAT,\n                  )}`}\n                </BodyShort>\n              </FlexColumn>\n            </FlexRow>\n            <FlexRow wrap className={styles.marginTop}>\n              <FlexColumn>\n                <Datepicker\n                  name=\"dato\"\n                  label={<FormattedMessage id=\"DelOppPeriodeModalImpl.AngiTomDato\" />}\n                  validate={[required, hasValidDate, validerInnenforIntervall(fomDato, tomDato, intl)]}\n                  defaultMonth={new Date(fomDato)}\n                  disabledDays={{ fromDate: dayjs(fomDato).toDate(), toDate: dayjs(tomDato).toDate() }}\n                />\n              </FlexColumn>\n              {dato && <FlexColumn className={styles.dager}>{numberOfDaysAndWeeks.formattedString}</FlexColumn>}\n            </FlexRow>\n          </FlexContainer>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button size=\"small\" variant=\"primary\">\n            <FormattedMessage id=\"DelOppPeriodeModalImpl.Ok\" />\n          </Button>\n          <Button size=\"small\" variant=\"secondary\" onClick={cancel} type=\"button\">\n            <FormattedMessage id=\"DelOppPeriodeModalImpl.Avbryt\" />\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Form>\n  );\n};\n\nexport default SplittPeriodeModal;\n","import React, { FunctionComponent, ReactElement, useMemo } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\nimport { SelectField, NumberField } from '@navikt/ft-form-hooks';\nimport {\n  hasValidDecimal,\n  hasValidInteger,\n  maxLength,\n  maxValue,\n  minValue,\n  notDash,\n  required,\n} from '@navikt/ft-form-validators';\nimport { FlexColumn, FlexContainer, FlexRow, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\n\nimport { uttakPeriodeType, uttakArbeidType as UttakArbeidType } from '@navikt/fp-kodeverk';\nimport { ArbeidsgiverOpplysningerPerId, KodeverkMedNavn, PeriodeSokerAktivitet } from '@navikt/fp-types';\n\nimport { UseFormGetValues, useFieldArray, useFormContext } from 'react-hook-form';\nimport uttakArbeidTypeTekstCodes from '../../utils/uttakArbeidTypeCodes';\nimport lagVisningsNavn from '../../utils/lagVisningsNavn';\nimport { UttakAktivitetType } from './UttakAktivitetType';\n\nimport styles from './uttakAktiviteterTabell.module.css';\n\nconst maxLength3 = maxLength(3);\nconst minValue0 = minValue(0);\nconst maxProsentValue100 = maxValue(100);\n\nconst HEADER_TEXT_CODES = [\n  'RenderUttakTable.PeriodeData.Aktivitet',\n  'RenderUttakTable.PeriodeData.Stonadskonto',\n  'RenderUttakTable.PeriodeData.Trekk',\n  'RenderUttakTable.PeriodeData.Andel',\n  'RenderUttakTable.PeriodeData.Utbetalingsgrad',\n];\n\nexport const finnArbeidsforholdNavnOgProsentArbeid = (\n  aktivitet: PeriodeSokerAktivitet,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n  intl: IntlShape,\n): { prosentArbeidText: string; arbeidsforhold: string } => {\n  const { prosentArbeid, arbeidsgiverReferanse, eksternArbeidsforholdId, uttakArbeidType } = aktivitet;\n\n  const prosentArbeidText = typeof prosentArbeid !== 'undefined' ? `${prosentArbeid}%` : '';\n  let arbeidsforhold;\n  if (uttakArbeidType && uttakArbeidType !== UttakArbeidType.ORDINÆRT_ARBEID) {\n    arbeidsforhold = intl.formatMessage({ id: uttakArbeidTypeTekstCodes[uttakArbeidType] });\n  }\n  if (arbeidsgiverReferanse) {\n    const arbeidsgiverOpplysninger = arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse];\n    arbeidsforhold = arbeidsgiverOpplysninger\n      ? lagVisningsNavn(arbeidsgiverOpplysninger, eksternArbeidsforholdId)\n      : arbeidsgiverReferanse;\n  }\n  return {\n    prosentArbeidText,\n    arbeidsforhold: arbeidsforhold || '',\n  };\n};\n\nconst sjekkOmUtbetalingsgradEr0OmAvslått =\n  (intl: IntlShape, erOppfylt: boolean, utsettelseType?: string) =>\n  (utbetalingsgrad: string): string | null => {\n    const harUtsettelse = !erOppfylt && (!utsettelseType || utsettelseType === '-');\n    if (harUtsettelse && parseFloat(utbetalingsgrad) > 0) {\n      return intl.formatMessage({ id: 'RenderUttakTable.MerEnNullUtaksprosent' });\n    }\n    return null;\n  };\n\nconst sjekkOmUtbetalingsgradErHøyereEnnSamtidigUttaksprosent =\n  (intl: IntlShape, getValues: UseFormGetValues<UttakAktivitetType>) =>\n  (utbetalingsgrad: string): string | null => {\n    const samtidigUttak = getValues('samtidigUttak');\n    const samtidigUttaksprosent = getValues('samtidigUttaksprosent');\n    if (samtidigUttak && samtidigUttaksprosent && samtidigUttaksprosent < utbetalingsgrad) {\n      return intl.formatMessage({\n        id: 'ValidationMessage.utbetalingsgradErMerSamtidigUttaksprosent',\n      });\n    }\n    return null;\n  };\n\nconst sjekkOmDetErTrektMinstEnDagNårUtbetalingsgradErMerEnn0 =\n  (intl: IntlShape, getValues: UseFormGetValues<UttakAktivitetType>, index: number) =>\n  (utbetalingsgrad: string): string | null => {\n    const aktiviteter = getValues('aktiviteter');\n    const aktivitet = aktiviteter[index];\n    if (parseFloat(aktivitet.weeks) === 0 && parseFloat(aktivitet.days) === 0 && parseFloat(utbetalingsgrad) > 0) {\n      return intl.formatMessage({\n        id: 'ValidationMessage.ukerOgDagerVidNullUtbetalningsgradMessage',\n      });\n    }\n    return null;\n  };\n\nconst GYLDIGE_UTTAK_PERIODER = [\n  uttakPeriodeType.FELLESPERIODE,\n  uttakPeriodeType.FEDREKVOTE,\n  uttakPeriodeType.FORELDREPENGER_FOR_FODSEL,\n  uttakPeriodeType.FORELDREPENGER,\n  uttakPeriodeType.MODREKVOTE,\n  uttakPeriodeType.UDEFINERT,\n];\n\nconst lagPeriodeTypeOptions = (typer: KodeverkMedNavn[]): ReactElement[] =>\n  typer\n    .filter(({ kode }) => GYLDIGE_UTTAK_PERIODER.includes(kode))\n    .map(({ kode, navn }) => (\n      <option value={kode} key={kode}>\n        {navn}\n      </option>\n    ));\n\nconst validerUkerOgDager = (getValues: UseFormGetValues<UttakAktivitetType>, index: number) => (value: string) => {\n  const weeks = getValues(`aktiviteter.${index}.weeks`);\n  const days = getValues(`aktiviteter.${index}.days`);\n  const skalSjekke = parseFloat(weeks) !== 0 || parseFloat(days) !== 0;\n  if (skalSjekke) {\n    const requiredMessage = required(value);\n    if (requiredMessage) {\n      return requiredMessage;\n    }\n    const notDashMessage = notDash(value);\n    if (notDashMessage) {\n      return notDashMessage;\n    }\n  }\n  return null;\n};\n\nconst validerAtUkerEllerDagerErStørreEnn0NårUtsettelseOgOppfylt =\n  (getValues: UseFormGetValues<UttakAktivitetType>, utsettelseType: string, intl: IntlShape) =>\n  (ukerEllerDager: string) => {\n    const harUtsettelsestype = utsettelseType && utsettelseType !== '-';\n    return harUtsettelsestype && getValues('erOppfylt') && parseFloat(ukerEllerDager) > 0\n      ? intl.formatMessage({ id: 'ValidationMessage.trekkdagerErMerEnnNullUtsettelse' })\n      : null;\n  };\n\ninterface OwnProps {\n  periodeTyper: KodeverkMedNavn[];\n  isReadOnly: boolean;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  aktiviteter: PeriodeSokerAktivitet[];\n  erOppfylt?: boolean;\n  utsettelseType: string;\n}\n\nconst UttakAktiviteterTabell: FunctionComponent<OwnProps> = ({\n  periodeTyper,\n  isReadOnly,\n  arbeidsgiverOpplysningerPerId,\n  aktiviteter,\n  erOppfylt,\n  utsettelseType,\n}) => {\n  const intl = useIntl();\n\n  const { control, getValues } = useFormContext<UttakAktivitetType>();\n  const { fields } = useFieldArray({\n    control,\n    name: 'aktiviteter',\n  });\n\n  const periodeTypeOptions = useMemo(() => lagPeriodeTypeOptions(periodeTyper), [periodeTyper]);\n\n  return (\n    <div className={styles.tableOverflow}>\n      {fields.length > 0 && (\n        <Table headerTextCodes={HEADER_TEXT_CODES} noHover>\n          {fields.map((field, index: number) => {\n            const arbeidsforholdData = finnArbeidsforholdNavnOgProsentArbeid(\n              aktiviteter[index],\n              arbeidsgiverOpplysningerPerId,\n              intl,\n            );\n            return (\n              <TableRow key={field.id}>\n                <TableColumn>\n                  <BodyShort size=\"small\" className={styles.forsteKolWidth}>\n                    {arbeidsforholdData.arbeidsforhold}\n                  </BodyShort>\n                </TableColumn>\n                <TableColumn>\n                  <div className={styles.selectStonad}>\n                    <SelectField\n                      name={`aktiviteter.${index}.stønadskontoType`}\n                      selectValues={periodeTypeOptions}\n                      hideLabel\n                      label=\"\"\n                      readOnly={isReadOnly}\n                      validate={[validerUkerOgDager(getValues, index)]}\n                    />\n                  </div>\n                </TableColumn>\n                <TableColumn>\n                  <FlexContainer>\n                    <FlexRow>\n                      <FlexColumn className={styles.ukeOgDag}>\n                        <span className={styles.weekPosition}>\n                          <NumberField\n                            name={`aktiviteter.${index}.weeks`}\n                            readOnly={isReadOnly}\n                            validate={[\n                              required,\n                              hasValidInteger,\n                              maxLength3,\n                              validerAtUkerEllerDagerErStørreEnn0NårUtsettelseOgOppfylt(\n                                getValues,\n                                utsettelseType,\n                                intl,\n                              ),\n                            ]}\n                          />\n                        </span>\n                      </FlexColumn>\n                      <FlexColumn>\n                        {isReadOnly ? <span>/</span> : <span className={styles.verticalCharPlacementInTable}>/</span>}\n                      </FlexColumn>\n                      <FlexColumn className={styles.ukeOgDag}>\n                        <NumberField\n                          name={`aktiviteter.${index}.days`}\n                          readOnly={isReadOnly}\n                          validate={[\n                            required,\n                            hasValidDecimal,\n                            maxLength3,\n                            validerAtUkerEllerDagerErStørreEnn0NårUtsettelseOgOppfylt(getValues, utsettelseType, intl),\n                          ]}\n                        />\n                      </FlexColumn>\n                    </FlexRow>\n                  </FlexContainer>\n                </TableColumn>\n                <TableColumn>\n                  <BodyShort size=\"small\">{arbeidsforholdData.prosentArbeidText}</BodyShort>\n                </TableColumn>\n                <TableColumn>\n                  <div className={styles.utbetalingsgrad}>\n                    <NumberField\n                      name={`aktiviteter.${index}.utbetalingsgrad`}\n                      // @ts-ignore Fiks typen til utbetalingsgrad. Bør vera number\n                      validate={[\n                        required,\n                        minValue0,\n                        maxProsentValue100,\n                        hasValidDecimal,\n                        // @ts-ignore Fiks typen til utbetalingsgrad. Bør vera number\n                        sjekkOmUtbetalingsgradEr0OmAvslått(intl, erOppfylt, utsettelseType),\n                        // @ts-ignore Fiks typen til utbetalingsgrad. Bør vera number\n                        sjekkOmDetErTrektMinstEnDagNårUtbetalingsgradErMerEnn0(intl, getValues, index),\n                        // @ts-ignore Fiks typen til utbetalingsgrad. Bør vera number\n                        sjekkOmUtbetalingsgradErHøyereEnnSamtidigUttaksprosent(intl, getValues),\n                        // @ts-ignore Fiks typen til utbetalingsgrad. Bør vera number\n                        (utbetalingsgrad: string) => {\n                          const harUtsettelsestype = utsettelseType && utsettelseType !== '-';\n                          return harUtsettelsestype && getValues('erOppfylt') && parseFloat(utbetalingsgrad) > 0\n                            ? intl.formatMessage({ id: 'ValidationMessage.utbetalingMerEnnNullUtsettelse' })\n                            : null;\n                        },\n                      ]}\n                      readOnly={isReadOnly}\n                      forceTwoDecimalDigits\n                    />\n                  </div>\n                </TableColumn>\n              </TableRow>\n            );\n          })}\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default UttakAktiviteterTabell;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Label, Detail, BodyShort } from '@navikt/ds-react';\nimport { calcDaysAndWeeks, DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { hasValidDecimal, maxValue, notDash, required } from '@navikt/ft-form-validators';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { CheckboxField, NumberField, SelectField } from '@navikt/ft-form-hooks';\n\nimport {\n  KodeverkType,\n  oppholdArsakType,\n  oppholdArsakKontoNavn,\n  uttakArbeidType as uttakArbeidTypeKodeverk,\n  periodeResultatType,\n} from '@navikt/fp-kodeverk';\nimport { ArbeidsgiverOpplysningerPerId, KodeverkMedNavn, AlleKodeverk, PeriodeSoker } from '@navikt/fp-types';\n\nimport uttakArbeidTypeTekstCodes from '../../utils/uttakArbeidTypeCodes';\n\nimport styles from './uttakPeriodeInfo.module.css';\n\nconst maxValue100 = maxValue(100);\n\nconst periodeStatusClassName = (valgtPeriode: PeriodeSoker, erTilknyttetStortinget: boolean): string => {\n  if (valgtPeriode.periodeResultatType === periodeResultatType.INNVILGET && !erTilknyttetStortinget) {\n    return styles.greenDetailsPeriod;\n  }\n  if (valgtPeriode.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING || erTilknyttetStortinget) {\n    return styles.orangeDetailsPeriod;\n  }\n  return styles.redDetailsPeriod;\n};\n\nconst periodeIsInnvilget = (valgtPeriode: PeriodeSoker): boolean =>\n  valgtPeriode.periodeResultatType === periodeResultatType.INNVILGET;\n\nconst gradertArbforhold = (\n  valgtPeriode: PeriodeSoker,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n): string | ReactElement => {\n  let arbeidsforhold = '';\n  if (valgtPeriode.gradertAktivitet) {\n    const { arbeidsgiverReferanse, uttakArbeidType } = valgtPeriode.gradertAktivitet;\n\n    if (uttakArbeidType && uttakArbeidType !== uttakArbeidTypeKodeverk.ORDINÆRT_ARBEID) {\n      return <FormattedMessage id={uttakArbeidTypeTekstCodes[uttakArbeidType]} />;\n    }\n    if (arbeidsgiverReferanse && arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse]) {\n      const { navn, identifikator } = arbeidsgiverOpplysningerPerId[arbeidsgiverReferanse];\n      arbeidsforhold = navn ? `${navn}` : arbeidsforhold;\n      arbeidsforhold = identifikator ? `${arbeidsforhold} (${identifikator})` : arbeidsforhold;\n    }\n  }\n  return arbeidsforhold;\n};\n\nconst typePeriode = (\n  valgtPeriode: PeriodeSoker,\n  alleKodeverk: AlleKodeverk,\n  kontoIkkeSatt?: boolean,\n): ReactElement | string => {\n  if (valgtPeriode.utsettelseType === '-' && !kontoIkkeSatt) {\n    return <FormattedMessage id=\"UttakActivity.Uttak\" />;\n  }\n  if (valgtPeriode.utsettelseType !== '-') {\n    return (\n      <FormattedMessage\n        id=\"UttakActivity.Utsettelse\"\n        values={{\n          utsettelseType: alleKodeverk[KodeverkType.UTTAK_UTSETTELSE_TYPE].find(\n            k => k.kode === valgtPeriode.utsettelseType,\n          )?.navn,\n        }}\n      />\n    );\n  }\n  if (kontoIkkeSatt) {\n    return <FormattedMessage id=\"UttakActivity.IngenKonto\" />;\n  }\n  return '';\n};\n\nconst isInnvilgetText = (valgtPeriode: PeriodeSoker, alleKodeverk: AlleKodeverk): ReactElement => {\n  if (periodeIsInnvilget(valgtPeriode)) {\n    return (\n      <FormattedMessage\n        id=\"UttakActivity.InnvilgelseAarsak\"\n        values={{\n          innvilgelseAarsak: alleKodeverk[KodeverkType.PERIODE_RESULTAT_AARSAK].find(\n            k => k.kode === valgtPeriode.periodeResultatÅrsak,\n          )?.navn,\n          b: (chunks: any) => <b>{chunks}</b>,\n        }}\n      />\n    );\n  }\n  return (\n    <FormattedMessage\n      id=\"UttakActivity.IkkeOppfyltAarsak\"\n      values={{\n        avslagAarsak: alleKodeverk[KodeverkType.PERIODE_RESULTAT_AARSAK].find(\n          k => k.kode === valgtPeriode.periodeResultatÅrsak,\n        )?.navn,\n        b: (chunks: any) => <b>{chunks}</b>,\n      }}\n    />\n  );\n};\n\nconst stonadskonto = (valgtPeriode: PeriodeSoker, alleKodeverk: AlleKodeverk, kontoIkkeSatt?: boolean): string => {\n  let returnText = '';\n  if (!kontoIkkeSatt) {\n    returnText =\n      alleKodeverk[KodeverkType.STOENADSKONTOTYPE].find(k => k.kode === valgtPeriode.aktiviteter[0]?.stønadskontoType)\n        ?.navn || '';\n  }\n  return returnText;\n};\n\nconst gyldigeÅrsaker = [\n  oppholdArsakType.UTTAK_MØDREKVOTE_ANNEN_FORELDER,\n  oppholdArsakType.UTTAK_FEDREKVOTE_ANNEN_FORELDER,\n  oppholdArsakType.UTTAK_FELLESP_ANNEN_FORELDER,\n  oppholdArsakType.UTTAK_FORELDREPENGER_ANNEN_FORELDER,\n];\n\nconst mapPeriodeTyper = (typer: KodeverkMedNavn[]): ReactElement[] =>\n  typer\n    .filter(({ kode }) => gyldigeÅrsaker.includes(kode))\n    .map(({ kode }) => (\n      <option value={kode} key={kode}>\n        {oppholdArsakKontoNavn[kode]}\n      </option>\n    ));\n\nconst visGraderingIkkeInnvilget = (\n  valgtPeriode: PeriodeSoker,\n  readOnly: boolean,\n  graderingInnvilget?: boolean,\n): boolean =>\n  valgtPeriode.periodeResultatType === periodeResultatType.INNVILGET &&\n  !!valgtPeriode.gradertAktivitet &&\n  graderingInnvilget === false &&\n  readOnly;\n\ninterface OwnProps {\n  valgtPeriode: PeriodeSoker;\n  isReadOnly: boolean;\n  harSoktOmFlerbarnsdager: boolean;\n  graderingInnvilget?: boolean;\n  erSamtidigUttak?: boolean;\n  alleKodeverk: AlleKodeverk;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  erTilknyttetStortinget: boolean;\n}\n\nconst UttakPeriodeInfo: FunctionComponent<OwnProps> = ({\n  valgtPeriode,\n  isReadOnly,\n  graderingInnvilget,\n  erSamtidigUttak,\n  harSoktOmFlerbarnsdager,\n  alleKodeverk,\n  arbeidsgiverOpplysningerPerId,\n  erTilknyttetStortinget,\n}) => {\n  const intl = useIntl();\n\n  const oppholdArsakTyper = alleKodeverk[KodeverkType.OPPHOLD_ARSAK];\n\n  const kontoIkkeSatt = !valgtPeriode.periodeType && valgtPeriode.aktiviteter[0].stønadskontoType === '-';\n\n  return (\n    <div className={periodeStatusClassName(valgtPeriode, erTilknyttetStortinget)}>\n      <FlexContainer>\n        {valgtPeriode.oppholdÅrsak === '-' && (\n          <FlexRow spaceBetween>\n            <FlexColumn>\n              <Label size=\"small\">{typePeriode(valgtPeriode, alleKodeverk, kontoIkkeSatt)}</Label>\n              <BodyShort>{stonadskonto(valgtPeriode, alleKodeverk, kontoIkkeSatt)}</BodyShort>\n            </FlexColumn>\n            <FlexColumn>{isReadOnly && isInnvilgetText(valgtPeriode, alleKodeverk)}</FlexColumn>\n            <FlexColumn>\n              {harSoktOmFlerbarnsdager && (\n                <CheckboxField\n                  name=\"flerbarnsdager\"\n                  label={intl.formatMessage({ id: 'UttakActivity.Flerbarnsdager' })}\n                  readOnly={isReadOnly}\n                />\n              )}\n              <CheckboxField\n                key=\"samtidigUttak\"\n                name=\"samtidigUttak\"\n                label={intl.formatMessage({ id: 'UttakActivity.SamtidigUttak' })}\n                readOnly={isReadOnly}\n              />\n              {erSamtidigUttak && (\n                <FlexContainer>\n                  <FlexRow>\n                    <FlexColumn className={styles.bredde}>\n                      <NumberField\n                        name=\"samtidigUttaksprosent\"\n                        readOnly={isReadOnly}\n                        label={intl.formatMessage({ id: 'UttakInfo.SamtidigUttaksprosent' })}\n                        validate={[required, maxValue100, hasValidDecimal]}\n                        forceTwoDecimalDigits\n                      />\n                    </FlexColumn>\n                    {!isReadOnly && <FlexColumn className={styles.suffix}>%</FlexColumn>}\n                  </FlexRow>\n                </FlexContainer>\n              )}\n            </FlexColumn>\n          </FlexRow>\n        )}\n        <VerticalSpacer eightPx />\n        <FlexRow>\n          <FlexColumn>\n            <Label size=\"small\">\n              <FormattedMessage\n                id=\"UttakActivity.PeriodeData.Periode\"\n                values={{\n                  fomVerdi: dayjs(valgtPeriode.fom.toString()).format(DDMMYYYY_DATE_FORMAT),\n                  tomVerdi: dayjs(valgtPeriode.tom.toString()).format(DDMMYYYY_DATE_FORMAT),\n                }}\n              />\n            </Label>\n            {valgtPeriode.oppholdÅrsak === '-' && (\n              <BodyShort>{calcDaysAndWeeks(valgtPeriode.fom, valgtPeriode.tom).formattedString}</BodyShort>\n            )}\n          </FlexColumn>\n          <FlexColumn>\n            {valgtPeriode.gradertAktivitet && (\n              <Detail>\n                <FormattedMessage id=\"UttakActivity.Gradering\" />\n              </Detail>\n            )}\n            {valgtPeriode.oppholdÅrsak !== '-' && (\n              <div>{calcDaysAndWeeks(valgtPeriode.fom, valgtPeriode.tom).formattedString}</div>\n            )}\n            {gradertArbforhold(valgtPeriode, arbeidsgiverOpplysningerPerId)}\n          </FlexColumn>\n          {visGraderingIkkeInnvilget(valgtPeriode, isReadOnly, graderingInnvilget) && (\n            <FlexColumn>\n              <b>\n                <FormattedMessage id=\"UttakActivity.GraderingIkkeOppfylt\" />:\n              </b>\n              {\n                alleKodeverk[KodeverkType.GRADERING_AVSLAG_AARSAK].find(\n                  k => k.kode === valgtPeriode.graderingAvslagÅrsak,\n                )?.navn\n              }\n            </FlexColumn>\n          )}\n        </FlexRow>\n      </FlexContainer>\n      {valgtPeriode.oppholdÅrsak !== '-' && (\n        <div className={styles.select}>\n          <VerticalSpacer sixteenPx />\n          <Detail>\n            <FormattedMessage id=\"UttakInfo.Opphold.AnnenForelder\" />\n          </Detail>\n          <SelectField\n            name=\"oppholdArsak\"\n            selectValues={mapPeriodeTyper(oppholdArsakTyper)}\n            label=\"\"\n            hideLabel\n            readOnly={isReadOnly}\n            validate={[required, notDash]}\n          />\n        </div>\n      )}\n      <VerticalSpacer eightPx />\n      {valgtPeriode.mottattDato && (\n        <BodyShort>\n          <FormattedMessage\n            id=\"UttakInfo.MottattDato\"\n            values={{ dato: dayjs(valgtPeriode.mottattDato).format(DDMMYYYY_DATE_FORMAT) }}\n          />\n        </BodyShort>\n      )}\n    </div>\n  );\n};\n\nexport default UttakPeriodeInfo;\n","import React, { useCallback, ReactElement, FunctionComponent, useMemo, useEffect } from 'react';\nimport { Alert, Button } from '@navikt/ds-react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { Form, TextAreaField, RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport { hasValidText, maxLength, minLength, notDash, required } from '@navikt/ft-form-validators';\nimport { ArrowBox, FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { KodeverkType, oppholdArsakType, utsettelseArsakCodes, periodeResultatType } from '@navikt/fp-kodeverk';\nimport {\n  AarsakFilter,\n  AlleKodeverk,\n  ArbeidsgiverOpplysningerPerId,\n  KodeverkMedNavn,\n  PeriodeSoker,\n  PeriodeSokerAktivitet,\n} from '@navikt/fp-types';\n\nimport UttakAktiviteterTabell, { finnArbeidsforholdNavnOgProsentArbeid } from './UttakAktiviteterTabell';\nimport UttakPeriodeInfo from './UttakPeriodeInfo';\nimport { UttakAktivitet, UttakAktivitetType } from './UttakAktivitetType';\n\nimport styles from './uttakPeriodeForm.module.css';\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\nexport type ArsakKodeverk = {\n  sortering: string;\n  utfallType?: string;\n  uttakTyper?: string[];\n  valgbarForKonto?: string[];\n  gyldigForLovendringer: string[];\n  synligForRolle?: string[];\n} & KodeverkMedNavn;\n\nconst erPeriodeOppfylt = (valgtPeriode: PeriodeSoker, utfallKoder: ArsakKodeverk[]): boolean | undefined => {\n  if (valgtPeriode.periodeResultatType && valgtPeriode.periodeResultatType === periodeResultatType.INNVILGET) {\n    return true;\n  }\n\n  const kontoIkkeSatt = !valgtPeriode.periodeType && valgtPeriode.aktiviteter[0].stønadskontoType === '-';\n  if (kontoIkkeSatt) {\n    return false;\n  }\n  if (valgtPeriode.periodeResultatType && valgtPeriode.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING) {\n    // Litt flaky. Bør sende med kodeverket og slå opp utfallType\n    const kodeverkKode = utfallKoder.find(kodeItem => kodeItem.kode === valgtPeriode.periodeResultatÅrsak);\n    if (\n      (kodeverkKode && kodeverkKode.utfallType === 'INNVILGET') ||\n      valgtPeriode.oppholdÅrsak !== oppholdArsakType.UDEFINERT\n    ) {\n      return true;\n    }\n    if (kodeverkKode && kodeverkKode.utfallType === 'AVSLÅTT') {\n      return false;\n    }\n    return undefined;\n  }\n  return false;\n};\n\nconst sorterÅrsakKodeverk = (a: ArsakKodeverk, b: ArsakKodeverk): number => {\n  if (a.sortering < b.sortering) {\n    return -1;\n  }\n  if (a.sortering > b.sortering) {\n    return 1;\n  }\n  if (a.navn < b.navn) {\n    return -1;\n  }\n  if (a.navn > b.navn) {\n    return 1;\n  }\n  return 0;\n};\n\nconst getFiltrerPåGyldighetForLovendringer =\n  (aarsakFilter: AarsakFilter) =>\n  (kodeItem: ArsakKodeverk): boolean => {\n    if (kodeItem.gyldigForLovendringer === undefined) {\n      return true;\n    }\n    if (aarsakFilter.kreverSammenhengendeUttak) {\n      return kodeItem.gyldigForLovendringer.includes('KREVER_SAMMENHENGENDE_UTTAK');\n    }\n    return aarsakFilter.utenMinsterett\n      ? kodeItem.gyldigForLovendringer.includes('FRITT_UTTAK')\n      : kodeItem.gyldigForLovendringer.includes('MINSTERETT_2022');\n  };\n\nconst getFiltrerPåSynlighet =\n  (aarsakFilter: AarsakFilter) =>\n  (kodeItem: ArsakKodeverk): boolean => {\n    if (kodeItem.synligForRolle === undefined) {\n      return true;\n    }\n    return aarsakFilter.søkerErMor\n      ? kodeItem.synligForRolle.includes('MOR')\n      : kodeItem.synligForRolle.includes('IKKE_MOR');\n  };\n\nconst lagOptionsTilPeriodeÅrsakSelect = (\n  årsakKoder: ArsakKodeverk[],\n  utfallType: string,\n  aarsakFilter: AarsakFilter,\n  utsettelseType?: string,\n  periodeType?: string,\n  skalFiltrere?: boolean,\n): ReactElement[] => {\n  årsakKoder.sort(sorterÅrsakKodeverk);\n\n  const filteredNyKodeArray = årsakKoder\n    .filter(kodeItem => !utfallType || kodeItem.utfallType === utfallType)\n    .filter(getFiltrerPåGyldighetForLovendringer(aarsakFilter))\n    .filter(getFiltrerPåSynlighet(aarsakFilter));\n\n  const mapTilOption = (kodeverk: KodeverkMedNavn) => (\n    <option value={kodeverk.kode} key={kodeverk.kode}>\n      {kodeverk.navn}\n    </option>\n  );\n\n  if (skalFiltrere && utsettelseType) {\n    if (utsettelseType !== utsettelseArsakCodes.UDEFINERT) {\n      return filteredNyKodeArray.filter(kv => kv.uttakTyper?.includes('UTSETTELSE')).map(mapTilOption);\n    }\n    if (periodeType && utsettelseType === utsettelseArsakCodes.UDEFINERT) {\n      return filteredNyKodeArray\n        .filter(kv => kv.uttakTyper?.includes('UTTAK'))\n        .filter(kv => kv.valgbarForKonto?.includes(periodeType))\n        .map(mapTilOption);\n    }\n  }\n\n  return filteredNyKodeArray.map(mapTilOption);\n};\n\n// https://jira.adeo.no/browse/PFP-7937\nconst finnUker = (aktivitet: PeriodeSokerAktivitet, valgtPeriode: PeriodeSoker): string => {\n  if (\n    valgtPeriode.periodeResultatType &&\n    !aktivitet.trekkdagerDesimaler &&\n    valgtPeriode.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING\n  ) {\n    return '0';\n  }\n  if (aktivitet.trekkdagerDesimaler && aktivitet.trekkdagerDesimaler < 0) {\n    return '0';\n  }\n  return aktivitet.trekkdagerDesimaler ? Math.floor(aktivitet.trekkdagerDesimaler / 5).toString() : '0';\n};\n\nconst finnDager = (aktivitet: PeriodeSokerAktivitet, valgtPeriode: PeriodeSoker): string => {\n  if (\n    valgtPeriode.periodeResultatType &&\n    !aktivitet.trekkdagerDesimaler &&\n    valgtPeriode.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING\n  ) {\n    return '0';\n  }\n  if (aktivitet.trekkdagerDesimaler && aktivitet.trekkdagerDesimaler < 0) {\n    return '0';\n  }\n  return aktivitet.trekkdagerDesimaler ? parseFloat((aktivitet.trekkdagerDesimaler % 5).toFixed(1)).toString() : '0';\n};\n\nconst lagOptionsTilGraderingAvslagsårsakerSelect = (alleKodeverk: AlleKodeverk): ReactElement[] => {\n  const årsakKoder = alleKodeverk[KodeverkType.GRADERING_AVSLAG_AARSAK] as ArsakKodeverk[];\n  return [...årsakKoder].sort(sorterÅrsakKodeverk).map(({ kode, navn }) => (\n    <option value={kode} key={kode}>\n      {navn}\n    </option>\n  ));\n};\n\nconst hentTekstForÅVurdereUtsettelseVedMindreEnn100ProsentStilling = (\n  utsettelseType: string,\n  aktiviteter: PeriodeSokerAktivitet[],\n  intl: IntlShape,\n  erOppfylt?: boolean,\n): string | undefined => {\n  if (utsettelseType && utsettelseType === utsettelseArsakCodes.ARBEID && erOppfylt && aktiviteter) {\n    const prosentIArbeid = aktiviteter.reduce((total, aktivitet): number => total + (aktivitet.prosentArbeid || 0), 0);\n    if (prosentIArbeid < 100) {\n      return intl.formatMessage({ id: 'UttakActivity.MerEn100ProsentOgOgyldigUtsettlse' });\n    }\n  }\n  return undefined;\n};\n\nconst hentTekstNårUtbetalingPlusArbeidsprosentMerEn100 = (\n  formAktiviteter: UttakAktivitet[],\n  aktiviteter: PeriodeSokerAktivitet[],\n  intl: IntlShape,\n): string | undefined => {\n  const harMerEnn100 = formAktiviteter.some(\n    (aktivitet, index) => parseFloat(aktivitet.utbetalingsgrad) + (aktiviteter[index].prosentArbeid || 0) > 100,\n  );\n  return harMerEnn100 ? intl.formatMessage({ id: 'UttakActivity.MerEn100Prosent' }) : undefined;\n};\n\nconst hentSorterAktiviteterFn =\n  (arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId, intl: IntlShape) =>\n  (aktivitet1: PeriodeSokerAktivitet, aktivitet2: PeriodeSokerAktivitet) => {\n    const data1 = finnArbeidsforholdNavnOgProsentArbeid(aktivitet1, arbeidsgiverOpplysningerPerId, intl);\n    const data2 = finnArbeidsforholdNavnOgProsentArbeid(aktivitet2, arbeidsgiverOpplysningerPerId, intl);\n    return data1.arbeidsforhold.localeCompare(data2.arbeidsforhold);\n  };\n\nconst byggDefaultValues = (\n  valgtPeriode: PeriodeSoker,\n  sorterteAktiviteter: PeriodeSokerAktivitet[],\n  periodeResultatårsakKoder: ArsakKodeverk[],\n): UttakAktivitetType => {\n  const kontoIkkeSatt = !valgtPeriode.periodeType && valgtPeriode.aktiviteter[0].stønadskontoType === '-';\n\n  return {\n    begrunnelse: valgtPeriode.begrunnelse,\n    erOppfylt: erPeriodeOppfylt(valgtPeriode, periodeResultatårsakKoder),\n    periodeAarsak: valgtPeriode.periodeResultatÅrsak,\n    graderingInnvilget: valgtPeriode.graderingInnvilget,\n    samtidigUttak: valgtPeriode.samtidigUttak,\n    graderingAvslagAarsak: valgtPeriode.graderingAvslagÅrsak ? valgtPeriode.graderingAvslagÅrsak : '-',\n    samtidigUttaksprosent: valgtPeriode.samtidigUttaksprosent\n      ? valgtPeriode.samtidigUttaksprosent.toString()\n      : undefined,\n    flerbarnsdager: valgtPeriode.flerbarnsdager,\n    oppholdArsak: valgtPeriode.oppholdÅrsak,\n    aktiviteter: sorterteAktiviteter.map(a => ({\n      stønadskontoType: a.stønadskontoType!,\n      weeks: finnUker(a, valgtPeriode),\n      days: finnDager(a, valgtPeriode),\n      utbetalingsgrad: !kontoIkkeSatt && a.utbetalingsgrad ? a.utbetalingsgrad.toString() : '0',\n    })),\n  };\n};\n\nconst transformValues = (\n  values: UttakAktivitetType,\n  valgtPeriode: PeriodeSoker,\n  filtrerteAktiviteter: PeriodeSokerAktivitet[],\n): PeriodeSoker => ({\n  ...valgtPeriode,\n  begrunnelse: values.begrunnelse,\n  graderingInnvilget: values.erOppfylt ? values.graderingInnvilget : false,\n  oppholdÅrsak: values.oppholdArsak,\n  periodeResultatType:\n    values.erOppfylt || values.oppholdArsak !== oppholdArsakType.UDEFINERT\n      ? periodeResultatType.INNVILGET\n      : periodeResultatType.AVSLATT,\n  graderingAvslagÅrsak: values.graderingAvslagAarsak,\n  periodeResultatÅrsak: values.periodeAarsak,\n  samtidigUttaksprosent: values.samtidigUttaksprosent ? parseFloat(values.samtidigUttaksprosent) : undefined,\n  samtidigUttak: values.samtidigUttak,\n  flerbarnsdager: values.flerbarnsdager,\n  aktiviteter: filtrerteAktiviteter.map((a, index) => {\n    const aktivitet = values.aktiviteter[index];\n    return {\n      ...a,\n      stønadskontoType: aktivitet.stønadskontoType,\n      utbetalingsgrad: parseFloat(aktivitet.utbetalingsgrad),\n      trekkdagerDesimaler: parseFloat(aktivitet.weeks) * 5 + parseFloat(aktivitet.days),\n    };\n  }),\n});\n\ninterface OwnProps {\n  valgtPeriode: PeriodeSoker;\n  isReadOnly: boolean;\n  erHovedsøkersPeriode: boolean;\n  oppdaterPeriode: (perioder: PeriodeSoker[]) => void;\n  lukkPeriodeVisning: () => void;\n  alleKodeverk: AlleKodeverk;\n  årsakFilter: AarsakFilter;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  harSoktOmFlerbarnsdager: boolean;\n  erTilknyttetStortinget: boolean;\n}\n\nconst UttakPeriodeForm: FunctionComponent<OwnProps> = ({\n  valgtPeriode,\n  oppdaterPeriode,\n  lukkPeriodeVisning,\n  isReadOnly,\n  erHovedsøkersPeriode,\n  alleKodeverk,\n  årsakFilter,\n  arbeidsgiverOpplysningerPerId,\n  harSoktOmFlerbarnsdager,\n  erTilknyttetStortinget,\n}) => {\n  const intl = useIntl();\n\n  const periodeResultatårsakKoder = alleKodeverk[KodeverkType.PERIODE_RESULTAT_AARSAK] as ArsakKodeverk[];\n\n  const sorterteAktiviteter = useMemo(() => {\n    const sorterAktiviteter = hentSorterAktiviteterFn(arbeidsgiverOpplysningerPerId, intl);\n    return [...valgtPeriode.aktiviteter].sort(sorterAktiviteter);\n  }, [valgtPeriode.aktiviteter]);\n\n  const defaultValues = useMemo(\n    () => byggDefaultValues(valgtPeriode, sorterteAktiviteter, periodeResultatårsakKoder),\n    [valgtPeriode, sorterteAktiviteter, arbeidsgiverOpplysningerPerId],\n  );\n\n  const formMethods = useForm<UttakAktivitetType>({\n    defaultValues,\n  });\n\n  useEffect(() => {\n    formMethods.reset(defaultValues);\n  }, [defaultValues]);\n\n  const erOppfylt = formMethods.watch('erOppfylt');\n  const graderingInnvilget = formMethods.watch('graderingInnvilget');\n  const samtidigUttak = formMethods.watch('samtidigUttak');\n  const aktiviteter = formMethods.watch('aktiviteter');\n  const førsteValgteStønadskonto = aktiviteter.length > 0 ? aktiviteter[0].stønadskontoType : undefined;\n\n  const periodeÅrsakOptions = useMemo(\n    () =>\n      lagOptionsTilPeriodeÅrsakSelect(\n        periodeResultatårsakKoder,\n        erOppfylt ? 'INNVILGET' : 'AVSLÅTT',\n        årsakFilter,\n        valgtPeriode.utsettelseType,\n        førsteValgteStønadskonto || valgtPeriode.periodeType,\n        valgtPeriode.aktiviteter.length === 1,\n      ),\n    [erOppfylt, årsakFilter, valgtPeriode, førsteValgteStønadskonto],\n  );\n\n  const graderingAvslagsårsakOptions = useMemo(() => lagOptionsTilGraderingAvslagsårsakerSelect(alleKodeverk), []);\n\n  const submit = useCallback(\n    (values: UttakAktivitetType) => oppdaterPeriode([transformValues(values, valgtPeriode, sorterteAktiviteter)]),\n    [valgtPeriode],\n  );\n\n  const warning1 = hentTekstForÅVurdereUtsettelseVedMindreEnn100ProsentStilling(\n    valgtPeriode.utsettelseType,\n    valgtPeriode.aktiviteter,\n    intl,\n    erOppfylt,\n  );\n  const warning2 = hentTekstNårUtbetalingPlusArbeidsprosentMerEn100(aktiviteter, sorterteAktiviteter, intl);\n  const warning = warning1 || warning2;\n\n  return (\n    <Form formMethods={formMethods} onSubmit={submit}>\n      <UttakPeriodeInfo\n        valgtPeriode={valgtPeriode}\n        alleKodeverk={alleKodeverk}\n        isReadOnly={isReadOnly}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        harSoktOmFlerbarnsdager={harSoktOmFlerbarnsdager}\n        graderingInnvilget={graderingInnvilget}\n        erSamtidigUttak={samtidigUttak}\n        erTilknyttetStortinget={erTilknyttetStortinget}\n      />\n      {valgtPeriode.oppholdÅrsak === oppholdArsakType.UDEFINERT && (\n        <UttakAktiviteterTabell\n          isReadOnly={isReadOnly}\n          periodeTyper={alleKodeverk[KodeverkType.UTTAK_PERIODE_TYPE]}\n          arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n          aktiviteter={sorterteAktiviteter}\n          erOppfylt={erOppfylt}\n          utsettelseType={valgtPeriode.utsettelseType}\n        />\n      )}\n      {erHovedsøkersPeriode && (\n        <TextAreaField\n          name=\"begrunnelse\"\n          label={intl.formatMessage({ id: 'UttakActivity.Vurdering' })}\n          validate={[required, minLength3, maxLength1500, hasValidText]}\n          maxLength={1500}\n          readOnly={isReadOnly}\n        />\n      )}\n      {erHovedsøkersPeriode && !isReadOnly && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <RadioGroupPanel\n            name=\"erOppfylt\"\n            hideLegend\n            validate={[required]}\n            isHorizontal\n            isTrueOrFalseSelection\n            radios={[\n              { label: intl.formatMessage({ id: 'UttakActivity.Oppfylt' }), value: 'true' },\n              { label: intl.formatMessage({ id: 'UttakActivity.IkkeOppfylt' }), value: 'false' },\n            ]}\n          />\n          {erOppfylt !== undefined && (\n            <>\n              <VerticalSpacer eightPx />\n              <ArrowBox alignOffset={erOppfylt ? 0 : 92}>\n                <SelectField\n                  name=\"periodeAarsak\"\n                  label={intl.formatMessage({\n                    id: erOppfylt ? 'UttakActivity.InnvilgelseAarsaker' : 'UttakActivity.AvslagAarsak',\n                  })}\n                  selectValues={periodeÅrsakOptions}\n                  validate={[required, notDash]}\n                />\n                {valgtPeriode.gradertAktivitet && erOppfylt && (\n                  <>\n                    <VerticalSpacer sixteenPx />\n                    <RadioGroupPanel\n                      name=\"graderingInnvilget\"\n                      label={intl.formatMessage({ id: 'UttakActivity.Gradering' })}\n                      validate={[required]}\n                      isHorizontal\n                      isTrueOrFalseSelection\n                      radios={[\n                        { label: intl.formatMessage({ id: 'UttakActivity.Oppfylt' }), value: 'true' },\n                        { label: intl.formatMessage({ id: 'UttakActivity.IkkeOppfylt' }), value: 'false' },\n                      ]}\n                    />\n                    {graderingInnvilget === false && (\n                      <>\n                        <VerticalSpacer sixteenPx />\n                        <SelectField\n                          name=\"graderingAvslagAarsak\"\n                          label={intl.formatMessage({ id: 'UttakActivity.GraderingAvslagAarsaker' })}\n                          validate={[required, notDash]}\n                          selectValues={graderingAvslagsårsakOptions}\n                        />\n                      </>\n                    )}\n                    <VerticalSpacer eightPx />\n                  </>\n                )}\n              </ArrowBox>\n            </>\n          )}\n          <VerticalSpacer twentyPx />\n          {warning && (\n            <>\n              <Alert size=\"small\" variant=\"info\" className={styles.alert}>\n                {warning}\n              </Alert>\n              <VerticalSpacer sixteenPx />\n            </>\n          )}\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                <Button size=\"small\" variant=\"primary\" disabled={!formMethods.formState.isDirty}>\n                  <FormattedMessage id=\"UttakActivity.Oppdater\" />\n                </Button>\n              </FlexColumn>\n              <FlexColumn>\n                <Button size=\"small\" variant=\"secondary\" onClick={lukkPeriodeVisning} type=\"button\">\n                  <FormattedMessage id=\"UttakActivity.Avbryt\" />\n                </Button>\n              </FlexColumn>\n            </FlexRow>\n          </FlexContainer>\n        </>\n      )}\n    </Form>\n  );\n};\n\nexport default UttakPeriodeForm;\n","import React, { ReactElement, FunctionComponent, useCallback, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n  AksjonspunktHelpTextHTML,\n  EditedIcon,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\nimport { Button, Label, Panel } from '@navikt/ds-react';\nimport { behandlingType as BehandlingType, KodeverkType, StonadskontoType } from '@navikt/fp-kodeverk';\nimport { calcDays } from '@navikt/ft-utils';\n\nimport {\n  AlleKodeverk,\n  ArbeidsgiverOpplysningerPerId,\n  PeriodeSoker,\n  UttaksresultatPeriode,\n  UttakStonadskontoer,\n  PeriodeSokerAktivitet,\n  Behandling,\n  Ytelsefordeling,\n} from '@navikt/fp-types';\n\nimport { ArrowLeftIcon, ArrowRightIcon, ScissorsIcon, XMarkIcon } from '@navikt/aksel-icons';\nimport SplittPeriodeModal from './splitt/SplittPeriodeModal';\nimport UttakPeriodeForm from './UttakPeriodeForm';\n\nimport styles from './uttakPeriodePanel.module.css';\n\nconst getCorrectEmptyArbeidsForhold = (\n  alleKodeverk: AlleKodeverk,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n  periodeTypeKode: string,\n  stonadskonto: UttakStonadskontoer,\n): string[] => {\n  const arbeidsForholdMedNullDagerIgjenArray: string[] = [];\n\n  let arbeidsforholdMedPositivSaldoFinnes = false;\n\n  const konto = stonadskonto?.stonadskontoer\n    ? stonadskonto?.stonadskontoer[periodeTypeKode as StonadskontoType]\n    : undefined;\n  if (konto?.aktivitetSaldoDtoList) {\n    konto.aktivitetSaldoDtoList.forEach(item => {\n      if (item.saldo === 0) {\n        if (item.aktivitetIdentifikator.arbeidsgiverReferanse) {\n          const arbeidsgiverOpplysninger =\n            arbeidsgiverOpplysningerPerId[item.aktivitetIdentifikator.arbeidsgiverReferanse];\n          arbeidsForholdMedNullDagerIgjenArray.push(arbeidsgiverOpplysninger.navn);\n        } else {\n          const navn = alleKodeverk[KodeverkType.UTTAK_ARBEID_TYPE].find(\n            k => k.kode === item.aktivitetIdentifikator.uttakArbeidType,\n          )?.navn;\n          if (navn) {\n            arbeidsForholdMedNullDagerIgjenArray.push(navn);\n          }\n        }\n      } else {\n        arbeidsforholdMedPositivSaldoFinnes = true;\n      }\n    });\n  }\n\n  return arbeidsforholdMedPositivSaldoFinnes ? arbeidsForholdMedNullDagerIgjenArray : [];\n};\n\nconst hentApTekst = (\n  manuellBehandlingÅrsak: string,\n  alleKodeverk: AlleKodeverk,\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n  stonadskonto: UttakStonadskontoer,\n  periodeTypeKode: string,\n): ReactElement[] => {\n  const aksjonspunktTekster = [];\n\n  // Fix - ta bort 5001 med verdi fra kodeverk\n  if (manuellBehandlingÅrsak === '5001') {\n    const arbeidsForhold = getCorrectEmptyArbeidsForhold(\n      alleKodeverk,\n      arbeidsgiverOpplysningerPerId,\n      periodeTypeKode,\n      stonadskonto,\n    );\n    const arbeidsForholdMedNullDagerIgjen = arbeidsForhold.join();\n    if (arbeidsForhold.length > 1) {\n      aksjonspunktTekster.push(\n        <FormattedMessage\n          key=\"manuellÅrsak\"\n          id=\"UttakPanel.manuellBehandlingÅrsakArbeidsforhold\"\n          values={{ arbeidsforhold: arbeidsForholdMedNullDagerIgjen }}\n        />,\n      );\n    } else if (arbeidsForhold.length === 1) {\n      aksjonspunktTekster.push(\n        <FormattedMessage\n          key=\"manuellÅrsak\"\n          id=\"UttakPanel.manuellBehandlingÅrsakEnskiltArbeidsforhold\"\n          values={{ arbeidsforhold: arbeidsForhold }}\n        />,\n      );\n    } else {\n      aksjonspunktTekster.push(\n        <React.Fragment key={`kode-${manuellBehandlingÅrsak}`}>\n          {alleKodeverk[KodeverkType.MANUELL_BEHANDLING_AARSAK].find(k => k.kode === manuellBehandlingÅrsak)?.navn}\n        </React.Fragment>,\n      );\n    }\n  } else {\n    aksjonspunktTekster.push(\n      <React.Fragment key={`kode-${manuellBehandlingÅrsak}`}>\n        {alleKodeverk[KodeverkType.MANUELL_BEHANDLING_AARSAK].find(k => k.kode === manuellBehandlingÅrsak)?.navn}\n      </React.Fragment>,\n    );\n  }\n\n  return aksjonspunktTekster;\n};\n\nconst kalkulerTrekkdager = (\n  aktivitet: PeriodeSokerAktivitet,\n  virkedager: number,\n  samtidigUttak?: boolean,\n  samtidigUttaksprosent?: number,\n): number => {\n  let uttaksgrad = aktivitet.gradering && !!aktivitet.prosentArbeid ? (100 - aktivitet.prosentArbeid) / 100 : 1;\n  uttaksgrad = samtidigUttak && !!samtidigUttaksprosent ? samtidigUttaksprosent / 100 : uttaksgrad;\n  const trekkdager = uttaksgrad * virkedager;\n  return parseFloat(trekkdager.toFixed(1));\n};\n\nconst lagPeriode = (valgtPeriode: PeriodeSoker, fom: string, tom: string): PeriodeSoker => {\n  const { aktiviteter, samtidigUttak, samtidigUttaksprosent } = valgtPeriode;\n\n  const virkedager = calcDays(fom, tom);\n  const oppdaterteAktiviteter = aktiviteter.map(aktivitet =>\n    aktivitet.trekkdagerDesimaler && aktivitet.trekkdagerDesimaler > 0\n      ? {\n          ...aktivitet,\n          trekkdagerDesimaler: kalkulerTrekkdager(aktivitet, virkedager, samtidigUttak, samtidigUttaksprosent),\n        }\n      : aktivitet,\n  );\n\n  return {\n    ...valgtPeriode,\n    fom,\n    tom,\n    begrunnelse: valgtPeriode.begrunnelse || ' ',\n    aktiviteter: oppdaterteAktiviteter,\n  };\n};\n\ninterface OwnProps {\n  perioderSøker: PeriodeSoker[];\n  behandling: Behandling;\n  ytelsefordeling: Ytelsefordeling;\n  uttaksresultatPeriode: UttaksresultatPeriode;\n  valgtPeriodeIndex: number;\n  oppdaterPeriode: (perioder: PeriodeSoker[]) => void;\n  isReadOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  uttakStonadskontoer: UttakStonadskontoer;\n  setValgtPeriodeIndex: React.Dispatch<React.SetStateAction<number | undefined>>;\n  erTilknyttetStortinget: boolean;\n  harÅpneAksjonspunkter: boolean;\n}\n\nconst UttakPeriodePanel: FunctionComponent<OwnProps> = ({\n  perioderSøker,\n  behandling,\n  ytelsefordeling,\n  uttaksresultatPeriode,\n  valgtPeriodeIndex,\n  oppdaterPeriode,\n  isReadOnly,\n  alleKodeverk,\n  arbeidsgiverOpplysningerPerId,\n  uttakStonadskontoer,\n  setValgtPeriodeIndex,\n  erTilknyttetStortinget,\n  harÅpneAksjonspunkter,\n}) => {\n  const intl = useIntl();\n\n  const [visModal, setVisModal] = useState(false);\n  const toggleVisningAvModal = useCallback(() => setVisModal(verdi => !verdi), []);\n\n  const { perioderAnnenpart } = uttaksresultatPeriode;\n\n  const allePerioder = perioderAnnenpart.concat(perioderSøker);\n  const valgtPeriode = allePerioder[valgtPeriodeIndex];\n\n  const erHovedsøkersPeriode = valgtPeriodeIndex + 1 > perioderAnnenpart.length;\n\n  const splittPeriode = useCallback(\n    (dato: string) => {\n      const periode1 = lagPeriode(valgtPeriode, valgtPeriode.fom, dato);\n      const periode2 = lagPeriode(valgtPeriode, dayjs(dato).add(1, 'days').format('YYYY-MM-DD'), valgtPeriode.tom);\n      oppdaterPeriode([periode1, periode2]);\n      toggleVisningAvModal();\n    },\n    [valgtPeriodeIndex],\n  );\n\n  const lukkPeriode = useCallback(() => setValgtPeriodeIndex(undefined), []);\n\n  const harSoktOmFlerbarnsdager = erHovedsøkersPeriode\n    ? perioderSøker.some(p => p.flerbarnsdager === true)\n    : perioderAnnenpart.some(p => p.flerbarnsdager === true);\n\n  const erRevurderingFørEndringsdato =\n    !!ytelsefordeling.endringsdato &&\n    behandling.type === BehandlingType.REVURDERING &&\n    valgtPeriode.tom < ytelsefordeling.endringsdato;\n\n  const visForrigePeriode = useCallback(() => {\n    setValgtPeriodeIndex(index => (index === 0 || index === undefined ? index : index - 1));\n  }, []);\n  const visNestePeriode = useCallback(() => {\n    setValgtPeriodeIndex(index => (index === allePerioder.length - 1 || index === undefined ? index : index + 1));\n  }, [allePerioder.length]);\n\n  return (\n    <>\n      <div className={styles.space} />\n      <Panel border>\n        <FlexContainer>\n          <FlexRow spaceBetween>\n            <FlexColumn>\n              <Label size=\"small\">\n                <FormattedMessage id=\"UttakTimeLineData.PeriodeData.Detaljer\" />\n                {!!valgtPeriode.begrunnelse && !harÅpneAksjonspunkter && <EditedIcon />}\n              </Label>\n            </FlexColumn>\n            {!isReadOnly && erHovedsøkersPeriode && !erRevurderingFørEndringsdato && (\n              <FlexColumn>\n                <Button\n                  className={styles.margin}\n                  size=\"xsmall\"\n                  icon={<ScissorsIcon aria-hidden />}\n                  onClick={toggleVisningAvModal}\n                  variant=\"tertiary-neutral\"\n                  type=\"button\"\n                  title={intl.formatMessage({ id: 'UttakTimeLineData.PeriodeData.DelOppPerioden' })}\n                >\n                  <FormattedMessage id=\"UttakTimeLineData.PeriodeData.DelOppPerioden\" />\n                </Button>\n                {visModal && (\n                  <SplittPeriodeModal\n                    cancel={toggleVisningAvModal}\n                    fomDato={valgtPeriode.fom}\n                    tomDato={valgtPeriode.tom}\n                    submit={splittPeriode}\n                  />\n                )}\n              </FlexColumn>\n            )}\n            <FlexColumn className={styles.fix}>\n              <Button\n                className={styles.margin}\n                size=\"xsmall\"\n                icon={<ArrowLeftIcon aria-hidden />}\n                onClick={visForrigePeriode}\n                variant=\"secondary-neutral\"\n                type=\"button\"\n                title={intl.formatMessage({ id: 'UttakPeriodePanel.prevPeriod' })}\n              >\n                <FormattedMessage id=\"UttakPeriodePanel.prevPeriodShort\" />\n              </Button>\n              <Button\n                className={styles.margin}\n                size=\"xsmall\"\n                icon={<ArrowRightIcon aria-hidden />}\n                onClick={visNestePeriode}\n                variant=\"secondary-neutral\"\n                type=\"button\"\n                title={intl.formatMessage({ id: 'UttakPeriodePanel.nextPeriod' })}\n                iconPosition=\"right\"\n              >\n                <FormattedMessage id=\"UttakPeriodePanel.nextPeriodShort\" />\n              </Button>\n              <Button\n                size=\"xsmall\"\n                icon={<XMarkIcon aria-hidden />}\n                onClick={lukkPeriode}\n                variant=\"tertiary-neutral\"\n                type=\"button\"\n                title={intl.formatMessage({ id: 'UttakPeriodePanel.LukkPeriode' })}\n              />\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n        <VerticalSpacer sixteenPx />\n        {valgtPeriode.manuellBehandlingÅrsak && valgtPeriode.manuellBehandlingÅrsak !== '-' && (\n          <>\n            <AksjonspunktHelpTextHTML>\n              {hentApTekst(\n                valgtPeriode.manuellBehandlingÅrsak,\n                alleKodeverk,\n                arbeidsgiverOpplysningerPerId,\n                uttakStonadskontoer,\n                valgtPeriode.periodeType,\n              )}\n            </AksjonspunktHelpTextHTML>\n            <VerticalSpacer twentyPx />\n          </>\n        )}\n        <UttakPeriodeForm\n          valgtPeriode={valgtPeriode}\n          oppdaterPeriode={oppdaterPeriode}\n          isReadOnly={isReadOnly || !erHovedsøkersPeriode || erRevurderingFørEndringsdato}\n          erHovedsøkersPeriode={erHovedsøkersPeriode}\n          lukkPeriodeVisning={lukkPeriode}\n          alleKodeverk={alleKodeverk}\n          årsakFilter={uttaksresultatPeriode.årsakFilter}\n          arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n          harSoktOmFlerbarnsdager={harSoktOmFlerbarnsdager}\n          erTilknyttetStortinget={erTilknyttetStortinget}\n        />\n      </Panel>\n    </>\n  );\n};\n\nexport default UttakPeriodePanel;\n","import React, { useCallback, useState, FunctionComponent, ReactElement, useEffect, useMemo } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { Alert, Button, Heading } from '@navikt/ds-react';\nimport {\n  AksjonspunktHelpTextHTML,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  OverstyringKnapp,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\n\nimport { validerApKodeOgHentApEnum } from '@navikt/fp-prosess-felles';\nimport { UttakAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport {\n  ArbeidsgiverOpplysningerPerId,\n  FamilieHendelseSamling,\n  Personoversikt,\n  Soknad,\n  UttaksresultatPeriode,\n  UttakStonadskontoer,\n  Ytelsefordeling,\n  Behandling,\n  Aksjonspunkt,\n  AlleKodeverk,\n  PeriodeSoker,\n  Fagsak,\n} from '@navikt/fp-types';\nimport {\n  StonadskontoType,\n  AksjonspunktCode,\n  uttakPeriodeNavn,\n  periodeResultatType,\n  aksjonspunktStatus,\n  aksjonspunktStatus as AksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\n\nimport DisponibleStonadskontoerPanel from './stonadsdagerOversikt/DisponibleStonadskontoerPanel';\nimport UttakTidslinjeIndex from './tidslinje/UttakTidslinjeIndex';\nimport UttakPeriodePanel from './periodeDetaljer/UttakPeriodePanel';\n\nconst UTTAK_PANEL_AKSJONSPUNKT_KODER = {\n  5067: 'UttakPanel.Aksjonspunkt.5067',\n  5069: 'UttakPanel.Aksjonspunkt.5069',\n  5072: 'UttakPanel.Aksjonspunkt.5072',\n  5073: 'UttakPanel.Aksjonspunkt.5073',\n  5074: 'UttakPanel.Aksjonspunkt.5074',\n  5075: 'UttakPanel.Aksjonspunkt.5075',\n  5076: 'UttakPanel.Aksjonspunkt.5076',\n  5077: 'UttakPanel.Aksjonspunkt.5077',\n  5078: 'UttakPanel.Aksjonspunkt.5078',\n  5079: 'UttakPanel.Aksjonspunkt.5079',\n  5098: 'UttakPanel.Aksjonspunkt.5098',\n} as Record<string, string>;\n\nconst hentApTekster = (uttaksresultat: UttaksresultatPeriode, aksjonspunkter: Aksjonspunkt[]): ReactElement[] => {\n  const filtrerteAksjonspunkter = aksjonspunkter.filter(\n    ap =>\n      ap.definisjon !== AksjonspunktCode.FASTSETT_UTTAKPERIODER &&\n      ap.definisjon !== AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER,\n  );\n\n  const aksjonspunktTekster = [];\n\n  filtrerteAksjonspunkter.forEach(ap => {\n    const tekstkode = UTTAK_PANEL_AKSJONSPUNKT_KODER[ap.definisjon];\n    if (tekstkode) {\n      aksjonspunktTekster.push(<FormattedMessage key={tekstkode} id={tekstkode} />);\n    }\n  });\n\n  if (uttaksresultat.perioderSøker.some(p => p.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING)) {\n    aksjonspunktTekster.push(<FormattedMessage key=\"generellTekst\" id=\"UttakPanel.Aksjonspunkt.Generell\" />);\n  }\n\n  if (aksjonspunkter.length === 1 && aksjonspunkter[0].definisjon === AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER) {\n    if (aksjonspunkter[0].status !== 'UTFO') {\n      aksjonspunktTekster.push(<FormattedMessage key=\"aksjonspunktTekst\" id=\"UttakPanel.Overstyrt.KontrollerPaNytt\" />);\n    } else {\n      aksjonspunktTekster.push(<FormattedMessage key=\"aksjonspunktTekst\" id=\"UttakPanel.Overstyrt.Utfort\" />);\n    }\n  }\n\n  return aksjonspunktTekster;\n};\n\nconst validerPerioder = (perioder: PeriodeSoker[], stønadskonto: UttakStonadskontoer, intl: IntlShape) => {\n  const feil = [] as string[];\n\n  perioder.forEach(p => {\n    const ikkeGyldigeAktiviteter = p.aktiviteter.filter(\n      a =>\n        stønadskonto.stonadskontoer[a.stønadskontoType as StonadskontoType] === undefined &&\n        !!a.trekkdagerDesimaler &&\n        a.trekkdagerDesimaler > 0,\n    );\n    if (p.periodeResultatType === periodeResultatType.INNVILGET && ikkeGyldigeAktiviteter.length > 0) {\n      const feilmelding = intl.formatMessage(\n        { id: 'UttakPanel.InvalidStonadskonto' },\n        { konto: uttakPeriodeNavn[ikkeGyldigeAktiviteter[0].stønadskontoType as StonadskontoType] },\n      );\n      if (!feil.includes(feilmelding)) {\n        feil.push(feilmelding);\n      }\n    }\n  });\n\n  if (feil.length === 0) {\n    const kontoerMedUgyldigForbruk = Object.values(stønadskonto.stonadskontoer).filter(s => !s.gyldigForbruk);\n    if (kontoerMedUgyldigForbruk.length > 0) {\n      feil.push(\n        intl.formatMessage(\n          { id: 'UttakPanel.KontoMedUgyldigForbruk' },\n          { konto: uttakPeriodeNavn[kontoerMedUgyldigForbruk[0].stonadskontotype] },\n        ),\n      );\n    }\n  }\n\n  // TODO Dette ser feil ut. Burde det vera const konto = stønadskonto.stonadskontoer[StonadskontoType.FLERBARNSDAGER];\n  // @ts-ignore Fiks\n  const konto = stønadskonto[StonadskontoType.FLERBARNSDAGER];\n  if (feil.length === 0 && konto && !konto.gyldigForbruk) {\n    feil.push(intl.formatMessage({ id: 'UttakPanel.InvalidTrekkDagerFlerbarnsdager' }, { maxDays: konto.maxDager }));\n  }\n\n  return feil;\n};\n\nconst transformValues = (perioder: PeriodeSoker[], aksjonspunkter: Aksjonspunkt[]): UttakAp[] => {\n  const harOverstyringAp = aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER);\n  const skalSendeInnOverstyringAp = aksjonspunkter.length === 0 || (aksjonspunkter.length === 1 && harOverstyringAp);\n\n  const apKoder = skalSendeInnOverstyringAp\n    ? [AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER]\n    : aksjonspunkter\n        .filter(a => a.definisjon !== AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER)\n        .map(ap => ap.definisjon);\n\n  return apKoder.map(ap => ({\n    kode: validerApKodeOgHentApEnum(\n      ap,\n      AksjonspunktCode.FASTSETT_UTTAKPERIODER,\n      AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER,\n      AksjonspunktCode.TILKNYTTET_STORTINGET,\n      AksjonspunktCode.ANNENPART_EØS,\n      AksjonspunktCode.TETTE_SAKER,\n      AksjonspunktCode.KONTROLLER_REALITETSBEHANDLING_ELLER_KLAGE,\n      AksjonspunktCode.KONTROLLER_OPPLYSNINGER_OM_FORDELING_AV_STØNADSPERIODEN,\n      AksjonspunktCode.KONTROLLER_OPPLYSNINGER_OM_DØD,\n      AksjonspunktCode.KONTROLLER_OPPLYSNINGER_OM_SØKNADSFRIST,\n      AksjonspunktCode.KONTROLLER_TILSTØTENDE_YTELSER_INNVILGET,\n      AksjonspunktCode.KONTROLLER_TILSTØTENDE_YTELSER_OPPHØRT,\n    ),\n    perioder,\n  }));\n};\n\ninterface OwnProps {\n  behandling: Behandling;\n  uttaksresultatPeriode: UttaksresultatPeriode;\n  uttakStonadskontoer: UttakStonadskontoer;\n  aksjonspunkter: Aksjonspunkt[];\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  personoversikt: Personoversikt;\n  ytelsefordeling: Ytelsefordeling;\n  alleKodeverk: AlleKodeverk;\n  kanOverstyre: boolean;\n  submitCallback: (data: UttakAp[]) => Promise<void>;\n  oppdaterStønadskontoer: (params: { behandlingUuid: string; perioder: PeriodeSoker[] }) => Promise<any>;\n  isReadOnly: boolean;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  formData?: PeriodeSoker[];\n  setFormData: (data: PeriodeSoker[]) => void;\n  fagsak: Fagsak;\n}\n\nconst sortByDate = (a: PeriodeSoker, b: PeriodeSoker): number => {\n  if (a.fom < b.fom) {\n    return -1;\n  }\n  if (a.fom > b.fom) {\n    return 1;\n  }\n  return 0;\n};\n\nconst UttakProsessPanel: FunctionComponent<OwnProps> = ({\n  behandling,\n  uttaksresultatPeriode,\n  uttakStonadskontoer,\n  aksjonspunkter,\n  familiehendelse,\n  soknad,\n  personoversikt,\n  ytelsefordeling,\n  alleKodeverk,\n  kanOverstyre,\n  submitCallback,\n  oppdaterStønadskontoer,\n  isReadOnly,\n  arbeidsgiverOpplysningerPerId,\n  formData,\n  setFormData,\n  fagsak,\n}) => {\n  const intl = useIntl();\n\n  const [erOverstyrt, setErOverstyrt] = useState(false);\n  const [isDirty, setDirty] = useState(false);\n  const [isSubmitting, setSubmitting] = useState(false);\n  const toggleOverstyring = useCallback(() => {\n    setErOverstyrt(forrigeVerdi => !forrigeVerdi);\n  }, []);\n\n  const [perioder, setPerioder] = useState<PeriodeSoker[]>(formData || uttaksresultatPeriode.perioderSøker);\n  const [valgtPeriodeIndex, setValgtPeriodeIndex] = useState<number | undefined>();\n\n  const [stønadskonto, setStønadskonto] = useState(uttakStonadskontoer);\n\n  useEffect(() => () => setFormData(perioder), [perioder]);\n\n  const allePerioder = uttaksresultatPeriode.perioderAnnenpart.concat(perioder);\n\n  const visPeriode = useCallback(\n    (per: PeriodeSoker[]) => {\n      const index = per.findIndex(period => period.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING);\n      if (index !== -1) {\n        setValgtPeriodeIndex(index);\n      } else if (valgtPeriodeIndex !== undefined) {\n        setValgtPeriodeIndex(undefined);\n      }\n    },\n    [valgtPeriodeIndex],\n  );\n\n  useEffect(() => {\n    visPeriode(allePerioder);\n  }, []);\n\n  const bekreftAksjonspunkter = useCallback(() => {\n    setSubmitting(true);\n    submitCallback(transformValues(perioder, aksjonspunkter));\n  }, [perioder, aksjonspunkter]);\n\n  const oppdaterPeriode = useCallback(\n    (oppdatertePerioder: PeriodeSoker[]) => {\n      const andrePerioder = perioder.filter(p => p.fom !== oppdatertePerioder[0].fom);\n      const nyePerioder = [...andrePerioder.concat(oppdatertePerioder)].sort(sortByDate);\n      setPerioder(nyePerioder);\n      setDirty(true);\n\n      oppdaterStønadskontoer({ behandlingUuid: behandling.uuid, perioder: nyePerioder }).then(\n        (oppdatertStønadskonto: UttakStonadskontoer) => {\n          setStønadskonto(oppdatertStønadskonto);\n          if (oppdatertePerioder.length === 2) {\n            const index = nyePerioder.findIndex(p => p.fom === oppdatertePerioder[0].fom);\n            setValgtPeriodeIndex(uttaksresultatPeriode.perioderAnnenpart.length + index);\n          } else {\n            visPeriode(uttaksresultatPeriode.perioderAnnenpart.concat(nyePerioder));\n          }\n        },\n      );\n    },\n    [perioder, valgtPeriodeIndex],\n  );\n\n  const harÅpneAksjonspunkter = aksjonspunkter.some(ap => ap.status === AksjonspunktStatus.OPPRETTET);\n  const erTilknyttetStortinget = aksjonspunkter.some(\n    ap => ap.definisjon === AksjonspunktCode.TILKNYTTET_STORTINGET && harÅpneAksjonspunkter,\n  );\n\n  const erBekreftKnappDisablet = useMemo(() => {\n    if (aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.KONTROLLER_REALITETSBEHANDLING_ELLER_KLAGE)) {\n      return false;\n    }\n\n    if (perioder.some(p => p.periodeResultatType === periodeResultatType.MANUELL_BEHANDLING)) {\n      return true;\n    }\n    return valgtPeriodeIndex !== undefined || !isDirty;\n  }, [perioder, stønadskonto, valgtPeriodeIndex, isDirty]);\n\n  const feilmeldinger = useMemo(() => {\n    if (!isDirty || valgtPeriodeIndex !== undefined) {\n      return [];\n    }\n    return validerPerioder(perioder, stønadskonto, intl);\n  }, [perioder, stønadskonto, valgtPeriodeIndex, isDirty]);\n\n  const harIngenEllerLukkedeAksjonspunkt =\n    aksjonspunkter.filter(ap => ap.definisjon !== AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER).length === 0 ||\n    aksjonspunkter.some(ap => ap.toTrinnsBehandlingGodkjent === true && ap.status === aksjonspunktStatus.UTFORT);\n\n  const harOverstyrAp = aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER);\n\n  return (\n    <>\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn>\n            <Heading size=\"small\">\n              <FormattedMessage id=\"UttakPanel.Title\" />\n            </Heading>\n          </FlexColumn>\n          {!isReadOnly && kanOverstyre && (!harÅpneAksjonspunkter || harOverstyrAp) && (\n            <FlexColumn>\n              <OverstyringKnapp onClick={toggleOverstyring} erOverstyrt={erOverstyrt} />\n            </FlexColumn>\n          )}\n        </FlexRow>\n      </FlexContainer>\n      <VerticalSpacer twentyPx />\n      {aksjonspunkter.length > 0 && harÅpneAksjonspunkter && (\n        <>\n          <AksjonspunktHelpTextHTML>{hentApTekster(uttaksresultatPeriode, aksjonspunkter)}</AksjonspunktHelpTextHTML>\n          <VerticalSpacer twentyPx />\n        </>\n      )}\n      <DisponibleStonadskontoerPanel\n        stønadskontoer={stønadskonto.stonadskontoer ? Object.values(stønadskonto.stonadskontoer) : undefined}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n      />\n      <UttakTidslinjeIndex\n        perioderSøker={perioder}\n        perioderAnnenpart={uttaksresultatPeriode.perioderAnnenpart}\n        valgtPeriodeIndex={valgtPeriodeIndex}\n        setValgtPeriodeIndex={setValgtPeriodeIndex}\n        behandling={behandling}\n        søknad={soknad}\n        personoversikt={personoversikt}\n        familiehendelse={familiehendelse}\n        ytelsefordeling={ytelsefordeling}\n        tilknyttetStortinget={erTilknyttetStortinget}\n        fagsak={fagsak}\n        alleKodeverk={alleKodeverk}\n      />\n      {valgtPeriodeIndex !== undefined && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <UttakPeriodePanel\n            key={valgtPeriodeIndex}\n            perioderSøker={perioder}\n            behandling={behandling}\n            ytelsefordeling={ytelsefordeling}\n            uttaksresultatPeriode={uttaksresultatPeriode}\n            valgtPeriodeIndex={valgtPeriodeIndex}\n            oppdaterPeriode={oppdaterPeriode}\n            isReadOnly={(harIngenEllerLukkedeAksjonspunkt || isReadOnly) && !erOverstyrt}\n            alleKodeverk={alleKodeverk}\n            arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n            uttakStonadskontoer={stønadskonto}\n            setValgtPeriodeIndex={setValgtPeriodeIndex}\n            erTilknyttetStortinget={erTilknyttetStortinget}\n            harÅpneAksjonspunkter={harÅpneAksjonspunkter}\n          />\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n      {((!harIngenEllerLukkedeAksjonspunkt && !isReadOnly) || erOverstyrt) && (\n        <>\n          {feilmeldinger.length > 0 && (\n            <>\n              {feilmeldinger.map(fm => (\n                <Alert size=\"small\" variant=\"error\" key={fm}>\n                  {fm}\n                </Alert>\n              ))}\n              <VerticalSpacer sixteenPx />\n            </>\n          )}\n          <Button\n            size=\"small\"\n            variant=\"primary\"\n            disabled={feilmeldinger.length > 0 || isSubmitting || erBekreftKnappDisablet}\n            loading={isSubmitting}\n            onClick={bekreftAksjonspunkter}\n            role=\"button\"\n          >\n            <FormattedMessage id=\"Uttak.Confirm\" />\n          </Button>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default UttakProsessPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport {\n  ArbeidsgiverOpplysningerPerId,\n  StandardProsessPanelProps,\n  FamilieHendelseSamling,\n  Personoversikt,\n  Soknad,\n  UttaksresultatPeriode,\n  UttakStonadskontoer,\n  Ytelsefordeling,\n  PeriodeSoker,\n  Fagsak,\n} from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport UttakProsessPanel from './components/UttakProsessPanel';\n\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  uttakStonadskontoer: UttakStonadskontoer;\n  soknad: Soknad;\n  uttaksresultatPerioder: UttaksresultatPeriode;\n  familiehendelse: FamilieHendelseSamling;\n  personoversikt: Personoversikt;\n  ytelsefordeling: Ytelsefordeling;\n  kanOverstyre: boolean;\n  oppdaterStønadskontoer: (params: { behandlingUuid: string; perioder: PeriodeSoker[] }) => Promise<any>;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  fagsak: Fagsak;\n}\n\nconst UttakProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  uttaksresultatPerioder,\n  uttakStonadskontoer,\n  aksjonspunkter,\n  familiehendelse,\n  soknad,\n  personoversikt,\n  ytelsefordeling,\n  alleKodeverk,\n  kanOverstyre,\n  submitCallback,\n  isReadOnly,\n  oppdaterStønadskontoer,\n  arbeidsgiverOpplysningerPerId,\n  formData,\n  setFormData,\n  fagsak,\n}) => (\n  <RawIntlProvider value={intl}>\n    <UttakProsessPanel\n      behandling={behandling}\n      uttaksresultatPeriode={uttaksresultatPerioder}\n      uttakStonadskontoer={uttakStonadskontoer}\n      aksjonspunkter={aksjonspunkter}\n      familiehendelse={familiehendelse}\n      soknad={soknad}\n      personoversikt={personoversikt}\n      ytelsefordeling={ytelsefordeling}\n      alleKodeverk={alleKodeverk}\n      kanOverstyre={kanOverstyre}\n      submitCallback={submitCallback}\n      oppdaterStønadskontoer={oppdaterStønadskontoer}\n      isReadOnly={isReadOnly}\n      arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n      formData={formData}\n      setFormData={setFormData}\n      fagsak={fagsak}\n    />\n  </RawIntlProvider>\n);\n\nexport default UttakProsessIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode, vilkarUtfallType } from '@navikt/fp-kodeverk';\nimport { UttakProsessIndex } from '@navikt/fp-prosess-uttak';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  AksessRettigheter,\n  ArbeidsgiverOpplysningerPerId,\n  Behandling,\n  Fagsak,\n  FamilieHendelseSamling,\n  Personoversikt,\n  Soknad,\n  UttaksresultatPeriode,\n  UttakStonadskontoer,\n  Ytelsefordeling,\n} from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, requestBehandlingApi, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst getStatusFromUttakresultat = (behandling: Behandling): string => {\n  const harLenke = requestBehandlingApi.hasPath(BehandlingApiKeys.UTTAKSRESULTAT_PERIODER.name);\n  if (!harLenke) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n  return behandling.alleUttaksperioderAvslått ? vilkarUtfallType.IKKE_OPPFYLT : vilkarUtfallType.OPPFYLT;\n};\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FASTSETT_UTTAKPERIODER,\n  AksjonspunktCode.OVERSTYRING_AV_UTTAKPERIODER,\n  AksjonspunktCode.TILKNYTTET_STORTINGET,\n  AksjonspunktCode.ANNENPART_EØS,\n  AksjonspunktCode.TETTE_SAKER,\n  AksjonspunktCode.KONTROLLER_REALITETSBEHANDLING_ELLER_KLAGE,\n  AksjonspunktCode.KONTROLLER_OPPLYSNINGER_OM_FORDELING_AV_STØNADSPERIODEN,\n  AksjonspunktCode.KONTROLLER_OPPLYSNINGER_OM_DØD,\n  AksjonspunktCode.KONTROLLER_OPPLYSNINGER_OM_SØKNADSFRIST,\n  AksjonspunktCode.KONTROLLER_TILSTØTENDE_YTELSER_INNVILGET,\n  AksjonspunktCode.KONTROLLER_TILSTØTENDE_YTELSER_OPPHØRT,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.UTTAKSRESULTAT_PERIODER,\n  BehandlingApiKeys.FAMILIEHENDELSE,\n  BehandlingApiKeys.UTTAK_STONADSKONTOER,\n  BehandlingApiKeys.SOKNAD,\n  BehandlingApiKeys.YTELSEFORDELING,\n];\ntype EndepunktPanelData = {\n  familiehendelse: FamilieHendelseSamling;\n  uttakStonadskontoer: UttakStonadskontoer;\n  soknad: Soknad;\n  ytelsefordeling: Ytelsefordeling;\n  uttaksresultatPerioder: UttaksresultatPeriode;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  rettigheter: AksessRettigheter;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  personoversikt: Personoversikt;\n}\n\nconst UttakProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  rettigheter,\n  arbeidsgiverOpplysningerPerId,\n  personoversikt,\n  ...props\n}) => {\n  const intl = useIntl();\n  const { startRequest: oppdaterStønadskontoer } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.STONADSKONTOER_GITT_UTTAKSPERIODER,\n  );\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.UTTAK}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.Uttak' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={() => getStatusFromUttakresultat(props.behandling)}\n      renderPanel={data => (\n        <UttakProsessIndex\n          kanOverstyre={rettigheter.kanOverstyreAccess.isEnabled}\n          arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n          personoversikt={personoversikt}\n          oppdaterStønadskontoer={oppdaterStønadskontoer}\n          fagsak={fagsak}\n          {...data}\n        />\n      )}\n    />\n  );\n};\n\nexport default UttakProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode, vilkarUtfallType } from '@navikt/fp-kodeverk';\nimport { TilkjentYtelseProsessIndex } from '@navikt/fp-prosess-tilkjent-ytelse';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  ArbeidsgiverOpplysningerPerId,\n  BeregningsresultatDagytelse,\n  Fagsak,\n  FamilieHendelseSamling,\n  Feriepengegrunnlag,\n  Personoversikt,\n  Soknad,\n  UttaksresultatPeriode,\n} from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, requestBehandlingApi } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_TILBAKETREKK];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.FAMILIEHENDELSE,\n  BehandlingApiKeys.SOKNAD,\n  BehandlingApiKeys.FERIEPENGEGRUNNLAG,\n  BehandlingApiKeys.BEREGNINGRESULTAT_DAGYTELSE,\n  BehandlingApiKeys.UTTAKSRESULTAT_PERIODER,\n];\ntype EndepunktPanelData = {\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  feriepengegrunnlag: Feriepengegrunnlag;\n  beregningresultatDagytelse: BeregningsresultatDagytelse;\n  uttaksresultatPerioder: UttaksresultatPeriode;\n};\n\ninterface OwnProps {\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  fagsak: Fagsak;\n  personoversikt: Personoversikt;\n}\n\nconst TilkjentYtelseFpProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  arbeidsgiverOpplysningerPerId,\n  fagsak,\n  personoversikt,\n  ...props\n}) => (\n  <ProsessDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    prosessPanelKode={ProsessStegCode.TILKJENT_YTELSE}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.TilkjentYtelse' })}\n    skalPanelVisesIMeny={() => true}\n    hentOverstyrtStatus={() =>\n      requestBehandlingApi.hasPath(BehandlingApiKeys.BEREGNINGRESULTAT_DAGYTELSE.name)\n        ? vilkarUtfallType.OPPFYLT\n        : vilkarUtfallType.IKKE_VURDERT\n    }\n    renderPanel={data => (\n      <TilkjentYtelseProsessIndex\n        fagsak={fagsak}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        personoversikt={personoversikt}\n        beregningresultat={data?.beregningresultatDagytelse}\n        {...data}\n      />\n    )}\n  />\n);\n\nexport default TilkjentYtelseFpProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  vilkarUtfallType,\n  isAvslag,\n  fagsakYtelseType,\n  AksjonspunktCode,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { VedtakProsessIndex, ForhandsvisData } from '@navikt/fp-prosess-vedtak';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  Aksjonspunkt,\n  Behandling,\n  Behandlingsresultat,\n  Beregningsgrunnlag,\n  BeregningsresultatDagytelse,\n  Fagsak,\n  ForhåndsvisMeldingParams,\n  Medlemskap,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  Vilkar,\n} from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport IverksetterVedtakStatusModal from '../../felles/modaler/vedtak/IverksetterVedtakStatusModal';\nimport FatterVedtakStatusModal from '../../felles/modaler/vedtak/FatterVedtakStatusModal';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst hasOnlyClosedAps = (aksjonspunkter: Aksjonspunkt[], vedtakAksjonspunkter: Aksjonspunkt[]): boolean =>\n  aksjonspunkter\n    .filter(ap => !vedtakAksjonspunkter.some(vap => vap.definisjon === ap.definisjon))\n    .every(ap => ap.status !== aksjonspunktStatus.OPPRETTET);\n\nconst hasAksjonspunkt = (ap: Aksjonspunkt): boolean =>\n  ap.definisjon === AksjonspunktCode.OVERSTYR_BEREGNING ||\n  ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG ||\n  ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG ||\n  ap.definisjon === AksjonspunktCode.VURDER_SOKNADSFRIST_FORELDREPENGER;\n\nconst isAksjonspunktOpenAndOfType = (ap: Aksjonspunkt): boolean =>\n  hasAksjonspunkt(ap) && ap.status === aksjonspunktStatus.OPPRETTET;\n\nconst findStatusForVedtak = (\n  vilkar: Vilkar[],\n  aksjonspunkter: Aksjonspunkt[],\n  vedtakAksjonspunkter: Aksjonspunkt[],\n  behandlingsresultat?: Behandlingsresultat,\n): string => {\n  if (vilkar.length === 0) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (\n    hasOnlyClosedAps(aksjonspunkter, vedtakAksjonspunkter) &&\n    vilkar.some(v => v.vilkarStatus === vilkarUtfallType.IKKE_OPPFYLT)\n  ) {\n    return vilkarUtfallType.IKKE_OPPFYLT;\n  }\n\n  if (\n    vilkar.some(v => v.vilkarStatus === vilkarUtfallType.IKKE_VURDERT) ||\n    aksjonspunkter.some(isAksjonspunktOpenAndOfType)\n  ) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (!hasOnlyClosedAps(aksjonspunkter, vedtakAksjonspunkter)) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (behandlingsresultat && isAvslag(behandlingsresultat.type)) {\n    return vilkarUtfallType.IKKE_OPPFYLT;\n  }\n  return vilkarUtfallType.OPPFYLT;\n};\n\nconst getForhandsvisCallback =\n  (\n    forhandsvisMelding: (params?: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<unknown>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: ForhandsvisData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FATTER_VEDTAK,\n  AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n  AksjonspunktCode.VURDERE_ANNEN_YTELSE,\n  AksjonspunktCode.VURDERE_DOKUMENT,\n  AksjonspunktCode.KONTROLLER_REVURDERINGSBEHANDLING_VARSEL_VED_UGUNST,\n  AksjonspunktCode.KONTROLL_AV_MAUNELT_OPPRETTET_REVURDERINGSBEHANDLING,\n  AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n];\n\nconst getLagringSideeffekter =\n  (\n    toggleIverksetterVedtakModal: (visIverksetterModal: boolean) => void,\n    toggleFatterVedtakModal: (skalFatterModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n  ) =>\n  (aksjonspunktModels: { kode: string; skalBrukeOverstyrendeFritekstBrev: boolean }[]) => {\n    setSkalOppdatereEtterBekreftelseAvAp(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      const skalTilTotrinnskontroll = aksjonspunktModels.some(\n        ap => ap.kode === AksjonspunktCode.FORESLA_VEDTAK || ap.skalBrukeOverstyrendeFritekstBrev,\n      );\n      if (skalTilTotrinnskontroll) {\n        toggleFatterVedtakModal(true);\n      } else {\n        toggleIverksetterVedtakModal(true);\n      }\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [...IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER, AksjonspunktCode.FORESLA_VEDTAK];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.TILBAKEKREVINGVALG,\n  BehandlingApiKeys.BEREGNINGSRESULTAT_DAGYTELSE_ORIGINAL_BEHANDLING,\n  BehandlingApiKeys.MEDLEMSKAP,\n  BehandlingApiKeys.SIMULERING_RESULTAT,\n  BehandlingApiKeys.BEREGNINGRESULTAT_DAGYTELSE,\n  BehandlingApiKeys.BEREGNINGSGRUNNLAG,\n];\ntype EndepunktPanelData = {\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  beregningsresultatOriginalBehandling?: {\n    'beregningsresultat-foreldrepenger'?: BeregningsresultatDagytelse;\n  };\n  medlemskap: Medlemskap;\n  simuleringResultat: SimuleringResultat;\n  beregningresultatDagytelse?: BeregningsresultatDagytelse;\n  beregningsgrunnlag?: Beregningsgrunnlag;\n};\n\ninterface OwnProps {\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  fagsak: Fagsak;\n  opneSokeside: () => void;\n}\n\nconst VedtakFpProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  setSkalOppdatereEtterBekreftelseAvAp,\n  fagsak,\n  opneSokeside,\n  ...props\n}) => {\n  const intl = useIntl();\n  const [visIverksetterVedtakModal, toggleIverksetterVedtakModal] = useState(false);\n  const [visFatterVedtakModal, toggleFatterVedtakModal] = useState(false);\n  const lagringSideEffekter = getLagringSideeffekter(\n    toggleIverksetterVedtakModal,\n    toggleFatterVedtakModal,\n    setSkalOppdatereEtterBekreftelseAvAp,\n  );\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    getForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const lukkIverksetterModal = useCallback(() => {\n    toggleIverksetterVedtakModal(false);\n    opneSokeside();\n  }, []);\n  const lukkFatterModal = useCallback(() => {\n    toggleFatterVedtakModal(false);\n    opneSokeside();\n  }, []);\n\n  const { vilkår } = props.behandling;\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.VEDTAK}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.Vedtak' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={standardData =>\n        findStatusForVedtak(\n          vilkår || [],\n          props.behandling.aksjonspunkt || [],\n          standardData.aksjonspunkter,\n          standardData.behandling.behandlingsresultat,\n        )\n      }\n      lagringSideEffekter={lagringSideEffekter}\n      hentSkalMarkeresSomAktiv={standardData =>\n        !standardData.behandling.behandlingHenlagt &&\n        findStatusForVedtak(\n          vilkår || [],\n          props.behandling.aksjonspunkt || [],\n          standardData.aksjonspunkter,\n          standardData.behandling.behandlingsresultat,\n        ) !== vilkarUtfallType.IKKE_VURDERT\n      }\n      renderPanel={data => (\n        <>\n          <IverksetterVedtakStatusModal\n            visModal={visIverksetterVedtakModal}\n            lukkModal={lukkIverksetterModal}\n            behandlingsresultat={data.behandling.behandlingsresultat}\n          />\n          <FatterVedtakStatusModal\n            visModal={visFatterVedtakModal}\n            lukkModal={lukkFatterModal}\n            tekst={intl.formatMessage({ id: 'FatterVedtakStatusModal.SendtBeslutter' })}\n          />\n          <VedtakProsessIndex\n            ytelseTypeKode={fagsakYtelseType.FORELDREPENGER}\n            previewCallback={previewCallback}\n            {...data}\n            aksjonspunkter={props.behandling.aksjonspunkt}\n            vilkar={vilkår}\n          />\n        </>\n      )}\n    />\n  );\n};\n\nexport default VedtakFpProsessStegInitPanel;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport classnames from 'classnames/bind';\n\nimport styles from './boks.module.css';\n\nconst classNames = classnames.bind(styles);\n\ninterface OwnProps {\n  harBorderTop: boolean;\n  children: ReactElement | ReactElement[];\n}\n\nconst Boks: FunctionComponent<OwnProps> = ({ harBorderTop, children }) => (\n  <div\n    className={classNames(styles.boks, {\n      harBorderTop,\n    })}\n  >\n    {children}\n  </div>\n);\n\nexport default Boks;\n","import { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\nimport { PersonopplysningerBasis } from '@navikt/fp-types';\nimport { opplysningAdresseType } from '@navikt/fp-kodeverk';\n\ninterface OwnProps {\n  personopplysninger: PersonopplysningerBasis;\n}\n\nconst AdresseVisning: FunctionComponent<OwnProps> = ({ personopplysninger }) => {\n  const postadr = personopplysninger.adresser.find(\n    adresse => adresse.adresseType === opplysningAdresseType.POSTADRESSE,\n  );\n  const bostedsadr = personopplysninger.adresser.find(\n    adresse => adresse.adresseType === opplysningAdresseType.BOSTEDSADRESSE,\n  );\n  if (!postadr && !bostedsadr) {\n    return null;\n  }\n\n  const adr = postadr || bostedsadr || {};\n\n  return (\n    <>\n      <Label size=\"small\">\n        <FormattedMessage id=\"PersonInfoPanel.Adresse\" />\n      </Label>\n      <VerticalSpacer fourPx />\n      <BodyShort size=\"small\">{adr.adresselinje1}</BodyShort>\n      <VerticalSpacer fourPx />\n      {adr.adresselinje2 && (\n        <>\n          <BodyShort size=\"small\">{adr.adresselinje2}</BodyShort>\n          <VerticalSpacer fourPx />\n        </>\n      )}\n      {adr.adresselinje3 && (\n        <>\n          <BodyShort size=\"small\">{adr.adresselinje3}</BodyShort>\n          <VerticalSpacer fourPx />\n        </>\n      )}\n      <BodyShort size=\"small\">{`${adr.postNummer} ${adr.poststed}, ${adr.land}`}</BodyShort>\n    </>\n  );\n};\n\nexport default AdresseVisning;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, HStack, VStack } from '@navikt/ds-react';\nimport { ChildEyesIcon } from '@navikt/aksel-icons';\nimport { PersonopplysningerBasis } from '@navikt/fp-types';\nimport { DateLabel } from '@navikt/ft-ui-komponenter';\nimport Boks from '../Boks';\n\nimport styles from './alleBarnPanel.module.css';\nimport AdresseVisning from './AdresseVisning';\n\ninterface OwnProps {\n  alleBarn: PersonopplysningerBasis[];\n}\n\nconst AlleBarnPanel: FunctionComponent<OwnProps> = ({ alleBarn }) => {\n  const intl = useIntl();\n  return (\n    <>\n      {alleBarn.map((barn, index) => (\n        <Boks key={barn.aktoerId} harBorderTop={index === 0}>\n          <HStack>\n            <HStack gap=\"5\" className={styles.leftCol}>\n              <ChildEyesIcon className={styles.image} title={intl.formatMessage({ id: 'PersonInfoPanel.Barn' })} />\n              <VStack gap=\"2\">\n                <div>\n                  <Label size=\"small\">\n                    <FormattedMessage id=\"PersonInfoPanel.BarnNr\" values={{ nummer: index + 1 }} />\n                  </Label>\n                  <BodyShort size=\"small\">{barn.navn ? barn.navn : '-'}</BodyShort>\n                </div>\n                <div>\n                  <Label size=\"small\">\n                    <FormattedMessage id=\"PersonInfoPanel.Fodt\" />\n                  </Label>\n                  <BodyShort size=\"small\">\n                    <DateLabel dateString={barn.fødselsdato ? barn.fødselsdato : '-'} />\n                  </BodyShort>\n                </div>\n                {barn.dødsdato && (\n                  <div>\n                    <Label size=\"small\" className={styles.dodTekst}>\n                      <FormattedMessage id=\"PersonInfoPanel.Dod\" />\n                    </Label>\n                    <BodyShort size=\"small\" className={styles.dodTekst}>\n                      <DateLabel dateString={barn.dødsdato} />\n                    </BodyShort>\n                  </div>\n                )}\n              </VStack>\n            </HStack>\n            <div>\n              <AdresseVisning personopplysninger={barn} />\n            </div>\n          </HStack>\n        </Boks>\n      ))}\n    </>\n  );\n};\n\nexport default AlleBarnPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, HStack } from '@navikt/ds-react';\nimport { FigureOutwardIcon, FigureInwardIcon } from '@navikt/aksel-icons';\nimport { AlleKodeverk, KjønnkodeEnum, PersonopplysningerBasis } from '@navikt/fp-types';\nimport { KodeverkType, getKodeverknavnFraKode } from '@navikt/fp-kodeverk';\n\nimport Boks from '../Boks';\n\nimport AdresseVisning from './AdresseVisning';\n\nimport styles from './forelderPanel.module.css';\n\ninterface OwnProps {\n  forelder: PersonopplysningerBasis;\n  erSøker: boolean;\n  alleKodeverk: AlleKodeverk;\n  kjønn: string;\n}\n\nconst ForelderPanel: FunctionComponent<OwnProps> = ({ forelder, erSøker, alleKodeverk, kjønn }) => {\n  const intl = useIntl();\n\n  const erKvinne = kjønn === KjønnkodeEnum.KVINNE;\n\n  return (\n    <Boks harBorderTop={false}>\n      <HStack>\n        <HStack gap=\"5\" className={styles.leftCol}>\n          {erKvinne && (\n            <FigureOutwardIcon\n              className={styles.imageKvinne}\n              title={intl.formatMessage({ id: 'ForelderPanel.Soker' })}\n            />\n          )}\n          {!erKvinne && (\n            <FigureInwardIcon className={styles.imageMann} title={intl.formatMessage({ id: 'ForelderPanel.Soker' })} />\n          )}\n          <div>\n            <Label size=\"small\">\n              <FormattedMessage id={erSøker ? 'ForelderPanel.Soker' : 'ForelderPanel.AnnenForelder'} />\n            </Label>\n            <BodyShort size=\"small\">{forelder.navn}</BodyShort>\n            <BodyShort size=\"small\">\n              {getKodeverknavnFraKode(alleKodeverk, KodeverkType.SIVILSTAND_TYPE, forelder.sivilstand)}\n            </BodyShort>\n          </div>\n        </HStack>\n        <div>\n          <AdresseVisning personopplysninger={forelder} />\n        </div>\n      </HStack>\n    </Boks>\n  );\n};\n\nexport default ForelderPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { required } from '@navikt/ft-form-validators';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { useFormContext } from 'react-hook-form';\n\ntype FormValues = {\n  harAnnenForelderRett: boolean;\n  mottarAnnenForelderUforetrygd: boolean;\n  annenForelderRettEØS: boolean;\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  avklareUforetrygd: boolean;\n  avklareRettEØS: boolean;\n}\n\nconst HarAnnenForelderRettFelter: FunctionComponent<OwnProps> = ({ readOnly, avklareUforetrygd, avklareRettEØS }) => {\n  const { watch } = useFormContext<FormValues>();\n  const harAnnenForelderRett = watch('harAnnenForelderRett');\n  const annenForelderRettEØS = watch('annenForelderRettEØS');\n\n  return (\n    <>\n      <RadioGroupPanel\n        name=\"harAnnenForelderRett\"\n        label={<FormattedMessage id=\"HarAnnenForelderRettFelter.HarAnnenForelderRett\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        radios={[\n          {\n            label: <FormattedMessage id=\"HarAnnenForelderRettFelter.Ja\" />,\n            value: 'true',\n          },\n          {\n            label: <FormattedMessage id=\"HarAnnenForelderRettFelter.Nei\" />,\n            value: 'false',\n          },\n        ]}\n      />\n      <VerticalSpacer thirtyTwoPx />\n      {harAnnenForelderRett === false && avklareRettEØS && (\n        <RadioGroupPanel\n          name=\"annenForelderRettEØS\"\n          label={<FormattedMessage id=\"HarAnnenForelderRettFelter.AnnenForelderRettEØS\" />}\n          validate={[required]}\n          isReadOnly={readOnly}\n          isTrueOrFalseSelection\n          radios={[\n            {\n              label: <FormattedMessage id=\"HarAnnenForelderRettFelter.Ja\" />,\n              value: 'true',\n            },\n            {\n              label: <FormattedMessage id=\"HarAnnenForelderRettFelter.Nei\" />,\n              value: 'false',\n            },\n          ]}\n        />\n      )}\n      {harAnnenForelderRett === false && (!avklareRettEØS || annenForelderRettEØS === false) && avklareUforetrygd && (\n        <>\n          <VerticalSpacer thirtyTwoPx />\n          <RadioGroupPanel\n            name=\"mottarAnnenForelderUforetrygd\"\n            label={<FormattedMessage id=\"HarAnnenForelderRettFelter.MottarUforetrygd\" />}\n            validate={[required]}\n            isReadOnly={readOnly}\n            isTrueOrFalseSelection\n            radios={[\n              {\n                label: <FormattedMessage id=\"HarAnnenForelderRettFelter.Ja\" />,\n                value: 'true',\n              },\n              {\n                label: <FormattedMessage id=\"HarAnnenForelderRettFelter.Nei\" />,\n                value: 'false',\n              },\n            ]}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default HarAnnenForelderRettFelter;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, Label } from '@navikt/ds-react';\nimport { RadioGroupPanel, Form, TextAreaField } from '@navikt/ft-form-hooks';\nimport { decodeHtmlEntity } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\nimport { FaktaGruppe, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { BekreftAleneomsorgVurderingAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, Ytelsefordeling } from '@navikt/fp-types';\n\nimport Boks from '../Boks';\nimport HarAnnenForelderRettFelter from './HarAnnenForelderRettFelter';\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\nexport type FormValues = {\n  harAleneomsorg: boolean;\n  harAnnenForelderRett?: boolean;\n  mottarAnnenForelderUforetrygd?: boolean;\n  begrunnelse: string;\n};\n\ninterface OwnProps {\n  ytelsefordeling: Ytelsefordeling;\n  aksjonspunkt: Aksjonspunkt;\n  readOnly: boolean;\n  lagreCallback: (aksjonspunktData: BekreftAleneomsorgVurderingAp) => Promise<void>;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\nconst AleneomsorgForm: FunctionComponent<OwnProps> = ({\n  ytelsefordeling,\n  aksjonspunkt,\n  readOnly,\n  lagreCallback,\n  formData,\n  setFormData,\n  alleMerknaderFraBeslutter,\n}) => {\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || {\n      harAleneomsorg: ytelsefordeling?.bekreftetAleneomsorg,\n      harAnnenForelderRett: ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenforelderRett,\n      mottarAnnenForelderUforetrygd: ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenforelderUføretrygd,\n      begrunnelse: aksjonspunkt.begrunnelse ? decodeHtmlEntity(aksjonspunkt.begrunnelse) : undefined,\n    },\n  });\n\n  const harAleneomsorg = formMethods.watch('harAleneomsorg');\n  const skalAvklareUforetrygd = true;\n  const skalAvklareRettEØS = true;\n\n  const transformerFeltverdier = useCallback(\n    (feltVerdier: FormValues) =>\n      lagreCallback({\n        kode: AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG,\n        aleneomsorg: feltVerdier.harAleneomsorg,\n        annenforelderHarRett: feltVerdier.harAnnenForelderRett,\n        annenforelderMottarUføretrygd: feltVerdier.mottarAnnenForelderUforetrygd,\n        begrunnelse: feltVerdier.begrunnelse,\n      }),\n    [],\n  );\n\n  const bTag = useCallback((...chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form formMethods={formMethods} onSubmit={transformerFeltverdier} setDataOnUnmount={setFormData}>\n      <Boks harBorderTop={false}>\n        <VerticalSpacer thirtyTwoPx />\n        <FaktaGruppe\n          withoutBorder\n          merknaderFraBeslutter={\n            alleMerknaderFraBeslutter[AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG]\n          }\n        >\n          <RadioGroupPanel\n            name=\"harAleneomsorg\"\n            label={<FormattedMessage id=\"AleneomsorgForm.Aleneomsorg\" />}\n            validate={[required]}\n            isReadOnly={readOnly}\n            isTrueOrFalseSelection\n            radios={[\n              {\n                label: <FormattedMessage id=\"AleneomsorgForm.HarAleneomsorg\" />,\n                value: 'true',\n              },\n              {\n                label: <FormattedMessage id=\"AleneomsorgForm.HarIkkeAleneomsorg\" values={{ b: bTag }} />,\n                value: 'false',\n              },\n            ]}\n          />\n          {harAleneomsorg === false && (\n            <>\n              <VerticalSpacer thirtyTwoPx />\n              <HarAnnenForelderRettFelter\n                readOnly={readOnly}\n                avklareUforetrygd={skalAvklareUforetrygd}\n                avklareRettEØS={skalAvklareRettEØS}\n              />\n            </>\n          )}\n          <VerticalSpacer thirtyTwoPx />\n          <TextAreaField\n            label={\n              <Label size=\"small\">\n                <FormattedMessage id=\"AleneomsorgForm.Begrunn\" />\n              </Label>\n            }\n            name=\"begrunnelse\"\n            validate={[required, minLength3, maxLength1500, hasValidText]}\n            maxLength={1500}\n            readOnly={readOnly}\n          />\n          <VerticalSpacer sixteenPx />\n          {!readOnly && (\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              disabled={!formMethods.formState.isDirty || formMethods.formState.isSubmitting}\n              loading={formMethods.formState.isSubmitting}\n            >\n              <FormattedMessage id=\"AleneomsorgForm.Bekreft\" />\n            </Button>\n          )}\n        </FaktaGruppe>\n      </Boks>\n    </Form>\n  );\n};\n\nexport default AleneomsorgForm;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, Label } from '@navikt/ds-react';\nimport { Form, TextAreaField } from '@navikt/ft-form-hooks';\nimport { decodeHtmlEntity } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\nimport { FaktaGruppe, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Aksjonspunkt } from '@navikt/ft-types';\nimport { Ytelsefordeling } from '@navikt/fp-types';\nimport { AvklarAnnenforelderHarRettAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\n\nimport Boks from '../Boks';\nimport HarAnnenForelderRettFelter from './HarAnnenForelderRettFelter';\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\nexport type FormValues = {\n  harAnnenForelderRett: boolean;\n  mottarAnnenForelderUforetrygd?: boolean;\n  annenForelderRettEØS?: boolean;\n  begrunnelse: string;\n};\n\ninterface OwnProps {\n  ytelsefordeling: Ytelsefordeling;\n  aksjonspunkt: Aksjonspunkt;\n  readOnly: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n  lagreCallback: (aksjonspunktData: AvklarAnnenforelderHarRettAp) => Promise<void>;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\nconst HarAnnenForelderRettForm: FunctionComponent<OwnProps> = ({\n  ytelsefordeling,\n  readOnly,\n  aksjonspunkt,\n  formData,\n  setFormData,\n  lagreCallback,\n  alleMerknaderFraBeslutter,\n}) => {\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || {\n      harAnnenForelderRett: ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenforelderRett,\n      mottarAnnenForelderUforetrygd: ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenforelderUføretrygd,\n      annenForelderRettEØS: ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenForelderRettEØS,\n      begrunnelse: aksjonspunkt.begrunnelse ? decodeHtmlEntity(aksjonspunkt.begrunnelse) : undefined,\n    },\n  });\n\n  const skalAvklareUforetrygd =\n    ytelsefordeling?.rettigheterAnnenforelder?.skalAvklareAnnenforelderUføretrygd ||\n    ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenforelderUføretrygd !== null;\n  const skalAvklareRettEØS =\n    ytelsefordeling?.rettigheterAnnenforelder?.skalAvklareAnnenForelderRettEØS ||\n    ytelsefordeling?.rettigheterAnnenforelder?.bekreftetAnnenForelderRettEØS !== null;\n\n  const transformerFeltverdier = useCallback(\n    (feltVerdier: FormValues) =>\n      lagreCallback({\n        kode: AksjonspunktCode.AVKLAR_ANNEN_FORELDER_RETT,\n        annenforelderHarRett: feltVerdier.harAnnenForelderRett,\n        annenforelderMottarUføretrygd: feltVerdier.mottarAnnenForelderUforetrygd,\n        annenForelderHarRettEØS: feltVerdier.annenForelderRettEØS,\n        begrunnelse: feltVerdier.begrunnelse,\n      }),\n    [],\n  );\n\n  return (\n    <Form formMethods={formMethods} onSubmit={transformerFeltverdier} setDataOnUnmount={setFormData}>\n      <Boks harBorderTop={false}>\n        <FaktaGruppe\n          withoutBorder\n          merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.AVKLAR_ANNEN_FORELDER_RETT]}\n        >\n          <VerticalSpacer thirtyTwoPx />\n          <HarAnnenForelderRettFelter\n            readOnly={readOnly}\n            avklareUforetrygd={skalAvklareUforetrygd}\n            avklareRettEØS={skalAvklareRettEØS}\n          />\n          <VerticalSpacer thirtyTwoPx />\n          <TextAreaField\n            label={\n              <Label size=\"small\">\n                <FormattedMessage id=\"HarAnnenForelderRettForm.Begrunn\" />\n              </Label>\n            }\n            name=\"begrunnelse\"\n            validate={[required, minLength3, maxLength1500, hasValidText]}\n            maxLength={1500}\n            readOnly={readOnly}\n          />\n          <VerticalSpacer sixteenPx />\n          {!readOnly && (\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              disabled={!formMethods.formState.isDirty || formMethods.formState.isSubmitting}\n              loading={formMethods.formState.isSubmitting}\n            >\n              <FormattedMessage id=\"HarAnnenForelderRettForm.Bekreft\" />\n            </Button>\n          )}\n        </FaktaGruppe>\n      </Boks>\n    </Form>\n  );\n};\n\nexport default HarAnnenForelderRettForm;\n","import { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\nimport { AlleKodeverk, KjønnkodeEnum, Personoversikt, Ytelsefordeling } from '@navikt/fp-types';\nimport { AvklarAnnenforelderHarRettAp, BekreftAleneomsorgVurderingAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { Aksjonspunkt } from '@navikt/ft-types';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport AlleBarnPanel from './personer/AlleBarnPanel';\nimport ForelderPanel from './personer/ForelderPanel';\nimport AleneomsorgForm, { FormValues as AleneOmsorgValues } from './forms/AleneomsorgForm';\nimport HarAnnenForelderRettForm, { FormValues as RettFormValues } from './forms/HarAnnenForelderRettForm';\n\nconst finnAksjonspunktTekst = (aksjonspunkter: Aksjonspunkt[]): string => {\n  if (aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG)) {\n    return 'OmsorgOgRettFaktaForm.VurderOmAleneomsorg';\n  }\n  if (aksjonspunkter.some(ap => ap.definisjon === AksjonspunktCode.AVKLAR_ANNEN_FORELDER_RETT)) {\n    return 'OmsorgOgRettFaktaForm.VurderAndreForelderRett';\n  }\n  return '';\n};\n\nconst finnMotsattKjønn = (kjønn: string) =>\n  kjønn === KjønnkodeEnum.KVINNE ? KjønnkodeEnum.MANN : KjønnkodeEnum.KVINNE;\n\ninterface OwnProps {\n  readOnly: boolean;\n  personoversikt: Personoversikt;\n  ytelsefordeling: Ytelsefordeling;\n  alleKodeverk: AlleKodeverk;\n  aksjonspunkter: Aksjonspunkt[];\n  lagreCallback: (aksjonspunktData: BekreftAleneomsorgVurderingAp | AvklarAnnenforelderHarRettAp) => Promise<void>;\n  formData?: RettFormValues | AleneOmsorgValues;\n  setFormData: (data: RettFormValues | AleneOmsorgValues) => void;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n}\n\nconst OmsorgOgRettFaktaIndex: FunctionComponent<OwnProps> = ({\n  readOnly,\n  personoversikt,\n  ytelsefordeling,\n  alleKodeverk,\n  aksjonspunkter,\n  lagreCallback,\n  formData,\n  setFormData,\n  alleMerknaderFraBeslutter,\n}) => {\n  const aksjonspunktTekst = finnAksjonspunktTekst(aksjonspunkter);\n  const harAleneomsorgAksjonspunkt = aksjonspunkter.some(\n    ap => ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG,\n  );\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"OmsorgOgRettFaktaForm.Overskrift\" />\n      </Heading>\n      <VerticalSpacer thirtyTwoPx />\n      {aksjonspunktTekst && (\n        <AksjonspunktHelpTextHTML>\n          <FormattedMessage id={aksjonspunktTekst} />\n        </AksjonspunktHelpTextHTML>\n      )}\n      <VerticalSpacer thirtyTwoPx />\n      <AlleBarnPanel alleBarn={personoversikt.barn} />\n      <ForelderPanel\n        forelder={personoversikt.bruker}\n        kjønn={personoversikt.bruker.kjønn}\n        erSøker\n        alleKodeverk={alleKodeverk}\n      />\n      {personoversikt.annenPart && (\n        <ForelderPanel\n          forelder={personoversikt.annenPart}\n          kjønn={personoversikt.annenPart.kjønn || finnMotsattKjønn(personoversikt.bruker.kjønn)}\n          erSøker={false}\n          alleKodeverk={alleKodeverk}\n        />\n      )}\n      {harAleneomsorgAksjonspunkt && (\n        <AleneomsorgForm\n          ytelsefordeling={ytelsefordeling}\n          readOnly={readOnly}\n          formData={formData as AleneOmsorgValues}\n          setFormData={setFormData}\n          lagreCallback={lagreCallback}\n          alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n          aksjonspunkt={aksjonspunkter[0]}\n        />\n      )}\n      {!harAleneomsorgAksjonspunkt && (\n        <HarAnnenForelderRettForm\n          ytelsefordeling={ytelsefordeling}\n          readOnly={readOnly}\n          formData={formData as RettFormValues}\n          setFormData={setFormData}\n          lagreCallback={lagreCallback}\n          alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n          aksjonspunkt={aksjonspunkter[0]}\n        />\n      )}\n    </>\n  );\n};\n\nexport default OmsorgOgRettFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { StandardFaktaPanelProps, Personoversikt, Ytelsefordeling } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport OmsorgOgRettFaktaForm from './components/OmsorgOgRettFaktaForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  personoversikt: Personoversikt;\n  ytelsefordeling: Ytelsefordeling;\n}\n\nconst OmsorgOgRettFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  personoversikt,\n  ytelsefordeling,\n  aksjonspunkter,\n  alleKodeverk,\n  readOnly,\n  submitCallback,\n  formData,\n  setFormData,\n  alleMerknaderFraBeslutter,\n}) => (\n  <RawIntlProvider value={intl}>\n    <OmsorgOgRettFaktaForm\n      aksjonspunkter={aksjonspunkter}\n      personoversikt={personoversikt}\n      ytelsefordeling={ytelsefordeling}\n      alleKodeverk={alleKodeverk}\n      readOnly={readOnly}\n      lagreCallback={submitCallback}\n      formData={formData}\n      setFormData={setFormData}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n    />\n  </RawIntlProvider>\n);\n\nexport default OmsorgOgRettFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { OmsorgOgRettFaktaIndex } from '@navikt/fp-fakta-omsorg-og-rett';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Personoversikt, Ytelsefordeling } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG,\n  AksjonspunktCode.AVKLAR_ANNEN_FORELDER_RETT,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.YTELSEFORDELING];\ntype EndepunktPanelData = {\n  ytelsefordeling: Ytelsefordeling;\n};\n\ninterface OwnProps {\n  personoversikt: Personoversikt;\n}\n\n/**\n * OmsorgOgRettFaktaInitPanel\n */\nconst OmsorgOgRettFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({\n  personoversikt,\n  ...props\n}) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.OMSORG_OG_RETT}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'OmsorgInfoPanel.OmsorgOgRett' })}\n    skalPanelVisesIMeny={() =>\n      !!props.behandling.aksjonspunkt?.some(ap => AKSJONSPUNKT_KODER.some(kode => kode === ap.definisjon))\n    }\n    renderPanel={data => <OmsorgOgRettFaktaIndex personoversikt={personoversikt} {...data} />}\n  />\n);\n\nexport default OmsorgOgRettFaktaInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useForm } from 'react-hook-form';\nimport { ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\nimport { Button, BodyShort, Modal, Heading, Label } from '@navikt/ds-react';\nimport { Datepicker, Form } from '@navikt/ft-form-hooks';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { FlexColumn, FlexContainer, FlexRow, PeriodLabel, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\nimport { DokumentasjonVurderingBehov } from '@navikt/fp-types';\n\nimport styles from './delOppPeriodeModal.module.css';\n\nconst validerInnenforIntervall = (fom: string, tom: string, intl: IntlShape) => (dato: string) => {\n  if (!dayjs(dato).isBefore(fom) && dayjs(dato).isBefore(tom)) {\n    return null;\n  }\n  return intl.formatMessage({ id: 'DelOppPeriodeModal.UgyldigDato' });\n};\n\ninterface OwnProps {\n  periode: DokumentasjonVurderingBehov;\n  originalTom: string;\n  cancel: () => void;\n  submit: (dato: string) => void;\n  visSlettEtterfølgendePerioder: boolean;\n}\n\nconst DelOppPeriodeModal: FunctionComponent<OwnProps> = ({\n  periode,\n  originalTom,\n  visSlettEtterfølgendePerioder,\n  cancel,\n  submit,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<{ dato: string }>();\n\n  return (\n    <Form formMethods={formMethods} onSubmit={values => submit(values.dato)}>\n      <Modal\n        open\n        aria-label={intl.formatMessage({ id: 'DelOppPeriodeModal.Periode' })}\n        onClose={cancel}\n        className={styles.modal}\n      >\n        <Modal.Header>\n          {!visSlettEtterfølgendePerioder && (\n            <Heading size=\"small\">\n              <FormattedMessage id=\"DelOppPeriodeModal.RedigerPeriode\" />\n            </Heading>\n          )}\n        </Modal.Header>\n        <Modal.Body>\n          {!visSlettEtterfølgendePerioder && (\n            <>\n              <FlexContainer>\n                <FlexRow>\n                  <FlexColumn>\n                    <ExclamationmarkTriangleFillIcon\n                      className={styles.image}\n                      title={intl.formatMessage({ id: 'DelOppPeriodeModal.Nullstilles' })}\n                    />\n                  </FlexColumn>\n                  <FlexColumn className={styles.text}>\n                    <BodyShort size=\"small\">\n                      <FormattedMessage id=\"DelOppPeriodeModal.Nullstilles\" />\n                    </BodyShort>\n                  </FlexColumn>\n                </FlexRow>\n              </FlexContainer>\n              <VerticalSpacer sixteenPx />\n            </>\n          )}\n          <Label size=\"small\">\n            <FormattedMessage id=\"DelOppPeriodeModal.Periode\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            <PeriodLabel dateStringFom={periode.fom} dateStringTom={periode.tom} />\n          </BodyShort>\n          <VerticalSpacer twentyPx />\n          <BodyShort size=\"small\">\n            <FormattedMessage id=\"DelOppPeriodeModal.Splitt\" />\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Datepicker\n            name=\"dato\"\n            label={<FormattedMessage id=\"DelOppPeriodeModal.Dato\" />}\n            validate={[required, hasValidDate, validerInnenforIntervall(periode.fom, originalTom, intl)]}\n            disabledDays={{\n              fromDate: dayjs(periode.fom, ISO_DATE_FORMAT).toDate(),\n              toDate: dayjs(originalTom, ISO_DATE_FORMAT).subtract(1, 'day').toDate(),\n            }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button size=\"small\" variant=\"primary\">\n            <FormattedMessage id=\"DelOppPeriodeModal.Oppdater\" />\n          </Button>\n          <Button size=\"small\" variant=\"secondary\" onClick={cancel} type=\"button\">\n            <FormattedMessage id=\"DelOppPeriodeModal.Avbryt\" />\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Form>\n  );\n};\n\nexport default DelOppPeriodeModal;\n","import React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { BodyShort, Button, Label } from '@navikt/ds-react';\nimport { required } from '@navikt/ft-form-validators';\nimport { PencilIcon, ScissorsIcon } from '@navikt/aksel-icons';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Form, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport {\n  AvsnittSkiller,\n  DateLabel,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\n\nimport { DokumentasjonVurderingBehov, UttakVurdering } from '@navikt/fp-types';\n\nimport DelOppPeriodeModal from './DelOppPeriodeModal';\n\nimport styles from './uttakDokumentasjonFaktaDetailForm.module.css';\n\ntype FormValues = {\n  perioder: DokumentasjonVurderingBehov[];\n};\n\ninterface OwnProps {\n  valgtDokBehov: DokumentasjonVurderingBehov;\n  readOnly: boolean;\n  oppdaterDokBehov: (dokBehov: { perioder: DokumentasjonVurderingBehov[] }) => void;\n  avbrytEditeringAvAktivitetskrav: () => void;\n}\n\nconst UttakDokumentasjonFaktaDetailForm: FunctionComponent<OwnProps> = ({\n  valgtDokBehov,\n  readOnly,\n  avbrytEditeringAvAktivitetskrav,\n  oppdaterDokBehov,\n}) => {\n  const intl = useIntl();\n\n  const [sistOppdeltPeriodeIndex, setSistOppdeltPeriodeIndex] = useState<number>();\n  const [valgtPeriodeIndex, settValgtPeriodeIndex] = useState<number | undefined>();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: {\n      perioder: [valgtDokBehov],\n    },\n  });\n\n  const { fields, append, update, remove } = useFieldArray({\n    control: formMethods.control,\n    name: 'perioder',\n  });\n\n  const perioder = formMethods.watch('perioder');\n\n  const lagNyPeriode = (dato: string) => {\n    if (valgtPeriodeIndex !== undefined) {\n      const periode = perioder[valgtPeriodeIndex];\n      const nyPeriode = {\n        ...periode,\n        tom: dato,\n      };\n      update(valgtPeriodeIndex, nyPeriode);\n      append({\n        ...periode,\n        fom: dayjs(dato).add(1, 'day').format(ISO_DATE_FORMAT),\n        tom: periode.tom,\n        vurdering: undefined,\n      });\n\n      settValgtPeriodeIndex(undefined);\n      setSistOppdeltPeriodeIndex(valgtPeriodeIndex);\n    }\n  };\n\n  const oppdaterOgNullstillPerioder = (dato: string) => {\n    if (valgtPeriodeIndex !== undefined) {\n      settValgtPeriodeIndex(undefined);\n\n      for (let i = fields.length - 1; i > valgtPeriodeIndex + 1; i -= 1) {\n        remove(i);\n      }\n\n      update(valgtPeriodeIndex, {\n        ...perioder[valgtPeriodeIndex],\n        tom: dato,\n      });\n      update(valgtPeriodeIndex + 1, {\n        ...perioder[valgtPeriodeIndex + 1],\n        fom: dayjs(dato).add(1, 'day').format(ISO_DATE_FORMAT),\n        tom: valgtDokBehov.tom,\n      });\n\n      setSistOppdeltPeriodeIndex(valgtPeriodeIndex);\n    }\n  };\n\n  const vurderingsalternativer = [\n    {\n      value: UttakVurdering.GODKJENT,\n      label: intl.formatMessage({ id: 'UttakDokumentasjonFaktaDetailForm.Godkjent' }),\n    },\n    {\n      value: UttakVurdering.IKKE_GODKJENT,\n      label: intl.formatMessage({ id: 'UttakDokumentasjonFaktaDetailForm.IkkeGodkjent' }),\n    },\n  ];\n\n  if (valgtDokBehov.årsak.includes('AKTIVITETSKRAV')) {\n    vurderingsalternativer.push({\n      value: UttakVurdering.IKKE_DOKUMENTERT,\n      label: intl.formatMessage({ id: 'UttakDokumentasjonFaktaDetailForm.IkkeDokumentert' }),\n    });\n  }\n\n  return (\n    <>\n      <Form formMethods={formMethods} onSubmit={oppdaterDokBehov}>\n        <VerticalSpacer eightPx />\n        {fields.map((field, index) => (\n          <React.Fragment key={field.id}>\n            {index > 0 && (\n              <>\n                <VerticalSpacer fourtyPx />\n                <AvsnittSkiller dividerParagraf className={styles.skiller} />\n                <VerticalSpacer twentyPx />\n              </>\n            )}\n            {!readOnly && perioder[index].fom !== perioder[index].tom && fields.length === 1 && (\n              <div className={styles.marginBtn}>\n                <Button\n                  size=\"small\"\n                  variant=\"tertiary\"\n                  type=\"button\"\n                  onClick={() => settValgtPeriodeIndex(index)}\n                  icon={<ScissorsIcon />}\n                >\n                  <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.DelOppPeriode\" />\n                </Button>\n              </div>\n            )}\n            {fields.length > 1 && (\n              <FlexContainer>\n                <Label size=\"medium\">\n                  <FormattedMessage\n                    id=\"UttakDokumentasjonFaktaDetailForm.PeriodeMedIndex\"\n                    values={{ index: index + 1 }}\n                  />\n                </Label>\n                <FlexRow>\n                  <FlexColumn>\n                    <Label size=\"small\">\n                      <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.Fom\" />\n                    </Label>\n                  </FlexColumn>\n                  <FlexColumn className={styles.fomDato}>\n                    {perioder[index].fom && (\n                      <BodyShort size=\"small\">\n                        <DateLabel dateString={perioder[index].fom} />\n                      </BodyShort>\n                    )}\n                  </FlexColumn>\n                  <FlexColumn>\n                    <Label size=\"small\">\n                      <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.Tom\" />\n                    </Label>\n                  </FlexColumn>\n                  <FlexColumn className={styles.tomDato}>\n                    {perioder[index].tom && (\n                      <BodyShort size=\"small\">\n                        <DateLabel dateString={perioder[index].tom} />\n                      </BodyShort>\n                    )}\n                  </FlexColumn>\n                  {sistOppdeltPeriodeIndex && sistOppdeltPeriodeIndex >= index && (\n                    <FlexColumn className={styles.redigerKnapp}>\n                      <Button\n                        size=\"small\"\n                        variant=\"tertiary\"\n                        icon={<PencilIcon aria-hidden />}\n                        onClick={() => settValgtPeriodeIndex(index)}\n                        type=\"button\"\n                        disabled={!perioder[index].tom}\n                      >\n                        <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.RedigerPeriode\" />\n                      </Button>\n                    </FlexColumn>\n                  )}\n                </FlexRow>\n                {perioder[index].fom !== perioder[index].tom && fields.length > 1 && index === fields.length - 1 && (\n                  <>\n                    <VerticalSpacer sixteenPx />\n                    <div className={styles.marginBtn}>\n                      <Button\n                        size=\"small\"\n                        variant=\"tertiary\"\n                        type=\"button\"\n                        onClick={() => settValgtPeriodeIndex(index)}\n                        icon={<ScissorsIcon />}\n                      >\n                        <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.DelOppPeriode\" />\n                      </Button>\n                    </div>\n                    <VerticalSpacer eightPx />\n                  </>\n                )}\n              </FlexContainer>\n            )}\n            <VerticalSpacer twentyPx />\n            <RadioGroupPanel\n              name={`perioder.${index}.vurdering`}\n              label={<FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.Vurdering\" />}\n              validate={[required]}\n              isReadOnly={readOnly}\n              isHorizontal\n              radios={vurderingsalternativer}\n            />\n          </React.Fragment>\n        ))}\n        <VerticalSpacer fourtyPx />\n        {!readOnly && (\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                <Button\n                  size=\"small\"\n                  variant=\"secondary\"\n                  loading={false}\n                  disabled={!formMethods.formState.isDirty || readOnly}\n                >\n                  <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.Oppdater\" />\n                </Button>\n              </FlexColumn>\n              <FlexColumn>\n                <Button\n                  size=\"small\"\n                  variant=\"tertiary\"\n                  onClick={avbrytEditeringAvAktivitetskrav}\n                  disabled={readOnly}\n                  type=\"button\"\n                >\n                  <FormattedMessage id=\"UttakDokumentasjonFaktaDetailForm.Avbryt\" />\n                </Button>\n              </FlexColumn>\n            </FlexRow>\n            <VerticalSpacer sixteenPx />\n          </FlexContainer>\n        )}\n      </Form>\n      {valgtPeriodeIndex !== undefined && (\n        <DelOppPeriodeModal\n          periode={perioder[valgtPeriodeIndex]}\n          originalTom={valgtDokBehov.tom}\n          submit={dato =>\n            valgtPeriodeIndex + 1 < fields.length ? oppdaterOgNullstillPerioder(dato) : lagNyPeriode(dato)\n          }\n          cancel={() => settValgtPeriodeIndex(undefined)}\n          visSlettEtterfølgendePerioder={valgtPeriodeIndex < fields.length - 1}\n        />\n      )}\n    </>\n  );\n};\n\nexport default UttakDokumentasjonFaktaDetailForm;\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { dateFormat } from '@navikt/ft-utils';\nimport { CheckmarkIcon, FileXMarkIcon, XMarkOctagonIcon } from '@navikt/aksel-icons';\nimport { ExpandableTableRow, Table, TableColumn, TableRow } from '@navikt/ft-ui-komponenter';\n\nimport { DokumentasjonVurderingBehov, UttakVurdering, UttakÅrsak, UttakType } from '@navikt/fp-types';\n\nimport UttakDokumentasjonFaktaDetailForm from './UttakDokumentasjonFaktaDetailForm';\n\nimport styles from './uttakDokumentasjonFaktaTable.module.css';\n\nconst UTTAK_ÅRSAK_TEKSTER = {\n  [UttakÅrsak.INNLEGGELSE_SØKER]: 'UttakDokumentasjonFaktaTable.InnleggelseSoker',\n  [UttakÅrsak.INNLEGGELSE_BARN]: 'UttakDokumentasjonFaktaTable.InnleggelseBarn',\n  [UttakÅrsak.HV_ØVELSE]: 'UttakDokumentasjonFaktaTable.HvOvelse',\n  [UttakÅrsak.NAV_TILTAK]: 'UttakDokumentasjonFaktaTable.NavTiltak',\n  [UttakÅrsak.SYKDOM_SØKER]: 'UttakDokumentasjonFaktaTable.SykdomSoker',\n  [UttakÅrsak.SYKDOM_ANNEN_FORELDER]: 'UttakDokumentasjonFaktaTable.SykdomAnnenForelder',\n  [UttakÅrsak.INNLEGGELSE_ANNEN_FORELDER]: 'UttakDokumentasjonFaktaTable.InnleggelseAnnenForelder',\n  [UttakÅrsak.BARE_SØKER_RETT]: 'UttakDokumentasjonFaktaTable.BareSokerRett',\n  [UttakÅrsak.ALENEOMSORG]: 'UttakDokumentasjonFaktaTable.Aleneomsorg',\n  [UttakÅrsak.AKTIVITETSKRAV_ARBEID]: 'UttakDokumentasjonFaktaTable.AktivitetskravArbeid',\n  [UttakÅrsak.AKTIVITETSKRAV_UTDANNING]: 'UttakDokumentasjonFaktaTable.AktivitetskravUtdanning',\n  [UttakÅrsak.AKTIVITETSKRAV_KVALPROG]: 'UttakDokumentasjonFaktaTable.AktivitetskravKvalprog',\n  [UttakÅrsak.AKTIVITETSKRAV_INTROPROG]: 'UttakDokumentasjonFaktaTable.AktivitetskravIntroprog',\n  [UttakÅrsak.AKTIVITETSKRAV_TRENGER_HJELP]: 'UttakDokumentasjonFaktaTable.AktivitetskravTrengerHjelp',\n  [UttakÅrsak.AKTIVITETSKRAV_INNLAGT]: 'UttakDokumentasjonFaktaTable.AktivitetskravInnlagt',\n  [UttakÅrsak.AKTIVITETSKRAV_ARBEID_OG_UTDANNING]: 'UttakDokumentasjonFaktaTable.AktivitetskravArbeidUtdanning',\n  [UttakÅrsak.AKTIVITETSKRAV_IKKE_OPPGITT]: 'UttakDokumentasjonFaktaTable.AktivitetskravIkkeOppgitt',\n  [UttakÅrsak.TIDLIG_OPPSTART_FAR]: 'UttakDokumentasjonFaktaTable.TidligOppstartFar',\n};\n\nconst finnType = (type: UttakType) => {\n  if (type === UttakType.UTSETTELSE) {\n    return <FormattedMessage id=\"UttakDokumentasjonFaktaTable.Utsettelse\" />;\n  }\n  if (type === UttakType.OVERFØRING) {\n    return <FormattedMessage id=\"UttakDokumentasjonFaktaTable.Overforing\" />;\n  }\n  return <FormattedMessage id=\"UttakDokumentasjonFaktaTable.Uttak\" />;\n};\n\nconst HEADER_TEXT_CODES = [\n  'UttakDokumentasjonFaktaTable.Periode',\n  'UttakDokumentasjonFaktaTable.AvklaringBehov',\n  'UttakDokumentasjonFaktaTable.Arsak',\n  'UttakDokumentasjonFaktaTable.Vurdering',\n  'EMPTY1',\n];\n\ninterface OwnProps {\n  dokumentasjonVurderingBehov: DokumentasjonVurderingBehov[];\n  oppdaterDokBehov: (dokBehov: DokumentasjonVurderingBehov[]) => void;\n  readOnly: boolean;\n  setDirty: (isDirty: boolean) => void;\n  harAksjonspunkt: boolean;\n}\n\nconst UttakDokumentasjonFaktaTable: FunctionComponent<OwnProps> = ({\n  dokumentasjonVurderingBehov,\n  oppdaterDokBehov,\n  readOnly,\n  setDirty,\n  harAksjonspunkt,\n}) => {\n  const [valgtDokBehovFomDatoer, setDokBehovFomDatoer] = useState<string[]>([]);\n\n  const velgDokBehovFomDato = useCallback(\n    (fom?: string) => {\n      if (fom) {\n        if (valgtDokBehovFomDatoer.includes(fom)) {\n          setDokBehovFomDatoer(foms => foms.filter(f => f !== fom));\n        } else {\n          setDokBehovFomDatoer(foms => foms.concat(fom));\n        }\n      }\n    },\n    [valgtDokBehovFomDatoer, setDokBehovFomDatoer],\n  );\n\n  useEffect(() => velgDokBehovFomDato(dokumentasjonVurderingBehov?.find(oa => !oa.vurdering)?.fom), []);\n\n  const oppdaterPeriode = useCallback(\n    (oppdatertKrav: { perioder: DokumentasjonVurderingBehov[] }) => {\n      const { perioder } = oppdatertKrav;\n      const oppdaterteDokBehov = dokumentasjonVurderingBehov\n        .filter(aKrav => aKrav.fom !== perioder[0].fom)\n        .concat(perioder)\n        .sort((a1, a2) => a1.fom.localeCompare(a2.fom));\n\n      oppdaterDokBehov(oppdaterteDokBehov);\n\n      setDokBehovFomDatoer(fomDatoer => {\n        const åpneRaderMinusDenSomErOppdatert = fomDatoer.filter(fom => fom !== perioder[0].fom);\n        const nySomSkalÅpnes = oppdaterteDokBehov.find(oa => !oa.vurdering)?.fom;\n        return nySomSkalÅpnes\n          ? åpneRaderMinusDenSomErOppdatert.concat(nySomSkalÅpnes)\n          : åpneRaderMinusDenSomErOppdatert;\n      });\n      setDirty(true);\n    },\n    [dokumentasjonVurderingBehov],\n  );\n\n  return (\n    <Table headerTextCodes={HEADER_TEXT_CODES} noHover hasGrayHeader>\n      {dokumentasjonVurderingBehov.map(behov => {\n        const kolonner = (\n          <>\n            <TableColumn>{`${dateFormat(behov.fom)} - ${dateFormat(behov.tom)}`}</TableColumn>\n            <TableColumn>{finnType(behov.type)}</TableColumn>\n            <TableColumn>\n              {UTTAK_ÅRSAK_TEKSTER[behov.årsak] ? <FormattedMessage id={UTTAK_ÅRSAK_TEKSTER[behov.årsak]} /> : ''}\n            </TableColumn>\n            <TableColumn>\n              {behov.vurdering === UttakVurdering.GODKJENT && (\n                <>\n                  <CheckmarkIcon />\n                  <div className={styles.ikon}>\n                    <FormattedMessage id=\"UttakDokumentasjonFaktaTable.Godkjent\" />\n                  </div>\n                </>\n              )}\n              {behov.vurdering === UttakVurdering.IKKE_GODKJENT && (\n                <>\n                  <XMarkOctagonIcon />\n                  <div className={styles.ikon}>\n                    <FormattedMessage id=\"UttakDokumentasjonFaktaTable.IkkeGodkjent\" />\n                  </div>\n                </>\n              )}\n              {behov.vurdering === UttakVurdering.IKKE_DOKUMENTERT && (\n                <>\n                  <FileXMarkIcon />\n                  <div className={styles.ikon}>\n                    <FormattedMessage id=\"UttakDokumentasjonFaktaTable.ManglerDok\" />\n                  </div>\n                </>\n              )}\n            </TableColumn>\n          </>\n        );\n\n        if (harAksjonspunkt) {\n          return (\n            <ExpandableTableRow\n              key={behov.fom + behov.tom}\n              isApLeftBorder={!behov.vurdering}\n              showContent={valgtDokBehovFomDatoer.includes(behov.fom)}\n              toggleContent={() => velgDokBehovFomDato(behov.fom)}\n              content={\n                valgtDokBehovFomDatoer.includes(behov.fom) && (\n                  <UttakDokumentasjonFaktaDetailForm\n                    key={behov.fom}\n                    valgtDokBehov={behov}\n                    readOnly={readOnly}\n                    oppdaterDokBehov={oppdaterPeriode}\n                    avbrytEditeringAvAktivitetskrav={() => velgDokBehovFomDato(behov.fom)}\n                  />\n                )\n              }\n            >\n              {kolonner}\n            </ExpandableTableRow>\n          );\n        }\n        return <TableRow key={behov.fom + behov.tom}>{kolonner}</TableRow>;\n      })}\n    </Table>\n  );\n};\n\nexport default UttakDokumentasjonFaktaTable;\n","import React, { FunctionComponent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Form } from '@navikt/ft-form-hooks';\nimport { Button, Heading } from '@navikt/ds-react';\nimport { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport { AksjonspunktCode, aksjonspunktStatus } from '@navikt/fp-kodeverk';\nimport { Aksjonspunkt, DokumentasjonVurderingBehov } from '@navikt/fp-types';\nimport { FaktaBegrunnelseTextFieldNew } from '@navikt/fp-fakta-felles';\nimport { VurderDokumentasjonAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport UttakDokumentasjonFaktaTable from './UttakDokumentasjonFaktaTable';\n\ninterface OwnProps {\n  aksjonspunkter: Aksjonspunkt[];\n  dokumentasjonVurderingBehov: DokumentasjonVurderingBehov[];\n  submitCallback: (aksjonspunkter: VurderDokumentasjonAp) => Promise<void>;\n  readOnly: boolean;\n  submittable: boolean;\n  formData: { dokBehov: DokumentasjonVurderingBehov[]; begrunnelse: string };\n  setFormData: (data: { dokBehov: DokumentasjonVurderingBehov[]; begrunnelse: string }) => void;\n}\n\nconst UttakDokumentasjonFaktaForm: FunctionComponent<OwnProps> = ({\n  aksjonspunkter,\n  dokumentasjonVurderingBehov,\n  readOnly,\n  submittable,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const [erBekreftKnappTrykket, settBekreftKnappTrykket] = useState(false);\n  const [dokBehov, oppdaterDokBehov] = useState<DokumentasjonVurderingBehov[]>(\n    formData?.dokBehov || dokumentasjonVurderingBehov,\n  );\n\n  const bekreft = useCallback(\n    (begrunnelse: string) => {\n      settBekreftKnappTrykket(true);\n      submitCallback({\n        kode: AksjonspunktCode.VURDER_UTTAK_DOKUMENTASJON,\n        vurderingBehov: dokBehov,\n        begrunnelse,\n      });\n    },\n    [dokBehov],\n  );\n\n  const lagretBegrunnelse = aksjonspunkter.length > 0 ? aksjonspunkter[0].begrunnelse : undefined;\n  const formMethods = useForm<{ begrunnelse: string }>({\n    defaultValues: {\n      begrunnelse: formData?.begrunnelse || lagretBegrunnelse,\n    },\n  });\n\n  useEffect(\n    () => () => {\n      setFormData({ dokBehov, begrunnelse: formMethods.getValues('begrunnelse') });\n    },\n    [],\n  );\n\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const isSubmittable = useMemo(\n    () => submittable && dokBehov?.every(a => a.vurdering) && !!begrunnelse,\n    [dokBehov, begrunnelse],\n  );\n\n  const [isDirty, setDirty] = useState<boolean>(false);\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"UttakDokumentasjonFaktaForm.Overskrift\" />\n      </Heading>\n      <VerticalSpacer thirtyTwoPx />\n      {aksjonspunkter.some(a => a.status === aksjonspunktStatus.OPPRETTET) && (\n        <>\n          <AksjonspunktHelpTextHTML>\n            {[intl.formatMessage({ id: 'UttakDokumentasjonFaktaForm.AksjonspunktHjelpetekst' })]}\n          </AksjonspunktHelpTextHTML>\n          <VerticalSpacer twentyPx />\n        </>\n      )}\n      <UttakDokumentasjonFaktaTable\n        harAksjonspunkt={aksjonspunkter.length > 0}\n        dokumentasjonVurderingBehov={dokBehov}\n        oppdaterDokBehov={oppdaterDokBehov}\n        setDirty={setDirty}\n        readOnly={readOnly}\n      />\n      <VerticalSpacer twentyPx />\n      <Form formMethods={formMethods} onSubmit={(values: { begrunnelse: string }) => bekreft(values.begrunnelse)}>\n        <FaktaBegrunnelseTextFieldNew\n          name=\"begrunnelse\"\n          label={intl.formatMessage({ id: 'UttakDokumentasjonFaktaForm.Begrunnelse' })}\n          isSubmittable\n          isReadOnly={readOnly}\n          hasBegrunnelse\n        />\n        <VerticalSpacer sixteenPx />\n        {!readOnly && (\n          <Button\n            size=\"small\"\n            variant=\"primary\"\n            disabled={!isSubmittable || (!isDirty && !formMethods.formState.isDirty) || erBekreftKnappTrykket}\n            loading={erBekreftKnappTrykket}\n          >\n            <FormattedMessage id=\"UttakDokumentasjonFaktaForm.Bekreft\" />\n          </Button>\n        )}\n      </Form>\n    </>\n  );\n};\n\nexport default UttakDokumentasjonFaktaForm;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport dayjs from 'dayjs';\n\nimport { StandardFaktaPanelProps, DokumentasjonVurderingBehov } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport UttakDokumentasjonFaktaForm from './components/UttakDokumentasjonFaktaForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  harApneAksjonspunkter: boolean;\n  dokumentasjonVurderingBehov: DokumentasjonVurderingBehov[];\n}\n\nconst UttakDokumentasjonFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  dokumentasjonVurderingBehov,\n  submitCallback,\n  readOnly,\n  submittable,\n  aksjonspunkter,\n  formData,\n  setFormData,\n}) => {\n  const sorterteBehov = useMemo(\n    () => [...dokumentasjonVurderingBehov].sort((krav1, krav2) => dayjs(krav1.fom).diff(dayjs(krav2.fom))),\n    [dokumentasjonVurderingBehov],\n  );\n  return (\n    <RawIntlProvider value={intl}>\n      <UttakDokumentasjonFaktaForm\n        aksjonspunkter={aksjonspunkter}\n        dokumentasjonVurderingBehov={sorterteBehov}\n        submitCallback={submitCallback}\n        readOnly={readOnly || aksjonspunkter.length === 0}\n        submittable={submittable}\n        formData={formData}\n        setFormData={setFormData}\n      />\n    </RawIntlProvider>\n  );\n};\n\nexport default UttakDokumentasjonFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { UttakDokumentasjonFaktaIndex } from '@navikt/fp-fakta-uttaksdokumentasjon';\nimport { DokumentasjonVurderingBehov } from '@navikt/fp-types';\n\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys, requestBehandlingApi } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_UTTAK_DOKUMENTASJON];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.DOKUMENTASJON_VURDERING_BEHOV];\ntype EndepunktPanelData = {\n  dokumentasjonVurderingBehov: DokumentasjonVurderingBehov[];\n};\n\n/**\n * UttakDokumentasjonFaktaInitPanel\n */\nconst UttakDokumentasjonFaktaInitPanel: FunctionComponent<FaktaPanelInitProps> = props => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.UTTAK_DOKUMENTASJON}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'UttakDokumentasjonFaktaInitPanel.FaktaUttakDokumentasjon' })}\n    skalPanelVisesIMeny={() => requestBehandlingApi.hasPath(BehandlingApiKeys.DOKUMENTASJON_VURDERING_BEHOV.name)}\n    renderPanel={data => <UttakDokumentasjonFaktaIndex {...data} />}\n  />\n);\n\nexport default UttakDokumentasjonFaktaInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { AksessRettigheter, ArbeidsgiverOpplysningerPerId, Behandling, Fagsak, Personoversikt } from '@navikt/fp-types';\n\nimport BehandlingContainer from '../felles/BehandlingContainer';\nimport SakenFaktaInitPanel from '../fellesPaneler/fakta/SakenFaktaInitPanel';\nimport ArbeidsforholdFaktaInitPanel from '../fellesPaneler/fakta/ArbeidsforholdFaktaInitPanel';\nimport ArbeidOgInntektFaktaInitPanel from '../fellesPaneler/fakta/ArbeidOgInntektFaktaInitPanel';\nimport YtelserFaktaInitPanel from '../fellesPaneler/fakta/YtelserFaktaInitPanel';\nimport VergeFaktaInitPanel from '../fellesPaneler/fakta/VergeFaktaInitPanel';\nimport OmsorgvilkaretFaktaInitPanel from '../fellesPaneler/fakta/OmsorgvilkaretFaktaInitPanel';\nimport FordelingFaktaInitPanel from '../fellesPaneler/fakta/FordelingFaktaInitPanel';\nimport FodselvilkaretFaktaInitPanel from '../fellesPaneler/fakta/FodselvilkaretFaktaInitPanel';\nimport BesteberegningFaktaInitPanel from './faktaPaneler/BesteberegningFaktaInitPanel';\nimport AdopsjonsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/AdopsjonsvilkaretFaktaInitPanel';\nimport MedlemskapsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/MedlemskapsvilkaretFaktaInitPanel';\nimport OpptjeningsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/OpptjeningsvilkaretFaktaInitPanel';\nimport BeregningFaktaInitPanel from '../fellesPaneler/fakta/BeregningFaktaInitPanel';\nimport OmsorgFaktaInitPanel from './faktaPaneler/OmsorgFaktaInitPanel';\nimport UttakFaktaInitPanel from './faktaPaneler/UttakFaktaInitPanel';\nimport PermisjonFaktaInitPanel from '../fellesPaneler/fakta/PermisjonFaktaInitPanel';\nimport VarselProsessStegInitPanel from '../fellesPaneler/prosess/VarselProsessStegInitPanel';\nimport OpplysningspliktProsessStegInitPanel from '../fellesPaneler/prosess/OpplysningspliktProsessStegInitPanel';\nimport InngangsvilkarFpProsessStegInitPanel from './prosessPaneler/InngangsvilkarFpProsessStegInitPanel';\nimport FortsattMedlemskapProsessStegInitPanel from '../fellesPaneler/prosess/FortsattMedlemskapProsessStegInitPanel';\nimport BeregningsgrunnlagProsessStegInitPanel from '../fellesPaneler/prosess/BeregningsgrunnlagProsessStegInitPanel';\nimport UttakProsessStegInitPanel from './prosessPaneler/UttakProsessStegInitPanel';\nimport TilkjentYtelseFpProsessStegInitPanel from './prosessPaneler/TilkjentYtelseFpProsessStegInitPanel';\nimport SimuleringProsessStegInitPanel from '../fellesPaneler/prosess/SimuleringProsessStegInitPanel';\nimport VedtakFpProsessStegInitPanel from './prosessPaneler/VedtakFpProsessStegInitPanel';\nimport SoknadsfristProsessStegInitPanel from '../fellesPaneler/prosess/SoknadsfristProsessStegInitPanel';\nimport OmsorgOgRettFaktaInitPanel from './faktaPaneler/OmsorgOgRettFaktaInitPanel';\nimport UttakDokumentasjonFaktaInitPanel from './faktaPaneler/UttakDokumentasjonFaktaInitPanel';\nimport FaktaPanelInitProps from '../felles/typer/faktaPanelInitProps';\nimport ProsessPanelInitProps, { ProsessPanelExtraInitProps } from '../felles/typer/prosessPanelInitProps';\n\ninterface OwnProps {\n  behandling: Behandling;\n  fagsak: Fagsak;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  opneSokeside: () => void;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  arbeidsgivere: ArbeidsgiverOpplysningerPerId;\n  personoversikt: Personoversikt;\n  rettigheter: AksessRettigheter;\n  hentOgSettBehandling: () => void;\n}\n\nconst ForeldrepengerPaneler: FunctionComponent<OwnProps> = ({\n  behandling,\n  fagsak,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  opneSokeside,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  arbeidsgivere,\n  personoversikt,\n  rettigheter,\n  hentOgSettBehandling,\n}) => {\n  const faktaPaneler = useCallback(\n    (props: FaktaPanelInitProps) => (\n      <>\n        <SakenFaktaInitPanel {...props} fagsak={fagsak} />\n        <ArbeidOgInntektFaktaInitPanel\n          {...props}\n          saksnummer={fagsak.saksnummer}\n          behandlingUuid={behandling.uuid}\n          rettigheter={rettigheter}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n          hentOgSettBehandling={hentOgSettBehandling}\n        />\n        <ArbeidsforholdFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <YtelserFaktaInitPanel {...props} />\n        <VergeFaktaInitPanel {...props} />\n        <OmsorgvilkaretFaktaInitPanel {...props} personoversikt={personoversikt} />\n        <AdopsjonsvilkaretFaktaInitPanel {...props} fagsak={fagsak} />\n        <FodselvilkaretFaktaInitPanel {...props} />\n        <MedlemskapsvilkaretFaktaInitPanel {...props} />\n        <OpptjeningsvilkaretFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <PermisjonFaktaInitPanel\n          {...props}\n          saksnummer={fagsak.saksnummer}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n        />\n        <BeregningFaktaInitPanel {...props} rettigheter={rettigheter} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <BesteberegningFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <FordelingFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <OmsorgOgRettFaktaInitPanel {...props} personoversikt={personoversikt} />\n        <OmsorgFaktaInitPanel {...props} personoversikt={personoversikt} />\n        <UttakFaktaInitPanel\n          {...props}\n          rettigheter={rettigheter}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n          fagsak={fagsak}\n        />\n        <UttakDokumentasjonFaktaInitPanel {...props} />\n      </>\n    ),\n    [personoversikt, fagsak, behandling, rettigheter, arbeidsgivere, hentOgSettBehandling],\n  );\n\n  const prosessPaneler = useCallback(\n    (props: ProsessPanelInitProps, ekstraProps: ProsessPanelExtraInitProps) => (\n      <>\n        <VarselProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n        <OpplysningspliktProsessStegInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <InngangsvilkarFpProsessStegInitPanel\n          {...props}\n          rettigheter={rettigheter}\n          oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n          apentFaktaPanelInfo={ekstraProps.apentFaktaPanelInfo}\n        />\n        <BeregningsgrunnlagProsessStegInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <SoknadsfristProsessStegInitPanel {...props} />\n        <FortsattMedlemskapProsessStegInitPanel {...props} rettigheter={rettigheter} />\n        <UttakProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n          personoversikt={personoversikt}\n          rettigheter={rettigheter}\n        />\n        <TilkjentYtelseFpProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n          personoversikt={personoversikt}\n        />\n        <SimuleringProsessStegInitPanel {...props} fagsak={fagsak} menyData={ekstraProps.allMenyData} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <VedtakFpProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n      </>\n    ),\n    [\n      fagsak,\n      opneSokeside,\n      setSkalOppdatereEtterBekreftelseAvAp,\n      arbeidsgivere,\n      rettigheter,\n      personoversikt,\n      oppdaterProsessStegOgFaktaPanelIUrl,\n    ],\n  );\n\n  return (\n    <BehandlingContainer\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      valgtFaktaSteg={valgtFaktaSteg}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      hentFaktaPaneler={faktaPaneler}\n      hentProsessPaneler={prosessPaneler}\n    />\n  );\n};\n\nexport default ForeldrepengerPaneler;\n"],"names":["__rest","this","s","e","t","p","i","SvgChildEyes","forwardRef","_a","ref","title","_titleId","props","titleId","useId","React.createElement","ChildEyesIcon","SvgFileXMark","FileXMarkIcon","SvgPause","PauseIcon","SvgPersonPencil","PersonPencilIcon","SvgTrash","TrashIcon","ErrorSummaryItem","children","Component","className","rest","React","cl","ErrorSummaryItem$1","ErrorSummary","size","headingTag","heading","headingId","Heading","BodyShort","child","ErrorSummary$1","UttakType","UttakVurdering","UttakÅrsak","periodeResultatType","relasjonsRolleType","StonadskontoType","utsettelseArsakCodes","uttakArbeidType","validerApKodeOgHentApEnum","kode","kodeEnums","kodeEnum","k","module","require$$0","n","a","lagMånedVisning","dato","år","maanedNavn","norskFormat","formatDate","date","dayjs","ISO_DATE_FORMAT","headerColumnContent","jsxs","Label","jsx","FormattedMessage","lagVisningsNavn","inntekt","arbeidsgiverOpplysninger","getKodeverkNavn","agOpplysning","DDMMYYYY_DATE_FORMAT","KodeverkType","lagInntektRader","inntekter","TableRow","styles","TableColumn","formatCurrencyNoKr","lagSummeringsRad","labelId","i1","i2","Inntekttabell","rows","rad","Table","lagRadMedMåneder","måneder","FlexContainer","FlexRow","månedsgrunnlag","key","FlexColumn","finnÅrsinntekt","besteMåneder","måned","sorterEtterMåned","b","BesteManederVisningPanel","sorterteMåneder","useMemo","Fragment","VerticalSpacer","erBeløpSatt","beløp","hentBeløpEller0","finnGjeldendeBeløp","andel","finnKap8Beregning","periode","finnBesteberegnet","girKap8Besteberegning","kap8Beregning","kap1473Beregning","BesteberegningResultatGrunnlagPanel","buildInitialValues","aksjonspunkt","apErLøst","aksjonspunktStatus","FaktaBegrunnelseTextFieldNew","transformValues","values","AksjonspunktCode","KontrollerBesteberegningPanel","readOnly","submittable","submitCallback","formData","setFormData","erKnappEnabled","toggleKnapp","useState","formMethods","useForm","begrunnelse","AksjonspunktStatus","AksjonspunktHelpTextHTML","Form","CheckboxField","FaktaSubmitButtonNew","BesteberegningPanel","beregningsgrunnlag","aksjonspunkter","ytelsesspesifiktGrunnlag","beregningsgrunnlagPeriode","besteberegninggrunnlag","førstePeriode","besteberegningAP","ap","BorderBox","BesteMånederVisningPanel","intl","createIntl","messages","BesteberegningFaktaIndex","alleKodeverk","RawIntlProvider","getKodeverknavnFn","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","BesteberegningFaktaInitPanel","arbeidsgiverOpplysningerPerId","FaktaDefaultInitPanel","FaktaPanelCode","useIntl","requestBehandlingApi","data","MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG","getAksjonspunkt","aksjonspunktCode","OmsorgFaktaForm","alleMerknaderFraBeslutter","bTag","useCallback","chunks","hasAksjonspunkt","FaktaGruppe","RadioGroupPanel","required","ytelsefordeling","omsorgAp","omsorg","classNames","classnames","Boks","harBorderTop","AdresseVisning","personopplysninger","postadr","adresse","opplysningAdresseType","bostedsadr","adr","AlleBarnPanel","alleBarn","barn","index","HStack","VStack","DateLabel","ForelderPanel","forelder","erSøker","kjønn","erKvinne","KjønnkodeEnum","FigureOutwardIcon","FigureInwardIcon","getKodeverknavnFraKode","getHelpTexts","helpTexts","finnMotsattKjønn","OmsorgInfoPanel","personoversikt","hasOpenAksjonspunkter","OmsorgFaktaIndex","harApneAksjonspunkter","AKSJONSPUNKT_KODER","OmsorgFaktaInitPanel","FordelingPeriodeKilde","getEndCharFromId","id","arbeidsgiverOpplysning","eksternArbeidsforholdId","navn","fødselsdato","erPrivatPerson","identifikator","visningsNavn","mapArbeidsforhold","faktaArbeidsforhold","arbeidType","arbeidsgiverReferanse","periodeArbeidsforhold","guid","GraderingOgSamtidigUttakPanel","valgtPeriode","aRef","arbeidsgiverFinnesIkke","visGradering","setGradering","visSamtidigUttaksgradering","setSamtidigUttaksgradering","toggleGradering","old","toggleSamtidigUttaksprosent","unregister","useFormContext","useEffect","Alert","NumberField","SelectField","Årsakstype","Årsakstype2","ÅRSAKSTYPE_TEKST_KODER","utledÅrsakstype","lagDefaultVerdier","arsakstype","_b","aOpplysninger","arbeidsgiverId","_c","_d","omitMany","validerTomEtterFom","getValues","tom","UttakFaktaDetailForm","fagsak","slettPeriode","avbrytEditering","oppdaterPeriode","defaultMonth","defaultValues","visSletteDialog","settVisSletteDialog","slettUttaksperiode","sorterteUttakPeriodeTyper","k1","k2","uttakPeriodeType","sorterteOverføringÅrsaker","sorterteUtsettelseÅrsaker","sorterteOppholdÅrsaker","sorterteMorsAktiviteter","årsakstype","flerbarnsdager","stønadskonto","onSubmit","erUttakOgFellesperiodeEllerForeldrepenger","visMorsAktivitet","RelasjonsRolleType","OkAvbrytModal","Datepicker","hasValidDate","Button","type","vt","HEADER_TEXT_CODES","getTypeTekst","årsaktype","tekst","UttakFaktaTable","valgteFomDatoer","setValgteFomDatoer","uttakKontrollerFaktaPerioder","oppdaterUttakPerioder","setDirty","erRedigerbart","visNyPeriode","settVisNyPeriode","velgPeriodeFomDato","fom","lukkAlleAndre","foms","f","nye","uPeriode","oppdatertePerioder","a1","a2","sisteMåned","numberOfDaysAndWeeks","calcDaysAndWeeks","ExpandableTableRow","dateFormat","PlusCircleIcon","uttaksperiode","nyeSortertePerioder","PeriodeApType","finnAksjonspunktTekster","førsteUttaksdato","førsteUttak","leggTilAksjonspunktMarkering","perioder","periodeSkalVurderesIftFørsteDato","valider","uttakPerioder","erMor","erFørsteUttaktsdato","up","validerPerioder","periodeMap","dateRangesNotOverlapping","FamilieHendelseType","brukFødselsdato","tidligsteDato","feilmelding","harApIngenPerioder","UttakFaktaForm","kanOverstyre","sortertePerioder","sortertListe","krav1","krav2","automatiskeAksjonspunkter","bekreft","begrunnelse2","overstyrAp","aksjonspunkterSomSkalBekreftes","isDirty","isSubmittable","erOverstyrt","setOverstyrt","isAksjonspunktOpen","aksjonspunktTekster","OverstyringKnapp","UttakFaktaIndex","OVERSTYRING_AP_CODES","UttakFaktaInitPanel","rettigheter","VILKAR_KODER","VilkarType","FodselInngangsvilkarFpInitPanel","behandlingVersjon","InngangsvilkarDefaultInitPanel","toggleOverstyring","OverstyringPanelDef","v","FodselVilkarProsessIndex","fagsakYtelseType","AdopsjonInngangsvilkarFpInitPanel","AdopsjonVilkarProsessIndex","OpptjeningInngangsvilkarFpInitPanel","OpptjeningVilkarProsessIndex","OmsorgInngangsvilkarFpInitPanel","OmsorgVilkarProsessIndex","InngangsvilkarFpProsessStegInitPanel","behandling","valgtProsessSteg","registrerProsessPanel","apentFaktaPanelInfo","oppdaterProsessStegOgFaktaPanelIUrl","leftPanels","MedlemskapInngangsvilkarInitPanel","ForeldreansvarInngangsvilkarInitPanel","rightPanels","InngangsvilkarDefaultInitWrapper","uttakArbeidTypeCodes","moment","finnKorrektLabelForKvote","stonadtype","finnAntallUkerOgDager","saldo","modifier","justertSaldo","StonadsdagerTab","visDagerForKonto","aktiv","fordelteDager","kontonavnTekst","velgKonto","Detail","STØNADSKONTOER_SORTERINGSREKKEFØLGE","sorterKontoer","s1","s2","lagTabellRadKey","arbeidsforhold","arbeidsforholdId","arbKey","finnTilgjengeligeUker","stønadskontoer","sumDager","sum","konto","utledNavn","arbforhold","uttakArbeidTypeKodeverk","uttakArbeidTypeTekstCodes","DisponibleStonadskontoerPanel","valgtKontoType","setValgtKontoType","stonadskontotype","forrigeKontoType","stønadskontoerMedNavn","tilgjengeligeUker","sorterteAktiviteter","aktivitet","akt1","akt2","ukerOgDager","PERIODE_TYPE_IKON_MAP","StrollerIcon","PersonPregnantIcon","PERIODE_TYPE_LABEL_MAP","sortByDate","getStatus","tilknyttetStortinget","finnPeriodeType","formatPaneler","oppholdArsakType","lagGruppeIder","accPerioder","activity","finnIkonGittKjønnkode","rrType","FigureOutwardFillIcon","SilhouetteFillIcon","FigureCombinationIcon","finnIkon","erHovedsøker","finnSisteDato","familiehendelseDato","førstePeriodeFom","slåSammenPinDataOmLikDato","pinData","accData","d","lagPinData","tidslinjeTider","fomDato","finnLabelForPeriode","behandlingStatusKode","periodeString","DDMMYY_DATE_FORMAT","dager","periodeType","manueltEndret","behandlingStatus","finnIkonForPeriode","PercentIcon","DoorOpenIcon","finnRolle","kodeverk","UttakTidslinje","selectedPeriod","setValgtPeriodeIndex","radIder","sorterteUttaksperioder","originalFomDato","originalTomDato","setFomDato","tomDato","setTomDato","goBackward","goForward","zoomIn","zoomOut","Timeline","radId","FloatRight","PlusIcon","MinusIcon","ArrowLeftIcon","ArrowRightIcon","finnSøknadsdato","søknad","mottattDato","søknadsdato","getFodselTerminDato","gjeldendeFamiliehendelse","fodselsdatoer","termindato","adopsjonFodelsedatoer","finnTidslinjeTider","familiehendelse","familiehendelseDate","endringsdato","endredFodselsDato","soknadType","isRevurdering","BehandlingType","barnFraTps","dodeBarn","customTimesBuilder","leggTidslinjedataTilPeriode","hovedsøkerPerioder","annenpartPerioder","lagUttakMedOpphold","perioderSøker","uttak","oppholdInfo","oppholdArsakMapper","calcDays","UttakTidslinjeIndex","perioderAnnenpart","valgtPeriodeIndex","uttakMedOpphold","annenForelderPerioder","alleUttaksperioderMedId","validerInnenforIntervall","SplittPeriodeModal","submit","cancel","Modal","maxLength3","maxLength","minValue0","minValue","maxProsentValue100","maxValue","finnArbeidsforholdNavnOgProsentArbeid","prosentArbeid","prosentArbeidText","UttakArbeidType","sjekkOmUtbetalingsgradEr0OmAvslått","erOppfylt","utsettelseType","utbetalingsgrad","sjekkOmUtbetalingsgradErHøyereEnnSamtidigUttaksprosent","samtidigUttak","samtidigUttaksprosent","sjekkOmDetErTrektMinstEnDagNårUtbetalingsgradErMerEnn0","GYLDIGE_UTTAK_PERIODER","lagPeriodeTypeOptions","typer","validerUkerOgDager","value","weeks","days","requiredMessage","notDashMessage","notDash","validerAtUkerEllerDagerErStørreEnn0NårUtsettelseOgOppfylt","ukerEllerDager","UttakAktiviteterTabell","periodeTyper","isReadOnly","aktiviteter","control","fields","useFieldArray","periodeTypeOptions","field","arbeidsforholdData","hasValidInteger","hasValidDecimal","maxValue100","periodeStatusClassName","erTilknyttetStortinget","periodeIsInnvilget","gradertArbforhold","typePeriode","kontoIkkeSatt","isInnvilgetText","stonadskonto","returnText","gyldigeÅrsaker","mapPeriodeTyper","oppholdArsakKontoNavn","visGraderingIkkeInnvilget","graderingInnvilget","UttakPeriodeInfo","erSamtidigUttak","harSoktOmFlerbarnsdager","oppholdArsakTyper","minLength3","minLength","maxLength1500","erPeriodeOppfylt","utfallKoder","kodeverkKode","kodeItem","sorterÅrsakKodeverk","getFiltrerPåGyldighetForLovendringer","aarsakFilter","getFiltrerPåSynlighet","lagOptionsTilPeriodeÅrsakSelect","årsakKoder","utfallType","skalFiltrere","filteredNyKodeArray","mapTilOption","kv","finnUker","finnDager","lagOptionsTilGraderingAvslagsårsakerSelect","hentTekstForÅVurdereUtsettelseVedMindreEnn100ProsentStilling","total","hentTekstNårUtbetalingPlusArbeidsprosentMerEn100","formAktiviteter","hentSorterAktiviteterFn","aktivitet1","aktivitet2","data1","data2","byggDefaultValues","periodeResultatårsakKoder","filtrerteAktiviteter","UttakPeriodeForm","lukkPeriodeVisning","erHovedsøkersPeriode","årsakFilter","sorterAktiviteter","førsteValgteStønadskonto","periodeÅrsakOptions","graderingAvslagsårsakOptions","warning1","warning2","warning","TextAreaField","hasValidText","ArrowBox","getCorrectEmptyArbeidsForhold","periodeTypeKode","arbeidsForholdMedNullDagerIgjenArray","arbeidsforholdMedPositivSaldoFinnes","item","hentApTekst","manuellBehandlingÅrsak","arbeidsForhold","arbeidsForholdMedNullDagerIgjen","kalkulerTrekkdager","virkedager","uttaksgrad","trekkdager","lagPeriode","oppdaterteAktiviteter","UttakPeriodePanel","uttaksresultatPeriode","uttakStonadskontoer","harÅpneAksjonspunkter","visModal","setVisModal","toggleVisningAvModal","verdi","allePerioder","splittPeriode","periode1","periode2","lukkPeriode","erRevurderingFørEndringsdato","visForrigePeriode","visNestePeriode","Panel","EditedIcon","ScissorsIcon","XMarkIcon","UTTAK_PANEL_AKSJONSPUNKT_KODER","hentApTekster","uttaksresultat","filtrerteAksjonspunkter","tekstkode","feil","ikkeGyldigeAktiviteter","uttakPeriodeNavn","kontoerMedUgyldigForbruk","harOverstyringAp","UttakProsessPanel","soknad","oppdaterStønadskontoer","setErOverstyrt","isSubmitting","setSubmitting","forrigeVerdi","setPerioder","setStønadskonto","visPeriode","per","period","bekreftAksjonspunkter","nyePerioder","oppdatertStønadskonto","erBekreftKnappDisablet","feilmeldinger","harIngenEllerLukkedeAksjonspunkt","harOverstyrAp","fm","UttakProsessIndex","uttaksresultatPerioder","getStatusFromUttakresultat","vilkarUtfallType","UttakProsessStegInitPanel","restBehandlingApiHooks","ProsessDefaultInitPanel","ProsessStegCode","TilkjentYtelseFpProsessStegInitPanel","TilkjentYtelseProsessIndex","hasOnlyClosedAps","vedtakAksjonspunkter","vap","isAksjonspunktOpenAndOfType","findStatusForVedtak","vilkar","behandlingsresultat","isAvslag","getForhandsvisCallback","forhandsvisMelding","brevData","response","forhandsvisDokument","IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER","getLagringSideeffekter","toggleIverksetterVedtakModal","toggleFatterVedtakModal","setSkalOppdatereEtterBekreftelseAvAp","aksjonspunktModels","VedtakFpProsessStegInitPanel","opneSokeside","visIverksetterVedtakModal","visFatterVedtakModal","lagringSideEffekter","standardPanelProps","useStandardProsessPanelProps","previewCallback","lukkIverksetterModal","lukkFatterModal","vilkår","standardData","IverksetterVedtakStatusModal","FatterVedtakStatusModal","VedtakProsessIndex","HarAnnenForelderRettFelter","avklareUforetrygd","avklareRettEØS","watch","harAnnenForelderRett","annenForelderRettEØS","AleneomsorgForm","lagreCallback","decodeHtmlEntity","harAleneomsorg","skalAvklareUforetrygd","skalAvklareRettEØS","transformerFeltverdier","feltVerdier","HarAnnenForelderRettForm","_e","_f","_g","finnAksjonspunktTekst","OmsorgOgRettFaktaIndex","aksjonspunktTekst","harAleneomsorgAksjonspunkt","OmsorgOgRettFaktaForm","OmsorgOgRettFaktaInitPanel","DelOppPeriodeModal","originalTom","visSlettEtterfølgendePerioder","ExclamationmarkTriangleFillIcon","PeriodLabel","UttakDokumentasjonFaktaDetailForm","valgtDokBehov","avbrytEditeringAvAktivitetskrav","oppdaterDokBehov","sistOppdeltPeriodeIndex","setSistOppdeltPeriodeIndex","settValgtPeriodeIndex","append","update","remove","lagNyPeriode","nyPeriode","oppdaterOgNullstillPerioder","vurderingsalternativer","AvsnittSkiller","PencilIcon","UTTAK_ÅRSAK_TEKSTER","finnType","UttakDokumentasjonFaktaTable","dokumentasjonVurderingBehov","harAksjonspunkt","valgtDokBehovFomDatoer","setDokBehovFomDatoer","velgDokBehovFomDato","oa","oppdatertKrav","oppdaterteDokBehov","aKrav","fomDatoer","åpneRaderMinusDenSomErOppdatert","nySomSkalÅpnes","behov","kolonner","CheckmarkIcon","XMarkOctagonIcon","UttakDokumentasjonFaktaForm","erBekreftKnappTrykket","settBekreftKnappTrykket","dokBehov","lagretBegrunnelse","UttakDokumentasjonFaktaIndex","sorterteBehov","UttakDokumentasjonFaktaInitPanel","ForeldrepengerPaneler","valgtFaktaSteg","arbeidsgivere","hentOgSettBehandling","faktaPaneler","SakenFaktaInitPanel","ArbeidOgInntektFaktaInitPanel","ArbeidsforholdFaktaInitPanel","YtelserFaktaInitPanel","VergeFaktaInitPanel","OmsorgvilkaretFaktaInitPanel","AdopsjonsvilkaretFaktaInitPanel","FodselvilkaretFaktaInitPanel","MedlemskapsvilkaretFaktaInitPanel","OpptjeningsvilkaretFaktaInitPanel","PermisjonFaktaInitPanel","BeregningFaktaInitPanel","FordelingFaktaInitPanel","prosessPaneler","ekstraProps","VarselProsessStegInitPanel","OpplysningspliktProsessStegInitPanel","BeregningsgrunnlagProsessStegInitPanel","SoknadsfristProsessStegInitPanel","FortsattMedlemskapProsessStegInitPanel","SimuleringProsessStegInitPanel","BehandlingContainer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,14]}