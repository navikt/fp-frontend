{"version":3,"file":"BehandlingContainer-0e0ed10d.js","sources":["../../src/behandling/felles/prosess/ProsessMeny.tsx","../../src/behandling/felles/prosess/ProsessContainer.tsx","../../src/behandling/felles/fakta/FaktaMeny.tsx","../../src/behandling/felles/fakta/FaktaContainer.tsx","../../src/behandling/felles/BehandlingContainer.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport { ProcessMenu, ProcessMenuStepType } from '@navikt/ft-plattform-komponenter';\nimport { VilkarUtfallType } from '@navikt/ft-kodeverk';\n\nimport ProsessPanelMenyData from '../typer/prosessPanelMenyData';\nimport styles from './arrowForProcessMenu.module.css';\n\nconst finnProsessmenyType = (status?: string, harApentAksjonspunkt?: boolean): ProcessMenuStepType => {\n  if (harApentAksjonspunkt) {\n    return ProcessMenuStepType.warning;\n  }\n  if (status === VilkarUtfallType.OPPFYLT) {\n    return ProcessMenuStepType.success;\n  }\n  if (status === VilkarUtfallType.IKKE_OPPFYLT) {\n    return ProcessMenuStepType.danger;\n  }\n  return ProcessMenuStepType.default;\n};\n\ninterface OwnProps {\n  menyData: ProsessPanelMenyData[];\n  oppdaterProsessPanelIUrl: (index: number) => void;\n}\n\nconst ProsessMeny: FunctionComponent<OwnProps> = ({ menyData, oppdaterProsessPanelIUrl }) => {\n  const steg = useMemo(\n    () =>\n      menyData.map(data => {\n        const type = finnProsessmenyType(data.status, data.harApentAksjonspunkt);\n        return {\n          label: data.tekst || '',\n          isActive: data.erAktiv,\n          isDisabled: false,\n          isFinished: type === ProcessMenuStepType.success,\n          type,\n        };\n      }),\n    [menyData],\n  );\n\n  return (\n    <ProcessMenu steps={steg} onClick={oppdaterProsessPanelIUrl} stepArrowContainerStyle={styles.stepArrowContainer} />\n  );\n};\n\nexport default ProsessMeny;\n","import React, { FunctionComponent, ReactElement, useCallback, useMemo, useState } from 'react';\nimport { LoadingPanel } from '@navikt/ft-ui-komponenter';\n\nimport { Behandling } from '@navikt/fp-types';\n\nimport BehandlingHenlagtPanel from './BehandlingHenlagtPanel';\nimport ProsessMeny from './ProsessMeny';\nimport ProsessPanelMenyData from '../typer/prosessPanelMenyData';\nimport ProsessPanelInitProps, { ProsessPanelExtraInitProps } from '../typer/prosessPanelInitProps';\n\nimport styles from './prosessContainer.module.css';\n\ninterface OwnProps {\n  behandling: Behandling;\n  hentPaneler?: (props: ProsessPanelInitProps, ekstraProps: ProsessPanelExtraInitProps) => ReactElement;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  apentFaktaPanelInfo?: { urlCode: string; text: string };\n}\n\nconst ProsessContainer: FunctionComponent<OwnProps> = ({\n  behandling,\n  hentPaneler,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  apentFaktaPanelInfo,\n}) => {\n  const [menyData, setMenyData] = useState<ProsessPanelMenyData[]>([]);\n\n  const registrerProsessPanel = useCallback((nyData: ProsessPanelMenyData) => {\n    setMenyData(oldData => {\n      const newData = [...oldData];\n      const index = newData.findIndex(d => d.id === nyData.id);\n      if (index >= 0) {\n        newData.splice(index, 1, nyData);\n      } else {\n        newData.push(nyData);\n      }\n      return newData;\n    });\n  }, []);\n\n  const menyDataSomVises = useMemo(() => menyData.filter(d => !!d.tekst), [menyData]);\n\n  const oppdaterMenyValg = useCallback(\n    (index: number) => {\n      if (menyDataSomVises) {\n        const panel = menyDataSomVises[index];\n        const nyvalgtProsessSteg = panel.erAktiv ? undefined : panel.id;\n        oppdaterProsessStegOgFaktaPanelIUrl(nyvalgtProsessSteg, valgtFaktaSteg);\n      }\n    },\n    [menyDataSomVises, valgtFaktaSteg, oppdaterProsessStegOgFaktaPanelIUrl],\n  );\n\n  if (!hentPaneler) {\n    return null;\n  }\n\n  return (\n    <div className={menyDataSomVises && menyDataSomVises.length > 0 ? styles.container : undefined}>\n      {menyDataSomVises && menyDataSomVises.length > 0 && (\n        <div className={styles.meny}>\n          <ProsessMeny menyData={menyDataSomVises} oppdaterProsessPanelIUrl={oppdaterMenyValg} />\n        </div>\n      )}\n      {(!menyDataSomVises || menyDataSomVises.length === 0) && <LoadingPanel />}\n      {hentPaneler(\n        {\n          behandling,\n          valgtProsessSteg,\n          registrerProsessPanel,\n        },\n        {\n          apentFaktaPanelInfo,\n          allMenyData: menyDataSomVises || [],\n        },\n      )}\n      {behandling.behandlingHenlagt && (\n        <BehandlingHenlagtPanel valgtProsessSteg={valgtProsessSteg} registrerProsessPanel={registrerProsessPanel} />\n      )}\n    </div>\n  );\n};\n\nexport default ProsessContainer;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { SideMenu } from '@navikt/ft-plattform-komponenter';\nimport { ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\n\nimport FaktaPanelMenyData from '../typer/faktaPanelMenyData';\n\ninterface OwnProps {\n  menyData: FaktaPanelMenyData[];\n  oppdaterFaktaPanelIUrl: (index: number) => void;\n}\n\nconst FaktaMeny: FunctionComponent<OwnProps> = ({ menyData, oppdaterFaktaPanelIUrl }) => {\n  const intl = useIntl();\n  return (\n    <SideMenu\n      heading={intl.formatMessage({ id: 'FaktaPanel.FaktaOm' })}\n      links={menyData.map(data => ({\n        label: data.tekst || '',\n        active: data.erAktiv,\n        icon: data.harApneAksjonspunkter ? <ExclamationmarkTriangleFillIcon color=\"var(--a-orange-600)\" /> : undefined,\n      }))}\n      onClick={oppdaterFaktaPanelIUrl}\n    />\n  );\n};\n\nexport default FaktaMeny;\n","import React, { FunctionComponent, ReactElement, useState, useCallback, useMemo } from 'react';\nimport { FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport { Behandling } from '@navikt/fp-types';\n\nimport FaktaMeny from './FaktaMeny';\nimport FaktaPanelMenyData from '../typer/faktaPanelMenyData';\nimport FaktaPanelInitProps from '../typer/faktaPanelInitProps';\n\nimport styles from './faktaContainer.module.css';\n\nexport const DEFAULT_FAKTA_KODE = 'default';\n\ninterface OwnProps {\n  behandling: Behandling;\n  hentPaneler?: (props: FaktaPanelInitProps) => ReactElement;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  setApentFaktaPanel: (panelData?: { urlCode: string; text: string }) => void;\n  apentFaktaPanelInfo?: { urlCode: string; text: string };\n}\n\nconst FaktaContainer: FunctionComponent<OwnProps> = ({\n  behandling,\n  hentPaneler,\n  valgtFaktaSteg,\n  valgtProsessSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  setApentFaktaPanel,\n  apentFaktaPanelInfo,\n}) => {\n  const [menyData, setMenyData] = useState<FaktaPanelMenyData[]>([]);\n  const registrerFaktaPanel = useCallback(\n    (nyData: FaktaPanelMenyData) => {\n      setMenyData(oldData => {\n        const newData = [...oldData];\n        const index = newData.findIndex(d => d.id === nyData.id);\n        if (index >= 0) {\n          newData.splice(index, 1, nyData);\n        } else {\n          newData.push(nyData);\n        }\n        return newData;\n      });\n\n      if (!nyData.harApneAksjonspunkter && apentFaktaPanelInfo?.urlCode === nyData.id) {\n        setApentFaktaPanel(undefined);\n      }\n      if (nyData.harApneAksjonspunkter && apentFaktaPanelInfo?.urlCode !== nyData.id) {\n        setApentFaktaPanel({ urlCode: nyData.id, text: nyData.tekst || '' });\n      }\n    },\n    [apentFaktaPanelInfo],\n  );\n\n  const menyDataSomVises = useMemo(() => menyData.filter(d => !!d.tekst), [menyData]);\n\n  const oppdaterMenyValg = useCallback(\n    (index: number) => {\n      if (menyDataSomVises) {\n        const panel = menyDataSomVises[index];\n        oppdaterProsessStegOgFaktaPanelIUrl(valgtProsessSteg, panel.id);\n      }\n    },\n    [menyDataSomVises, valgtProsessSteg, oppdaterProsessStegOgFaktaPanelIUrl],\n  );\n\n  if (!hentPaneler) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <FlexContainer fullHeight>\n        <FlexRow>\n          <FlexColumn className={styles.sideMenu}>\n            {menyDataSomVises && menyDataSomVises.length > 0 && (\n              <FaktaMeny menyData={menyDataSomVises} oppdaterFaktaPanelIUrl={oppdaterMenyValg} />\n            )}\n          </FlexColumn>\n          <FlexColumn className={styles.content}>\n            {hentPaneler({\n              behandling,\n              valgtFaktaSteg,\n              registrerFaktaPanel,\n            })}\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n    </div>\n  );\n};\n\nexport default FaktaContainer;\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\n\nimport { Behandling } from '@navikt/fp-types';\n\nimport ProsessContainer from './prosess/ProsessContainer';\nimport FaktaContainer from './fakta/FaktaContainer';\nimport ProsessPanelInitProps, { ProsessPanelExtraInitProps } from './typer/prosessPanelInitProps';\nimport FaktaPanelInitProps from './typer/faktaPanelInitProps';\n\ninterface FaktaPanelInfo {\n  urlCode: string;\n  text: string;\n}\n\ninterface OwnProps {\n  behandling: Behandling;\n  hentFaktaPaneler?: (props: FaktaPanelInitProps) => ReactElement;\n  hentProsessPaneler?: (props: ProsessPanelInitProps, ekstraProps: ProsessPanelExtraInitProps) => ReactElement;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n}\n\nconst BehandlingContainer: FunctionComponent<OwnProps> = ({\n  behandling,\n  hentFaktaPaneler,\n  hentProsessPaneler,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n}) => {\n  const [apentFaktaPanelInfo, setApentFaktaPanel] = useState<FaktaPanelInfo>();\n\n  return (\n    <>\n      <ProsessContainer\n        hentPaneler={hentProsessPaneler}\n        valgtProsessSteg={valgtProsessSteg}\n        valgtFaktaSteg={valgtFaktaSteg}\n        oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n        behandling={behandling}\n        apentFaktaPanelInfo={apentFaktaPanelInfo}\n      />\n      <FaktaContainer\n        hentPaneler={hentFaktaPaneler}\n        valgtFaktaSteg={valgtFaktaSteg}\n        valgtProsessSteg={valgtProsessSteg}\n        oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n        behandling={behandling}\n        setApentFaktaPanel={setApentFaktaPanel}\n        apentFaktaPanelInfo={apentFaktaPanelInfo}\n      />\n    </>\n  );\n};\n\nexport default BehandlingContainer;\n"],"names":["finnProsessmenyType","status","harApentAksjonspunkt","ProcessMenuStepType","VilkarUtfallType","ProsessMeny","menyData","oppdaterProsessPanelIUrl","steg","useMemo","data","type","jsx","ProcessMenu","styles","ProsessContainer","behandling","hentPaneler","valgtProsessSteg","valgtFaktaSteg","oppdaterProsessStegOgFaktaPanelIUrl","apentFaktaPanelInfo","setMenyData","useState","registrerProsessPanel","useCallback","nyData","oldData","newData","index","d","menyDataSomVises","oppdaterMenyValg","panel","nyvalgtProsessSteg","jsxs","LoadingPanel","BehandlingHenlagtPanel","FaktaMeny","oppdaterFaktaPanelIUrl","intl","useIntl","SideMenu","ExclamationmarkTriangleFillIcon","FaktaContainer","setApentFaktaPanel","registrerFaktaPanel","FlexContainer","FlexRow","FlexColumn","BehandlingContainer","hentFaktaPaneler","hentProsessPaneler","Fragment","BehandlingContainer$1"],"mappings":"yVAOAA,EAAA,CAAAC,EAAAC,IACEA,EACEC,EAAA,QAEFF,IAAAG,EAAA,QACED,EAAA,QAEFF,IAAAG,EAAA,aACED,EAAA,OAEFA,EAAA,QAQFE,EAAA,CAAA,CAAA,SAAAC,EAAA,yBAAAC,KAAA,CACE,MAAAC,EAAAC,EAAA,QAAa,IAAAH,EAAA,IAAAI,GAAA,CAGP,MAAAC,EAAAX,EAAAU,EAAA,OAAAA,EAAA,oBAAA,EACA,MAAA,CAAO,MAAAA,EAAA,OAAA,GACgB,SAAAA,EAAA,QACN,WAAA,GACH,WAAAC,IAAAR,EAAA,QAC6B,KAAAQ,CACzC,CACF,CAAA,EACD,CAAAL,CAAA,CACM,EAGX,OAAAM,MAAAC,EAAA,CAAA,MAAAL,EAAA,QAAAD,EAAA,wBAAAO,EAAA,kBAAA,CAAA,CAGF,4aCvBAC,EAAA,CAAA,CAAuD,WAAAC,EACrD,YAAAC,EACA,iBAAAC,EACA,eAAAC,EACA,oCAAAC,EACA,oBAAAC,CAEF,IAAA,CACE,KAAA,CAAAf,EAAAgB,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EAEAC,EAAAC,cAAAC,GAAA,CACEJ,EAAAK,GAAA,CACE,MAAAC,EAAA,CAAA,GAAAD,CAAA,EACAE,EAAAD,EAAA,UAAAE,GAAAA,EAAA,KAAAJ,EAAA,EAAA,EACA,OAAAG,GAAA,EACED,EAAA,OAAAC,EAAA,EAAAH,CAAA,EAEAE,EAAA,KAAAF,CAAA,EAEFE,CAAO,CAAA,CACR,EAAA,CAAA,CAAA,EAGHG,EAAAtB,EAAA,QAAA,IAAAH,EAAA,OAAAwB,GAAA,CAAA,CAAAA,EAAA,KAAA,EAAA,CAAAxB,CAAA,CAAA,EAEA0B,EAAAP,EAAA,YAAyBI,GAAA,CAErB,GAAAE,EAAA,CACE,MAAAE,EAAAF,EAAAF,CAAA,EACAK,EAAAD,EAAA,QAAA,OAAAA,EAAA,GACAb,EAAAc,EAAAf,CAAA,EACF,EACF,CAAAY,EAAAZ,EAAAC,CAAA,CACsE,EAGxE,OAAAH,EAIAkB,EAAA,KAAA,MAAA,CAAA,UAAAJ,GAAAA,EAAA,OAAA,EAAAjB,EAAA,UAAA,OAAA,SAAA,CAEKiB,GAAAA,EAAA,OAAA,GAAAnB,EAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,KAAA,SAAAF,EAAA,IAAAP,EAAA,CAAA,SAAA0B,EAAA,yBAAAC,CAAA,CAAA,EAAA,GAGC,CAAAD,GAAAA,EAAA,SAAA,IAAAnB,EAAA,IAAAwB,EAAA,EAAA,EAEqEnB,EACtE,CACC,WAAAD,EACE,iBAAAE,EACA,sBAAAM,CACA,EACF,CACA,oBAAAH,EACE,YAAAU,GAAA,CAAA,CACkC,CACpC,EACFf,EAAA,mBAAAJ,EAAA,IAAAyB,EAAA,CAAA,iBAAAnB,EAAA,sBAAAM,EAAA,CAE4G,CAAA,CAAA,EAvB9G,IA2BJ,o/BCzEA,MAAAc,EAAA,CAAA,CAAA,SAAAhC,EAAA,uBAAAiC,KAAA,CACE,MAAAC,EAAAC,IACA,OAAA7B,EAAA,IACE8B,EAAC,CAAA,QAAAF,EAAA,cAAA,CAAA,GAAA,oBAAA,CAAA,EACyD,MAAAlC,EAAA,IAAAI,IAAA,CAC3B,MAAAA,EAAA,OAAA,GACN,OAAAA,EAAA,QACR,KAAAA,EAAA,sBAAAE,MAAA+B,EAAA,CAAA,MAAA,sBAAA,EAAA,MACwF,EAAA,EACrG,QAAAJ,CACO,CAAA,CAGf,0cCHAK,EAAA,CAAA,CAAqD,WAAA5B,EACnD,YAAAC,EACA,eAAAE,EACA,iBAAAD,EACA,oCAAAE,EACA,mBAAAyB,EACA,oBAAAxB,CAEF,IAAA,CACE,KAAA,CAAAf,EAAAgB,CAAA,EAAAC,EAAA,SAAA,CAAA,CAAA,EACAuB,EAAArB,EAAA,YAA4BC,GAAA,CAExBJ,EAAAK,GAAA,CACE,MAAAC,EAAA,CAAA,GAAAD,CAAA,EACAE,EAAAD,EAAA,UAAAE,GAAAA,EAAA,KAAAJ,EAAA,EAAA,EACA,OAAAG,GAAA,EACED,EAAA,OAAAC,EAAA,EAAAH,CAAA,EAEAE,EAAA,KAAAF,CAAA,EAEFE,CAAO,CAAA,EAGT,CAAAF,EAAA,wBAAAL,GAAA,YAAAA,EAAA,WAAAK,EAAA,IACEmB,EAAA,MAAA,EAEFnB,EAAA,wBAAAL,GAAA,YAAAA,EAAA,WAAAK,EAAA,IACEmB,EAAA,CAAA,QAAAnB,EAAA,GAAA,KAAAA,EAAA,OAAA,EAAA,CAAA,CACF,EACF,CAAAL,CAAA,CACoB,EAGtBU,EAAAtB,EAAA,QAAA,IAAAH,EAAA,OAAAwB,GAAA,CAAA,CAAAA,EAAA,KAAA,EAAA,CAAAxB,CAAA,CAAA,EAEA0B,EAAAP,EAAA,YAAyBI,GAAA,CAErB,GAAAE,EAAA,CACE,MAAAE,EAAAF,EAAAF,CAAA,EACAT,EAAAF,EAAAe,EAAA,EAAA,EACF,EACF,CAAAF,EAAAb,EAAAE,CAAA,CACwE,EAG1E,OAAAH,EAIAL,EAAAA,IAAA,MAAA,CAAA,UAAAE,EAAA,UAAA,SAAAF,EAAAA,IAAAmC,EAAA,CAAA,WAAA,GAAA,SAAAZ,EAAAA,KAAAa,EAAA,CAAA,SAAA,CAIQpC,MAAAqC,EAAA,CAAA,UAAAnC,EAAA,SAAA,SAAAiB,GAAAA,EAAA,OAAA,GAAAnB,EAAA,IAAA0B,EAAA,CAAA,SAAAP,EAAA,uBAAAC,CAAA,CAAA,EAAA,EAIApB,EAAA,IAAAqC,EAAA,CAAA,UAAAnC,EAAA,QAAA,SAAAG,EAAA,CAEe,WAAAD,EACX,eAAAG,EACA,oBAAA2B,CACA,CAAA,EAAA,CAEJ,EAAA,CAAA,CAAA,CAAA,CAAA,EAlBN,IAuBJ,onCCpEA,MAAAI,EAAA,CAAA,CAA0D,WAAAlC,EACxD,iBAAAmC,EACA,mBAAAC,EACA,iBAAAlC,EACA,eAAAC,EACA,oCAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAwB,CAAA,EAAAtB,EAAA,SAAA,EAEA,OAAAY,EAAA,KAAAkB,WAAA,CAAA,SAAA,CAEIzC,EAAA,IAAAG,EAAC,CAAA,YAAAqC,EACc,iBAAAlC,EACb,eAAAC,EACA,oCAAAC,EACA,WAAAJ,EACA,oBAAAK,CACA,CAAA,EACFT,EAAA,IACAgC,EAAC,CAAA,YAAAO,EACc,eAAAhC,EACb,iBAAAD,EACA,oCAAAE,EACA,WAAAJ,EACA,mBAAA6B,EACA,oBAAAxB,CACA,CAAA,CACF,CAAA,CAAA,CAGN,EAEAiC,EAAAJ"}