{"version":3,"file":"KlagePaneler-96c97a07.js","sources":["../../../../packages/kodeverk/src/klageVurdering.ts","../../../../packages/kodeverk/src/klageVurderingOmgjoer.ts","../../../../packages/prosess-formkrav/src/components/TempsaveKlageButton.tsx","../../../../packages/prosess-formkrav/src/components/FormkravKlageFormNfp.tsx","../../../../packages/prosess-formkrav/src/components/FormkravKlageKa.tsx","../../../../packages/prosess-formkrav/src/FormkravProsessIndex.tsx","../../src/behandling/klage/prosessPaneler/FormKravFamOgPensjonProsessStegInitPanel.tsx","../../../../packages/prosess-klagevurdering/src/components/ka/BehandleKlageFormKa.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/KlageVurderingRadioOptionsNfp.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/FritekstKlageBrevTextField.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/PreviewKlageLink.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/TempsaveKlageButton.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/BekreftOgSubmitKlageModal.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/BehandleKlageFormNfp.tsx","../../../../packages/prosess-klagevurdering/src/KlagevurderingProsessIndex.tsx","../../src/behandling/klage/prosessPaneler/VurderingFellesProsessStegInitPanel.tsx","../../src/behandling/klage/prosessPaneler/VurderingFamOgPensjonProsessStegInitPanel.tsx","../../src/behandling/klage/prosessPaneler/FormKravKlageInstansProsessStegInitPanel.tsx","../../src/behandling/klage/prosessPaneler/VurderingKlageInstansProsessStegInitPanel.tsx","../../../../packages/prosess-vedtak-klage/src/components/VedtakKlageSubmitPanel.tsx","../../../../packages/prosess-vedtak-klage/src/components/VedtakKlageForm.tsx","../../../../packages/prosess-vedtak-klage/src/VedtakKlageProsessIndex.tsx","../../src/behandling/klage/prosessPaneler/KlageresultatProsessStegInitPanel.tsx","../../src/behandling/klage/KlagePaneler.tsx"],"sourcesContent":["const klageVurdering = {\n  STADFESTE_YTELSESVEDTAK: 'STADFESTE_YTELSESVEDTAK',\n  MEDHOLD_I_KLAGE: 'MEDHOLD_I_KLAGE',\n  OPPHEVE_YTELSESVEDTAK: 'OPPHEVE_YTELSESVEDTAK',\n  AVVIS_KLAGE: 'AVVIS_KLAGE',\n  HJEMSENDE_UTEN_Å_OPPHEVE: 'HJEMSENDE_UTEN_Å_OPPHEVE',\n};\n\nexport default klageVurdering;\n","const klageVurderingOmgjoer = {\n  DELVIS_MEDHOLD_I_KLAGE: 'DELVIS_MEDHOLD_I_KLAGE',\n  GUNST_MEDHOLD_I_KLAGE: 'GUNST_MEDHOLD_I_KLAGE',\n  UGUNST_MEDHOLD_I_KLAGE: 'UGUNST_MEDHOLD_I_KLAGE',\n  UDEFINERT: '-',\n};\n\nexport default klageVurderingOmgjoer;\n","import React, { FunctionComponent } from 'react';\nimport { UseFormHandleSubmit } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\n\nimport { behandlingType as BehandlingType } from '@navikt/fp-kodeverk';\nimport FormkravMellomlagretDataType from '../types/FormkravMellomlagretDataType';\nimport AvsluttetBehandling from '../types/avsluttetBehandlingTsType';\n\nexport const IKKE_PA_KLAGD_VEDTAK = 'ikkePaklagdVedtak';\n\ntype FormValues = {\n  erKlagerPart?: boolean;\n  erFristOverholdt?: boolean;\n  erKonkret?: boolean;\n  erSignert?: boolean;\n  begrunnelse?: string;\n  vedtak?: string;\n  fritekstTilBrev?: string;\n};\n\ntype TilbakekrevingInfo = {\n  tilbakekrevingUuid: string;\n  tilbakekrevingVedtakDato?: string;\n  tilbakekrevingBehandlingType?: string;\n};\n\nexport const skalLagreFritekstfelt = (formVerdier: FormValues): boolean =>\n  formVerdier.erKlagerPart === false ||\n  formVerdier.erFristOverholdt === false ||\n  formVerdier.erKonkret === false ||\n  formVerdier.erSignert === false ||\n  formVerdier.vedtak === IKKE_PA_KLAGD_VEDTAK;\n\nconst getPåklagdBehandling = (\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  påklagdVedtak: string,\n): AvsluttetBehandling | undefined => avsluttedeBehandlinger.find(behandling => behandling.uuid === påklagdVedtak);\n\nexport const erTilbakekreving = (avsluttedeBehandlinger: AvsluttetBehandling[], påklagdVedtak: string): boolean => {\n  const behandling = getPåklagdBehandling(avsluttedeBehandlinger, påklagdVedtak);\n  return (\n    !!behandling &&\n    (behandling.type === BehandlingType.TILBAKEKREVING || behandling.type === BehandlingType.TILBAKEKREVING_REVURDERING)\n  );\n};\n\nexport const påklagdTilbakekrevingInfo = (\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  påklagdVedtak: string,\n): TilbakekrevingInfo | undefined => {\n  const erTilbakekrevingVedtak = erTilbakekreving(avsluttedeBehandlinger, påklagdVedtak);\n  const behandling = getPåklagdBehandling(avsluttedeBehandlinger, påklagdVedtak);\n  return behandling && erTilbakekrevingVedtak\n    ? {\n        tilbakekrevingUuid: behandling.uuid,\n        tilbakekrevingVedtakDato: behandling.avsluttet,\n        tilbakekrevingBehandlingType: behandling.type,\n      }\n    : undefined;\n};\n\nconst transformValues = (\n  values: FormValues,\n  behandlingUuid: string,\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  aksjonspunktCode: string,\n): FormkravMellomlagretDataType => ({\n  kode: aksjonspunktCode,\n  begrunnelse: values.begrunnelse!,\n  behandlingUuid,\n  erKlagerPart: values.erKlagerPart!,\n  erFristOverholdt: values.erFristOverholdt!,\n  erKonkret: values.erKonkret!,\n  erSignert: values.erSignert!,\n  erTilbakekreving: erTilbakekreving(avsluttedeBehandlinger, values.vedtak!),\n  klageTilbakekreving: påklagdTilbakekrevingInfo(avsluttedeBehandlinger, values.vedtak!),\n  paKlagdBehandlingUuid: values.vedtak === IKKE_PA_KLAGD_VEDTAK ? undefined : values.vedtak,\n  fritekstTilBrev: skalLagreFritekstfelt(values) ? values.fritekstTilBrev : undefined,\n});\n\ninterface OwnProps {\n  behandlingUuid: string;\n  aksjonspunktCode: string;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n  saveKlage: (data: FormkravMellomlagretDataType) => Promise<any>;\n  spinner?: boolean;\n  readOnly?: boolean;\n  handleSubmit: UseFormHandleSubmit<FormValues>;\n}\n\nconst TempsaveKlageButton: FunctionComponent<OwnProps> = ({\n  behandlingUuid,\n  saveKlage,\n  avsluttedeBehandlinger,\n  spinner,\n  aksjonspunktCode,\n  readOnly,\n  handleSubmit,\n}) => {\n  if (!readOnly) {\n    return (\n      <Button\n        size=\"small\"\n        variant=\"primary\"\n        loading={spinner}\n        onClick={handleSubmit((values: FormValues) =>\n          saveKlage(transformValues(values, behandlingUuid, avsluttedeBehandlinger, aksjonspunktCode)),\n        )}\n        type=\"button\"\n      >\n        <FormattedMessage id=\"TempsaveKlageButton.TempSaveButton\" />\n      </Button>\n    );\n  }\n  return null;\n};\n\nTempsaveKlageButton.defaultProps = {\n  spinner: false,\n  readOnly: false,\n};\n\nexport default TempsaveKlageButton;\n","import React, { FunctionComponent, useMemo, ReactElement } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { Form, RadioGroupPanel, SelectField, TextAreaField } from '@navikt/ft-form-hooks';\nimport { AksjonspunktCode, KodeverkType, getKodeverknavnFn } from '@navikt/fp-kodeverk';\nimport { KlageVurdering, AlleKodeverk } from '@navikt/fp-types';\nimport { KlageFormkravAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport moment from 'moment';\nimport { FormattedMessage, useIntl, IntlShape } from 'react-intl';\nimport { Detail, HStack, Heading, VStack } from '@navikt/ds-react';\n\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { AksjonspunktHelpTextTemp, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { DATE_TIME_FORMAT } from '@navikt/ft-utils';\nimport { required } from '@navikt/ft-form-validators';\n\nimport AvsluttetBehandling from '../types/avsluttetBehandlingTsType';\n\nimport styles from './formkravKlageFormNfp.module.css';\nimport TempsaveKlageButton, {\n  IKKE_PA_KLAGD_VEDTAK,\n  erTilbakekreving,\n  påklagdTilbakekrevingInfo,\n  skalLagreFritekstfelt,\n} from './TempsaveKlageButton';\nimport FormkravMellomlagretDataType from '../types/FormkravMellomlagretDataType';\n\nexport const getPaKlagdVedtak = (klageFormkavResultat?: KlageVurdering['klageFormkravResultatKA']): string =>\n  klageFormkavResultat?.paKlagdBehandlingUuid ? `${klageFormkavResultat.paKlagdBehandlingUuid}` : IKKE_PA_KLAGD_VEDTAK;\n\nconst getKlagBareVedtak = (\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  intl: IntlShape,\n  getKodeverknavn: (kode: string, kodeverk: KodeverkType) => string,\n): ReactElement[] => {\n  const klagBareVedtak = [\n    <option key=\"formkrav\" value={IKKE_PA_KLAGD_VEDTAK}>\n      {intl.formatMessage({ id: 'Klage.Formkrav.IkkePåklagdVedtak' })}\n    </option>,\n  ];\n  return klagBareVedtak.concat(\n    [...avsluttedeBehandlinger]\n      .sort((b1, b2) => moment(b1.avsluttet).diff(moment(b2.avsluttet)))\n      .map(behandling => (\n        <option key={behandling.uuid} value={`${behandling.uuid}`}>\n          {`${getKodeverknavn(behandling.type, KodeverkType.BEHANDLING_TYPE)} ${moment(behandling.avsluttet).format(\n            DATE_TIME_FORMAT,\n          )}`}\n        </option>\n      )),\n  );\n};\n\nconst getLovHjemmeler = (aksjonspunktCode: string): string =>\n  aksjonspunktCode === AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP ? 'Klage.LovhjemmelNFP' : 'Klage.LovhjemmelKA';\n\ntype FormValues = {\n  erKlagerPart?: boolean;\n  erFristOverholdt?: boolean;\n  erKonkret?: boolean;\n  erSignert?: boolean;\n  begrunnelse?: string;\n  vedtak?: string;\n  fritekstTilBrev?: string;\n};\n\nconst buildInitialValues = (klageVurdering: KlageVurdering): FormValues => {\n  const klageFormkavResultatNfp = klageVurdering ? klageVurdering.klageFormkravResultatNFP : null;\n  const klageVurderingResultatNFP = klageVurdering ? klageVurdering.klageVurderingResultatNFP : null;\n  return {\n    vedtak: klageFormkavResultatNfp ? getPaKlagdVedtak(klageFormkavResultatNfp) : '',\n    begrunnelse: klageFormkavResultatNfp ? klageFormkavResultatNfp.begrunnelse : undefined,\n    erKlagerPart: klageFormkavResultatNfp ? klageFormkavResultatNfp.erKlagerPart : undefined,\n    erKonkret: klageFormkavResultatNfp ? klageFormkavResultatNfp.erKlageKonkret : undefined,\n    erFristOverholdt: klageFormkavResultatNfp ? klageFormkavResultatNfp.erKlagefirstOverholdt : undefined,\n    erSignert: klageFormkavResultatNfp ? klageFormkavResultatNfp.erSignert : undefined,\n    fritekstTilBrev: klageVurderingResultatNFP ? klageVurderingResultatNFP.fritekstTilBrev : undefined,\n  };\n};\n\nconst transformValues = (values: FormValues, avsluttedeBehandlinger: AvsluttetBehandling[]): KlageFormkravAp => ({\n  erKlagerPart: values.erKlagerPart!,\n  erFristOverholdt: values.erFristOverholdt!,\n  erKonkret: values.erKonkret!,\n  erSignert: values.erSignert!,\n  begrunnelse: values.begrunnelse,\n  kode: AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP,\n  vedtakBehandlingUuid: values.vedtak === IKKE_PA_KLAGD_VEDTAK ? undefined : values.vedtak,\n  erTilbakekreving: erTilbakekreving(avsluttedeBehandlinger, values.vedtak!),\n  tilbakekrevingInfo: påklagdTilbakekrevingInfo(avsluttedeBehandlinger, values.vedtak!),\n  fritekstTilBrev: skalLagreFritekstfelt(values) ? values.fritekstTilBrev : undefined,\n});\n\ninterface OwnProps {\n  behandlingUuid: string;\n  klageVurdering: KlageVurdering;\n  submitCallback: (data: KlageFormkravAp) => Promise<void>;\n  readOnlySubmitButton?: boolean;\n  alleKodeverk: AlleKodeverk;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n  readOnly: boolean;\n  lagreFormkravVurdering: (data: FormkravMellomlagretDataType) => Promise<any>;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * FormkravklageformNfp\n *\n * Setter opp aksjonspunktet for formkrav klage (NFP).\n */\nconst FormkravKlageFormNfp: FunctionComponent<OwnProps> = ({\n  behandlingUuid,\n  readOnly,\n  klageVurdering,\n  readOnlySubmitButton,\n  alleKodeverk,\n  avsluttedeBehandlinger,\n  submitCallback,\n  lagreFormkravVurdering,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n  const klageBareVedtakOptions = getKlagBareVedtak(avsluttedeBehandlinger, intl, getKodeverknavn);\n\n  const initialValues = useMemo(() => buildInitialValues(klageVurdering), [klageVurdering]);\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const formVerdier = formMethods.watch();\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, avsluttedeBehandlinger))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Klage.Formkrav.Title' })}</Heading>\n      <VerticalSpacer fourPx />\n      <Detail>{intl.formatMessage({ id: getLovHjemmeler(AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP) })}</Detail>\n      <VerticalSpacer sixteenPx />\n      <VStack gap=\"6\">\n        <AksjonspunktHelpTextTemp isAksjonspunktOpen={!readOnlySubmitButton}>\n          {[<FormattedMessage id=\"Klage.Formkrav.HelpText\" key={AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP} />]}\n        </AksjonspunktHelpTextTemp>\n        <VStack gap=\"6\">\n          <HStack gap=\"10\">\n            <div>\n              <SelectField\n                readOnly={readOnly}\n                validate={[required]}\n                name=\"vedtak\"\n                label={intl.formatMessage({ id: 'Klage.Formkrav.VelgVedtak' })}\n                selectValues={klageBareVedtakOptions}\n                className={styles.selectBredde}\n              />\n            </div>\n            <VStack gap=\"5\">\n              <HStack gap=\"4\">\n                <RadioGroupPanel\n                  name=\"erKlagerPart\"\n                  label={intl.formatMessage({ id: 'Klage.Formkrav.ErKlagerPart' })}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      value: 'true',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                    },\n                    {\n                      value: 'false',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                    },\n                  ]}\n                />\n                <RadioGroupPanel\n                  name=\"erKonkret\"\n                  label={intl.formatMessage({ id: 'Klage.Formkrav.ErKonkret' })}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      value: 'true',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                    },\n                    {\n                      value: 'false',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                    },\n                  ]}\n                />\n              </HStack>\n              <HStack gap=\"4\">\n                <RadioGroupPanel\n                  name=\"erFristOverholdt\"\n                  label={intl.formatMessage({ id: 'Klage.Formkrav.ErFristOverholdt' })}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      value: 'true',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                    },\n                    {\n                      value: 'false',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                    },\n                  ]}\n                />\n                <RadioGroupPanel\n                  name=\"erSignert\"\n                  label={intl.formatMessage({ id: 'Klage.Formkrav.ErSignert' })}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      value: 'true',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                    },\n                    {\n                      value: 'false',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                    },\n                  ]}\n                />\n              </HStack>\n            </VStack>\n          </HStack>\n        </VStack>\n        <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n        {skalLagreFritekstfelt(formVerdier) && (\n          <TextAreaField\n            name=\"fritekstTilBrev\"\n            label={intl.formatMessage({ id: 'FormkravKlageFormNfp.Fritekst' })}\n            maxLength={100000}\n            readOnly={readOnly}\n            // Må erstatte bindestrek kopiert inn fra Word med vanlig bindestrek\n            parse={value => value.toString().replaceAll('‑', '-')}\n          />\n        )}\n        <HStack justify=\"space-between\">\n          <ProsessStegSubmitButtonNew\n            isReadOnly={readOnly}\n            isSubmittable={!readOnlySubmitButton}\n            isSubmitting={formMethods.formState.isSubmitting}\n            isDirty={formMethods.formState.isDirty}\n          />\n          <TempsaveKlageButton\n            behandlingUuid={behandlingUuid}\n            saveKlage={lagreFormkravVurdering}\n            avsluttedeBehandlinger={avsluttedeBehandlinger}\n            handleSubmit={formMethods.handleSubmit}\n            readOnly={readOnly}\n            aksjonspunktCode={AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP}\n          />\n        </HStack>\n      </VStack>\n    </Form>\n  );\n};\n\nexport default FormkravKlageFormNfp;\n","import React, { FunctionComponent } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { BodyShort, Heading, Label } from '@navikt/ds-react';\nimport { DATE_TIME_FORMAT } from '@navikt/ft-utils';\nimport { KodeverkType } from '@navikt/ft-kodeverk';\n\nimport { AlleKodeverk, KlageVurdering } from '@navikt/fp-types';\n\nimport AvsluttetBehandling from '../types/avsluttetBehandlingTsType';\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  alleKodeverk: AlleKodeverk;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n}\n\n/**\n * FormkravKlageKa\n *\n * Readonly panel for formkrav klage (KA).\n */\nconst FormkravKlageKa: FunctionComponent<OwnProps> = ({ klageVurdering, alleKodeverk, avsluttedeBehandlinger }) => {\n  const intl = useIntl();\n\n  const { klageFormkravResultatKA, underBehandlingKabal, behandletAvKabal } = klageVurdering;\n\n  let vedtak = intl.formatMessage({ id: 'Klage.Formkrav.IkkePåklagdVedtak' });\n  if (klageFormkravResultatKA?.paKlagdBehandlingUuid) {\n    const behandling = avsluttedeBehandlinger.find(b => b.uuid === klageFormkravResultatKA.paKlagdBehandlingUuid);\n    if (behandling) {\n      const navn = alleKodeverk[KodeverkType.BEHANDLING_TYPE].find(k => k.kode === behandling.type)?.navn;\n      vedtak = `${navn} ${moment(behandling.avsluttet).format(DATE_TIME_FORMAT)}`;\n    }\n  }\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"Klage.Formkrav.Title\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      {underBehandlingKabal && (\n        <>\n          <Heading size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.SeKabalText\" />\n          </Heading>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {!underBehandlingKabal && !behandletAvKabal && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.VelgVedtak\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">{vedtak}</BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErKlagerPart\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erKlagerPart ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErKonkret\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erKlageKonkret ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErFristOverholdt\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erKlagefirstOverholdt ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErSignert\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erSignert ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.Vurdering\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">{klageFormkravResultatKA?.begrunnelse}</BodyShort>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormkravKlageKa;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { KlageVurdering, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport messages from '../i18n/nb_NO.json';\nimport FormkravKlageFormNfp from './components/FormkravKlageFormNfp';\nimport FormkravKlageKa from './components/FormkravKlageKa';\nimport AvsluttetBehandling from './types/avsluttetBehandlingTsType';\nimport FormkravMellomlagretDataType from './types/FormkravMellomlagretDataType';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  klageVurdering?: KlageVurdering;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n  lagreFormkravVurdering: (data: FormkravMellomlagretDataType) => Promise<void>;\n}\n\nconst FormkravProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  klageVurdering = {},\n  avsluttedeBehandlinger,\n  aksjonspunkter,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  formData,\n  setFormData,\n  lagreFormkravVurdering,\n}) => (\n  <RawIntlProvider value={intl}>\n    {aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP) && (\n      <FormkravKlageFormNfp\n        behandlingUuid={behandling.uuid}\n        klageVurdering={klageVurdering}\n        submitCallback={submitCallback}\n        readOnly={isReadOnly}\n        readOnlySubmitButton={readOnlySubmitButton}\n        alleKodeverk={alleKodeverk}\n        avsluttedeBehandlinger={avsluttedeBehandlinger}\n        lagreFormkravVurdering={lagreFormkravVurdering}\n        formData={formData}\n        setFormData={setFormData}\n      />\n    )}\n    {klageVurdering.klageFormkravResultatKA && (\n      <FormkravKlageKa\n        klageVurdering={klageVurdering}\n        alleKodeverk={alleKodeverk}\n        avsluttedeBehandlinger={avsluttedeBehandlinger}\n      />\n    )}\n  </RawIntlProvider>\n);\n\nexport default FormkravProsessIndex;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { BehandlingStatus, BehandlingType } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode, isKlageAvvist } from '@navikt/fp-kodeverk';\nimport { FormkravProsessIndex } from '@navikt/fp-prosess-formkrav';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { KlageVurdering } from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering?: KlageVurdering;\n};\n\ninterface OwnProps {\n  alleBehandlinger: {\n    uuid: string;\n    type: string;\n    status: string;\n    opprettet: string;\n    avsluttet?: string;\n    resultatType?: string;\n  }[];\n}\n\nconst FormKravFamOgPensjonProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  alleBehandlinger,\n  ...props\n}) => {\n  const intl = useIntl();\n\n  const avsluttedeBehandlinger = useMemo(\n    () =>\n      alleBehandlinger\n        .filter(b => b.status === BehandlingStatus.AVSLUTTET)\n        .filter(\n          b => (b.type !== BehandlingType.KLAGE || isKlageAvvist(b.resultatType)) && b.type !== BehandlingType.ANKE,\n        ),\n    [alleBehandlinger],\n  );\n\n  const { startRequest: lagreFormkravVurdering } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.SAVE_FORMKRAV_VURDERING,\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.FORMKRAV_KLAGE_NAV_FAMILIE_OG_PENSJON}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.FormkravKlageNFP' })}\n      skalPanelVisesIMeny={() => true}\n      renderPanel={data => (\n        <FormkravProsessIndex\n          avsluttedeBehandlinger={avsluttedeBehandlinger}\n          lagreFormkravVurdering={lagreFormkravVurdering}\n          {...data}\n        />\n      )}\n    />\n  );\n};\n\nexport default FormKravFamOgPensjonProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Heading, Label } from '@navikt/ds-react';\n\nimport {\n  KodeverkType,\n  klageVurdering as klageVurderingType,\n  klageVurderingOmgjoer as klageVurderingOmgjoerType,\n} from '@navikt/fp-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { KlageVurdering, AlleKodeverk } from '@navikt/fp-types';\n\ninterface OwnProps {\n  alleKodeverk: AlleKodeverk;\n  klageVurdering: KlageVurdering;\n}\n\n/**\n * BehandleklageformNfp\n *\n * Setter opp readonly-panel for behandling av klage (KA).\n */\nconst BehandleKlageFormKa: FunctionComponent<OwnProps> = ({ klageVurdering, alleKodeverk }) => {\n  const intl = useIntl();\n\n  const {\n    begrunnelse,\n    fritekstTilBrev,\n    klageVurdering: vurdering,\n    klageMedholdArsak,\n    klageVurderingOmgjoer,\n  } = klageVurdering.klageVurderingResultatNK || {};\n\n  const medholdReasons = alleKodeverk[KodeverkType.KLAGE_MEDHOLD_ARSAK];\n\n  return (\n    <>\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Klage.ResolveKlage.Title' })}</Heading>\n      <VerticalSpacer sixteenPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"KlageVurderingRadioOptionsKa.VurderingForKlage\" />\n      </Label>\n      <BodyShort size=\"small\">\n        {vurdering === klageVurderingType.STADFESTE_YTELSESVEDTAK && (\n          <FormattedMessage id=\"Klage.ResolveKlage.KeepVedtakNk\" />\n        )}\n        {vurdering === klageVurderingType.MEDHOLD_I_KLAGE && <FormattedMessage id=\"Klage.ResolveKlage.ChangeVedtak\" />}\n        {vurdering === klageVurderingType.HJEMSENDE_UTEN_Å_OPPHEVE && (\n          <FormattedMessage id=\"Klage.Behandle.Hjemsendt\" />\n        )}\n        {vurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK && (\n          <FormattedMessage id=\"Klage.ResolveKlage.NullifyVedtak\" />\n        )}\n      </BodyShort>\n      <VerticalSpacer sixteenPx />\n      {vurdering === klageVurderingType.MEDHOLD_I_KLAGE && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.ResolveKlage.Cause\" />\n          </Label>\n          <BodyShort size=\"small\">{medholdReasons.find(mo => mo.kode === klageMedholdArsak)?.navn}</BodyShort>\n          <VerticalSpacer sixteenPx />\n          <BodyShort size=\"small\">\n            {klageVurderingOmgjoer === klageVurderingOmgjoerType.GUNST_MEDHOLD_I_KLAGE && (\n              <FormattedMessage id=\"Klage.Behandle.Omgjort\" />\n            )}\n            {klageVurderingOmgjoer === klageVurderingOmgjoerType.UGUNST_MEDHOLD_I_KLAGE && (\n              <FormattedMessage id=\"Klage.Behandle.Ugunst\" />\n            )}\n            {klageVurderingOmgjoer === klageVurderingOmgjoerType.DELVIS_MEDHOLD_I_KLAGE && (\n              <FormattedMessage id=\"Klage.Behandle.DelvisOmgjort\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {(vurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK ||\n        vurdering === klageVurderingType.HJEMSENDE_UTEN_Å_OPPHEVE) && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.ResolveKlage.Cause\" />\n          </Label>\n          <BodyShort size=\"small\">{medholdReasons.find(mo => mo.kode === klageMedholdArsak)?.navn}</BodyShort>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      <Label size=\"small\">\n        <FormattedMessage id=\"FritekstKlageBrevTextField.Fritekst\" />\n      </Label>\n      <BodyShort size=\"small\">{fritekstTilBrev}</BodyShort>\n      <VerticalSpacer sixteenPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"KlageVurderingRadioOptionsKa.Begrunnelse\" />\n      </Label>\n      <BodyShort size=\"small\">{begrunnelse}</BodyShort>\n      <VerticalSpacer sixteenPx />\n    </>\n  );\n};\n\nexport default BehandleKlageFormKa;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  klageVurdering as klageVurderingType,\n  klageVurderingOmgjoer as klageVurderingOmgjoerType,\n} from '@navikt/fp-kodeverk';\nimport { required } from '@navikt/ft-form-validators';\nimport { ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport { KodeverkMedNavn } from '@navikt/fp-types';\n\nimport styles from './klageVurderingRadioOptionsNfp.module.css';\n\ninterface OwnProps {\n  readOnly: boolean;\n  medholdReasons: KodeverkMedNavn[];\n  alleHjemmlerMedNavn: KodeverkMedNavn[];\n  klageVurdering?: string;\n}\n\nconst KlageVurderingRadioOptionsNfp: FunctionComponent<OwnProps> = ({\n  readOnly,\n  medholdReasons,\n  alleHjemmlerMedNavn,\n  klageVurdering,\n}) => {\n  const intl = useIntl();\n  const medholdOptions = medholdReasons.map((mo: KodeverkMedNavn) => (\n    <option key={mo.kode} value={mo.kode}>\n      {mo.navn}\n    </option>\n  ));\n  const hjemmelOptions = alleHjemmlerMedNavn.map((mo: KodeverkMedNavn) => (\n    <option key={mo.kode} value={mo.kode}>\n      {mo.navn}\n    </option>\n  ));\n  return (\n    <>\n      <RadioGroupPanel\n        name=\"klageVurdering\"\n        validate={[required]}\n        isReadOnly={readOnly}\n        isHorizontal\n        radios={[\n          {\n            value: klageVurderingType.MEDHOLD_I_KLAGE,\n            label: intl.formatMessage({ id: 'Klage.ResolveKlage.ChangeVedtak' }),\n          },\n          {\n            value: klageVurderingType.STADFESTE_YTELSESVEDTAK,\n            label: intl.formatMessage({ id: 'Klage.ResolveKlage.KeepVedtakNfp' }),\n          },\n        ]}\n      />\n      {klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <ArrowBox>\n            <SelectField\n              readOnly={readOnly}\n              name=\"klageMedholdArsak\"\n              selectValues={medholdOptions}\n              className={readOnly ? styles.selectReadOnly : styles.select}\n              label={intl.formatMessage({ id: 'Klage.ResolveKlage.Cause' })}\n              validate={[required]}\n            />\n            <VerticalSpacer sixteenPx />\n            <RadioGroupPanel\n              name=\"klageVurderingOmgjoer\"\n              validate={[required]}\n              isReadOnly={readOnly}\n              radios={[\n                {\n                  value: klageVurderingOmgjoerType.GUNST_MEDHOLD_I_KLAGE,\n                  label: intl.formatMessage({ id: 'Klage.Behandle.Omgjort' }),\n                },\n                {\n                  value: klageVurderingOmgjoerType.UGUNST_MEDHOLD_I_KLAGE,\n                  label: intl.formatMessage({ id: 'Klage.Behandle.Ugunst' }),\n                },\n                {\n                  value: klageVurderingOmgjoerType.DELVIS_MEDHOLD_I_KLAGE,\n                  label: intl.formatMessage({ id: 'Klage.Behandle.DelvisOmgjort' }),\n                },\n              ]}\n            />\n          </ArrowBox>\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n      <SelectField\n        readOnly={readOnly}\n        name=\"klageHjemmel\"\n        selectValues={hjemmelOptions}\n        className={readOnly ? styles.selectReadOnly : styles.select}\n        label={intl.formatMessage({ id: 'Klage.ResolveKlage.Hjemmel' })}\n        validate={[required]}\n      />\n      <VerticalSpacer sixteenPx />\n    </>\n  );\n};\n\nexport default KlageVurderingRadioOptionsNfp;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { hasValidText, required } from '@navikt/ft-form-validators';\nimport { TextAreaField } from '@navikt/ft-form-hooks';\n\nimport styles from './fritekstKlageBrevTextField.module.css';\n\ninterface OwnProps {\n  sprakkode: string;\n  readOnly?: boolean;\n}\n\nconst FritekstKlageBrevTextField: FunctionComponent<OwnProps> = ({ sprakkode, readOnly }) => (\n  <div className={styles.fritekstTilBrevTextArea}>\n    <TextAreaField\n      name=\"fritekstTilBrev\"\n      label={useIntl().formatMessage({ id: 'FritekstKlageBrevTextField.Fritekst' })}\n      validate={[required, hasValidText]}\n      readOnly={readOnly}\n      maxLength={100000}\n      badges={[\n        {\n          type: 'info',\n          titleText: getLanguageFromSprakkode(sprakkode),\n        },\n      ]}\n      // Må erstatte bindestrek kopiert inn fra Word med vanlig bindestrek\n      parse={value => value.toString().replaceAll('‑', '-').replaceAll('\\t', ' ')}\n    />\n  </div>\n);\n\nFritekstKlageBrevTextField.defaultProps = {\n  readOnly: true,\n};\n\nexport default FritekstKlageBrevTextField;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport { dokumentMalType, klageVurdering as klageVurderingType } from '@navikt/fp-kodeverk';\n\nimport styles from './previewKlageLink.module.css';\n\nconst getBrevKode = (klageVurdertAvKa: boolean, klageVurdering?: string): string | undefined => {\n  switch (klageVurdering) {\n    case klageVurderingType.STADFESTE_YTELSESVEDTAK:\n      return klageVurdertAvKa ? dokumentMalType.KLAGE_STADFESTET : dokumentMalType.KLAGE_OVERSENDT;\n    case klageVurderingType.OPPHEVE_YTELSESVEDTAK:\n      return dokumentMalType.KLAGE_HJEMSENDT;\n    case klageVurderingType.HJEMSENDE_UTEN_Å_OPPHEVE:\n      return dokumentMalType.KLAGE_HJEMSENDT;\n    case klageVurderingType.MEDHOLD_I_KLAGE:\n      return dokumentMalType.KLAGE_OMGJORING;\n    default:\n      return undefined;\n  }\n};\n\nexport type BrevData = {\n  fritekst: string;\n  dokumentMal?: string;\n  erOpphevetKlage: boolean;\n};\n\nconst getBrevData = (klageVurdering?: string, fritekstTilBrev?: string): BrevData => ({\n  fritekst: fritekstTilBrev || '',\n  dokumentMal: getBrevKode(false, klageVurdering),\n  erOpphevetKlage: klageVurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK,\n});\n\ninterface OwnProps {\n  previewCallback: (data: BrevData) => Promise<any>;\n  fritekstTilBrev?: string;\n  klageVurdering?: string;\n}\n\nconst PreviewKlageLink: FunctionComponent<OwnProps> = ({ previewCallback, fritekstTilBrev, klageVurdering }) => {\n  const previewMessage = (e: React.MouseEvent | React.KeyboardEvent): void => {\n    previewCallback(getBrevData(klageVurdering, fritekstTilBrev));\n    e.preventDefault();\n  };\n  return (\n    <a\n      href=\"\"\n      onClick={e => {\n        previewMessage(e);\n      }}\n      onKeyDown={e => (e.key === 'Enter' ? previewMessage(e) : null)}\n      className={classNames(styles.previewLink, 'lenke lenke--frittstaende')}\n    >\n      <FormattedMessage id=\"PreviewKlageLink.ForhandvisBrev\" />\n    </a>\n  );\n};\n\nexport default PreviewKlageLink;\n","import React, { FunctionComponent } from 'react';\nimport { UseFormHandleSubmit } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\n\nimport { klageVurdering as klageVurderingType } from '@navikt/fp-kodeverk';\nimport KlageFormType from '../../types/klageFormType';\n\ntype FormValues = {\n  klageVurdering?: string;\n  fritekstTilBrev?: string;\n  klageMedholdArsak?: string;\n  klageVurderingOmgjoer?: string;\n  klageHjemmel?: string;\n  begrunnelse?: string;\n};\n\nexport type TransformedValues = {\n  kode: string;\n  klageMedholdArsak?: string;\n  klageVurderingOmgjoer?: string;\n  klageHjemmel?: string;\n  fritekstTilBrev: string;\n  begrunnelse: string;\n  klageVurdering: string;\n};\n\nconst transformValues = (values: FormValues, aksjonspunktCode: string): TransformedValues => ({\n  kode: aksjonspunktCode,\n  klageMedholdArsak:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ||\n    values.klageVurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK\n      ? values.klageMedholdArsak\n      : undefined,\n  klageVurderingOmgjoer:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ? values.klageVurderingOmgjoer : undefined,\n  klageHjemmel: values.klageHjemmel,\n  fritekstTilBrev: values.fritekstTilBrev!,\n  begrunnelse: values.begrunnelse!,\n  klageVurdering: values.klageVurdering!,\n});\n\ninterface OwnProps {\n  aksjonspunktCode: string;\n  saveKlage: (data: TransformedValues) => Promise<any>;\n  spinner?: boolean;\n  readOnly?: boolean;\n  handleSubmit: UseFormHandleSubmit<KlageFormType>;\n}\n\nconst TempsaveKlageButton: FunctionComponent<OwnProps> = ({\n  saveKlage,\n  spinner,\n  aksjonspunktCode,\n  readOnly,\n  handleSubmit,\n}) => {\n  if (!readOnly) {\n    return (\n      <Button\n        size=\"small\"\n        variant=\"primary\"\n        loading={spinner}\n        onClick={handleSubmit((values: FormValues) => saveKlage(transformValues(values, aksjonspunktCode)))}\n        type=\"button\"\n      >\n        <FormattedMessage id=\"Klage.ResolveKlage.TempSaveButton\" />\n      </Button>\n    );\n  }\n  return null;\n};\n\nTempsaveKlageButton.defaultProps = {\n  spinner: false,\n  readOnly: false,\n};\n\nexport default TempsaveKlageButton;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Button, HStack, Label, Modal, VStack } from '@navikt/ds-react';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\n\ninterface OwnProps {\n  erModalÅpen: boolean;\n  lukkModal: () => void;\n  isSubmittable: boolean;\n  isSubmitting: boolean;\n  isDirty: boolean;\n  readOnly: boolean;\n  valgtHjemmel?: string;\n}\n\nconst BekreftOgSubmitKlageModal: FunctionComponent<OwnProps> = ({\n  erModalÅpen,\n  lukkModal,\n  isSubmittable,\n  isSubmitting,\n  isDirty,\n  readOnly,\n  valgtHjemmel,\n}) => {\n  const intl = useIntl();\n  return (\n    <Modal\n      width=\"500px\"\n      open={erModalÅpen}\n      aria-label={intl.formatMessage({ id: 'Klage.Modal.Overskrift' })}\n      onClose={lukkModal}\n    >\n      <Modal.Body>\n        <VStack gap=\"3\">\n          <div>\n            <Label size=\"medium\">\n              <FormattedMessage id=\"Klage.Modal.Overskrift\" />\n            </Label>\n            <VerticalSpacer fourPx />\n            <BodyShort>\n              <FormattedMessage id=\"Klage.Modal.SendTilKlageinstans\" />\n            </BodyShort>\n            <VerticalSpacer sixteenPx />\n            <BodyShort>\n              <FormattedMessage id=\"Klage.Modal.Valg\" />\n            </BodyShort>\n            <VerticalSpacer eightPx />\n            <BodyShort>\n              <FormattedMessage id=\"Klage.Modal.Oppretthold\" />\n            </BodyShort>\n            <VerticalSpacer fourPx />\n            {valgtHjemmel && (\n              <BodyShort>\n                <FormattedMessage id=\"Klage.Modal.Hjemmel\" values={{ hjemmel: valgtHjemmel }} />\n              </BodyShort>\n            )}\n            <VerticalSpacer fourPx />\n          </div>\n          <div>\n            <HStack gap=\"2\">\n              <ProsessStegSubmitButtonNew\n                isReadOnly={readOnly}\n                isSubmittable={isSubmittable}\n                isSubmitting={isSubmitting}\n                isDirty={isDirty}\n              />\n              <Button size=\"small\" variant=\"primary\" onClick={lukkModal} autoFocus type=\"button\">\n                <FormattedMessage id=\"Klage.Modal.Avbryt\" />\n              </Button>\n            </HStack>\n          </div>\n        </VStack>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default BekreftOgSubmitKlageModal;\n","import React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Heading, Button } from '@navikt/ds-react';\n\nimport { Form } from '@navikt/ft-form-hooks';\n\nimport { AksjonspunktCode, KodeverkType, klageVurdering as klageVurderingType } from '@navikt/fp-kodeverk';\nimport {\n  AksjonspunktHelpTextTemp,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { KlageVurdering, AlleKodeverk, KlageVurderingResultat, KodeverkMedNavn } from '@navikt/fp-types';\nimport { KlageVurderingResultatAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport KlageFormType from '../../types/klageFormType';\nimport KlageVurderingRadioOptionsNfp from './KlageVurderingRadioOptionsNfp';\nimport FritekstBrevTextField from './FritekstKlageBrevTextField';\nimport PreviewKlageLink, { BrevData } from './PreviewKlageLink';\nimport TempsaveKlageButton, { TransformedValues } from './TempsaveKlageButton';\n\nimport styles from './behandleKlageFormNfp.module.css';\nimport BekreftOgSubmitKlageModal from './BekreftOgSubmitKlageModal';\n\nconst transformValues = (values: KlageFormType): KlageVurderingResultatAp => ({\n  klageMedholdArsak:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ? values.klageMedholdArsak : undefined,\n  klageVurderingOmgjoer:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ? values.klageVurderingOmgjoer : undefined,\n  klageHjemmel: values.klageHjemmel,\n  klageVurdering: values.klageVurdering!,\n  fritekstTilBrev: values.fritekstTilBrev,\n  begrunnelse: values.begrunnelse,\n  kode: AksjonspunktCode.BEHANDLE_KLAGE_NFP,\n});\n\nconst definertKodeverdiEllerUndefined = (kode: string | undefined): string | undefined => {\n  if (kode && kode !== '-') {\n    return kode;\n  }\n  return undefined;\n};\n\nconst lagHjemlerMedNavn = (kodeverkNavn: KodeverkMedNavn[], kodeverkVerdier: string[]): KodeverkMedNavn[] =>\n  kodeverkNavn.filter(({ kode }) => kodeverkVerdier.includes(kode)).sort((a, b) => a.kode.localeCompare(b.kode));\nconst lagHjemmelsKoder = (kodeverkVerdier: string[]): string[] => kodeverkVerdier.map(kode => kode);\n\nconst buildInitialValues = (klageVurderingResultat?: KlageVurderingResultat): KlageFormType => ({\n  klageMedholdArsak: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageMedholdArsak),\n  klageVurderingOmgjoer: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageVurderingOmgjoer),\n  klageHjemmel: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageHjemmel),\n  klageVurdering: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageVurdering),\n  begrunnelse: klageVurderingResultat ? klageVurderingResultat.begrunnelse : undefined,\n  fritekstTilBrev: klageVurderingResultat ? klageVurderingResultat.fritekstTilBrev : undefined,\n});\n\ninterface OwnProps {\n  previewCallback: (data: BrevData) => Promise<any>;\n  saveKlage: (data: TransformedValues) => Promise<any>;\n  readOnly: boolean;\n  readOnlySubmitButton?: boolean;\n  sprakkode: string;\n  alleKodeverk: AlleKodeverk;\n  klageVurdering: KlageVurdering;\n  alleAktuelleHjemler: string[];\n  submitCallback: (data: KlageVurderingResultatAp) => Promise<void>;\n  formData?: KlageFormType;\n  setFormData: (data: KlageFormType) => void;\n}\n\n/**\n * BehandleklageformNfp\n *\n * Presentasjonskomponent. Setter opp aksjonspunktet for behandling av klage (NFP).\n */\nexport const BehandleKlageFormNfp: FunctionComponent<OwnProps> = ({\n  readOnly,\n  klageVurdering,\n  previewCallback,\n  saveKlage,\n  readOnlySubmitButton,\n  sprakkode,\n  alleAktuelleHjemler,\n  alleKodeverk,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const hjemmlerMedNavn = lagHjemlerMedNavn(\n    alleKodeverk[KodeverkType.KLAGE_HJEMMEL],\n    lagHjemmelsKoder(alleAktuelleHjemler),\n  );\n  const intl = useIntl();\n  const [visSubmitModal, setVisSubmitModal] = useState<boolean>(false);\n  const initialValues = useMemo(() => buildInitialValues(klageVurdering.klageVurderingResultatNFP), [klageVurdering]);\n  const formMethods = useForm<KlageFormType>({\n    defaultValues: formData || initialValues,\n  });\n\n  const formValues = formMethods.watch();\n\n  const lukkModal = useCallback(() => {\n    setVisSubmitModal(false);\n  }, []);\n\n  const åpneModal = useCallback(() => {\n    setVisSubmitModal(true);\n  }, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: KlageFormType) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Klage.ResolveKlage.Title' })}</Heading>\n      <VerticalSpacer fourPx />\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={!readOnlySubmitButton}>\n        {[<FormattedMessage id=\"Klage.ResolveKlage.HelpText\" key={AksjonspunktCode.BEHANDLE_KLAGE_NFP} />]}\n      </AksjonspunktHelpTextTemp>\n      <KlageVurderingRadioOptionsNfp\n        readOnly={readOnly}\n        klageVurdering={formValues.klageVurdering}\n        medholdReasons={alleKodeverk[KodeverkType.KLAGE_MEDHOLD_ARSAK]}\n        alleHjemmlerMedNavn={hjemmlerMedNavn}\n      />\n      <div className={styles.confirmVilkarForm}>\n        <ProsessStegBegrunnelseTextFieldNew\n          readOnly={readOnly}\n          text={intl.formatMessage({ id: 'BehandleKlageFormNfp.BegrunnelseForKlage' })}\n        />\n        <VerticalSpacer sixteenPx />\n        <FritekstBrevTextField sprakkode={sprakkode} readOnly={readOnly} />\n        <VerticalSpacer sixteenPx />\n        <FlexContainer>\n          <FlexRow spaceBetween>\n            <FlexColumn>\n              {formValues.klageVurdering === klageVurderingType.STADFESTE_YTELSESVEDTAK && (\n                <>\n                  <Button variant=\"primary\" type=\"button\" size=\"small\" onClick={() => åpneModal()} disabled={readOnly}>\n                    <FormattedMessage id=\"Klage.Behandle.Bekreft\" />\n                  </Button>\n                  <BekreftOgSubmitKlageModal\n                    erModalÅpen={visSubmitModal}\n                    lukkModal={lukkModal}\n                    valgtHjemmel={hjemmlerMedNavn.find(hj => hj.kode === formValues.klageHjemmel)?.navn}\n                    readOnly={readOnly}\n                    isSubmittable={!readOnlySubmitButton}\n                    isSubmitting={formMethods.formState.isSubmitting}\n                    isDirty={formMethods.formState.isDirty}\n                  />\n                </>\n              )}\n              {formValues.klageVurdering !== klageVurderingType.STADFESTE_YTELSESVEDTAK && (\n                <ProsessStegSubmitButtonNew\n                  isReadOnly={readOnly}\n                  isSubmittable={!readOnlySubmitButton}\n                  isSubmitting={formMethods.formState.isSubmitting}\n                  isDirty={formMethods.formState.isDirty}\n                />\n              )}\n              {!readOnly &&\n                formValues.klageVurdering &&\n                formValues.fritekstTilBrev &&\n                formValues.fritekstTilBrev.length > 2 && (\n                  <PreviewKlageLink\n                    previewCallback={previewCallback}\n                    fritekstTilBrev={formValues.fritekstTilBrev}\n                    klageVurdering={formValues.klageVurdering}\n                  />\n                )}\n            </FlexColumn>\n            <FlexColumn>\n              <TempsaveKlageButton\n                saveKlage={saveKlage}\n                handleSubmit={formMethods.handleSubmit}\n                readOnly={readOnly}\n                aksjonspunktCode={AksjonspunktCode.BEHANDLE_KLAGE_NFP}\n              />\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n      </div>\n    </Form>\n  );\n};\n\nexport default BehandleKlageFormNfp;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { KlageVurdering, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport messages from '../i18n/nb_NO.json';\nimport BehandleKlageFormKa from './components/ka/BehandleKlageFormKa';\nimport BehandleKlageFormNfp from './components/nfp/BehandleKlageFormNfp';\nimport { BrevData } from './components/nfp/PreviewKlageLink';\nimport { TransformedValues } from './components/nfp/TempsaveKlageButton';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  previewCallback: (data: BrevData) => Promise<any>;\n  saveKlage: (data: TransformedValues) => Promise<any>;\n}\n\nconst KlagevurderingProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  klageVurdering,\n  alleKodeverk,\n  saveKlage,\n  submitCallback,\n  isReadOnly,\n  previewCallback,\n  readOnlySubmitButton,\n  aksjonspunkter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    {klageVurdering.klageVurderingResultatNK && (\n      <BehandleKlageFormKa klageVurdering={klageVurdering} alleKodeverk={alleKodeverk} />\n    )}\n    {aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.BEHANDLE_KLAGE_NFP) && (\n      <BehandleKlageFormNfp\n        sprakkode={behandling.sprakkode}\n        klageVurdering={klageVurdering}\n        saveKlage={saveKlage}\n        submitCallback={submitCallback}\n        readOnly={isReadOnly}\n        previewCallback={previewCallback}\n        readOnlySubmitButton={readOnlySubmitButton}\n        alleKodeverk={alleKodeverk}\n        alleAktuelleHjemler={klageVurdering.aktuelleHjemler ? klageVurdering.aktuelleHjemler : []}\n        formData={formData}\n        setFormData={setFormData}\n      />\n    )}\n  </RawIntlProvider>\n);\n\nexport default KlagevurderingProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { klageVurdering as klageVurderingKodeverk, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport {\n  KlagevurderingProsessIndex,\n  AksjonspunktVerdier,\n  KlageVurderingBrevData,\n} from '@navikt/fp-prosess-klagevurdering';\nimport { Behandling, Fagsak, ForhåndsvisMeldingParams, KlageVurdering } from '@navikt/fp-types';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport KlageBehandlingModal from '../modaler/KlageBehandlingModal';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst lagForhandsvisCallback =\n  (\n    forhandsvisMelding: (params?: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<any>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: KlageVurderingBrevData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst lagKlageCallback =\n  (lagreKlageVurdering: (params?: any, keepData?: boolean) => Promise<any>, behandling: Behandling) =>\n  (aksjonspunktModel: AksjonspunktVerdier) => {\n    const data = {\n      behandlingUuid: behandling.uuid,\n      ...aksjonspunktModel,\n    };\n\n    return lagreKlageVurdering(data);\n  };\n\nconst getLagringSideeffekter =\n  (\n    toggleKlageModal: (skalViseModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n    oppdaterProsessStegOgFaktaPanelIUrl?: (punktnavn?: string, faktanavn?: string) => void,\n  ) =>\n  (aksjonspunktModels: { kode: string; klageVurdering?: string }[]) => {\n    const skalByttTilKlageinstans = aksjonspunktModels.some(\n      apValue =>\n        apValue.kode === AksjonspunktCode.BEHANDLE_KLAGE_NFP &&\n        apValue.klageVurdering === klageVurderingKodeverk.STADFESTE_YTELSESVEDTAK,\n    );\n\n    if (skalByttTilKlageinstans) {\n      setSkalOppdatereEtterBekreftelseAvAp(false);\n    }\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      if (skalByttTilKlageinstans) {\n        toggleKlageModal(true);\n      } else if (oppdaterProsessStegOgFaktaPanelIUrl) {\n        oppdaterProsessStegOgFaktaPanelIUrl('default', 'default');\n      }\n    };\n  };\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering: KlageVurdering;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  setSkalOppdatereEtterBekreftelseAvAp?: (skalHenteFagsak: boolean) => void;\n  opneSokeside?: () => void;\n  oppdaterProsessStegOgFaktaPanelIUrl?: (punktnavn?: string, faktanavn?: string) => void;\n  aksjonspunktKoder?: string[];\n  prosessPanelKode: ProsessStegCode;\n  prosessPanelMenyTekst: string;\n}\n\nconst VurderingFellesProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  opneSokeside,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  aksjonspunktKoder,\n  prosessPanelKode,\n  prosessPanelMenyTekst,\n  ...props\n}) => {\n  const [visModalKlageBehandling, toggleKlageModal] = useState(false);\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const lagringSideEffekter = setSkalOppdatereEtterBekreftelseAvAp\n    ? getLagringSideeffekter(\n        toggleKlageModal,\n        setSkalOppdatereEtterBekreftelseAvAp,\n        oppdaterProsessStegOgFaktaPanelIUrl,\n      )\n    : undefined;\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    lagForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const { startRequest: lagreKlageVurdering } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.SAVE_KLAGE_VURDERING,\n  );\n  const lagreKlage = useCallback(lagKlageCallback(lagreKlageVurdering, standardPanelProps.behandling), [\n    standardPanelProps.behandling.versjon,\n  ]);\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={aksjonspunktKoder}\n      prosessPanelKode={prosessPanelKode}\n      prosessPanelMenyTekst={prosessPanelMenyTekst}\n      skalPanelVisesIMeny={() => true}\n      lagringSideEffekter={lagringSideEffekter}\n      renderPanel={data => (\n        <>\n          <KlageBehandlingModal\n            visModal={visModalKlageBehandling}\n            lukkModal={() => {\n              toggleKlageModal(false);\n              if (opneSokeside) {\n                opneSokeside();\n              }\n            }}\n          />\n          <KlagevurderingProsessIndex previewCallback={previewCallback} saveKlage={lagreKlage} {...data} />\n        </>\n      )}\n    />\n  );\n};\n\nexport default VurderingFellesProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { Fagsak } from '@navikt/fp-types';\n\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport VurderingFellesProsessStegInitPanel from './VurderingFellesProsessStegInitPanel';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.BEHANDLE_KLAGE_NFP];\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  opneSokeside: () => void;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n}\n\nconst VurderingFamOgPensjonProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  opneSokeside,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  ...props\n}) => (\n  <VurderingFellesProsessStegInitPanel\n    {...props}\n    fagsak={fagsak}\n    setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n    opneSokeside={opneSokeside}\n    oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    prosessPanelKode={ProsessStegCode.KLAGE_NAV_FAMILIE_OG_PENSJON}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.CheckKlageNFP' })}\n  />\n);\n\nexport default VurderingFamOgPensjonProsessStegInitPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { BehandlingStatus, BehandlingType } from '@navikt/ft-kodeverk';\n\nimport { FormkravProsessIndex } from '@navikt/fp-prosess-formkrav';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { KlageVurdering } from '@navikt/fp-types';\n\nimport { AksjonspunktCode, isKlageAvvist } from '@navikt/fp-kodeverk';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_FORMKRAV_NK];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering?: KlageVurdering;\n};\n\ninterface OwnProps {\n  alleBehandlinger: {\n    uuid: string;\n    type: string;\n    status: string;\n    opprettet: string;\n    avsluttet?: string;\n    resultatType?: string;\n  }[];\n}\n\nconst FormKravKlageInstansProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  alleBehandlinger,\n  ...props\n}) => {\n  const intl = useIntl();\n  const avsluttedeBehandlinger = useMemo(\n    () =>\n      alleBehandlinger\n        .filter(b => b.status === BehandlingStatus.AVSLUTTET)\n        .filter(\n          b => (b.type !== BehandlingType.KLAGE || isKlageAvvist(b.resultatType)) && b.type !== BehandlingType.ANKE,\n        ),\n    [alleBehandlinger],\n  );\n\n  const { startRequest: lagreFormkravVurdering } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.SAVE_FORMKRAV_VURDERING,\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.FORMKRAV_KLAGE_NAV_KLAGEINSTANS}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.FormkravKlageKA' })}\n      skalPanelVisesIMeny={() => true}\n      renderPanel={data => (\n        <FormkravProsessIndex\n          avsluttedeBehandlinger={avsluttedeBehandlinger}\n          lagreFormkravVurdering={lagreFormkravVurdering}\n          {...data}\n        />\n      )}\n    />\n  );\n};\n\nexport default FormKravKlageInstansProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { Fagsak } from '@navikt/fp-types';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\n\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport VurderingFellesProsessStegInitPanel from './VurderingFellesProsessStegInitPanel';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.BEHANDLE_KLAGE_NK];\n\ninterface OwnProps {\n  fagsak: Fagsak;\n}\n\nconst VurderingKlageInstansProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  ...props\n}) => (\n  <VurderingFellesProsessStegInitPanel\n    {...props}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    fagsak={fagsak}\n    prosessPanelKode={ProsessStegCode.KLAGE_NAV_KLAGEINSTANS}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.CheckKlageNK' })}\n  />\n);\n\nexport default VurderingKlageInstansProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, KeyboardEvent, MouseEvent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { Button } from '@navikt/ds-react';\n\nimport { FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport styles from './vedtakKlageSubmitPanel.module.css';\n\ninterface OwnProps {\n  previewVedtakCallback: () => Promise<any>;\n  behandlingPaaVent: boolean;\n  readOnly: boolean;\n  lagreVedtak: () => void;\n  isSubmitting: boolean;\n}\n\nconst VedtakKlageSubmitPanel: FunctionComponent<OwnProps> = ({\n  behandlingPaaVent,\n  previewVedtakCallback,\n  readOnly,\n  lagreVedtak,\n  isSubmitting,\n}) => {\n  const forhåndsvis = useCallback((e: KeyboardEvent | MouseEvent) => {\n    e.preventDefault();\n    previewVedtakCallback();\n  }, []);\n\n  return (\n    <FlexContainer>\n      <FlexRow>\n        {!readOnly && (\n          <FlexColumn>\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              className={styles.mainButton}\n              onClick={lagreVedtak}\n              disabled={behandlingPaaVent || isSubmitting}\n              loading={isSubmitting}\n              type=\"button\"\n            >\n              <FormattedMessage id=\"VedtakKlageForm.TilGodkjenning\" />\n            </Button>\n          </FlexColumn>\n        )}\n        <FlexColumn>\n          <a\n            href=\"\"\n            onClick={forhåndsvis}\n            onKeyDown={e => (e.key === 'Enter' ? forhåndsvis(e) : null)}\n            className={classNames('lenke lenke--frittstaende')}\n          >\n            <FormattedMessage id=\"VedtakKlageForm.ForhandvisBrev\" />\n          </a>\n        </FlexColumn>\n      </FlexRow>\n    </FlexContainer>\n  );\n};\n\nexport default VedtakKlageSubmitPanel;\n","import React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Heading, Label } from '@navikt/ds-react';\n\nimport {\n  klageVurdering as klageVurderingCodes,\n  behandlingResultatType,\n  isKlageOmgjort,\n  KodeverkType,\n  getKodeverknavnFn,\n  AksjonspunktCode,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Aksjonspunkt, KlageVurdering, AlleKodeverk, Behandlingsresultat } from '@navikt/fp-types';\nimport {\n  BekreftVedtakUtenTotrinnskontrollAp,\n  ForeslaVedtakAp,\n  ForeslaVedtakManueltAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { validerApKodeOgHentApEnum } from '@navikt/fp-prosess-felles';\n\nimport VedtakKlageSubmitPanel from './VedtakKlageSubmitPanel';\n\nexport const VEDTAK_KLAGE_FORM_NAME = 'VEDTAK_KLAGE_FORM';\n\nconst OMGJOER_TEKST_MAP = {\n  GUNST_MEDHOLD_I_KLAGE: 'VedtakKlageForm.KlageOmgjortGunst',\n  UGUNST_MEDHOLD_I_KLAGE: 'VedtakKlageForm.KlageOmgjortUgunst',\n  DELVIS_MEDHOLD_I_KLAGE: 'VedtakKlageForm.KlageOmgjortDelvis',\n} as Record<string, string>;\n\nexport type ForhandsvisData = {\n  gjelderVedtak: boolean;\n};\n\nconst getPreviewVedtakCallback = (previewVedtakCallback: (data: ForhandsvisData) => Promise<any>) => () =>\n  previewVedtakCallback({\n    gjelderVedtak: true,\n  });\n\ntype AksjonspunktData = Array<ForeslaVedtakAp | ForeslaVedtakManueltAp | BekreftVedtakUtenTotrinnskontrollAp>;\n\nconst getAvvisningsAarsaker = (klageVurderingResultat: KlageVurdering): string[] => {\n  if (klageVurderingResultat) {\n    if (klageVurderingResultat.klageFormkravResultatKA && klageVurderingResultat.klageVurderingResultatNK) {\n      return klageVurderingResultat.klageFormkravResultatKA.avvistArsaker;\n    }\n    if (klageVurderingResultat.klageFormkravResultatNFP) {\n      return klageVurderingResultat.klageFormkravResultatNFP.avvistArsaker;\n    }\n  }\n  return [];\n};\n\nconst getOmgjortAarsak = (klageVurderingResultat: KlageVurdering, alleKodeverk: AlleKodeverk): string | null => {\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n  if (klageVurderingResultat) {\n    if (klageVurderingResultat.klageVurderingResultatNK?.klageMedholdArsak) {\n      return getKodeverknavn(\n        klageVurderingResultat.klageVurderingResultatNK.klageMedholdArsak,\n        KodeverkType.KLAGE_MEDHOLD_ARSAK,\n      );\n    }\n    if (klageVurderingResultat.klageVurderingResultatNFP?.klageMedholdArsak) {\n      return getKodeverknavn(\n        klageVurderingResultat.klageVurderingResultatNFP.klageMedholdArsak,\n        KodeverkType.KLAGE_MEDHOLD_ARSAK,\n      );\n    }\n  }\n  return null;\n};\n\nconst getResultatText = (behandlingKlageVurdering: KlageVurdering): string | null => {\n  const klageResultat = behandlingKlageVurdering.klageVurderingResultatNK\n    ? behandlingKlageVurdering.klageVurderingResultatNK\n    : behandlingKlageVurdering.klageVurderingResultatNFP;\n  switch (klageResultat?.klageVurdering) {\n    case klageVurderingCodes.AVVIS_KLAGE:\n      return 'VedtakKlageForm.KlageAvvist';\n    case klageVurderingCodes.STADFESTE_YTELSESVEDTAK:\n      return 'VedtakKlageForm.KlageStadfestet';\n    case klageVurderingCodes.OPPHEVE_YTELSESVEDTAK:\n      return 'VedtakKlageForm.YtelsesvedtakOpphevet';\n    case klageVurderingCodes.HJEMSENDE_UTEN_Å_OPPHEVE:\n      return 'VedtakKlageForm.HjemmsendUtenOpphev';\n    case klageVurderingCodes.MEDHOLD_I_KLAGE:\n      return OMGJOER_TEKST_MAP[klageResultat?.klageVurderingOmgjoer || ''];\n    default:\n      return 'VedtakKlageForm.IkkeFastsatt';\n  }\n};\n\ninterface OwnProps {\n  behandlingsresultat: Behandlingsresultat;\n  behandlingPaaVent: boolean;\n  klageVurdering: KlageVurdering;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: AksjonspunktData) => Promise<void>;\n  previewVedtakCallback: (data: ForhandsvisData) => Promise<any>;\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\n/**\n * VedtakKlageForm\n */\nconst VedtakKlageForm: FunctionComponent<OwnProps> = ({\n  submitCallback,\n  klageVurdering,\n  behandlingsresultat,\n  readOnly,\n  aksjonspunkter,\n  previewVedtakCallback,\n  behandlingPaaVent,\n  alleKodeverk,\n}) => {\n  const avvistArsaker = useMemo(() => getAvvisningsAarsaker(klageVurdering), [klageVurdering]);\n  const omgjortAarsak = useMemo(() => getOmgjortAarsak(klageVurdering, alleKodeverk), [klageVurdering]);\n  const behandlingsResultatTekst = useMemo(() => getResultatText(klageVurdering), [klageVurdering]);\n  const klageVurderingResultat = klageVurdering.klageVurderingResultatNK\n    ? klageVurdering.klageVurderingResultatNK\n    : klageVurdering.klageVurderingResultatNFP;\n  const erOmgjort = isKlageOmgjort(behandlingsresultat.type);\n\n  const [isSubmitting, setSubmitting] = useState(false);\n  const lagreVedtak = useCallback(() => {\n    setSubmitting(true);\n\n    const behandlingAksjonspunktCodes = aksjonspunkter\n      .filter(ap => ap.status === aksjonspunktStatus.OPPRETTET)\n      .map(ap => ap.definisjon);\n    const input = behandlingAksjonspunktCodes.map(apCode => ({\n      kode: validerApKodeOgHentApEnum(\n        apCode,\n        AksjonspunktCode.FORESLA_VEDTAK,\n        AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n        AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n      ),\n    }));\n\n    submitCallback(input).then(() => setSubmitting(false));\n  }, [aksjonspunkter]);\n\n  const kodeverknavn = getKodeverknavnFn(alleKodeverk);\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"VedtakKlageForm.Header\" />\n      </Heading>\n      <VerticalSpacer twentyPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"VedtakKlageForm.Resultat\" />\n      </Label>\n      {behandlingsResultatTekst && (\n        <BodyShort size=\"small\">\n          <FormattedMessage id={behandlingsResultatTekst} />\n        </BodyShort>\n      )}\n      <VerticalSpacer sixteenPx />\n      {behandlingsresultat.type === behandlingResultatType.KLAGE_AVVIST && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakKlageForm.ArsakTilAvvisning\" />\n          </Label>\n          {avvistArsaker.map(arsak => (\n            <BodyShort size=\"small\" key={arsak}>\n              {kodeverknavn(arsak, KodeverkType.KLAGE_AVVIST_AARSAK)}\n            </BodyShort>\n          ))}\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {erOmgjort && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakKlageForm.ArsakTilOmgjoring\" />\n          </Label>\n          {omgjortAarsak}\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {behandlingsresultat.type === behandlingResultatType.KLAGE_YTELSESVEDTAK_OPPHEVET && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakKlageForm.ArsakTilOppheving\" />\n          </Label>\n          {omgjortAarsak}\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {klageVurderingResultat?.klageVurdertAv === 'NFP' && (\n        <VedtakKlageSubmitPanel\n          previewVedtakCallback={getPreviewVedtakCallback(previewVedtakCallback)}\n          readOnly={readOnly}\n          behandlingPaaVent={behandlingPaaVent}\n          lagreVedtak={lagreVedtak}\n          isSubmitting={isSubmitting}\n        />\n      )}\n    </>\n  );\n};\n\nexport default VedtakKlageForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { KlageVurdering, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport VedtakKlageForm, { ForhandsvisData } from './components/VedtakKlageForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  previewVedtakCallback: (data: ForhandsvisData) => Promise<any>;\n}\n\nconst VedtakKlageProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  klageVurdering,\n  aksjonspunkter,\n  submitCallback,\n  previewVedtakCallback,\n  isReadOnly,\n  alleKodeverk,\n}) => {\n  if (!behandling.behandlingsresultat) {\n    throw new Error(`behandlingsresultat finnes ikke for behandling ${behandling.uuid}`);\n  }\n\n  return (\n    <RawIntlProvider value={intl}>\n      <VedtakKlageForm\n        behandlingsresultat={behandling.behandlingsresultat}\n        behandlingPaaVent={behandling.behandlingPaaVent}\n        klageVurdering={klageVurdering}\n        aksjonspunkter={aksjonspunkter}\n        submitCallback={submitCallback}\n        previewVedtakCallback={previewVedtakCallback}\n        readOnly={isReadOnly}\n        alleKodeverk={alleKodeverk}\n      />\n    </RawIntlProvider>\n  );\n};\n\nexport default VedtakKlageProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Behandling, Behandlingsresultat, Fagsak, Aksjonspunkt } from '@navikt/ft-types';\nimport { VilkarUtfallType, AksjonspunktStatus, BehandlingResultatType } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { VedtakKlageProsessIndex, VedtakKlageBrevData } from '@navikt/fp-prosess-vedtak-klage';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { ForhåndsvisMeldingParams, KlageVurdering } from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport FatterVedtakStatusModal from '../../felles/modaler/vedtak/FatterVedtakStatusModal';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst lagForhandsvisCallback =\n  (\n    forhandsvisMelding: (params: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<any>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: VedtakKlageBrevData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst getVedtakStatus = (behandlingsresultat?: Behandlingsresultat, aksjonspunkter: Aksjonspunkt[] = []) => {\n  const harApentAksjonpunkt = aksjonspunkter.some(ap => ap.status === AksjonspunktStatus.OPPRETTET);\n  if (aksjonspunkter.length === 0 || harApentAksjonpunkt) {\n    return VilkarUtfallType.IKKE_VURDERT;\n  }\n\n  const resultatTypeCode = behandlingsresultat?.type;\n  if (\n    resultatTypeCode === BehandlingResultatType.HENLAGT_KLAGE_TRUKKET ||\n    resultatTypeCode === BehandlingResultatType.HENLAGT_FEILOPPRETTET\n  ) {\n    return VilkarUtfallType.IKKE_VURDERT;\n  }\n  if (\n    resultatTypeCode === BehandlingResultatType.KLAGE_AVVIST ||\n    resultatTypeCode === BehandlingResultatType.KLAGE_YTELSESVEDTAK_OPPHEVET\n  ) {\n    return VilkarUtfallType.IKKE_OPPFYLT;\n  }\n  return VilkarUtfallType.OPPFYLT;\n};\n\nconst getLagringSideeffekter =\n  (\n    toggleFatterVedtakModal: (skalViseModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n  ) =>\n  () => {\n    setSkalOppdatereEtterBekreftelseAvAp(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      toggleFatterVedtakModal(true);\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FORESLA_VEDTAK,\n  AksjonspunktCode.FATTER_VEDTAK,\n  AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n  AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering: KlageVurdering;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  opneSokeside: () => void;\n}\n\nconst KlageresultatProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  opneSokeside,\n  ...props\n}) => {\n  const intl = useIntl();\n\n  const [visFatterVedtakModal, toggleFatterVedtakModal] = useState(false);\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const lagringSideEffekter = getLagringSideeffekter(toggleFatterVedtakModal, setSkalOppdatereEtterBekreftelseAvAp);\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    lagForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const { aksjonspunkt: aksjonspunkter } = props.behandling;\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.KLAGE_RESULTAT}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.ResultatKlage' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={standardData => getVedtakStatus(standardData.behandling.behandlingsresultat, aksjonspunkter)}\n      lagringSideEffekter={lagringSideEffekter}\n      hentSkalMarkeresSomAktiv={standardData =>\n        getVedtakStatus(standardData.behandling.behandlingsresultat, aksjonspunkter) !== VilkarUtfallType.IKKE_VURDERT\n      }\n      renderPanel={data => (\n        <>\n          <FatterVedtakStatusModal\n            visModal={visFatterVedtakModal}\n            lukkModal={() => {\n              toggleFatterVedtakModal(false);\n              opneSokeside();\n            }}\n            tekst={intl.formatMessage({ id: 'FatterVedtakStatusModal.KlagenErFerdigbehandlet' })}\n          />\n          <VedtakKlageProsessIndex previewVedtakCallback={previewCallback} {...data} />\n        </>\n      )}\n    />\n  );\n};\n\nexport default KlageresultatProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { Behandling, BehandlingAppKontekst, Fagsak } from '@navikt/fp-types';\n\nimport FormKravFamOgPensjonProsessStegInitPanel from './prosessPaneler/FormKravFamOgPensjonProsessStegInitPanel';\nimport VurderingFamOgPensjonProsessStegInitPanel from './prosessPaneler/VurderingFamOgPensjonProsessStegInitPanel';\nimport FormKravKlageInstansProsessStegInitPanel from './prosessPaneler/FormKravKlageInstansProsessStegInitPanel';\nimport VurderingKlageInstansProsessStegInitPanel from './prosessPaneler/VurderingKlageInstansProsessStegInitPanel';\nimport KlageresultatProsessStegInitPanel from './prosessPaneler/KlageresultatProsessStegInitPanel';\nimport VergeFaktaInitPanel from '../fellesPaneler/fakta/VergeFaktaInitPanel';\nimport FaktaPanelInitProps from '../felles/typer/faktaPanelInitProps';\nimport ProsessPanelInitProps from '../felles/typer/prosessPanelInitProps';\nimport BehandlingContainer from '../felles/BehandlingContainer';\n\ninterface OwnProps {\n  behandling: Behandling;\n  fagsak: Fagsak;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  opneSokeside: () => void;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  alleBehandlinger: BehandlingAppKontekst[];\n}\n\nconst KlagePaneler: FunctionComponent<OwnProps> = ({\n  behandling,\n  fagsak,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  opneSokeside,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  alleBehandlinger,\n}) => {\n  const hentFaktaPaneler = useCallback((props: FaktaPanelInitProps) => <VergeFaktaInitPanel {...props} />, []);\n\n  const fagsakBehandlingerInfo = useMemo(\n    () =>\n      alleBehandlinger\n        .filter(b => !b.behandlingHenlagt)\n        .map(b => ({\n          uuid: b.uuid,\n          type: b.type,\n          status: b.status,\n          opprettet: b.opprettet,\n          avsluttet: b.avsluttet,\n          resultatType: b.behandlingsresultat?.type,\n        })),\n    [alleBehandlinger],\n  );\n\n  const hentProsessPaneler = useCallback(\n    (props: ProsessPanelInitProps) => (\n      <>\n        <FormKravFamOgPensjonProsessStegInitPanel {...props} alleBehandlinger={fagsakBehandlingerInfo} />\n        <VurderingFamOgPensjonProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n          oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n        />\n        <FormKravKlageInstansProsessStegInitPanel {...props} alleBehandlinger={fagsakBehandlingerInfo} />\n        <VurderingKlageInstansProsessStegInitPanel {...props} fagsak={fagsak} />\n        <KlageresultatProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n      </>\n    ),\n    [\n      fagsakBehandlingerInfo,\n      fagsak,\n      opneSokeside,\n      setSkalOppdatereEtterBekreftelseAvAp,\n      oppdaterProsessStegOgFaktaPanelIUrl,\n    ],\n  );\n\n  return (\n    <BehandlingContainer\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      valgtFaktaSteg={valgtFaktaSteg}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      hentFaktaPaneler={hentFaktaPaneler}\n      hentProsessPaneler={hentProsessPaneler}\n    />\n  );\n};\n\nexport default KlagePaneler;\n"],"names":["klageVurdering","klageVurderingOmgjoer","IKKE_PA_KLAGD_VEDTAK","skalLagreFritekstfelt","formVerdier","getPåklagdBehandling","avsluttedeBehandlinger","påklagdVedtak","behandling","erTilbakekreving","BehandlingType","påklagdTilbakekrevingInfo","erTilbakekrevingVedtak","transformValues","values","behandlingUuid","aksjonspunktCode","TempsaveKlageButton","saveKlage","spinner","readOnly","handleSubmit","jsx","Button","FormattedMessage","getPaKlagdVedtak","klageFormkavResultat","getKlagBareVedtak","intl","getKodeverknavn","b1","b2","moment","KodeverkType","DATE_TIME_FORMAT","getLovHjemmeler","AksjonspunktCode","buildInitialValues","klageFormkavResultatNfp","klageVurderingResultatNFP","FormkravKlageFormNfp","readOnlySubmitButton","alleKodeverk","submitCallback","lagreFormkravVurdering","formData","setFormData","useIntl","getKodeverknavnFn","klageBareVedtakOptions","initialValues","useMemo","formMethods","useForm","jsxs","Form","Heading","VerticalSpacer","Detail","VStack","AksjonspunktHelpTextTemp","HStack","SelectField","required","styles","RadioGroupPanel","ProsessStegBegrunnelseTextFieldNew","TextAreaField","value","ProsessStegSubmitButtonNew","FormkravKlageKa","klageFormkravResultatKA","underBehandlingKabal","behandletAvKabal","vedtak","b","_a","k","Fragment","Label","BodyShort","createIntl","messages","FormkravProsessIndex","aksjonspunkter","isReadOnly","RawIntlProvider","a","AKSJONSPUNKT_KODER","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","FormKravFamOgPensjonProsessStegInitPanel","alleBehandlinger","props","BehandlingStatus","isKlageAvvist","restBehandlingApiHooks","ProsessDefaultInitPanel","ProsessStegCode","data","BehandleKlageFormKa","begrunnelse","fritekstTilBrev","vurdering","klageMedholdArsak","medholdReasons","klageVurderingType","mo","klageVurderingOmgjoerType","_b","KlageVurderingRadioOptionsNfp","alleHjemmlerMedNavn","medholdOptions","hjemmelOptions","ArrowBox","FritekstKlageBrevTextField","sprakkode","hasValidText","getLanguageFromSprakkode","getBrevKode","klageVurdertAvKa","dokumentMalType","getBrevData","PreviewKlageLink","previewCallback","previewMessage","e","classNames","BekreftOgSubmitKlageModal","erModalÅpen","lukkModal","isSubmittable","isSubmitting","isDirty","valgtHjemmel","Modal","definertKodeverdiEllerUndefined","kode","lagHjemlerMedNavn","kodeverkNavn","kodeverkVerdier","lagHjemmelsKoder","klageVurderingResultat","BehandleKlageFormNfp","alleAktuelleHjemler","hjemmlerMedNavn","visSubmitModal","setVisSubmitModal","useState","formValues","useCallback","åpneModal","FritekstBrevTextField","FlexContainer","FlexRow","FlexColumn","hj","KlagevurderingProsessIndex","lagForhandsvisCallback","forhandsvisMelding","fagsak","brevData","response","forhandsvisDokument","lagKlageCallback","lagreKlageVurdering","aksjonspunktModel","getLagringSideeffekter","toggleKlageModal","setSkalOppdatereEtterBekreftelseAvAp","oppdaterProsessStegOgFaktaPanelIUrl","aksjonspunktModels","skalByttTilKlageinstans","apValue","klageVurderingKodeverk","VurderingFellesProsessStegInitPanel","opneSokeside","aksjonspunktKoder","prosessPanelKode","prosessPanelMenyTekst","visModalKlageBehandling","standardPanelProps","useStandardProsessPanelProps","lagringSideEffekter","lagreKlage","KlageBehandlingModal","VurderingFamOgPensjonProsessStegInitPanel","FormKravKlageInstansProsessStegInitPanel","VurderingKlageInstansProsessStegInitPanel","VedtakKlageSubmitPanel","behandlingPaaVent","previewVedtakCallback","lagreVedtak","forhåndsvis","OMGJOER_TEKST_MAP","getPreviewVedtakCallback","getAvvisningsAarsaker","getOmgjortAarsak","getResultatText","behandlingKlageVurdering","klageResultat","klageVurderingCodes","VedtakKlageForm","behandlingsresultat","avvistArsaker","omgjortAarsak","behandlingsResultatTekst","erOmgjort","isKlageOmgjort","setSubmitting","input","ap","aksjonspunktStatus","apCode","validerApKodeOgHentApEnum","kodeverknavn","behandlingResultatType","arsak","VedtakKlageProsessIndex","getVedtakStatus","harApentAksjonpunkt","AksjonspunktStatus","VilkarUtfallType","resultatTypeCode","BehandlingResultatType","toggleFatterVedtakModal","KlageresultatProsessStegInitPanel","visFatterVedtakModal","standardData","FatterVedtakStatusModal","KlagePaneler","valgtProsessSteg","valgtFaktaSteg","hentFaktaPaneler","VergeFaktaInitPanel","fagsakBehandlingerInfo","hentProsessPaneler","BehandlingContainer"],"mappings":"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"}