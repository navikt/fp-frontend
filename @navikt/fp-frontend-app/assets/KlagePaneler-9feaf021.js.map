{"version":3,"file":"KlagePaneler-9feaf021.js","sources":["../../../../packages/kodeverk/src/klageVurdering.ts","../../../../packages/kodeverk/src/klageVurderingOmgjoer.ts","../../../../packages/prosess-formkrav/src/components/FormkravKlageForm.tsx","../../../../packages/prosess-formkrav/src/components/FormkravKlageFormNfp.tsx","../../../../packages/prosess-formkrav/src/components/FormkravKlageKa.tsx","../../../../packages/prosess-formkrav/src/FormkravProsessIndex.tsx","../../src/behandling/klage/prosessPaneler/FormKravFamOgPensjonProsessStegInitPanel.tsx","../../../../packages/prosess-klagevurdering/src/components/ka/BehandleKlageFormKa.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/KlageVurderingRadioOptionsNfp.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/FritekstKlageBrevTextField.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/PreviewKlageLink.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/TempsaveKlageButton.tsx","../../../../packages/prosess-klagevurdering/src/components/nfp/BehandleKlageFormNfp.tsx","../../../../packages/prosess-klagevurdering/src/KlagevurderingProsessIndex.tsx","../../src/behandling/klage/prosessPaneler/VurderingFellesProsessStegInitPanel.tsx","../../src/behandling/klage/prosessPaneler/VurderingFamOgPensjonProsessStegInitPanel.tsx","../../src/behandling/klage/prosessPaneler/FormKravKlageInstansProsessStegInitPanel.tsx","../../src/behandling/klage/prosessPaneler/VurderingKlageInstansProsessStegInitPanel.tsx","../../../../packages/prosess-vedtak-klage/src/components/VedtakKlageSubmitPanel.tsx","../../../../packages/prosess-vedtak-klage/src/components/VedtakKlageForm.tsx","../../../../packages/prosess-vedtak-klage/src/VedtakKlageProsessIndex.tsx","../../src/behandling/klage/prosessPaneler/KlageresultatProsessStegInitPanel.tsx","../../src/behandling/klage/KlagePaneler.tsx"],"sourcesContent":["const klageVurdering = {\n  STADFESTE_YTELSESVEDTAK: 'STADFESTE_YTELSESVEDTAK',\n  MEDHOLD_I_KLAGE: 'MEDHOLD_I_KLAGE',\n  OPPHEVE_YTELSESVEDTAK: 'OPPHEVE_YTELSESVEDTAK',\n  AVVIS_KLAGE: 'AVVIS_KLAGE',\n  HJEMSENDE_UTEN_Å_OPPHEVE: 'HJEMSENDE_UTEN_Å_OPPHEVE',\n};\n\nexport default klageVurdering;\n","const klageVurderingOmgjoer = {\n  DELVIS_MEDHOLD_I_KLAGE: 'DELVIS_MEDHOLD_I_KLAGE',\n  GUNST_MEDHOLD_I_KLAGE: 'GUNST_MEDHOLD_I_KLAGE',\n  UGUNST_MEDHOLD_I_KLAGE: 'UGUNST_MEDHOLD_I_KLAGE',\n  UDEFINERT: '-',\n};\n\nexport default klageVurderingOmgjoer;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage, useIntl, IntlShape } from 'react-intl';\nimport { Detail, Heading } from '@navikt/ds-react';\n\nimport { KodeverkType, getKodeverknavnFn, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport {\n  AksjonspunktHelpTextTemp,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\nimport { DATE_TIME_FORMAT } from '@navikt/ft-utils';\nimport { required } from '@navikt/ft-form-validators';\nimport { AlleKodeverk, KlageVurdering } from '@navikt/fp-types';\n\nimport AvsluttetBehandling from '../types/avsluttetBehandlingTsType';\nimport styles from './formkravKlageForm.module.css';\n\nexport const IKKE_PA_KLAGD_VEDTAK = 'ikkePaklagdVedtak';\n\nexport const getPaKlagdVedtak = (klageFormkavResultat?: KlageVurdering['klageFormkravResultatKA']): string =>\n  klageFormkavResultat?.paKlagdBehandlingUuid ? `${klageFormkavResultat.paKlagdBehandlingUuid}` : IKKE_PA_KLAGD_VEDTAK;\n\nconst getKlagBareVedtak = (\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  intl: IntlShape,\n  getKodeverknavn: (kode: string, kodeverk: KodeverkType) => string,\n): ReactElement[] => {\n  const klagBareVedtak = [\n    <option key=\"formkrav\" value={IKKE_PA_KLAGD_VEDTAK}>\n      {intl.formatMessage({ id: 'Klage.Formkrav.IkkePåklagdVedtak' })}\n    </option>,\n  ];\n  return klagBareVedtak.concat(\n    [...avsluttedeBehandlinger]\n      .sort((b1, b2) => moment(b1.avsluttet).diff(moment(b2.avsluttet)))\n      .map(behandling => (\n        <option key={behandling.uuid} value={`${behandling.uuid}`}>\n          {`${getKodeverknavn(behandling.type, KodeverkType.BEHANDLING_TYPE)} ${moment(behandling.avsluttet).format(\n            DATE_TIME_FORMAT,\n          )}`}\n        </option>\n      )),\n  );\n};\n\nconst getLovHjemmeler = (aksjonspunktCode: string): string =>\n  aksjonspunktCode === AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP ? 'Klage.LovhjemmelNFP' : 'Klage.LovhjemmelKA';\n\ninterface OwnProps {\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n  aksjonspunktCode: string;\n  readOnly: boolean;\n  readOnlySubmitButton?: boolean;\n  alleKodeverk: AlleKodeverk;\n  isSubmitting: boolean;\n  isDirty: boolean;\n}\n\n/**\n * FormkravKlageForm\n *\n * Presentasjonskomponent. Setter opp aksjonspunktet for formkrav klage (NFP og KA).\n */\nconst FormkravKlageForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  readOnlySubmitButton,\n  aksjonspunktCode,\n  avsluttedeBehandlinger,\n  alleKodeverk,\n  isSubmitting,\n  isDirty,\n}) => {\n  const intl = useIntl();\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n  const klageBareVedtakOptions = getKlagBareVedtak(avsluttedeBehandlinger, intl, getKodeverknavn);\n\n  return (\n    <>\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Klage.Formkrav.Title' })}</Heading>\n      <VerticalSpacer fourPx />\n      <Detail>{intl.formatMessage({ id: getLovHjemmeler(aksjonspunktCode) })}</Detail>\n      <VerticalSpacer fourPx />\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={!readOnlySubmitButton}>\n        {[<FormattedMessage id=\"Klage.Formkrav.HelpText\" key={aksjonspunktCode} />]}\n      </AksjonspunktHelpTextTemp>\n      <VerticalSpacer sixteenPx />\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn className={styles.col}>\n            <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} />\n          </FlexColumn>\n          <FlexColumn className={styles.col}>\n            <SelectField\n              readOnly={readOnly}\n              validate={[required]}\n              name=\"vedtak\"\n              label={intl.formatMessage({ id: 'Klage.Formkrav.VelgVedtak' })}\n              selectValues={klageBareVedtakOptions}\n              className={styles.selectBredde}\n            />\n            <VerticalSpacer sixteenPx />\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <RadioGroupPanel\n                    name=\"erKlagerPart\"\n                    label={intl.formatMessage({ id: 'Klage.Formkrav.ErKlagerPart' })}\n                    validate={[required]}\n                    isReadOnly={readOnly}\n                    isHorizontal\n                    isTrueOrFalseSelection\n                    radios={[\n                      {\n                        value: 'true',\n                        label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                      },\n                      {\n                        value: 'false',\n                        label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                      },\n                    ]}\n                  />\n                </FlexColumn>\n                <VerticalSpacer sixteenPx />\n                <FlexColumn>\n                  <RadioGroupPanel\n                    name=\"erKonkret\"\n                    label={intl.formatMessage({ id: 'Klage.Formkrav.ErKonkret' })}\n                    validate={[required]}\n                    isReadOnly={readOnly}\n                    isHorizontal\n                    isTrueOrFalseSelection\n                    radios={[\n                      {\n                        value: 'true',\n                        label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                      },\n                      {\n                        value: 'false',\n                        label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                      },\n                    ]}\n                  />\n                </FlexColumn>\n              </FlexRow>\n            </FlexContainer>\n            <VerticalSpacer sixteenPx />\n            <FlexRow>\n              <FlexColumn>\n                <RadioGroupPanel\n                  name=\"erFristOverholdt\"\n                  label={intl.formatMessage({ id: 'Klage.Formkrav.ErFristOverholdt' })}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      value: 'true',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                    },\n                    {\n                      value: 'false',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                    },\n                  ]}\n                />\n              </FlexColumn>\n              <VerticalSpacer sixteenPx />\n              <FlexColumn>\n                <RadioGroupPanel\n                  name=\"erSignert\"\n                  label={intl.formatMessage({ id: 'Klage.Formkrav.ErSignert' })}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      value: 'true',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Ja' }),\n                    },\n                    {\n                      value: 'false',\n                      label: intl.formatMessage({ id: 'Klage.Formkrav.Nei' }),\n                    },\n                  ]}\n                />\n              </FlexColumn>\n            </FlexRow>\n          </FlexColumn>\n        </FlexRow>\n      </FlexContainer>\n      <div className={styles.confirmVilkarForm}>\n        <ProsessStegSubmitButtonNew\n          isReadOnly={readOnly}\n          isSubmittable={!readOnlySubmitButton}\n          isSubmitting={isSubmitting}\n          isDirty={isDirty}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default FormkravKlageForm;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { AksjonspunktCode, behandlingType as BehandlingType } from '@navikt/fp-kodeverk';\nimport { KlageVurdering, AlleKodeverk } from '@navikt/fp-types';\nimport { KlageFormkravAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport FormkravKlageForm, { getPaKlagdVedtak, IKKE_PA_KLAGD_VEDTAK } from './FormkravKlageForm';\nimport AvsluttetBehandling from '../types/avsluttetBehandlingTsType';\n\ntype FormValues = {\n  erKlagerPart?: boolean;\n  erFristOverholdt?: boolean;\n  erKonkret?: boolean;\n  erSignert?: boolean;\n  begrunnelse?: string;\n  vedtak?: string;\n};\n\ntype TilbakekrevingInfo = {\n  tilbakekrevingUuid?: string;\n  tilbakekrevingVedtakDato?: string;\n  tilbakekrevingBehandlingType?: string;\n};\n\nconst buildInitialValues = (klageVurdering: KlageVurdering): FormValues => {\n  const klageFormkavResultatNfp = klageVurdering ? klageVurdering.klageFormkravResultatNFP : null;\n  return {\n    vedtak: klageFormkavResultatNfp ? getPaKlagdVedtak(klageFormkavResultatNfp) : '',\n    begrunnelse: klageFormkavResultatNfp ? klageFormkavResultatNfp.begrunnelse : undefined,\n    erKlagerPart: klageFormkavResultatNfp ? klageFormkavResultatNfp.erKlagerPart : undefined,\n    erKonkret: klageFormkavResultatNfp ? klageFormkavResultatNfp.erKlageKonkret : undefined,\n    erFristOverholdt: klageFormkavResultatNfp ? klageFormkavResultatNfp.erKlagefirstOverholdt : undefined,\n    erSignert: klageFormkavResultatNfp ? klageFormkavResultatNfp.erSignert : undefined,\n  };\n};\n\nconst getPåklagdBehandling = (\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  påklagdVedtak: string,\n): AvsluttetBehandling | undefined => avsluttedeBehandlinger.find(behandling => behandling.uuid === påklagdVedtak);\n\nexport const erTilbakekreving = (avsluttedeBehandlinger: AvsluttetBehandling[], påklagdVedtak: string): boolean => {\n  const behandling = getPåklagdBehandling(avsluttedeBehandlinger, påklagdVedtak);\n  return (\n    !!behandling &&\n    (behandling.type === BehandlingType.TILBAKEKREVING || behandling.type === BehandlingType.TILBAKEKREVING_REVURDERING)\n  );\n};\n\nexport const påklagdTilbakekrevingInfo = (\n  avsluttedeBehandlinger: AvsluttetBehandling[],\n  påklagdVedtak: string,\n): TilbakekrevingInfo | undefined => {\n  const erTilbakekrevingVedtak = erTilbakekreving(avsluttedeBehandlinger, påklagdVedtak);\n  const behandling = getPåklagdBehandling(avsluttedeBehandlinger, påklagdVedtak);\n  return behandling && erTilbakekrevingVedtak\n    ? {\n        tilbakekrevingUuid: behandling.uuid,\n        tilbakekrevingVedtakDato: behandling.avsluttet,\n        tilbakekrevingBehandlingType: behandling.type,\n      }\n    : undefined;\n};\n\nconst transformValues = (values: FormValues, avsluttedeBehandlinger: AvsluttetBehandling[]): KlageFormkravAp => ({\n  erKlagerPart: values.erKlagerPart!,\n  erFristOverholdt: values.erFristOverholdt!,\n  erKonkret: values.erKonkret!,\n  erSignert: values.erSignert!,\n  begrunnelse: values.begrunnelse,\n  kode: AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP,\n  vedtakBehandlingUuid: values.vedtak === IKKE_PA_KLAGD_VEDTAK ? undefined : values.vedtak,\n  erTilbakekreving: erTilbakekreving(avsluttedeBehandlinger, values.vedtak!),\n  tilbakekrevingInfo: påklagdTilbakekrevingInfo(avsluttedeBehandlinger, values.vedtak!),\n});\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  submitCallback: (data: KlageFormkravAp) => Promise<void>;\n  readOnlySubmitButton?: boolean;\n  alleKodeverk: AlleKodeverk;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n  readOnly: boolean;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * FormkravklageformNfp\n *\n * Presentasjonskomponent. Setter opp aksjonspunktet for formkrav klage (NFP).\n */\nconst FormkravKlageFormNfp: FunctionComponent<OwnProps> = ({\n  readOnly,\n  klageVurdering,\n  readOnlySubmitButton,\n  alleKodeverk,\n  avsluttedeBehandlinger,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const initialValues = useMemo(() => buildInitialValues(klageVurdering), [klageVurdering]);\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values, avsluttedeBehandlinger))}\n      setDataOnUnmount={setFormData}\n    >\n      <FormkravKlageForm\n        readOnly={readOnly}\n        readOnlySubmitButton={readOnlySubmitButton}\n        aksjonspunktCode={AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP}\n        alleKodeverk={alleKodeverk}\n        avsluttedeBehandlinger={avsluttedeBehandlinger}\n        isSubmitting={formMethods.formState.isSubmitting}\n        isDirty={formMethods.formState.isDirty}\n      />\n    </Form>\n  );\n};\n\nexport default FormkravKlageFormNfp;\n","import React, { FunctionComponent } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { BodyShort, Heading, Label } from '@navikt/ds-react';\nimport { DATE_TIME_FORMAT } from '@navikt/ft-utils';\nimport { KodeverkType } from '@navikt/ft-kodeverk';\n\nimport { AlleKodeverk, KlageVurdering } from '@navikt/fp-types';\n\nimport AvsluttetBehandling from '../types/avsluttetBehandlingTsType';\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  alleKodeverk: AlleKodeverk;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n}\n\n/**\n * FormkravKlageKa\n *\n * Readonly panel for formkrav klage (KA).\n */\nconst FormkravKlageKa: FunctionComponent<OwnProps> = ({ klageVurdering, alleKodeverk, avsluttedeBehandlinger }) => {\n  const intl = useIntl();\n\n  const { klageFormkravResultatKA, underBehandlingKabal, behandletAvKabal } = klageVurdering;\n\n  let vedtak = intl.formatMessage({ id: 'Klage.Formkrav.IkkePåklagdVedtak' });\n  if (klageFormkravResultatKA?.paKlagdBehandlingUuid) {\n    const behandling = avsluttedeBehandlinger.find(b => b.uuid === klageFormkravResultatKA.paKlagdBehandlingUuid);\n    if (behandling) {\n      const navn = alleKodeverk[KodeverkType.BEHANDLING_TYPE].find(k => k.kode === behandling.type)?.navn;\n      vedtak = `${navn} ${moment(behandling.avsluttet).format(DATE_TIME_FORMAT)}`;\n    }\n  }\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"Klage.Formkrav.Title\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      {underBehandlingKabal && (\n        <>\n          <Heading size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.SeKabalText\" />\n          </Heading>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {!underBehandlingKabal && !behandletAvKabal && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.VelgVedtak\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">{vedtak}</BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErKlagerPart\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erKlagerPart ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErKonkret\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erKlageKonkret ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErFristOverholdt\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erKlagefirstOverholdt ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.ErSignert\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">\n            {klageFormkravResultatKA?.erSignert ? (\n              <FormattedMessage id=\"Klage.Formkrav.Ja\" />\n            ) : (\n              <FormattedMessage id=\"Klage.Formkrav.Nei\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.Formkrav.Vurdering\" />\n          </Label>\n          <VerticalSpacer fourPx />\n          <BodyShort size=\"small\">{klageFormkravResultatKA?.begrunnelse}</BodyShort>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormkravKlageKa;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { KlageVurdering, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport messages from '../i18n/nb_NO.json';\nimport FormkravKlageFormNfp from './components/FormkravKlageFormNfp';\nimport FormkravKlageKa from './components/FormkravKlageKa';\nimport AvsluttetBehandling from './types/avsluttetBehandlingTsType';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  klageVurdering?: KlageVurdering;\n  avsluttedeBehandlinger: AvsluttetBehandling[];\n}\n\nconst FormkravProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  klageVurdering = {},\n  avsluttedeBehandlinger,\n  aksjonspunkter,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  alleKodeverk,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    {aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP) && (\n      <FormkravKlageFormNfp\n        klageVurdering={klageVurdering}\n        submitCallback={submitCallback}\n        readOnly={isReadOnly}\n        readOnlySubmitButton={readOnlySubmitButton}\n        alleKodeverk={alleKodeverk}\n        avsluttedeBehandlinger={avsluttedeBehandlinger}\n        formData={formData}\n        setFormData={setFormData}\n      />\n    )}\n    {klageVurdering.klageFormkravResultatKA && (\n      <FormkravKlageKa\n        klageVurdering={klageVurdering}\n        alleKodeverk={alleKodeverk}\n        avsluttedeBehandlinger={avsluttedeBehandlinger}\n      />\n    )}\n  </RawIntlProvider>\n);\n\nexport default FormkravProsessIndex;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { BehandlingStatus, BehandlingType } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode, isKlageAvvist } from '@navikt/fp-kodeverk';\nimport { FormkravProsessIndex } from '@navikt/fp-prosess-formkrav';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { KlageVurdering } from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDERING_AV_FORMKRAV_KLAGE_NFP];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering?: KlageVurdering;\n};\n\ninterface OwnProps {\n  alleBehandlinger: {\n    uuid: string;\n    type: string;\n    status: string;\n    opprettet: string;\n    avsluttet?: string;\n    resultatType?: string;\n  }[];\n}\n\nconst FormKravFamOgPensjonProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  alleBehandlinger,\n  ...props\n}) => {\n  const intl = useIntl();\n\n  const avsluttedeBehandlinger = useMemo(\n    () =>\n      alleBehandlinger\n        .filter(b => b.status === BehandlingStatus.AVSLUTTET)\n        .filter(\n          b => (b.type !== BehandlingType.KLAGE || isKlageAvvist(b.resultatType)) && b.type !== BehandlingType.ANKE,\n        ),\n    [alleBehandlinger],\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.FORMKRAV_KLAGE_NAV_FAMILIE_OG_PENSJON}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.FormkravKlageNFP' })}\n      skalPanelVisesIMeny={() => true}\n      renderPanel={data => <FormkravProsessIndex avsluttedeBehandlinger={avsluttedeBehandlinger} {...data} />}\n    />\n  );\n};\n\nexport default FormKravFamOgPensjonProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Heading, Label } from '@navikt/ds-react';\n\nimport {\n  KodeverkType,\n  klageVurdering as klageVurderingType,\n  klageVurderingOmgjoer as klageVurderingOmgjoerType,\n} from '@navikt/fp-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { KlageVurdering, AlleKodeverk } from '@navikt/fp-types';\n\ninterface OwnProps {\n  alleKodeverk: AlleKodeverk;\n  klageVurdering: KlageVurdering;\n}\n\n/**\n * BehandleklageformNfp\n *\n * Setter opp readonly-panel for behandling av klage (KA).\n */\nconst BehandleKlageFormKa: FunctionComponent<OwnProps> = ({ klageVurdering, alleKodeverk }) => {\n  const intl = useIntl();\n\n  const {\n    begrunnelse,\n    fritekstTilBrev,\n    klageVurdering: vurdering,\n    klageMedholdArsak,\n    klageVurderingOmgjoer,\n  } = klageVurdering.klageVurderingResultatNK || {};\n\n  const medholdReasons = alleKodeverk[KodeverkType.KLAGE_MEDHOLD_ARSAK];\n\n  return (\n    <>\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Klage.ResolveKlage.Title' })}</Heading>\n      <VerticalSpacer sixteenPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"KlageVurderingRadioOptionsKa.VurderingForKlage\" />\n      </Label>\n      <BodyShort size=\"small\">\n        {vurdering === klageVurderingType.STADFESTE_YTELSESVEDTAK && (\n          <FormattedMessage id=\"Klage.ResolveKlage.KeepVedtakNk\" />\n        )}\n        {vurdering === klageVurderingType.MEDHOLD_I_KLAGE && <FormattedMessage id=\"Klage.ResolveKlage.ChangeVedtak\" />}\n        {vurdering === klageVurderingType.HJEMSENDE_UTEN_Å_OPPHEVE && (\n          <FormattedMessage id=\"Klage.Behandle.Hjemsendt\" />\n        )}\n        {vurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK && (\n          <FormattedMessage id=\"Klage.ResolveKlage.NullifyVedtak\" />\n        )}\n      </BodyShort>\n      <VerticalSpacer sixteenPx />\n      {vurdering === klageVurderingType.MEDHOLD_I_KLAGE && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.ResolveKlage.Cause\" />\n          </Label>\n          <BodyShort size=\"small\">{medholdReasons.find(mo => mo.kode === klageMedholdArsak)?.navn}</BodyShort>\n          <VerticalSpacer sixteenPx />\n          <BodyShort size=\"small\">\n            {klageVurderingOmgjoer === klageVurderingOmgjoerType.GUNST_MEDHOLD_I_KLAGE && (\n              <FormattedMessage id=\"Klage.Behandle.Omgjort\" />\n            )}\n            {klageVurderingOmgjoer === klageVurderingOmgjoerType.UGUNST_MEDHOLD_I_KLAGE && (\n              <FormattedMessage id=\"Klage.Behandle.Ugunst\" />\n            )}\n            {klageVurderingOmgjoer === klageVurderingOmgjoerType.DELVIS_MEDHOLD_I_KLAGE && (\n              <FormattedMessage id=\"Klage.Behandle.DelvisOmgjort\" />\n            )}\n          </BodyShort>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {(vurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK ||\n        vurdering === klageVurderingType.HJEMSENDE_UTEN_Å_OPPHEVE) && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Klage.ResolveKlage.Cause\" />\n          </Label>\n          <BodyShort size=\"small\">{medholdReasons.find(mo => mo.kode === klageMedholdArsak)?.navn}</BodyShort>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      <Label size=\"small\">\n        <FormattedMessage id=\"FritekstKlageBrevTextField.Fritekst\" />\n      </Label>\n      <BodyShort size=\"small\">{fritekstTilBrev}</BodyShort>\n      <VerticalSpacer sixteenPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"KlageVurderingRadioOptionsKa.Begrunnelse\" />\n      </Label>\n      <BodyShort size=\"small\">{begrunnelse}</BodyShort>\n      <VerticalSpacer sixteenPx />\n    </>\n  );\n};\n\nexport default BehandleKlageFormKa;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  klageVurdering as klageVurderingType,\n  klageVurderingOmgjoer as klageVurderingOmgjoerType,\n} from '@navikt/fp-kodeverk';\nimport { required } from '@navikt/ft-form-validators';\nimport { ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport { KodeverkMedNavn } from '@navikt/fp-types';\n\nimport styles from './klageVurderingRadioOptionsNfp.module.css';\n\ninterface OwnProps {\n  readOnly: boolean;\n  medholdReasons: KodeverkMedNavn[];\n  alleHjemler: KodeverkMedNavn[];\n  alleAktuelleHjemler: string[];\n  klageVurdering?: string;\n}\n\nconst lagHjemler = (kodeverkNavn: KodeverkMedNavn[], kodeverkVerdier: string[]): KodeverkMedNavn[] =>\n  kodeverkNavn.filter(({ kode }) => kodeverkVerdier.includes(kode)).sort((a, b) => a.kode.localeCompare(b.kode));\nconst lagHjemmelsKoder = (kodeverkVerdier: string[]): string[] => kodeverkVerdier.map(kode => kode);\n\nconst KlageVurderingRadioOptionsNfp: FunctionComponent<OwnProps> = ({\n  readOnly,\n  medholdReasons,\n  alleHjemler,\n  alleAktuelleHjemler,\n  klageVurdering,\n}) => {\n  const intl = useIntl();\n  const medholdOptions = medholdReasons.map((mo: KodeverkMedNavn) => (\n    <option key={mo.kode} value={mo.kode}>\n      {mo.navn}\n    </option>\n  ));\n  const hjemmelOptions = lagHjemler(alleHjemler, lagHjemmelsKoder(alleAktuelleHjemler)).map((mo: KodeverkMedNavn) => (\n    <option key={mo.kode} value={mo.kode}>\n      {mo.navn}\n    </option>\n  ));\n  return (\n    <>\n      <RadioGroupPanel\n        name=\"klageVurdering\"\n        validate={[required]}\n        isReadOnly={readOnly}\n        isHorizontal\n        radios={[\n          {\n            value: klageVurderingType.MEDHOLD_I_KLAGE,\n            label: intl.formatMessage({ id: 'Klage.ResolveKlage.ChangeVedtak' }),\n          },\n          {\n            value: klageVurderingType.STADFESTE_YTELSESVEDTAK,\n            label: intl.formatMessage({ id: 'Klage.ResolveKlage.KeepVedtakNfp' }),\n          },\n        ]}\n      />\n      {klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <ArrowBox>\n            <SelectField\n              readOnly={readOnly}\n              name=\"klageMedholdArsak\"\n              selectValues={medholdOptions}\n              className={readOnly ? styles.selectReadOnly : styles.select}\n              label={intl.formatMessage({ id: 'Klage.ResolveKlage.Cause' })}\n              validate={[required]}\n            />\n            <VerticalSpacer sixteenPx />\n            <RadioGroupPanel\n              name=\"klageVurderingOmgjoer\"\n              validate={[required]}\n              isReadOnly={readOnly}\n              radios={[\n                {\n                  value: klageVurderingOmgjoerType.GUNST_MEDHOLD_I_KLAGE,\n                  label: intl.formatMessage({ id: 'Klage.Behandle.Omgjort' }),\n                },\n                {\n                  value: klageVurderingOmgjoerType.UGUNST_MEDHOLD_I_KLAGE,\n                  label: intl.formatMessage({ id: 'Klage.Behandle.Ugunst' }),\n                },\n                {\n                  value: klageVurderingOmgjoerType.DELVIS_MEDHOLD_I_KLAGE,\n                  label: intl.formatMessage({ id: 'Klage.Behandle.DelvisOmgjort' }),\n                },\n              ]}\n            />\n          </ArrowBox>\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n      <SelectField\n        readOnly={readOnly}\n        name=\"klageHjemmel\"\n        selectValues={hjemmelOptions}\n        className={readOnly ? styles.selectReadOnly : styles.select}\n        label={intl.formatMessage({ id: 'Klage.ResolveKlage.Hjemmel' })}\n        validate={[required]}\n      />\n      <VerticalSpacer sixteenPx />\n    </>\n  );\n};\n\nexport default KlageVurderingRadioOptionsNfp;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { getLanguageFromSprakkode } from '@navikt/ft-utils';\nimport { hasValidText, required } from '@navikt/ft-form-validators';\nimport { TextAreaField } from '@navikt/ft-form-hooks';\n\nimport styles from './fritekstKlageBrevTextField.module.css';\n\ninterface OwnProps {\n  sprakkode: string;\n  readOnly?: boolean;\n}\n\nconst FritekstKlageBrevTextField: FunctionComponent<OwnProps> = ({ sprakkode, readOnly }) => (\n  <div className={styles.fritekstTilBrevTextArea}>\n    <TextAreaField\n      name=\"fritekstTilBrev\"\n      label={useIntl().formatMessage({ id: 'FritekstKlageBrevTextField.Fritekst' })}\n      validate={[required, hasValidText]}\n      readOnly={readOnly}\n      maxLength={100000}\n      badges={[\n        {\n          type: 'info',\n          titleText: getLanguageFromSprakkode(sprakkode),\n        },\n      ]}\n      // Må erstatte bindestrek kopiert inn fra Word med vanlig bindestrek\n      parse={value => value.toString().replaceAll('‑', '-').replaceAll('\\t', ' ')}\n    />\n  </div>\n);\n\nFritekstKlageBrevTextField.defaultProps = {\n  readOnly: true,\n};\n\nexport default FritekstKlageBrevTextField;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport { dokumentMalType, klageVurdering as klageVurderingType } from '@navikt/fp-kodeverk';\n\nimport styles from './previewKlageLink.module.css';\n\nconst getBrevKode = (klageVurdertAvKa: boolean, klageVurdering?: string): string | undefined => {\n  switch (klageVurdering) {\n    case klageVurderingType.STADFESTE_YTELSESVEDTAK:\n      return klageVurdertAvKa ? dokumentMalType.KLAGE_STADFESTET : dokumentMalType.KLAGE_OVERSENDT;\n    case klageVurderingType.OPPHEVE_YTELSESVEDTAK:\n      return dokumentMalType.KLAGE_HJEMSENDT;\n    case klageVurderingType.HJEMSENDE_UTEN_Å_OPPHEVE:\n      return dokumentMalType.KLAGE_HJEMSENDT;\n    case klageVurderingType.MEDHOLD_I_KLAGE:\n      return dokumentMalType.KLAGE_OMGJORING;\n    default:\n      return undefined;\n  }\n};\n\nexport type BrevData = {\n  fritekst: string;\n  dokumentMal?: string;\n  erOpphevetKlage: boolean;\n};\n\nconst getBrevData = (klageVurdering?: string, fritekstTilBrev?: string): BrevData => ({\n  fritekst: fritekstTilBrev || '',\n  dokumentMal: getBrevKode(false, klageVurdering),\n  erOpphevetKlage: klageVurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK,\n});\n\ninterface OwnProps {\n  previewCallback: (data: BrevData) => Promise<any>;\n  fritekstTilBrev?: string;\n  klageVurdering?: string;\n}\n\nconst PreviewKlageLink: FunctionComponent<OwnProps> = ({ previewCallback, fritekstTilBrev, klageVurdering }) => {\n  const previewMessage = (e: React.MouseEvent | React.KeyboardEvent): void => {\n    previewCallback(getBrevData(klageVurdering, fritekstTilBrev));\n    e.preventDefault();\n  };\n  return (\n    <a\n      href=\"\"\n      onClick={e => {\n        previewMessage(e);\n      }}\n      onKeyDown={e => (e.key === 'Enter' ? previewMessage(e) : null)}\n      className={classNames(styles.previewLink, 'lenke lenke--frittstaende')}\n    >\n      <FormattedMessage id=\"PreviewKlageLink.ForhandvisBrev\" />\n    </a>\n  );\n};\n\nexport default PreviewKlageLink;\n","import React, { FunctionComponent } from 'react';\nimport { UseFormHandleSubmit } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\n\nimport { klageVurdering as klageVurderingType } from '@navikt/fp-kodeverk';\nimport KlageFormType from '../../types/klageFormType';\n\ntype FormValues = {\n  klageVurdering?: string;\n  fritekstTilBrev?: string;\n  klageMedholdArsak?: string;\n  klageVurderingOmgjoer?: string;\n  klageHjemmel?: string;\n  begrunnelse?: string;\n};\n\nexport type TransformedValues = {\n  kode: string;\n  klageMedholdArsak?: string;\n  klageVurderingOmgjoer?: string;\n  klageHjemmel?: string;\n  fritekstTilBrev: string;\n  begrunnelse: string;\n  klageVurdering: string;\n};\n\nconst transformValues = (values: FormValues, aksjonspunktCode: string): TransformedValues => ({\n  kode: aksjonspunktCode,\n  klageMedholdArsak:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ||\n    values.klageVurdering === klageVurderingType.OPPHEVE_YTELSESVEDTAK\n      ? values.klageMedholdArsak\n      : undefined,\n  klageVurderingOmgjoer:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ? values.klageVurderingOmgjoer : undefined,\n  klageHjemmel: values.klageHjemmel,\n  fritekstTilBrev: values.fritekstTilBrev!,\n  begrunnelse: values.begrunnelse!,\n  klageVurdering: values.klageVurdering!,\n});\n\ninterface OwnProps {\n  aksjonspunktCode: string;\n  saveKlage: (data: TransformedValues) => Promise<any>;\n  spinner?: boolean;\n  readOnly?: boolean;\n  handleSubmit: UseFormHandleSubmit<KlageFormType>;\n}\n\nconst TempsaveKlageButton: FunctionComponent<OwnProps> = ({\n  saveKlage,\n  spinner,\n  aksjonspunktCode,\n  readOnly,\n  handleSubmit,\n}) => {\n  if (!readOnly) {\n    return (\n      <Button\n        size=\"small\"\n        variant=\"primary\"\n        loading={spinner}\n        onClick={handleSubmit((values: FormValues) => saveKlage(transformValues(values, aksjonspunktCode)))}\n        type=\"button\"\n      >\n        <FormattedMessage id=\"Klage.ResolveKlage.TempSaveButton\" />\n      </Button>\n    );\n  }\n  return null;\n};\n\nTempsaveKlageButton.defaultProps = {\n  spinner: false,\n  readOnly: false,\n};\n\nexport default TempsaveKlageButton;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Heading } from '@navikt/ds-react';\n\nimport { Form } from '@navikt/ft-form-hooks';\n\nimport { AksjonspunktCode, KodeverkType, klageVurdering as klageVurderingType } from '@navikt/fp-kodeverk';\nimport {\n  AksjonspunktHelpTextTemp,\n  FlexColumn,\n  FlexContainer,\n  FlexRow,\n  VerticalSpacer,\n} from '@navikt/ft-ui-komponenter';\nimport { ProsessStegBegrunnelseTextFieldNew, ProsessStegSubmitButtonNew } from '@navikt/fp-prosess-felles';\nimport { KlageVurdering, AlleKodeverk, KlageVurderingResultat } from '@navikt/fp-types';\nimport { KlageVurderingResultatAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport KlageFormType from '../../types/klageFormType';\nimport KlageVurderingRadioOptionsNfp from './KlageVurderingRadioOptionsNfp';\nimport FritekstBrevTextField from './FritekstKlageBrevTextField';\nimport PreviewKlageLink, { BrevData } from './PreviewKlageLink';\nimport TempsaveKlageButton, { TransformedValues } from './TempsaveKlageButton';\n\nimport styles from './behandleKlageFormNfp.module.css';\n\nconst transformValues = (values: KlageFormType): KlageVurderingResultatAp => ({\n  klageMedholdArsak:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ? values.klageMedholdArsak : undefined,\n  klageVurderingOmgjoer:\n    values.klageVurdering === klageVurderingType.MEDHOLD_I_KLAGE ? values.klageVurderingOmgjoer : undefined,\n  klageHjemmel: values.klageHjemmel,\n  klageVurdering: values.klageVurdering!,\n  fritekstTilBrev: values.fritekstTilBrev,\n  begrunnelse: values.begrunnelse,\n  kode: AksjonspunktCode.BEHANDLE_KLAGE_NFP,\n});\n\nconst definertKodeverdiEllerUndefined = (kode: string | undefined): string | undefined => {\n  if (kode && kode !== '-') {\n    return kode;\n  }\n  return undefined;\n};\n\nconst buildInitialValues = (klageVurderingResultat?: KlageVurderingResultat): KlageFormType => ({\n  klageMedholdArsak: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageMedholdArsak),\n  klageVurderingOmgjoer: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageVurderingOmgjoer),\n  klageHjemmel: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageHjemmel),\n  klageVurdering: definertKodeverdiEllerUndefined(klageVurderingResultat?.klageVurdering),\n  begrunnelse: klageVurderingResultat ? klageVurderingResultat.begrunnelse : undefined,\n  fritekstTilBrev: klageVurderingResultat ? klageVurderingResultat.fritekstTilBrev : undefined,\n});\n\ninterface OwnProps {\n  previewCallback: (data: BrevData) => Promise<any>;\n  saveKlage: (data: TransformedValues) => Promise<any>;\n  readOnly: boolean;\n  readOnlySubmitButton?: boolean;\n  sprakkode: string;\n  alleKodeverk: AlleKodeverk;\n  klageVurdering: KlageVurdering;\n  alleAktuelleHjemler: string[];\n  submitCallback: (data: KlageVurderingResultatAp) => Promise<void>;\n  formData?: KlageFormType;\n  setFormData: (data: KlageFormType) => void;\n}\n\n/**\n * BehandleklageformNfp\n *\n * Presentasjonskomponent. Setter opp aksjonspunktet for behandling av klage (NFP).\n */\nexport const BehandleKlageFormNfp: FunctionComponent<OwnProps> = ({\n  readOnly,\n  klageVurdering,\n  previewCallback,\n  saveKlage,\n  readOnlySubmitButton,\n  sprakkode,\n  alleAktuelleHjemler,\n  alleKodeverk,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n  const initialValues = useMemo(() => buildInitialValues(klageVurdering.klageVurderingResultatNFP), [klageVurdering]);\n  const formMethods = useForm<KlageFormType>({\n    defaultValues: formData || initialValues,\n  });\n\n  const formValues = formMethods.watch();\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: KlageFormType) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Klage.ResolveKlage.Title' })}</Heading>\n      <VerticalSpacer fourPx />\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={!readOnlySubmitButton}>\n        {[<FormattedMessage id=\"Klage.ResolveKlage.HelpText\" key={AksjonspunktCode.BEHANDLE_KLAGE_NFP} />]}\n      </AksjonspunktHelpTextTemp>\n      <KlageVurderingRadioOptionsNfp\n        readOnly={readOnly}\n        klageVurdering={formValues.klageVurdering}\n        medholdReasons={alleKodeverk[KodeverkType.KLAGE_MEDHOLD_ARSAK]}\n        alleHjemler={alleKodeverk[KodeverkType.KLAGE_HJEMMEL]}\n        alleAktuelleHjemler={alleAktuelleHjemler}\n      />\n      <div className={styles.confirmVilkarForm}>\n        <ProsessStegBegrunnelseTextFieldNew\n          readOnly={readOnly}\n          text={intl.formatMessage({ id: 'BehandleKlageFormNfp.BegrunnelseForKlage' })}\n        />\n        <VerticalSpacer sixteenPx />\n        <FritekstBrevTextField sprakkode={sprakkode} readOnly={readOnly} />\n        <VerticalSpacer sixteenPx />\n        <FlexContainer>\n          <FlexRow spaceBetween>\n            <FlexColumn>\n              <ProsessStegSubmitButtonNew\n                isReadOnly={readOnly}\n                isSubmittable={!readOnlySubmitButton}\n                isSubmitting={formMethods.formState.isSubmitting}\n                isDirty={formMethods.formState.isDirty}\n              />\n              {!readOnly &&\n                formValues.klageVurdering &&\n                formValues.fritekstTilBrev &&\n                formValues.fritekstTilBrev.length > 2 && (\n                  <PreviewKlageLink\n                    previewCallback={previewCallback}\n                    fritekstTilBrev={formValues.fritekstTilBrev}\n                    klageVurdering={formValues.klageVurdering}\n                  />\n                )}\n            </FlexColumn>\n            <FlexColumn>\n              <TempsaveKlageButton\n                saveKlage={saveKlage}\n                handleSubmit={formMethods.handleSubmit}\n                readOnly={readOnly}\n                aksjonspunktCode={AksjonspunktCode.BEHANDLE_KLAGE_NFP}\n              />\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n      </div>\n    </Form>\n  );\n};\n\nexport default BehandleKlageFormNfp;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { KlageVurdering, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport messages from '../i18n/nb_NO.json';\nimport BehandleKlageFormKa from './components/ka/BehandleKlageFormKa';\nimport BehandleKlageFormNfp from './components/nfp/BehandleKlageFormNfp';\nimport { BrevData } from './components/nfp/PreviewKlageLink';\nimport { TransformedValues } from './components/nfp/TempsaveKlageButton';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  previewCallback: (data: BrevData) => Promise<any>;\n  saveKlage: (data: TransformedValues) => Promise<any>;\n}\n\nconst KlagevurderingProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  klageVurdering,\n  alleKodeverk,\n  saveKlage,\n  submitCallback,\n  isReadOnly,\n  previewCallback,\n  readOnlySubmitButton,\n  aksjonspunkter,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    {klageVurdering.klageVurderingResultatNK && (\n      <BehandleKlageFormKa klageVurdering={klageVurdering} alleKodeverk={alleKodeverk} />\n    )}\n    {aksjonspunkter.some(a => a.definisjon === AksjonspunktCode.BEHANDLE_KLAGE_NFP) && (\n      <BehandleKlageFormNfp\n        sprakkode={behandling.sprakkode}\n        klageVurdering={klageVurdering}\n        saveKlage={saveKlage}\n        submitCallback={submitCallback}\n        readOnly={isReadOnly}\n        previewCallback={previewCallback}\n        readOnlySubmitButton={readOnlySubmitButton}\n        alleKodeverk={alleKodeverk}\n        alleAktuelleHjemler={klageVurdering.aktuelleHjemler ? klageVurdering.aktuelleHjemler : []}\n        formData={formData}\n        setFormData={setFormData}\n      />\n    )}\n  </RawIntlProvider>\n);\n\nexport default KlagevurderingProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { klageVurdering as klageVurderingKodeverk, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport {\n  KlagevurderingProsessIndex,\n  AksjonspunktVerdier,\n  KlageVurderingBrevData,\n} from '@navikt/fp-prosess-klagevurdering';\nimport { Behandling, Fagsak, ForhåndsvisMeldingParams, KlageVurdering } from '@navikt/fp-types';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport KlageBehandlingModal from '../modaler/KlageBehandlingModal';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst lagForhandsvisCallback =\n  (\n    forhandsvisMelding: (params?: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<any>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: KlageVurderingBrevData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst lagKlageCallback =\n  (lagreKlageVurdering: (params?: any, keepData?: boolean) => Promise<any>, behandling: Behandling) =>\n  (aksjonspunktModel: AksjonspunktVerdier) => {\n    const data = {\n      behandlingUuid: behandling.uuid,\n      ...aksjonspunktModel,\n    };\n\n    return lagreKlageVurdering(data);\n  };\n\nconst getLagringSideeffekter =\n  (\n    toggleKlageModal: (skalViseModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n    oppdaterProsessStegOgFaktaPanelIUrl?: (punktnavn?: string, faktanavn?: string) => void,\n  ) =>\n  (aksjonspunktModels: { kode: string; klageVurdering?: string }[]) => {\n    const skalByttTilKlageinstans = aksjonspunktModels.some(\n      apValue =>\n        apValue.kode === AksjonspunktCode.BEHANDLE_KLAGE_NFP &&\n        apValue.klageVurdering === klageVurderingKodeverk.STADFESTE_YTELSESVEDTAK,\n    );\n\n    if (skalByttTilKlageinstans) {\n      setSkalOppdatereEtterBekreftelseAvAp(false);\n    }\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      if (skalByttTilKlageinstans) {\n        toggleKlageModal(true);\n      } else if (oppdaterProsessStegOgFaktaPanelIUrl) {\n        oppdaterProsessStegOgFaktaPanelIUrl('default', 'default');\n      }\n    };\n  };\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering: KlageVurdering;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  setSkalOppdatereEtterBekreftelseAvAp?: (skalHenteFagsak: boolean) => void;\n  opneSokeside?: () => void;\n  oppdaterProsessStegOgFaktaPanelIUrl?: (punktnavn?: string, faktanavn?: string) => void;\n  aksjonspunktKoder?: string[];\n  prosessPanelKode: ProsessStegCode;\n  prosessPanelMenyTekst: string;\n}\n\nconst VurderingFellesProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  opneSokeside,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  aksjonspunktKoder,\n  prosessPanelKode,\n  prosessPanelMenyTekst,\n  ...props\n}) => {\n  const [visModalKlageBehandling, toggleKlageModal] = useState(false);\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const lagringSideEffekter = setSkalOppdatereEtterBekreftelseAvAp\n    ? getLagringSideeffekter(\n        toggleKlageModal,\n        setSkalOppdatereEtterBekreftelseAvAp,\n        oppdaterProsessStegOgFaktaPanelIUrl,\n      )\n    : undefined;\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    lagForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const { startRequest: lagreKlageVurdering } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.SAVE_KLAGE_VURDERING,\n  );\n  const lagreKlage = useCallback(lagKlageCallback(lagreKlageVurdering, standardPanelProps.behandling), [\n    standardPanelProps.behandling.versjon,\n  ]);\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={aksjonspunktKoder}\n      prosessPanelKode={prosessPanelKode}\n      prosessPanelMenyTekst={prosessPanelMenyTekst}\n      skalPanelVisesIMeny={() => true}\n      lagringSideEffekter={lagringSideEffekter}\n      renderPanel={data => (\n        <>\n          <KlageBehandlingModal\n            visModal={visModalKlageBehandling}\n            lukkModal={() => {\n              toggleKlageModal(false);\n              if (opneSokeside) {\n                opneSokeside();\n              }\n            }}\n          />\n          <KlagevurderingProsessIndex previewCallback={previewCallback} saveKlage={lagreKlage} {...data} />\n        </>\n      )}\n    />\n  );\n};\n\nexport default VurderingFellesProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { Fagsak } from '@navikt/fp-types';\n\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport VurderingFellesProsessStegInitPanel from './VurderingFellesProsessStegInitPanel';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.BEHANDLE_KLAGE_NFP];\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  opneSokeside: () => void;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n}\n\nconst VurderingFamOgPensjonProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  opneSokeside,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  ...props\n}) => (\n  <VurderingFellesProsessStegInitPanel\n    {...props}\n    fagsak={fagsak}\n    setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n    opneSokeside={opneSokeside}\n    oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    prosessPanelKode={ProsessStegCode.KLAGE_NAV_FAMILIE_OG_PENSJON}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.CheckKlageNFP' })}\n  />\n);\n\nexport default VurderingFamOgPensjonProsessStegInitPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { BehandlingStatus, BehandlingType } from '@navikt/ft-kodeverk';\n\nimport { FormkravProsessIndex } from '@navikt/fp-prosess-formkrav';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { KlageVurdering } from '@navikt/fp-types';\n\nimport { AksjonspunktCode, isKlageAvvist } from '@navikt/fp-kodeverk';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_FORMKRAV_NK];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering?: KlageVurdering;\n};\n\ninterface OwnProps {\n  alleBehandlinger: {\n    uuid: string;\n    type: string;\n    status: string;\n    opprettet: string;\n    avsluttet?: string;\n    resultatType?: string;\n  }[];\n}\n\nconst FormKravKlageInstansProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  alleBehandlinger,\n  ...props\n}) => {\n  const intl = useIntl();\n  const avsluttedeBehandlinger = useMemo(\n    () =>\n      alleBehandlinger\n        .filter(b => b.status === BehandlingStatus.AVSLUTTET)\n        .filter(\n          b => (b.type !== BehandlingType.KLAGE || isKlageAvvist(b.resultatType)) && b.type !== BehandlingType.ANKE,\n        ),\n    [alleBehandlinger],\n  );\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.FORMKRAV_KLAGE_NAV_KLAGEINSTANS}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.FormkravKlageKA' })}\n      skalPanelVisesIMeny={() => true}\n      renderPanel={data => <FormkravProsessIndex avsluttedeBehandlinger={avsluttedeBehandlinger} {...data} />}\n    />\n  );\n};\n\nexport default FormKravKlageInstansProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { Fagsak } from '@navikt/fp-types';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\n\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport VurderingFellesProsessStegInitPanel from './VurderingFellesProsessStegInitPanel';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.BEHANDLE_KLAGE_NK];\n\ninterface OwnProps {\n  fagsak: Fagsak;\n}\n\nconst VurderingKlageInstansProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  ...props\n}) => (\n  <VurderingFellesProsessStegInitPanel\n    {...props}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    fagsak={fagsak}\n    prosessPanelKode={ProsessStegCode.KLAGE_NAV_KLAGEINSTANS}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.CheckKlageNK' })}\n  />\n);\n\nexport default VurderingKlageInstansProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, KeyboardEvent, MouseEvent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { Button } from '@navikt/ds-react';\n\nimport { FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport styles from './vedtakKlageSubmitPanel.module.css';\n\ninterface OwnProps {\n  previewVedtakCallback: () => Promise<any>;\n  behandlingPaaVent: boolean;\n  readOnly: boolean;\n  lagreVedtak: () => void;\n  isSubmitting: boolean;\n}\n\nconst VedtakKlageSubmitPanel: FunctionComponent<OwnProps> = ({\n  behandlingPaaVent,\n  previewVedtakCallback,\n  readOnly,\n  lagreVedtak,\n  isSubmitting,\n}) => {\n  const forhåndsvis = useCallback((e: KeyboardEvent | MouseEvent) => {\n    e.preventDefault();\n    previewVedtakCallback();\n  }, []);\n\n  return (\n    <FlexContainer>\n      <FlexRow>\n        {!readOnly && (\n          <FlexColumn>\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              className={styles.mainButton}\n              onClick={lagreVedtak}\n              disabled={behandlingPaaVent || isSubmitting}\n              loading={isSubmitting}\n              type=\"button\"\n            >\n              <FormattedMessage id=\"VedtakKlageForm.TilGodkjenning\" />\n            </Button>\n          </FlexColumn>\n        )}\n        <FlexColumn>\n          <a\n            href=\"\"\n            onClick={forhåndsvis}\n            onKeyDown={e => (e.key === 'Enter' ? forhåndsvis(e) : null)}\n            className={classNames('lenke lenke--frittstaende')}\n          >\n            <FormattedMessage id=\"VedtakKlageForm.ForhandvisBrev\" />\n          </a>\n        </FlexColumn>\n      </FlexRow>\n    </FlexContainer>\n  );\n};\n\nexport default VedtakKlageSubmitPanel;\n","import React, { FunctionComponent, useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Heading, Label } from '@navikt/ds-react';\n\nimport {\n  klageVurdering as klageVurderingCodes,\n  behandlingResultatType,\n  isKlageOmgjort,\n  KodeverkType,\n  getKodeverknavnFn,\n  AksjonspunktCode,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Aksjonspunkt, KlageVurdering, AlleKodeverk, Behandlingsresultat } from '@navikt/fp-types';\nimport {\n  BekreftVedtakUtenTotrinnskontrollAp,\n  ForeslaVedtakAp,\n  ForeslaVedtakManueltAp,\n} from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { validerApKodeOgHentApEnum } from '@navikt/fp-prosess-felles';\n\nimport VedtakKlageSubmitPanel from './VedtakKlageSubmitPanel';\n\nexport const VEDTAK_KLAGE_FORM_NAME = 'VEDTAK_KLAGE_FORM';\n\nconst OMGJOER_TEKST_MAP = {\n  GUNST_MEDHOLD_I_KLAGE: 'VedtakKlageForm.KlageOmgjortGunst',\n  UGUNST_MEDHOLD_I_KLAGE: 'VedtakKlageForm.KlageOmgjortUgunst',\n  DELVIS_MEDHOLD_I_KLAGE: 'VedtakKlageForm.KlageOmgjortDelvis',\n} as Record<string, string>;\n\nexport type ForhandsvisData = {\n  gjelderVedtak: boolean;\n};\n\nconst getPreviewVedtakCallback = (previewVedtakCallback: (data: ForhandsvisData) => Promise<any>) => () =>\n  previewVedtakCallback({\n    gjelderVedtak: true,\n  });\n\ntype AksjonspunktData = Array<ForeslaVedtakAp | ForeslaVedtakManueltAp | BekreftVedtakUtenTotrinnskontrollAp>;\n\nconst getAvvisningsAarsaker = (klageVurderingResultat: KlageVurdering): string[] => {\n  if (klageVurderingResultat) {\n    if (klageVurderingResultat.klageFormkravResultatKA && klageVurderingResultat.klageVurderingResultatNK) {\n      return klageVurderingResultat.klageFormkravResultatKA.avvistArsaker;\n    }\n    if (klageVurderingResultat.klageFormkravResultatNFP) {\n      return klageVurderingResultat.klageFormkravResultatNFP.avvistArsaker;\n    }\n  }\n  return [];\n};\n\nconst getOmgjortAarsak = (klageVurderingResultat: KlageVurdering, alleKodeverk: AlleKodeverk): string | null => {\n  const getKodeverknavn = getKodeverknavnFn(alleKodeverk);\n  if (klageVurderingResultat) {\n    if (klageVurderingResultat.klageVurderingResultatNK?.klageMedholdArsak) {\n      return getKodeverknavn(\n        klageVurderingResultat.klageVurderingResultatNK.klageMedholdArsak,\n        KodeverkType.KLAGE_MEDHOLD_ARSAK,\n      );\n    }\n    if (klageVurderingResultat.klageVurderingResultatNFP?.klageMedholdArsak) {\n      return getKodeverknavn(\n        klageVurderingResultat.klageVurderingResultatNFP.klageMedholdArsak,\n        KodeverkType.KLAGE_MEDHOLD_ARSAK,\n      );\n    }\n  }\n  return null;\n};\n\nconst getResultatText = (behandlingKlageVurdering: KlageVurdering): string | null => {\n  const klageResultat = behandlingKlageVurdering.klageVurderingResultatNK\n    ? behandlingKlageVurdering.klageVurderingResultatNK\n    : behandlingKlageVurdering.klageVurderingResultatNFP;\n  switch (klageResultat?.klageVurdering) {\n    case klageVurderingCodes.AVVIS_KLAGE:\n      return 'VedtakKlageForm.KlageAvvist';\n    case klageVurderingCodes.STADFESTE_YTELSESVEDTAK:\n      return 'VedtakKlageForm.KlageStadfestet';\n    case klageVurderingCodes.OPPHEVE_YTELSESVEDTAK:\n      return 'VedtakKlageForm.YtelsesvedtakOpphevet';\n    case klageVurderingCodes.HJEMSENDE_UTEN_Å_OPPHEVE:\n      return 'VedtakKlageForm.HjemmsendUtenOpphev';\n    case klageVurderingCodes.MEDHOLD_I_KLAGE:\n      return OMGJOER_TEKST_MAP[klageResultat?.klageVurderingOmgjoer || ''];\n    default:\n      return 'VedtakKlageForm.IkkeFastsatt';\n  }\n};\n\ninterface OwnProps {\n  behandlingsresultat: Behandlingsresultat;\n  behandlingPaaVent: boolean;\n  klageVurdering: KlageVurdering;\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: AksjonspunktData) => Promise<void>;\n  previewVedtakCallback: (data: ForhandsvisData) => Promise<any>;\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\n/**\n * VedtakKlageForm\n */\nconst VedtakKlageForm: FunctionComponent<OwnProps> = ({\n  submitCallback,\n  klageVurdering,\n  behandlingsresultat,\n  readOnly,\n  aksjonspunkter,\n  previewVedtakCallback,\n  behandlingPaaVent,\n  alleKodeverk,\n}) => {\n  const avvistArsaker = useMemo(() => getAvvisningsAarsaker(klageVurdering), [klageVurdering]);\n  const omgjortAarsak = useMemo(() => getOmgjortAarsak(klageVurdering, alleKodeverk), [klageVurdering]);\n  const behandlingsResultatTekst = useMemo(() => getResultatText(klageVurdering), [klageVurdering]);\n  const klageVurderingResultat = klageVurdering.klageVurderingResultatNK\n    ? klageVurdering.klageVurderingResultatNK\n    : klageVurdering.klageVurderingResultatNFP;\n  const erOmgjort = isKlageOmgjort(behandlingsresultat.type);\n\n  const [isSubmitting, setSubmitting] = useState(false);\n  const lagreVedtak = useCallback(() => {\n    setSubmitting(true);\n\n    const behandlingAksjonspunktCodes = aksjonspunkter\n      .filter(ap => ap.status === aksjonspunktStatus.OPPRETTET)\n      .map(ap => ap.definisjon);\n    const input = behandlingAksjonspunktCodes.map(apCode => ({\n      kode: validerApKodeOgHentApEnum(\n        apCode,\n        AksjonspunktCode.FORESLA_VEDTAK,\n        AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n        AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n      ),\n    }));\n\n    submitCallback(input).then(() => setSubmitting(false));\n  }, [aksjonspunkter]);\n\n  const kodeverknavn = getKodeverknavnFn(alleKodeverk);\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"VedtakKlageForm.Header\" />\n      </Heading>\n      <VerticalSpacer twentyPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"VedtakKlageForm.Resultat\" />\n      </Label>\n      {behandlingsResultatTekst && (\n        <BodyShort size=\"small\">\n          <FormattedMessage id={behandlingsResultatTekst} />\n        </BodyShort>\n      )}\n      <VerticalSpacer sixteenPx />\n      {behandlingsresultat.type === behandlingResultatType.KLAGE_AVVIST && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakKlageForm.ArsakTilAvvisning\" />\n          </Label>\n          {avvistArsaker.map(arsak => (\n            <BodyShort size=\"small\" key={arsak}>\n              {kodeverknavn(arsak, KodeverkType.KLAGE_AVVIST_AARSAK)}\n            </BodyShort>\n          ))}\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {erOmgjort && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakKlageForm.ArsakTilOmgjoring\" />\n          </Label>\n          {omgjortAarsak}\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {behandlingsresultat.type === behandlingResultatType.KLAGE_YTELSESVEDTAK_OPPHEVET && (\n        <>\n          <Label size=\"small\">\n            <FormattedMessage id=\"VedtakKlageForm.ArsakTilOppheving\" />\n          </Label>\n          {omgjortAarsak}\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {klageVurderingResultat?.klageVurdertAv === 'NFP' && (\n        <VedtakKlageSubmitPanel\n          previewVedtakCallback={getPreviewVedtakCallback(previewVedtakCallback)}\n          readOnly={readOnly}\n          behandlingPaaVent={behandlingPaaVent}\n          lagreVedtak={lagreVedtak}\n          isSubmitting={isSubmitting}\n        />\n      )}\n    </>\n  );\n};\n\nexport default VedtakKlageForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { KlageVurdering, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport VedtakKlageForm, { ForhandsvisData } from './components/VedtakKlageForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  klageVurdering: KlageVurdering;\n  previewVedtakCallback: (data: ForhandsvisData) => Promise<any>;\n}\n\nconst VedtakKlageProsessIndex: FunctionComponent<OwnProps & StandardProsessPanelProps> = ({\n  behandling,\n  klageVurdering,\n  aksjonspunkter,\n  submitCallback,\n  previewVedtakCallback,\n  isReadOnly,\n  alleKodeverk,\n}) => {\n  if (!behandling.behandlingsresultat) {\n    throw new Error(`behandlingsresultat finnes ikke for behandling ${behandling.uuid}`);\n  }\n\n  return (\n    <RawIntlProvider value={intl}>\n      <VedtakKlageForm\n        behandlingsresultat={behandling.behandlingsresultat}\n        behandlingPaaVent={behandling.behandlingPaaVent}\n        klageVurdering={klageVurdering}\n        aksjonspunkter={aksjonspunkter}\n        submitCallback={submitCallback}\n        previewVedtakCallback={previewVedtakCallback}\n        readOnly={isReadOnly}\n        alleKodeverk={alleKodeverk}\n      />\n    </RawIntlProvider>\n  );\n};\n\nexport default VedtakKlageProsessIndex;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Behandling, Behandlingsresultat, Fagsak, Aksjonspunkt } from '@navikt/ft-types';\nimport { VilkarUtfallType, AksjonspunktStatus, BehandlingResultatType } from '@navikt/ft-kodeverk';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { VedtakKlageProsessIndex, VedtakKlageBrevData } from '@navikt/fp-prosess-vedtak-klage';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport { ForhåndsvisMeldingParams, KlageVurdering } from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport FatterVedtakStatusModal from '../../felles/modaler/vedtak/FatterVedtakStatusModal';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst lagForhandsvisCallback =\n  (\n    forhandsvisMelding: (params: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<any>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: VedtakKlageBrevData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst getVedtakStatus = (behandlingsresultat?: Behandlingsresultat, aksjonspunkter: Aksjonspunkt[] = []) => {\n  const harApentAksjonpunkt = aksjonspunkter.some(ap => ap.status === AksjonspunktStatus.OPPRETTET);\n  if (aksjonspunkter.length === 0 || harApentAksjonpunkt) {\n    return VilkarUtfallType.IKKE_VURDERT;\n  }\n\n  const resultatTypeCode = behandlingsresultat?.type;\n  if (\n    resultatTypeCode === BehandlingResultatType.HENLAGT_KLAGE_TRUKKET ||\n    resultatTypeCode === BehandlingResultatType.HENLAGT_FEILOPPRETTET\n  ) {\n    return VilkarUtfallType.IKKE_VURDERT;\n  }\n  if (\n    resultatTypeCode === BehandlingResultatType.KLAGE_AVVIST ||\n    resultatTypeCode === BehandlingResultatType.KLAGE_YTELSESVEDTAK_OPPHEVET\n  ) {\n    return VilkarUtfallType.IKKE_OPPFYLT;\n  }\n  return VilkarUtfallType.OPPFYLT;\n};\n\nconst getLagringSideeffekter =\n  (\n    toggleFatterVedtakModal: (skalViseModal: boolean) => void,\n    setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void,\n  ) =>\n  () => {\n    setSkalOppdatereEtterBekreftelseAvAp(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      toggleFatterVedtakModal(true);\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FORESLA_VEDTAK,\n  AksjonspunktCode.FATTER_VEDTAK,\n  AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n  AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.KLAGE_VURDERING];\ntype EndepunktPanelData = {\n  klageVurdering: KlageVurdering;\n};\n\ninterface OwnProps {\n  fagsak: Fagsak;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  opneSokeside: () => void;\n}\n\nconst KlageresultatProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  fagsak,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  opneSokeside,\n  ...props\n}) => {\n  const intl = useIntl();\n\n  const [visFatterVedtakModal, toggleFatterVedtakModal] = useState(false);\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const lagringSideEffekter = getLagringSideeffekter(toggleFatterVedtakModal, setSkalOppdatereEtterBekreftelseAvAp);\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    lagForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const { aksjonspunkt: aksjonspunkter } = props.behandling;\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.KLAGE_RESULTAT}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.ResultatKlage' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={standardData => getVedtakStatus(standardData.behandling.behandlingsresultat, aksjonspunkter)}\n      lagringSideEffekter={lagringSideEffekter}\n      hentSkalMarkeresSomAktiv={standardData =>\n        getVedtakStatus(standardData.behandling.behandlingsresultat, aksjonspunkter) !== VilkarUtfallType.IKKE_VURDERT\n      }\n      renderPanel={data => (\n        <>\n          <FatterVedtakStatusModal\n            visModal={visFatterVedtakModal}\n            lukkModal={() => {\n              toggleFatterVedtakModal(false);\n              opneSokeside();\n            }}\n            tekst={intl.formatMessage({ id: 'FatterVedtakStatusModal.KlagenErFerdigbehandlet' })}\n          />\n          <VedtakKlageProsessIndex previewVedtakCallback={previewCallback} {...data} />\n        </>\n      )}\n    />\n  );\n};\n\nexport default KlageresultatProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { Behandling, BehandlingAppKontekst, Fagsak } from '@navikt/fp-types';\n\nimport FormKravFamOgPensjonProsessStegInitPanel from './prosessPaneler/FormKravFamOgPensjonProsessStegInitPanel';\nimport VurderingFamOgPensjonProsessStegInitPanel from './prosessPaneler/VurderingFamOgPensjonProsessStegInitPanel';\nimport FormKravKlageInstansProsessStegInitPanel from './prosessPaneler/FormKravKlageInstansProsessStegInitPanel';\nimport VurderingKlageInstansProsessStegInitPanel from './prosessPaneler/VurderingKlageInstansProsessStegInitPanel';\nimport KlageresultatProsessStegInitPanel from './prosessPaneler/KlageresultatProsessStegInitPanel';\nimport VergeFaktaInitPanel from '../fellesPaneler/fakta/VergeFaktaInitPanel';\nimport FaktaPanelInitProps from '../felles/typer/faktaPanelInitProps';\nimport ProsessPanelInitProps from '../felles/typer/prosessPanelInitProps';\nimport BehandlingContainer from '../felles/BehandlingContainer';\n\ninterface OwnProps {\n  behandling: Behandling;\n  fagsak: Fagsak;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  opneSokeside: () => void;\n  setSkalOppdatereEtterBekreftelseAvAp: (skalHenteFagsak: boolean) => void;\n  alleBehandlinger: BehandlingAppKontekst[];\n}\n\nconst KlagePaneler: FunctionComponent<OwnProps> = ({\n  behandling,\n  fagsak,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  opneSokeside,\n  setSkalOppdatereEtterBekreftelseAvAp,\n  alleBehandlinger,\n}) => {\n  const hentFaktaPaneler = useCallback((props: FaktaPanelInitProps) => <VergeFaktaInitPanel {...props} />, []);\n\n  const fagsakBehandlingerInfo = useMemo(\n    () =>\n      alleBehandlinger\n        .filter(b => !b.behandlingHenlagt)\n        .map(b => ({\n          uuid: b.uuid,\n          type: b.type,\n          status: b.status,\n          opprettet: b.opprettet,\n          avsluttet: b.avsluttet,\n          resultatType: b.behandlingsresultat?.type,\n        })),\n    [alleBehandlinger],\n  );\n\n  const hentProsessPaneler = useCallback(\n    (props: ProsessPanelInitProps) => (\n      <>\n        <FormKravFamOgPensjonProsessStegInitPanel {...props} alleBehandlinger={fagsakBehandlingerInfo} />\n        <VurderingFamOgPensjonProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n          oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n        />\n        <FormKravKlageInstansProsessStegInitPanel {...props} alleBehandlinger={fagsakBehandlingerInfo} />\n        <VurderingKlageInstansProsessStegInitPanel {...props} fagsak={fagsak} />\n        <KlageresultatProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          setSkalOppdatereEtterBekreftelseAvAp={setSkalOppdatereEtterBekreftelseAvAp}\n        />\n      </>\n    ),\n    [\n      fagsakBehandlingerInfo,\n      fagsak,\n      opneSokeside,\n      setSkalOppdatereEtterBekreftelseAvAp,\n      oppdaterProsessStegOgFaktaPanelIUrl,\n    ],\n  );\n\n  return (\n    <BehandlingContainer\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      valgtFaktaSteg={valgtFaktaSteg}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      hentFaktaPaneler={hentFaktaPaneler}\n      hentProsessPaneler={hentProsessPaneler}\n    />\n  );\n};\n\nexport default KlagePaneler;\n"],"names":["klageVurdering","klageVurderingOmgjoer","IKKE_PA_KLAGD_VEDTAK","getPaKlagdVedtak","klageFormkavResultat","getKlagBareVedtak","avsluttedeBehandlinger","intl","getKodeverknavn","jsx","b1","b2","moment","behandling","KodeverkType","DATE_TIME_FORMAT","getLovHjemmeler","aksjonspunktCode","AksjonspunktCode","FormkravKlageForm","readOnly","readOnlySubmitButton","alleKodeverk","isSubmitting","isDirty","useIntl","getKodeverknavnFn","klageBareVedtakOptions","jsxs","Fragment","Heading","VerticalSpacer","Detail","AksjonspunktHelpTextTemp","FormattedMessage","FlexContainer","FlexRow","FlexColumn","styles","ProsessStegBegrunnelseTextFieldNew","SelectField","required","RadioGroupPanel","ProsessStegSubmitButtonNew","buildInitialValues","klageFormkavResultatNfp","getPåklagdBehandling","påklagdVedtak","erTilbakekreving","BehandlingType","påklagdTilbakekrevingInfo","erTilbakekrevingVedtak","transformValues","values","FormkravKlageFormNfp","submitCallback","formData","setFormData","initialValues","useMemo","formMethods","useForm","Form","FormkravKlageKa","klageFormkravResultatKA","underBehandlingKabal","behandletAvKabal","vedtak","b","_a","k","Label","BodyShort","createIntl","messages","FormkravProsessIndex","aksjonspunkter","isReadOnly","RawIntlProvider","a","AKSJONSPUNKT_KODER","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","FormKravFamOgPensjonProsessStegInitPanel","alleBehandlinger","props","BehandlingStatus","isKlageAvvist","ProsessDefaultInitPanel","ProsessStegCode","data","BehandleKlageFormKa","begrunnelse","fritekstTilBrev","vurdering","klageMedholdArsak","medholdReasons","klageVurderingType","mo","klageVurderingOmgjoerType","_b","lagHjemler","kodeverkNavn","kodeverkVerdier","kode","lagHjemmelsKoder","KlageVurderingRadioOptionsNfp","alleHjemler","alleAktuelleHjemler","medholdOptions","hjemmelOptions","ArrowBox","FritekstKlageBrevTextField","sprakkode","TextAreaField","hasValidText","getLanguageFromSprakkode","value","getBrevKode","klageVurdertAvKa","dokumentMalType","getBrevData","PreviewKlageLink","previewCallback","previewMessage","e","classNames","TempsaveKlageButton","saveKlage","spinner","handleSubmit","Button","definertKodeverdiEllerUndefined","klageVurderingResultat","BehandleKlageFormNfp","formValues","FritekstBrevTextField","KlagevurderingProsessIndex","lagForhandsvisCallback","forhandsvisMelding","fagsak","brevData","response","forhandsvisDokument","lagKlageCallback","lagreKlageVurdering","aksjonspunktModel","getLagringSideeffekter","toggleKlageModal","setSkalOppdatereEtterBekreftelseAvAp","oppdaterProsessStegOgFaktaPanelIUrl","aksjonspunktModels","skalByttTilKlageinstans","apValue","klageVurderingKodeverk","VurderingFellesProsessStegInitPanel","opneSokeside","aksjonspunktKoder","prosessPanelKode","prosessPanelMenyTekst","visModalKlageBehandling","useState","standardPanelProps","useStandardProsessPanelProps","lagringSideEffekter","restBehandlingApiHooks","useCallback","lagreKlage","KlageBehandlingModal","VurderingFamOgPensjonProsessStegInitPanel","FormKravKlageInstansProsessStegInitPanel","VurderingKlageInstansProsessStegInitPanel","VedtakKlageSubmitPanel","behandlingPaaVent","previewVedtakCallback","lagreVedtak","forhåndsvis","OMGJOER_TEKST_MAP","getPreviewVedtakCallback","getAvvisningsAarsaker","getOmgjortAarsak","getResultatText","behandlingKlageVurdering","klageResultat","klageVurderingCodes","VedtakKlageForm","behandlingsresultat","avvistArsaker","omgjortAarsak","behandlingsResultatTekst","erOmgjort","isKlageOmgjort","setSubmitting","input","ap","aksjonspunktStatus","apCode","validerApKodeOgHentApEnum","kodeverknavn","behandlingResultatType","arsak","VedtakKlageProsessIndex","getVedtakStatus","harApentAksjonpunkt","AksjonspunktStatus","VilkarUtfallType","resultatTypeCode","BehandlingResultatType","toggleFatterVedtakModal","KlageresultatProsessStegInitPanel","visFatterVedtakModal","standardData","FatterVedtakStatusModal","KlagePaneler","valgtProsessSteg","valgtFaktaSteg","hentFaktaPaneler","VergeFaktaInitPanel","fagsakBehandlingerInfo","hentProsessPaneler","BehandlingContainer"],"mappings":"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"}