{"version":3,"file":"VergeFaktaInitPanel-d094543d.js","sources":["../../../../packages/kodeverk/src/vergeType.ts","../../../../packages/fakta-felles/src/components/FaktaBegrunnelseTextFieldNew.tsx","../../../../packages/fakta-felles/src/components/FaktaSubmitButtonNew.tsx","../../src/behandling/felles/fakta/useStandardFaktaPanelProps.ts","../../src/behandling/felles/fakta/useFaktaMenyRegistrerer.ts","../../src/behandling/felles/fakta/FaktaPanelWrapper.tsx","../../src/behandling/felles/fakta/FaktaDefaultInitPanel.tsx","../../../../packages/fakta-verge/src/components/RegistrereVergeFaktaForm.tsx","../../../../packages/fakta-verge/src/components/RegistrereVergeInfoPanel.tsx","../../../../packages/fakta-verge/src/VergeFaktaIndex.tsx","../../src/behandling/fellesPaneler/fakta/VergeFaktaInitPanel.tsx"],"sourcesContent":["enum VergeType {\n  BARN = 'BARN',\n  FBARN = 'FBARN',\n  VOKSEN = 'VOKSEN',\n  ADVOKAT = 'ADVOKAT',\n  ANNEN_F = 'ANNEN_F',\n}\n\nexport default VergeType;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { decodeHtmlEntity, createIntl } from '@navikt/ft-utils';\nimport { hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\nimport { TextAreaField } from '@navikt/ft-form-hooks';\nimport { Aksjonspunkt } from '@navikt/fp-types';\n\nimport styles from './faktaBegrunnelseTextField.module.css';\n\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\nconst minLength3 = minLength(3);\nconst maxLength1500 = maxLength(1500);\n\ntype OwnProps = {\n  isReadOnly: boolean;\n  isSubmittable: boolean;\n  hasBegrunnelse: boolean;\n  label?: string;\n  hasVurderingText?: boolean;\n  name?: string;\n};\n\nexport type FormValues = {\n  [key: string]: any;\n};\n\ntype TransformedValues = {\n  begrunnelse: string;\n};\n\ninterface StaticFunctions {\n  buildInitialValues: (aksjonspunkt?: Aksjonspunkt[] | Aksjonspunkt, begrunnelseFieldName?: string) => FormValues;\n  transformValues: (values: FormValues, name?: string) => TransformedValues;\n}\n\n/**\n * FaktaBegrunnelseTextField\n */\nconst FaktaBegrunnelseTextField: FunctionComponent<OwnProps> & StaticFunctions = ({\n  isReadOnly,\n  isSubmittable,\n  hasBegrunnelse,\n  label,\n  hasVurderingText = false,\n  name = 'begrunnelse',\n}) => {\n  const code = hasVurderingText ? 'FaktaBegrunnelseTextField.Vurdering' : 'FaktaBegrunnelseTextField.BegrunnEndringene';\n  const textAreaLabel = label || intl.formatMessage({ id: code });\n  return (\n    <RawIntlProvider value={intl}>\n      {(isSubmittable || hasBegrunnelse) && (\n        <div className={styles.begrunnelseTextField}>\n          <TextAreaField\n            name={name}\n            label={isReadOnly ? '' : textAreaLabel}\n            validate={[required, minLength3, maxLength1500, hasValidText]}\n            maxLength={1500}\n            readOnly={isReadOnly}\n          />\n        </div>\n      )}\n    </RawIntlProvider>\n  );\n};\n\nconst getBegrunnelse = (aksjonspunkt?: Aksjonspunkt[] | Aksjonspunkt): string | undefined => {\n  if (aksjonspunkt && Array.isArray(aksjonspunkt)) {\n    return aksjonspunkt.length > 0 ? aksjonspunkt[0].begrunnelse : '';\n  }\n  return !!aksjonspunkt && !Array.isArray(aksjonspunkt) ? aksjonspunkt.begrunnelse : '';\n};\n\nFaktaBegrunnelseTextField.buildInitialValues = (\n  aksjonspunkt?: Aksjonspunkt[] | Aksjonspunkt,\n  begrunnelseFieldName = 'begrunnelse',\n): FormValues => ({\n  [begrunnelseFieldName]: decodeHtmlEntity(getBegrunnelse(aksjonspunkt)),\n});\n\nFaktaBegrunnelseTextField.transformValues = (values: FormValues, name = 'begrunnelse'): TransformedValues => ({\n  begrunnelse: values[name] as string,\n});\n\nexport default FaktaBegrunnelseTextField;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider, FormattedMessage } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\n\nimport { createIntl } from '@navikt/ft-utils';\nimport { ariaCheck } from '@navikt/ft-form-validators';\n\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\nconst isDisabled = (isDirty: boolean, isSubmitting: boolean, isSubmittable: boolean): boolean => {\n  if (!isSubmittable || isSubmitting) {\n    return true;\n  }\n  return !isDirty;\n};\n\ninterface OwnProps {\n  buttonText?: string;\n  isReadOnly: boolean;\n  isSubmittable: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n  isSubmitting: boolean;\n  isDirty: boolean;\n}\n\n/**\n * FaktaSubmitButton\n */\nexport const FaktaSubmitButton: FunctionComponent<OwnProps> = ({\n  isReadOnly,\n  isSubmittable,\n  buttonText,\n  onClick,\n  isSubmitting,\n  isDirty,\n}) => (\n  <RawIntlProvider value={intl}>\n    {!isReadOnly && (\n      <Button\n        size=\"small\"\n        variant=\"primary\"\n        loading={isSubmitting}\n        disabled={isDisabled(isDirty, isSubmitting, isSubmittable)}\n        onClick={onClick || ariaCheck}\n        type={onClick ? 'button' : 'submit'}\n      >\n        {!!buttonText && buttonText}\n        {!buttonText && <FormattedMessage id=\"SubmitButton.ConfirmInformation\" />}\n      </Button>\n    )}\n  </RawIntlProvider>\n);\n\nexport default FaktaSubmitButton;\n","import { useContext, useEffect, useMemo, useState } from 'react';\nimport { Behandling, Fagsak } from '@navikt/ft-types';\nimport { isAksjonspunktOpen } from '@navikt/ft-kodeverk';\n\nimport { StandardFaktaPanelProps } from '@navikt/fp-types';\nimport { FaktaAksjonspunkt } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport { erReadOnly } from '../utils/readOnlyPanelUtils';\nimport getAlleMerknaderFraBeslutter from '../utils/getAlleMerknaderFraBeslutter';\nimport { StandardPropsStateContext } from '../utils/standardPropsStateContext';\n\nexport const DEFAULT_FAKTA_KODE = 'default';\nexport const DEFAULT_PROSESS_STEG_KODE = 'default';\n\nconst getBekreftAksjonspunktFaktaCallback =\n  (\n    fagsak: Fagsak,\n    behandling: Behandling,\n    oppdaterProsessStegOgFaktaPanelIUrl: (prosessPanel?: string, faktanavn?: string) => void,\n    lagreAksjonspunkter: (params: any, keepData?: boolean) => Promise<Behandling | undefined>,\n    lagreOverstyrteAksjonspunkter?: (params: any, keepData?: boolean) => Promise<Behandling | undefined>,\n    overstyringApCodes?: string[],\n  ) =>\n  (aksjonspunkter: FaktaAksjonspunkt | FaktaAksjonspunkt[]): Promise<void> => {\n    const apListe = Array.isArray(aksjonspunkter) ? aksjonspunkter : [aksjonspunkter];\n    const model = apListe.map(ap => ({\n      '@type': ap.kode,\n      ...ap,\n    }));\n\n    const params = {\n      saksnummer: fagsak.saksnummer,\n      behandlingUuid: behandling.uuid,\n      behandlingVersjon: behandling.versjon,\n    };\n\n    if (model && lagreOverstyrteAksjonspunkter && overstyringApCodes) {\n      if (model.length === 0) {\n        throw Error('Det har oppstÃ¥tt en teknisk feil ved lagring av aksjonspunkter. Meld feilen i Porten.');\n      }\n      if (overstyringApCodes.includes(model[0].kode)) {\n        return lagreOverstyrteAksjonspunkter(\n          {\n            ...params,\n            overstyrteAksjonspunktDtoer: model,\n          },\n          true,\n        ).then(() => oppdaterProsessStegOgFaktaPanelIUrl(DEFAULT_PROSESS_STEG_KODE, DEFAULT_FAKTA_KODE));\n      }\n    }\n\n    return lagreAksjonspunkter(\n      {\n        ...params,\n        bekreftedeAksjonspunktDtoer: model,\n      },\n      true,\n    ).then(() => oppdaterProsessStegOgFaktaPanelIUrl(DEFAULT_PROSESS_STEG_KODE, DEFAULT_FAKTA_KODE));\n  };\n\nconst useStandardFaktaPanelProps = (\n  aksjonspunktKoder?: string[],\n  overstyringApCodes: string[] = [],\n): StandardFaktaPanelProps => {\n  const [formData, setFormData] = useState();\n  const value = useContext(StandardPropsStateContext);\n\n  useEffect(() => {\n    if (formData) {\n      setFormData(undefined);\n    }\n  }, [value.behandling.versjon]);\n\n  const { aksjonspunkt } = value.behandling;\n\n  const aksjonspunkterForSteg = useMemo(\n    () =>\n      aksjonspunkt && aksjonspunktKoder ? aksjonspunkt.filter(ap => aksjonspunktKoder.includes(ap.definisjon)) : [],\n    [aksjonspunkt, aksjonspunktKoder],\n  );\n\n  const readOnly = erReadOnly(value.behandling, aksjonspunkterForSteg, [], value.rettigheter, value.hasFetchError);\n  const alleMerknaderFraBeslutter = useMemo(\n    () => getAlleMerknaderFraBeslutter(value.behandling, aksjonspunkterForSteg),\n    [value.behandling.versjon, aksjonspunkterForSteg],\n  );\n\n  const submitCallback = useMemo(\n    () =>\n      getBekreftAksjonspunktFaktaCallback(\n        value.fagsak,\n        value.behandling,\n        value.oppdaterProsessStegOgFaktaPanelIUrl,\n        value.lagreAksjonspunkter,\n        value.lagreOverstyrteAksjonspunkter,\n        overstyringApCodes,\n      ),\n    [value.behandling.versjon, overstyringApCodes],\n  );\n\n  return {\n    behandling: value.behandling,\n    submittable:\n      !aksjonspunkterForSteg.some(ap => isAksjonspunktOpen(ap.status)) || aksjonspunkterForSteg.some(ap => ap.kanLoses),\n    harApneAksjonspunkter: aksjonspunkterForSteg.some(ap => isAksjonspunktOpen(ap.status) && ap.kanLoses),\n    alleKodeverk: value.alleKodeverk,\n    aksjonspunkter: aksjonspunkterForSteg,\n    readOnly,\n    alleMerknaderFraBeslutter,\n    submitCallback,\n    formData,\n    setFormData,\n  };\n};\n\nexport default useStandardFaktaPanelProps;\n","import { useEffect, useState } from 'react';\n\nimport { usePrevious } from '@navikt/ft-ui-komponenter';\n\nimport FaktaPanelMenyData from '../typer/faktaPanelMenyData';\n\nconst DEFAULT_PANEL_VALGT = 'default';\n\nconst useFaktaMenyRegistrerer = (\n  registrerFaktaPanel: (data: FaktaPanelMenyData) => void,\n  id: string,\n  tekst: string,\n  skalVisesImeny: boolean,\n  harApneAksjonspunkter: boolean,\n  valgtFaktaSteg?: string,\n) => {\n  const [erPanelValgt, setPanelValgt] = useState(false);\n  useEffect(() => {\n    registrerFaktaPanel({\n      id,\n    });\n  }, []);\n\n  const erAktiv =\n    skalVisesImeny && (valgtFaktaSteg === id || (harApneAksjonspunkter && valgtFaktaSteg === DEFAULT_PANEL_VALGT));\n\n  const forrigeSkalVisesIMeny = usePrevious(skalVisesImeny);\n\n  useEffect(() => {\n    if (skalVisesImeny) {\n      registrerFaktaPanel({\n        id,\n        tekst,\n        erAktiv,\n        harApneAksjonspunkter,\n      });\n    } else if (!skalVisesImeny && forrigeSkalVisesIMeny) {\n      registrerFaktaPanel({\n        id,\n      });\n    }\n    setPanelValgt(erAktiv);\n  }, [forrigeSkalVisesIMeny, skalVisesImeny, erAktiv, harApneAksjonspunkter]);\n\n  return skalVisesImeny && erPanelValgt;\n};\n\nexport default useFaktaMenyRegistrerer;\n","import React, { FunctionComponent, ReactElement } from 'react';\n\nimport { LoadingPanel } from '@navikt/ft-ui-komponenter';\nimport { RestApiState } from '@navikt/fp-rest-api-hooks';\n\ninterface OwnProps {\n  erPanelValgt: boolean;\n  dataState: RestApiState;\n  children: ReactElement | null;\n}\n\nconst FaktaPanelWrapper: FunctionComponent<OwnProps> = ({ erPanelValgt, dataState, children }) => {\n  if (!erPanelValgt) {\n    return null;\n  }\n\n  if (dataState !== RestApiState.SUCCESS) {\n    return <LoadingPanel />;\n  }\n\n  return children;\n};\n\nexport default FaktaPanelWrapper;\n","import React, { ReactElement } from 'react';\n\nimport { RestApiState } from '@navikt/fp-rest-api-hooks';\nimport { StandardFaktaPanelProps } from '@navikt/fp-types';\nimport { RestKey } from '@navikt/fp-rest-api';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\n\nimport FaktaPanelInitProps from '../typer/faktaPanelInitProps';\nimport useStandardFaktaPanelProps from './useStandardFaktaPanelProps';\nimport useFaktaMenyRegistrerer from './useFaktaMenyRegistrerer';\nimport FaktaPanelWrapper from './FaktaPanelWrapper';\nimport { restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nexport type OwnProps<PANEL_DATA> = {\n  panelEndepunkter?: RestKey<any, any>[];\n  aksjonspunktKoder?: string[];\n  overstyringApKoder?: string[];\n  skalPanelVisesIMeny: () => boolean;\n  renderPanel: (data: PANEL_DATA & StandardFaktaPanelProps) => ReactElement;\n  faktaPanelKode: FaktaPanelCode;\n  faktaPanelMenyTekst: string;\n};\n\nconst FaktaDefaultInitPanel = <PANEL_DATA,>({\n  valgtFaktaSteg,\n  behandling,\n  registrerFaktaPanel,\n  panelEndepunkter = [],\n  aksjonspunktKoder,\n  overstyringApKoder,\n  skalPanelVisesIMeny,\n  renderPanel,\n  faktaPanelKode,\n  faktaPanelMenyTekst,\n}: OwnProps<PANEL_DATA> & FaktaPanelInitProps) => {\n  const standardPanelProps = useStandardFaktaPanelProps(aksjonspunktKoder, overstyringApKoder);\n\n  const erPanelValgt = useFaktaMenyRegistrerer(\n    registrerFaktaPanel,\n    faktaPanelKode,\n    faktaPanelMenyTekst,\n    skalPanelVisesIMeny(),\n    standardPanelProps.harApneAksjonspunkter,\n    valgtFaktaSteg,\n  );\n\n  const formatertePanelEndepunkter = panelEndepunkter.map(e => ({ key: e }));\n  const { data: panelData, state: panelDataState } = restBehandlingApiHooks.useMultipleRestApi<PANEL_DATA, any>(\n    formatertePanelEndepunkter,\n    {\n      updateTriggers: [erPanelValgt, behandling?.versjon],\n      suspendRequest: !erPanelValgt || formatertePanelEndepunkter.length === 0,\n      isCachingOn: true,\n    },\n  );\n\n  return (\n    <FaktaPanelWrapper\n      erPanelValgt={erPanelValgt}\n      dataState={formatertePanelEndepunkter.length > 0 ? panelDataState : RestApiState.SUCCESS}\n    >\n      {renderPanel({\n        ...(panelData as PANEL_DATA),\n        ...standardPanelProps,\n      })}\n    </FaktaPanelWrapper>\n  );\n};\n\nexport default FaktaDefaultInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { WrappedComponentProps } from 'react-intl';\n\nimport { hasValidDate, hasValidFodselsnummer, hasValidName, required } from '@navikt/ft-form-validators';\nimport { VerticalSpacer, FaktaGruppe, FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport { Datepicker, InputField, SelectField } from '@navikt/ft-form-hooks';\nimport { AksjonspunktCode, VergeType } from '@navikt/fp-kodeverk';\nimport { KodeverkMedNavn, Verge } from '@navikt/fp-types';\n\nimport styles from './registrereVergeFaktaForm.module.css';\n\nexport type FormValues = {\n  navn?: string;\n  gyldigFom?: string;\n  gyldigTom?: string;\n  fnr?: string;\n  organisasjonsnummer?: string;\n  vergeType?: string;\n};\n\nexport type TransformedValues = {\n  vergeType: string;\n  navn: string;\n  fnr: string;\n  organisasjonsnummer: string;\n  gyldigFom: string;\n  gyldigTom?: string;\n  kode: AksjonspunktCode.AVKLAR_VERGE;\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  vergetyper?: KodeverkMedNavn[];\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  valgtVergeType?: string;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (verge: Verge) => FormValues;\n  transformValues: (values: FormValues) => TransformedValues;\n}\n\n/**\n * RegistrereVergeFaktaForm\n *\n * Formkomponent. Registrering og oppdatering av verge.\n */\nconst RegistrereVergeFaktaForm: FunctionComponent<OwnProps & WrappedComponentProps> & StaticFunctions = ({\n  intl,\n  readOnly,\n  vergetyper = [],\n  alleMerknaderFraBeslutter,\n  valgtVergeType,\n}) => (\n  <FaktaGruppe merknaderFraBeslutter={alleMerknaderFraBeslutter[AksjonspunktCode.AVKLAR_VERGE]}>\n    <SelectField\n      name=\"vergeType\"\n      className={styles.selectWidth}\n      label={intl.formatMessage({ id: 'Verge.TypeVerge' })}\n      validate={[required]}\n      selectValues={vergetyper.map(vt => (\n        <option key={vt.kode} value={vt.kode}>\n          {vt.navn}\n        </option>\n      ))}\n      readOnly={readOnly}\n    />\n    <FlexContainer>\n      {valgtVergeType && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <FlexRow>\n            <FlexColumn className={styles.leftCol}>\n              <InputField\n                name=\"navn\"\n                label={intl.formatMessage({ id: 'Verge.Navn' })}\n                validate={[required, hasValidName]}\n                readOnly={readOnly}\n              />\n            </FlexColumn>\n            <FlexColumn>\n              {valgtVergeType !== VergeType.ADVOKAT && (\n                <InputField\n                  name=\"fnr\"\n                  label={intl.formatMessage({ id: 'Verge.FodselsNummer' })}\n                  validate={[required, hasValidFodselsnummer]}\n                  readOnly={readOnly}\n                />\n              )}\n              {valgtVergeType === VergeType.ADVOKAT && (\n                <InputField\n                  name=\"organisasjonsnummer\"\n                  label={intl.formatMessage({ id: 'Verge.Organisasjonsnummer' })}\n                  validate={[required]}\n                  readOnly={readOnly}\n                />\n              )}\n            </FlexColumn>\n          </FlexRow>\n          <VerticalSpacer sixteenPx />\n          <FlexRow>\n            <FlexColumn>\n              <Datepicker\n                name=\"gyldigFom\"\n                label={intl.formatMessage({ id: 'Verge.PeriodeFOM' })}\n                validate={[required, hasValidDate]}\n                isReadOnly={readOnly}\n              />\n            </FlexColumn>\n            <FlexColumn>\n              <Datepicker\n                name=\"gyldigTom\"\n                label={intl.formatMessage({ id: 'Verge.PeriodeTOM' })}\n                validate={[hasValidDate]}\n                isReadOnly={readOnly}\n              />\n            </FlexColumn>\n          </FlexRow>\n        </>\n      )}\n    </FlexContainer>\n  </FaktaGruppe>\n);\n\nRegistrereVergeFaktaForm.defaultProps = {\n  vergetyper: [],\n};\n\nRegistrereVergeFaktaForm.buildInitialValues = (verge: Verge): FormValues => ({\n  navn: verge.navn,\n  gyldigFom: verge.gyldigFom,\n  gyldigTom: verge.gyldigTom,\n  fnr: verge.fnr,\n  organisasjonsnummer: verge.organisasjonsnummer,\n  vergeType: verge.vergeType || undefined,\n});\n\nRegistrereVergeFaktaForm.transformValues = (values: FormValues): TransformedValues => ({\n  vergeType: values.vergeType!,\n  navn: values.navn!,\n  fnr: values.fnr!,\n  organisasjonsnummer: values.organisasjonsnummer!,\n  gyldigFom: values.gyldigFom!,\n  gyldigTom: values.gyldigTom,\n  kode: AksjonspunktCode.AVKLAR_VERGE,\n});\n\nexport default RegistrereVergeFaktaForm;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport { Aksjonspunkt, Verge, AlleKodeverk, AlleKodeverkTilbakekreving } from '@navikt/fp-types';\nimport { AksjonspunktCode, KodeverkType } from '@navikt/fp-kodeverk';\nimport { FaktaBegrunnelseTextFieldNew, FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { AksjonspunktHelpTextTemp, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AvklarVergeAp } from '@navikt/fp-types-avklar-aksjonspunkter';\n\nimport RegistrereVergeFaktaForm, { FormValues as RegistrereFormValues } from './RegistrereVergeFaktaForm';\n\ntype FormValues = RegistrereFormValues & {\n  begrunnelse?: string;\n};\n\nconst buildInitialValues = (verge: Verge, aksjonspunkter: Aksjonspunkt[]): FormValues => ({\n  begrunnelse: FaktaBegrunnelseTextFieldNew.buildInitialValues(\n    aksjonspunkter.filter(ap => ap.definisjon === AksjonspunktCode.AVKLAR_VERGE)[0],\n  ).begrunnelse,\n  ...RegistrereVergeFaktaForm.buildInitialValues(verge || {}),\n});\n\nconst transformValues = (values: FormValues): AvklarVergeAp => ({\n  ...RegistrereVergeFaktaForm.transformValues(values),\n  ...{ begrunnelse: values.begrunnelse },\n});\n\ninterface PureOwnProps {\n  submitCallback: (aksjonspunktData: AvklarVergeAp) => Promise<void>;\n  aksjonspunkter: Aksjonspunkt[];\n  alleKodeverk: AlleKodeverk | AlleKodeverkTilbakekreving;\n  verge: Verge;\n  hasOpenAksjonspunkter: boolean;\n  submittable: boolean;\n  readOnly: boolean;\n  alleMerknaderFraBeslutter: { [key: string]: { notAccepted?: boolean } };\n  formData?: any;\n  setFormData: (data: any) => void;\n}\n\n/**\n * RegistrereVergeInfoPanel\n *\n * Presentasjonskomponent. Har ansvar for Ã¥ sette opp formen for att registrere verge.\n */\nconst RegistrereVergeInfoPanel: FunctionComponent<PureOwnProps> = ({\n  hasOpenAksjonspunkter,\n  submittable,\n  readOnly,\n  alleMerknaderFraBeslutter,\n  aksjonspunkter,\n  verge,\n  alleKodeverk,\n  submitCallback,\n  formData,\n  setFormData,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || buildInitialValues(verge, aksjonspunkter),\n    shouldUnregister: true,\n  });\n\n  const valgtVergeType = formMethods.watch('vergeType');\n  const begrunnelse = formMethods.watch('begrunnelse');\n\n  const vergetyper = useMemo(\n    () => alleKodeverk[KodeverkType.VERGE_TYPE].sort((k1, k2) => k1.navn.localeCompare(k2.navn)),\n    [alleKodeverk[KodeverkType.VERGE_TYPE]],\n  );\n\n  if (aksjonspunkter.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <AksjonspunktHelpTextTemp isAksjonspunktOpen={hasOpenAksjonspunkter}>\n        {[intl.formatMessage({ id: 'RegistrereVergeInfoPanel.CheckInformation' })]}\n      </AksjonspunktHelpTextTemp>\n      <Form\n        formMethods={formMethods}\n        onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n        setDataOnUnmount={setFormData}\n      >\n        <RegistrereVergeFaktaForm\n          readOnly={readOnly}\n          intl={intl}\n          vergetyper={vergetyper}\n          valgtVergeType={valgtVergeType}\n          alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n        />\n        <VerticalSpacer twentyPx />\n        <FaktaBegrunnelseTextFieldNew\n          isSubmittable={submittable}\n          isReadOnly={readOnly}\n          hasBegrunnelse={!!begrunnelse}\n        />\n        <VerticalSpacer twentyPx />\n        <FaktaSubmitButtonNew\n          isSubmittable={submittable && !!valgtVergeType}\n          isReadOnly={readOnly}\n          isSubmitting={formMethods.formState.isSubmitting}\n          isDirty={formMethods.formState.isDirty}\n        />\n      </Form>\n    </>\n  );\n};\n\nexport default RegistrereVergeInfoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { AlleKodeverk, AlleKodeverkTilbakekreving, StandardFaktaPanelProps, Verge } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport RegistrereVergeInfoPanel from './components/RegistrereVergeInfoPanel';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ntype OwnProps = {\n  verge?: Verge;\n  alleKodeverk: AlleKodeverk | AlleKodeverkTilbakekreving;\n};\n\nconst VergeFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  verge = {},\n  aksjonspunkter,\n  alleMerknaderFraBeslutter,\n  alleKodeverk,\n  submitCallback,\n  readOnly,\n  harApneAksjonspunkter,\n  submittable,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <RegistrereVergeInfoPanel\n      verge={verge}\n      aksjonspunkter={aksjonspunkter}\n      alleMerknaderFraBeslutter={alleMerknaderFraBeslutter}\n      hasOpenAksjonspunkter={harApneAksjonspunkter}\n      alleKodeverk={alleKodeverk}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      submittable={submittable}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default VergeFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { VergeFaktaIndex } from '@navikt/fp-fakta-verge';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { Verge } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.AVKLAR_VERGE];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.VERGE];\ntype EndepunktPanelData = {\n  verge: Verge;\n};\n\n/**\n * VergeFaktaInitPanel\n */\nconst VergeFaktaInitPanel: FunctionComponent<FaktaPanelInitProps> = ({\n  valgtFaktaSteg,\n  behandling,\n  registrerFaktaPanel,\n}) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    valgtFaktaSteg={valgtFaktaSteg}\n    behandling={behandling}\n    registrerFaktaPanel={registrerFaktaPanel}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    faktaPanelKode={FaktaPanelCode.VERGE}\n    faktaPanelMenyTekst={useIntl().formatMessage({ id: 'RegistrereVergeInfoPanel.Info' })}\n    skalPanelVisesIMeny={() => !!behandling.aksjonspunkt?.some(ap => ap.definisjon === AKSJONSPUNKT_KODER[0])}\n    renderPanel={data => <VergeFaktaIndex {...data} />}\n  />\n);\n\nexport default VergeFaktaInitPanel;\n"],"names":["VergeType","intl","createIntl","messages","minLength3","minLength","maxLength1500","maxLength","FaktaBegrunnelseTextField","isReadOnly","isSubmittable","hasBegrunnelse","label","hasVurderingText","name","code","textAreaLabel","jsx","RawIntlProvider","styles","TextAreaField","required","hasValidText","getBegrunnelse","aksjonspunkt","begrunnelseFieldName","decodeHtmlEntity","values","isDisabled","isDirty","isSubmitting","FaktaSubmitButton","buttonText","onClick","jsxs","Button","ariaCheck","FormattedMessage","DEFAULT_FAKTA_KODE","DEFAULT_PROSESS_STEG_KODE","getBekreftAksjonspunktFaktaCallback","fagsak","behandling","oppdaterProsessStegOgFaktaPanelIUrl","lagreAksjonspunkter","lagreOverstyrteAksjonspunkter","overstyringApCodes","aksjonspunkter","model","ap","params","useStandardFaktaPanelProps","aksjonspunktKoder","formData","setFormData","useState","value","useContext","StandardPropsStateContext","useEffect","aksjonspunkterForSteg","useMemo","readOnly","erReadOnly","alleMerknaderFraBeslutter","getAlleMerknaderFraBeslutter","submitCallback","isAksjonspunktOpen","DEFAULT_PANEL_VALGT","useFaktaMenyRegistrerer","registrerFaktaPanel","id","tekst","skalVisesImeny","harApneAksjonspunkter","valgtFaktaSteg","erPanelValgt","setPanelValgt","erAktiv","forrigeSkalVisesIMeny","usePrevious","FaktaPanelWrapper","dataState","children","RestApiState","LoadingPanel","FaktaDefaultInitPanel","panelEndepunkter","overstyringApKoder","skalPanelVisesIMeny","renderPanel","faktaPanelKode","faktaPanelMenyTekst","standardPanelProps","formatertePanelEndepunkter","e","panelData","panelDataState","restBehandlingApiHooks","RegistrereVergeFaktaForm","vergetyper","valgtVergeType","FaktaGruppe","AksjonspunktCode","SelectField","vt","FlexContainer","Fragment","VerticalSpacer","FlexRow","FlexColumn","InputField","hasValidName","hasValidFodselsnummer","Datepicker","hasValidDate","verge","buildInitialValues","FaktaBegrunnelseTextFieldNew","transformValues","RegistrereVergeInfoPanel","hasOpenAksjonspunkter","submittable","alleKodeverk","useIntl","formMethods","useForm","begrunnelse","KodeverkType","k1","k2","AksjonspunktHelpTextTemp","Form","FaktaSubmitButtonNew","VergeFaktaIndex","AKSJONSPUNKT_KODER","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","VergeFaktaInitPanel","FaktaPanelCode","_a","data"],"mappings":"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"}