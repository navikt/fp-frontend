{"version":3,"file":"SvangerskapspengerPaneler-3c04e8ed.js","sources":["../../../../node_modules/@navikt/aksel-icons/dist/react/esm/Branching.js","../../../../packages/types/src/fodselOgTilretteleggingTsType.ts","../../../../node_modules/dayjs/plugin/minMax.js","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/tilretteleggingOgOpphold/tilrettelegging/TilretteleggingInfoPanel.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/tilretteleggingOgOpphold/tilrettelegging/TilretteleggingForm.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/tilretteleggingOgOpphold/tilrettelegging/TilretteleggingPeriodeTabellRad.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/tilretteleggingOgOpphold/opphold/OppholdForm.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/tilretteleggingOgOpphold/opphold/OppholdPeriodeTabellRad.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/tilretteleggingOgOpphold/TilretteleggingOgOppholdPerioderPanel.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/velferdspermisjon/VelferdspermisjonForm.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/velferdspermisjon/VelferdspermisjonTabellRad.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/velferdspermisjon/VelferdspermisjonPanel.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/ArbeidsforholdPanel.tsx","../../../../packages/fakta-tilrettelegging/src/components/arbeidsforhold/ArbeidsforholdFieldArray.tsx","../../../../packages/fakta-tilrettelegging/src/components/TilretteleggingFaktaForm.tsx","../../../../packages/fakta-tilrettelegging/src/TilretteleggingFaktaIndex.tsx","../../src/behandling/svangerskapspenger/faktaPaneler/FodseltilretteleggingFaktaInitPanel.tsx","../../../../packages/prosess-vilkar-svangerskap/src/components/SvangerskapVilkarForm.tsx","../../../../packages/prosess-vilkar-svangerskap/src/SvangerskapVilkarProsessIndex.tsx","../../src/behandling/svangerskapspenger/prosessPaneler/inngangsvilkarPaneler/SvangerskapInngangsvilkarInitPanel.tsx","../../src/behandling/svangerskapspenger/prosessPaneler/inngangsvilkarPaneler/OpptjeningInngangsvilkarInitPanel.tsx","../../src/behandling/svangerskapspenger/prosessPaneler/InngangsvilkarSvpProsessStegInitPanel.tsx","../../src/behandling/svangerskapspenger/prosessPaneler/TilkjentYtelseProsessStegInitPanel.tsx","../../src/behandling/svangerskapspenger/prosessPaneler/VedtakSvpProsessStegInitPanel.tsx","../../src/behandling/svangerskapspenger/SvangerskapspengerPaneler.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgBranching = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M10 4.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm2.25.75a2.25 2.25 0 0 1-1.5 2.122v4.628H12A4.25 4.25 0 0 0 16.25 8v-.378a2.25 2.25 0 1 1 1.5 0V8A5.75 5.75 0 0 1 12 13.75h-1.25v2.628a2.251 2.251 0 1 1-1.5 0V7.622a2.25 2.25 0 1 1 3-2.122Zm4.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-7 11.5h-.006a.75.75 0 1 0 .012 0H10Z\", fill: \"currentColor\" })));\n});\nexport default SvgBranching;\n","export enum SvpTilretteleggingFomKilde {\n  ENDRET_AV_SAKSBEHANDLER = 'ENDRET_AV_SAKSBEHANDLER',\n  REGISTRERT_AV_SAKSBEHANDLER = 'REGISTRERT_AV_SAKSBEHANDLER',\n  TIDLIGERE_VEDTAK = 'TIDLIGERE_VEDTAK',\n  SØKNAD = 'SØKNAD',\n}\n\nexport type Permisjon = Readonly<{\n  permisjonFom: string;\n  permisjonTom: string;\n  permisjonsprosent: number;\n  erGyldig?: boolean;\n  type: string;\n}>;\n\nexport type ArbeidsforholdTilretteleggingDato = Readonly<{\n  fom: string;\n  type: string;\n  stillingsprosent?: number;\n  overstyrtUtbetalingsgrad?: number;\n  kilde: SvpTilretteleggingFomKilde;\n  mottattDato?: string;\n}>;\n\nexport type SvpAvklartOppholdPeriode = Readonly<{\n  fom: string;\n  tom: string;\n  oppholdÅrsak: string;\n  forVisning?: boolean;\n}>;\n\nexport type ArbeidsforholdFodselOgTilrettelegging = Readonly<{\n  tilretteleggingId: number;\n  tilretteleggingBehovFom: string;\n  tilretteleggingDatoer: ArbeidsforholdTilretteleggingDato[];\n  arbeidsgiverReferanse: string;\n  uttakArbeidType: string;\n  opplysningerOmRisiko?: string;\n  opplysningerOmTilrettelegging?: string;\n  internArbeidsforholdReferanse?: string;\n  eksternArbeidsforholdReferanse?: string;\n  skalBrukes: boolean;\n  kanTilrettelegges: boolean;\n  begrunnelse?: string;\n  velferdspermisjoner: Permisjon[];\n  avklarteOppholdPerioder: SvpAvklartOppholdPeriode[];\n}>;\n\ntype FodselOgTilrettelegging = Readonly<{\n  termindato?: string;\n  fødselsdato?: string;\n  arbeidsforholdListe: ArbeidsforholdFodselOgTilrettelegging[];\n  saksbehandlet: boolean;\n}>;\n\nexport default FodselOgTilrettelegging;\n","!function(e,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_minMax=n()}(this,(function(){\"use strict\";return function(e,n,t){var i=function(e,n){if(!n||!n.length||1===n.length&&!n[0]||1===n.length&&Array.isArray(n[0])&&!n[0].length)return null;var t;1===n.length&&n[0].length>0&&(n=n[0]);t=(n=n.filter((function(e){return e})))[0];for(var i=1;i<n.length;i+=1)n[i].isValid()&&!n[i][e](t)||(t=n[i]);return t};t.max=function(){var e=[].slice.call(arguments,0);return i(\"isAfter\",e)},t.min=function(){var e=[].slice.call(arguments,0);return i(\"isBefore\",e)}}}));","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\n\nimport { ArbeidsforholdTilretteleggingDato, SvpTilretteleggingFomKilde } from '@navikt/fp-types';\nimport { BranchingIcon, CalendarIcon, PersonPregnantIcon } from '@navikt/aksel-icons';\nimport { BodyShort, Detail, HStack } from '@navikt/ds-react';\nimport { DDMMYYYY_DATE_FORMAT, calcDaysAndWeeks } from '@navikt/ft-utils';\n\nimport { tilretteleggingType } from '@navikt/fp-kodeverk';\n\nconst finnTekst = (intl: IntlShape, termindato: string, fom?: string): string => {\n  const dager = dayjs(termindato).diff(fom, 'days');\n  return intl.formatMessage({ id: 'TilretteleggingInfoPanel.Dager' }, { dager });\n};\n\nconst finnProsentSvangerskapspenger = (tilrettelegging: ArbeidsforholdTilretteleggingDato) => {\n  if (tilrettelegging.type === tilretteleggingType.HEL_TILRETTELEGGING) {\n    return 0;\n  }\n  if (tilrettelegging.type === tilretteleggingType.INGEN_TILRETTELEGGING) {\n    return 100;\n  }\n  return tilrettelegging.overstyrtUtbetalingsgrad || 0;\n};\n\nconst finnProsentArbeid = (tilrettelegging: ArbeidsforholdTilretteleggingDato) => {\n  if (tilrettelegging.type === tilretteleggingType.HEL_TILRETTELEGGING) {\n    return 100;\n  }\n  if (tilrettelegging.type === tilretteleggingType.INGEN_TILRETTELEGGING) {\n    return 0;\n  }\n  return tilrettelegging.stillingsprosent || 0;\n};\n\ninterface OwnProps {\n  tilrettelegging: ArbeidsforholdTilretteleggingDato;\n  termindato: string;\n  erTomDatoTreUkerFørTermin: boolean;\n  stillingsprosentArbeidsforhold: number;\n  tomDato: string;\n}\n\nconst TilretteleggingInfoPanel: FunctionComponent<OwnProps> = ({\n  tilrettelegging,\n  termindato,\n  erTomDatoTreUkerFørTermin,\n  stillingsprosentArbeidsforhold,\n  tomDato,\n}) => {\n  const intl = useIntl();\n\n  const dagerOgUker = calcDaysAndWeeks(tilrettelegging.fom, tomDato);\n  const fremTilTidspunkt = erTomDatoTreUkerFørTermin\n    ? intl.formatMessage({ id: 'TilretteleggingInfoPanel.TreUker' })\n    : finnTekst(intl, termindato, tomDato);\n\n  const registrertAvSaksbehandler = tilrettelegging.kilde === SvpTilretteleggingFomKilde.REGISTRERT_AV_SAKSBEHANDLER;\n\n  return (\n    <div\n      style={{\n        background: '#E5E5E5',\n        marginLeft: '-24px',\n        marginTop: '-24px',\n        marginRight: '-24px',\n        paddingBottom: '10px',\n        paddingLeft: '20px',\n        paddingRight: '50px',\n        paddingTop: '10px',\n      }}\n    >\n      <HStack justify=\"space-between\">\n        <HStack gap=\"4\">\n          <PersonPregnantIcon title=\"a11y-title\" fontSize=\"1.5rem\" />\n          <div>\n            <BodyShort size=\"small\">\n              <FormattedMessage\n                id=\"TilretteleggingInfoPanel.SvpOgArbeid\"\n                values={{\n                  svp: finnProsentSvangerskapspenger(tilrettelegging),\n                  arbeid: finnProsentArbeid(tilrettelegging),\n                }}\n              />\n            </BodyShort>\n            {stillingsprosentArbeidsforhold !== undefined && (\n              <Detail>\n                <FormattedMessage\n                  id=\"TilretteleggingInfoPanel.AvStillingsprosent\"\n                  values={{\n                    stillingsprosent: stillingsprosentArbeidsforhold,\n                  }}\n                />\n              </Detail>\n            )}\n          </div>\n        </HStack>\n        <HStack gap=\"4\">\n          <CalendarIcon title=\"a11y-title\" fontSize=\"1.5rem\" />\n          <div>\n            <BodyShort size=\"small\">\n              <FormattedMessage\n                id=\"TilretteleggingInfoPanel.Periode\"\n                values={{\n                  periode: dagerOgUker.formattedString,\n                }}\n              />\n            </BodyShort>\n            <Detail>{fremTilTidspunkt}</Detail>\n          </div>\n        </HStack>\n        {!registrertAvSaksbehandler && (\n          <HStack gap=\"4\">\n            <BranchingIcon title=\"a11y-title\" fontSize=\"1.5rem\" />\n            <div>\n              <BodyShort size=\"small\">\n                <FormattedMessage id=\"TilretteleggingInfoPanel.FraSoknad\" />\n              </BodyShort>\n              <Detail>\n                {tilrettelegging.mottattDato && (\n                  <FormattedMessage\n                    id=\"TilretteleggingInfoPanel.Sendt\"\n                    values={{\n                      dato: tilrettelegging.mottattDato\n                        ? dayjs(tilrettelegging.mottattDato).format(DDMMYYYY_DATE_FORMAT)\n                        : '',\n                    }}\n                  />\n                )}\n              </Detail>\n            </div>\n          </HStack>\n        )}\n        {registrertAvSaksbehandler && (\n          <HStack gap=\"4\">\n            <BranchingIcon title=\"a11y-title\" fontSize=\"1.5rem\" />\n            <BodyShort size=\"small\">\n              <FormattedMessage id=\"TilretteleggingInfoPanel.Saksbehandler\" />\n            </BodyShort>\n          </HStack>\n        )}\n      </HStack>\n    </div>\n  );\n};\n\nexport default TilretteleggingInfoPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { Button, HStack, Spacer } from '@navikt/ds-react';\n\nimport {\n  ArbeidsforholdFodselOgTilrettelegging,\n  ArbeidsforholdTilretteleggingDato,\n  SvpAvklartOppholdPeriode,\n  SvpTilretteleggingFomKilde,\n} from '@navikt/fp-types';\nimport { Datepicker, NumberField, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { hasValidDate, hasValidDecimal, maxValue, minValue, required } from '@navikt/ft-form-validators';\nimport { tilretteleggingType } from '@navikt/fp-kodeverk';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nimport TilretteleggingInfoPanel from './TilretteleggingInfoPanel';\n\nimport styles from './tilretteleggingForm.module.css';\n\nconst maxValue100 = maxValue(100);\nconst minValue0 = minValue(0);\n\ntype FormValues = Record<number, ArbeidsforholdTilretteleggingDato>;\n\nconst validerAtDatoErUnik =\n  (\n    intl: IntlShape,\n    alleTilrettelegginger: ArbeidsforholdTilretteleggingDato[],\n    oppholdPerioder: SvpAvklartOppholdPeriode[],\n    tilrettelegging: ArbeidsforholdTilretteleggingDato,\n  ) =>\n  (dato: string) => {\n    const tilretteleggingerMinusEditert = alleTilrettelegginger.filter(alle => alle.fom !== tilrettelegging.fom);\n    const harDuplikatFomTilrettelegging = tilretteleggingerMinusEditert.some(t => t.fom === dato);\n    const harDuplikatFomOpphold = oppholdPerioder.some(t => t.fom === dato);\n\n    return harDuplikatFomTilrettelegging || harDuplikatFomOpphold\n      ? intl.formatMessage({ id: 'TilretteleggingForm.DuplikateDatoer' })\n      : null;\n  };\n\nconst validerAtPeriodeErGyldig =\n  (intl: IntlShape, tilretteleggingBehovFom: string, termindato: string) => (dato?: string) => {\n    if (dayjs(dato).isAfter(dayjs(termindato).subtract(3, 'weeks').subtract(1, 'day'))) {\n      return intl.formatMessage({ id: 'TilretteleggingForm.EtterTermindato' });\n    }\n    if (dayjs(dato).isBefore(tilretteleggingBehovFom)) {\n      return intl.formatMessage({ id: 'TilretteleggingForm.ForForsteDato' });\n    }\n    return null;\n  };\n\nexport const finnVelferdspermisjonprosent = (arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging) =>\n  arbeidsforhold.velferdspermisjoner\n    .filter(p => p.erGyldig)\n    .map(p => p.permisjonsprosent)\n    .reduce((sum, prosent) => sum + prosent, 0);\n\nconst finnUtbetalingsgradForTilrettelegging = (\n  stillingsprosentArbeidsforhold: number,\n  velferdspermisjonprosent: number,\n  stillingsprosent: number,\n): number => {\n  const effektivStillingsprosent = stillingsprosentArbeidsforhold - velferdspermisjonprosent;\n  const defaultUtbetalingsgrad =\n    effektivStillingsprosent <= 0 ? 0 : 100 * (1 - stillingsprosent / effektivStillingsprosent);\n  return defaultUtbetalingsgrad > 0 ? +defaultUtbetalingsgrad.toFixed(2) : 0;\n};\n\nexport const finnProsentSvangerskapspenger = (\n  tilrettelegging: ArbeidsforholdTilretteleggingDato,\n  stillingsprosentArbeidsforhold: number,\n  velferdspermisjonprosent: number,\n): number | undefined => {\n  if (tilrettelegging.type === tilretteleggingType.HEL_TILRETTELEGGING) {\n    return undefined;\n  }\n  if (tilrettelegging.overstyrtUtbetalingsgrad) {\n    return tilrettelegging.overstyrtUtbetalingsgrad;\n  }\n\n  return tilrettelegging.type === tilretteleggingType.INGEN_TILRETTELEGGING\n    ? 100\n    : finnUtbetalingsgradForTilrettelegging(\n        stillingsprosentArbeidsforhold,\n        velferdspermisjonprosent,\n        // Har alltid stillingsprosent her. Bør fikse sjekk mot type så || 0 er unødvendig\n        tilrettelegging.stillingsprosent || 0,\n      );\n};\n\nconst sjekkOmTomDatoErTreUkerFørTermin = (termindato: string, tom?: string): boolean =>\n  dayjs(termindato).subtract(3, 'week').subtract(1, 'day').isSame(dayjs(tom));\n\ninterface OwnProps {\n  tilrettelegging: ArbeidsforholdTilretteleggingDato;\n  termindato: string;\n  index: number;\n  readOnly: boolean;\n  oppdaterTilrettelegging: (values: ArbeidsforholdTilretteleggingDato) => void;\n  avbrytEditering: () => void;\n  stillingsprosentArbeidsforhold: number;\n  arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging;\n  tomDatoForTilrettelegging: string;\n  slettTilrettelegging: (fomDato: string) => void;\n}\n\nconst TilretteleggingForm: FunctionComponent<OwnProps> = ({\n  tilrettelegging,\n  termindato,\n  index,\n  readOnly,\n  oppdaterTilrettelegging,\n  avbrytEditering,\n  stillingsprosentArbeidsforhold,\n  arbeidsforhold,\n  tomDatoForTilrettelegging,\n  slettTilrettelegging,\n}) => {\n  const intl = useIntl();\n\n  const erNyPeriode = !tilrettelegging.fom;\n\n  const erTomDatoTreUkerFørTermin = sjekkOmTomDatoErTreUkerFørTermin(termindato, tomDatoForTilrettelegging);\n\n  const velferdspermisjonprosent = finnVelferdspermisjonprosent(arbeidsforhold);\n\n  const prosentSvangerskapspenger = useMemo(\n    () => finnProsentSvangerskapspenger(tilrettelegging, stillingsprosentArbeidsforhold, velferdspermisjonprosent),\n    [tilrettelegging, stillingsprosentArbeidsforhold, velferdspermisjonprosent],\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: {\n      [index]: {\n        ...tilrettelegging,\n        overstyrtUtbetalingsgrad: prosentSvangerskapspenger,\n      },\n    },\n  });\n\n  const formValuesRecord = formMethods.watch();\n  const formValues = formValuesRecord[index];\n\n  const lagreIForm = (values: FormValues) => {\n    const lagreFormValues = values[index];\n    const kilde =\n      lagreFormValues.kilde === SvpTilretteleggingFomKilde.REGISTRERT_AV_SAKSBEHANDLER || erNyPeriode\n        ? SvpTilretteleggingFomKilde.REGISTRERT_AV_SAKSBEHANDLER\n        : SvpTilretteleggingFomKilde.ENDRET_AV_SAKSBEHANDLER;\n    const v = {\n      ...lagreFormValues,\n      overstyrtUtbetalingsgrad:\n        lagreFormValues.overstyrtUtbetalingsgrad !== prosentSvangerskapspenger\n          ? lagreFormValues.overstyrtUtbetalingsgrad\n          : undefined,\n      kilde,\n    };\n    oppdaterTilrettelegging(v);\n    formMethods.reset({ [index]: v });\n    return Promise.resolve();\n  };\n\n  const avbryt = () => {\n    avbrytEditering();\n    formMethods.reset();\n  };\n\n  const slett = () => {\n    slettTilrettelegging(tilrettelegging.fom);\n    return Promise.resolve();\n  };\n\n  return (\n    <FormProvider {...formMethods}>\n      <div\n        style={{\n          backgroundColor: 'white',\n          marginLeft: '-56px',\n          marginTop: '-9px',\n          marginBottom: '-8px',\n          marginRight: '-56px',\n          padding: '24px',\n        }}\n      >\n        {!erNyPeriode && (\n          <>\n            <TilretteleggingInfoPanel\n              tilrettelegging={formValues}\n              termindato={termindato}\n              erTomDatoTreUkerFørTermin={erTomDatoTreUkerFørTermin}\n              stillingsprosentArbeidsforhold={stillingsprosentArbeidsforhold}\n              tomDato={tomDatoForTilrettelegging}\n            />\n            <VerticalSpacer twentyPx />\n          </>\n        )}\n        <Datepicker\n          name={`${index}.fom`}\n          label={intl.formatMessage({\n            id: 'TilretteleggingForm.FraOgMed',\n          })}\n          validate={[\n            required,\n            hasValidDate,\n            validerAtDatoErUnik(\n              intl,\n              arbeidsforhold.tilretteleggingDatoer,\n              arbeidsforhold.avklarteOppholdPerioder,\n              tilrettelegging,\n            ),\n            validerAtPeriodeErGyldig(intl, arbeidsforhold.tilretteleggingBehovFom, termindato),\n          ]}\n          isReadOnly={readOnly}\n        />\n        <VerticalSpacer thirtyTwoPx />\n        <RadioGroupPanel\n          name={`${index}.type`}\n          label={intl.formatMessage({ id: 'TilretteleggingForm.Tilretteleggingsbehov' })}\n          validate={[required]}\n          isReadOnly={readOnly}\n          radios={[\n            {\n              label: intl.formatMessage({ id: 'TilretteleggingForm.KanGjennomfores' }),\n              value: tilretteleggingType.HEL_TILRETTELEGGING,\n            },\n            {\n              label: intl.formatMessage({ id: 'TilretteleggingForm.RedusertArbeid' }),\n              value: tilretteleggingType.DELVIS_TILRETTELEGGING,\n            },\n            {\n              label: intl.formatMessage({ id: 'TilretteleggingForm.KanIkkeGjennomfores' }),\n              value: tilretteleggingType.INGEN_TILRETTELEGGING,\n            },\n          ]}\n        />\n        {formValues.type === tilretteleggingType.DELVIS_TILRETTELEGGING && (\n          <>\n            {(tilrettelegging.stillingsprosent === undefined ||\n              tilrettelegging.type !== tilretteleggingType.DELVIS_TILRETTELEGGING ||\n              erNyPeriode ||\n              formValues.kilde === SvpTilretteleggingFomKilde.REGISTRERT_AV_SAKSBEHANDLER) && (\n              <>\n                <VerticalSpacer sixteenPx />\n                <NumberField\n                  name={`${index}.stillingsprosent`}\n                  className={styles.arbeidsprosent}\n                  readOnly={readOnly}\n                  label={intl.formatMessage({ id: 'TilretteleggingForm.Arbeidsprosent' })}\n                  description={intl.formatMessage({ id: 'TilretteleggingForm.ArbeidsprosentBeskrivelse' })}\n                  validate={[required, minValue0, maxValue100, hasValidDecimal]}\n                  forceTwoDecimalDigits\n                  onChange={value => {\n                    const utbetalingsgrad = finnUtbetalingsgradForTilrettelegging(\n                      stillingsprosentArbeidsforhold,\n                      velferdspermisjonprosent,\n                      value,\n                    );\n                    // @ts-ignore Fiks\n                    formMethods.setValue(`${index}.overstyrtUtbetalingsgrad`, utbetalingsgrad, { shouldDirty: true });\n                  }}\n                />\n              </>\n            )}\n            <VerticalSpacer sixteenPx />\n            <NumberField\n              name={`${index}.overstyrtUtbetalingsgrad`}\n              className={styles.utbetalingsgrad}\n              readOnly={readOnly}\n              label={intl.formatMessage({ id: 'TilretteleggingForm.ProsentSvp' })}\n              description={intl.formatMessage({ id: 'TilretteleggingForm.ProsentSvpBeskrivelse' })}\n              validate={[\n                required,\n                minValue0,\n                maxValue100,\n                hasValidDecimal,\n                (verdi: number) =>\n                  !stillingsprosentArbeidsforhold && verdi === 0\n                    ? intl.formatMessage({ id: 'TilretteleggingForm.AngiUtbetalingsgrad' })\n                    : null,\n              ]}\n              forceTwoDecimalDigits\n              disabled={formValues.stillingsprosent === undefined}\n            />\n          </>\n        )}\n        <VerticalSpacer thirtyTwoPx />\n        {!readOnly && (\n          <HStack gap=\"2\">\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              type=\"button\"\n              disabled={!formMethods.formState.isDirty || false}\n              loading={false}\n              onClick={formMethods.handleSubmit((values: FormValues) => lagreIForm(values))}\n            >\n              {erNyPeriode ? (\n                <FormattedMessage id=\"TilretteleggingForm.LeggTil\" />\n              ) : (\n                <FormattedMessage id=\"TilretteleggingForm.Oppdater\" />\n              )}\n            </Button>\n            <Button size=\"small\" variant=\"secondary\" onClick={avbryt} type=\"button\">\n              {erNyPeriode ? (\n                <FormattedMessage id=\"TilretteleggingForm.AvsluttOgSlett\" />\n              ) : (\n                <FormattedMessage id=\"TilretteleggingForm.Avbryt\" />\n              )}\n            </Button>\n            {!erNyPeriode && (\n              <>\n                <Spacer />\n                <Button size=\"small\" variant=\"secondary\" onClick={slett} type=\"button\">\n                  <FormattedMessage id=\"TilretteleggingForm.SlettPeriode\" />\n                </Button>\n              </>\n            )}\n          </HStack>\n        )}\n      </div>\n    </FormProvider>\n  );\n};\n\nexport default TilretteleggingForm;\n","import React, { FunctionComponent, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Table, Tag } from '@navikt/ds-react';\nimport {\n  ArbeidsforholdFodselOgTilrettelegging,\n  ArbeidsforholdTilretteleggingDato,\n  SvpTilretteleggingFomKilde,\n} from '@navikt/fp-types';\n\nimport { PeriodLabel } from '@navikt/ft-ui-komponenter';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { tilretteleggingType } from '@navikt/fp-kodeverk';\nimport TilretteleggingForm, {\n  finnVelferdspermisjonprosent,\n  finnProsentSvangerskapspenger,\n} from './TilretteleggingForm';\n\nimport styles from './tilretteleggingPeriodeTabellRad.module.css';\n\nconst utledTypeTekst = (\n  intl: IntlShape,\n  stillingsprosentArbeidsforhold: number,\n  arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging,\n  tilrettelegging: ArbeidsforholdTilretteleggingDato,\n) => {\n  const velferdspermisjonsprosent = finnVelferdspermisjonprosent(arbeidsforhold);\n  const stillingsprosent =\n    tilrettelegging.type === tilretteleggingType.INGEN_TILRETTELEGGING ? 100 : tilrettelegging.stillingsprosent;\n  const prosent =\n    tilrettelegging.fom && stillingsprosent\n      ? finnProsentSvangerskapspenger(tilrettelegging, stillingsprosentArbeidsforhold, velferdspermisjonsprosent)\n      : 0;\n  return tilrettelegging.fom\n    ? intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.SVPprosent' }, { prosent })\n    : intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.Tilrettelegging' });\n};\n\nconst utledKilde = (intl: IntlShape, tilrettelegging: ArbeidsforholdTilretteleggingDato) => {\n  if (\n    tilrettelegging.kilde === SvpTilretteleggingFomKilde.REGISTRERT_AV_SAKSBEHANDLER ||\n    tilrettelegging.fom === undefined\n  ) {\n    return intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.Saksbehandler' });\n  }\n  if (tilrettelegging.kilde === SvpTilretteleggingFomKilde.ENDRET_AV_SAKSBEHANDLER) {\n    return intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.EndretAvSaksbehandler' });\n  }\n  if (tilrettelegging.kilde === SvpTilretteleggingFomKilde.TIDLIGERE_VEDTAK) {\n    return intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.TidligereVedtak' });\n  }\n  return intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.Soknad' });\n};\n\ninterface OwnProps {\n  navn: string;\n  tilrettelegging: ArbeidsforholdTilretteleggingDato;\n  readOnly: boolean;\n  index: number;\n  openRad: boolean;\n  fjernTilrettelegging: (fomDato?: string) => void;\n  setLeggTilKnapperDisablet: React.Dispatch<React.SetStateAction<boolean>>;\n  stillingsprosentArbeidsforhold: number;\n  arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging;\n  tomDatoForTilrettelegging: string;\n  termindato: string;\n}\n\nconst TilretteleggingPeriodeTabellRad: FunctionComponent<OwnProps> = ({\n  navn,\n  tilrettelegging,\n  index,\n  readOnly,\n  openRad,\n  fjernTilrettelegging,\n  setLeggTilKnapperDisablet,\n  stillingsprosentArbeidsforhold,\n  arbeidsforhold,\n  tomDatoForTilrettelegging,\n  termindato,\n}) => {\n  const intl = useIntl();\n  const [open, setOpen] = useState(openRad);\n\n  const { setValue } = useFormContext();\n\n  const oppdaterTilrettelegging = (values: ArbeidsforholdTilretteleggingDato) => {\n    setOpen(false);\n    setLeggTilKnapperDisablet(false);\n    setValue(navn, values, { shouldDirty: true });\n  };\n\n  const avbrytEditering = () => {\n    if (!tilrettelegging.fom) {\n      fjernTilrettelegging();\n    }\n    setLeggTilKnapperDisablet(false);\n    setOpen(false);\n  };\n\n  return (\n    <Table.ExpandableRow\n      open={open}\n      expandOnRowClick\n      onOpenChange={() => setOpen(!open)}\n      onClick={() => setOpen(!open)}\n      content={\n        <TilretteleggingForm\n          tilrettelegging={tilrettelegging}\n          termindato={termindato}\n          index={index}\n          oppdaterTilrettelegging={oppdaterTilrettelegging}\n          avbrytEditering={avbrytEditering}\n          readOnly={readOnly}\n          stillingsprosentArbeidsforhold={stillingsprosentArbeidsforhold}\n          arbeidsforhold={arbeidsforhold}\n          tomDatoForTilrettelegging={tomDatoForTilrettelegging}\n          slettTilrettelegging={fjernTilrettelegging}\n        />\n      }\n      togglePlacement=\"right\"\n      className={open ? styles.openRow : styles.row}\n    >\n      <Table.DataCell>\n        {tilrettelegging.fom ? (\n          <PeriodLabel dateStringFom={tilrettelegging.fom} dateStringTom={tomDatoForTilrettelegging} />\n        ) : (\n          <FormattedMessage id=\"TilretteleggingPerioderTabellRad.Periode\" />\n        )}\n      </Table.DataCell>\n      <Table.DataCell>\n        {utledTypeTekst(intl, stillingsprosentArbeidsforhold, arbeidsforhold, tilrettelegging)}\n      </Table.DataCell>\n      <Table.DataCell>\n        <Tag size=\"small\" variant=\"neutral-moderate\">\n          {utledKilde(intl, tilrettelegging)}\n        </Tag>\n      </Table.DataCell>\n    </Table.ExpandableRow>\n  );\n};\n\nexport default TilretteleggingPeriodeTabellRad;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { FormProvider, useForm, UseFormGetValues } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { Button, HStack, Spacer } from '@navikt/ds-react';\n\nimport { ArbeidsforholdTilretteleggingDato, SvpAvklartOppholdPeriode } from '@navikt/fp-types';\nimport { Datepicker, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { dateRangesNotOverlapping, hasValidDate, required } from '@navikt/ft-form-validators';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\ntype FormValues = Record<\n  number,\n  {\n    skalVelgeDato: boolean;\n  } & SvpAvklartOppholdPeriode\n>;\n\nconst validerAtDatoErUnik =\n  (\n    intl: IntlShape,\n    oppholdPerioder: SvpAvklartOppholdPeriode[],\n    alleTilrettelegginger: ArbeidsforholdTilretteleggingDato[],\n    opphold: SvpAvklartOppholdPeriode,\n  ) =>\n  (dato: string) => {\n    const oppholdMinusEditert = oppholdPerioder.filter(alle => alle.fom !== opphold.fom);\n    const harDuplikatFomOpphold = oppholdMinusEditert.some(t => t.fom === dato);\n    const harDuplikatFomTilrettelegging = alleTilrettelegginger.some(t => t.fom === dato);\n\n    return harDuplikatFomTilrettelegging || harDuplikatFomOpphold\n      ? intl.formatMessage({ id: 'TilretteleggingForm.DuplikateDatoer' })\n      : null;\n  };\n\nconst validerTomEtterFom = (intl: IntlShape, index: number, getValues: UseFormGetValues<any>) => (tom?: string) =>\n  dayjs(tom).isBefore(getValues(`${index}.fom`)) ? intl.formatMessage({ id: 'OppholdForm.TomForFom' }) : null;\n\nconst validerAtPeriodeErGyldig =\n  (intl: IntlShape, tilrettelegginger: ArbeidsforholdTilretteleggingDato[], termindato: string) => (dato?: string) => {\n    if (dayjs(dato).isAfter(dayjs(termindato).subtract(3, 'weeks').subtract(1, 'day'))) {\n      return intl.formatMessage({ id: 'OppholdForm.EtterTermindato' });\n    }\n    const førsteDato = tilrettelegginger.reduce<string | undefined>((a, t) => {\n      if (a === undefined || dayjs(t.fom).isBefore(a)) {\n        return t.fom;\n      }\n      return a;\n    }, undefined);\n    if (dayjs(dato).isBefore(førsteDato)) {\n      return intl.formatMessage({ id: 'OppholdForm.ForForsteDato' });\n    }\n    return null;\n  };\n\nconst validerAtPeriodeIkkeOverlapper =\n  (\n    getValues: UseFormGetValues<any>,\n    index: number,\n    valgtOpphold: SvpAvklartOppholdPeriode,\n    alleOpphold: SvpAvklartOppholdPeriode[],\n  ) =>\n  () => {\n    const fomDato = getValues(`${index}.fom`);\n    const tomDato = getValues(`${index}.tom`);\n    const periodeMap = alleOpphold\n      .filter(p => p.fom !== valgtOpphold.fom)\n      .map(({ fom, tom }) => [fom, tom])\n      .concat([[fomDato, tomDato]]);\n    return periodeMap.length > 0 && dayjs(fomDato).isBefore(dayjs(tomDato))\n      ? dateRangesNotOverlapping(periodeMap)\n      : undefined;\n  };\n\ninterface OwnProps {\n  opphold: SvpAvklartOppholdPeriode;\n  index: number;\n  readOnly: boolean;\n  oppdaterOpphold: (values: SvpAvklartOppholdPeriode) => void;\n  slettOpphold: (fomDato: string) => void;\n  avbrytEditering: () => void;\n  alleTilrettelegginger: ArbeidsforholdTilretteleggingDato[];\n  alleOpphold: SvpAvklartOppholdPeriode[];\n  termindato: string;\n}\n\nconst OppholdForm: FunctionComponent<OwnProps> = ({\n  opphold,\n  index,\n  readOnly,\n  oppdaterOpphold,\n  avbrytEditering,\n  slettOpphold,\n  alleTilrettelegginger,\n  alleOpphold,\n  termindato,\n}) => {\n  const intl = useIntl();\n\n  const erNyPeriode = !opphold.fom;\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: {\n      [index]: opphold,\n    },\n  });\n\n  const lagreIForm = (values: FormValues) => {\n    oppdaterOpphold(values[index]);\n    formMethods.reset(values);\n    return Promise.resolve();\n  };\n\n  const slett = () => {\n    slettOpphold(opphold.fom);\n    return Promise.resolve();\n  };\n\n  const avbryt = () => {\n    avbrytEditering();\n    formMethods.reset();\n  };\n\n  return (\n    <FormProvider {...formMethods}>\n      <div\n        style={{\n          backgroundColor: 'white',\n          marginLeft: '-56px',\n          marginTop: '-9px',\n          marginBottom: '-8px',\n          marginRight: '-56px',\n          padding: '24px',\n        }}\n      >\n        <HStack gap=\"4\">\n          <Datepicker\n            name={`${index}.fom`}\n            label={intl.formatMessage({\n              id: 'OppholdForm.FraOgMed',\n            })}\n            validate={[\n              required,\n              hasValidDate,\n              validerAtDatoErUnik(intl, alleOpphold, alleTilrettelegginger, opphold),\n              validerAtPeriodeErGyldig(intl, alleTilrettelegginger, termindato),\n            ]}\n            isReadOnly={readOnly || opphold.forVisning}\n          />\n          <Datepicker\n            name={`${index}.tom`}\n            label={intl.formatMessage({\n              id: 'OppholdForm.TilOgMed',\n            })}\n            validate={[\n              required,\n              hasValidDate,\n              validerTomEtterFom(intl, index, formMethods.getValues),\n              validerAtPeriodeErGyldig(intl, alleTilrettelegginger, termindato),\n              validerAtPeriodeIkkeOverlapper(formMethods.getValues, index, opphold, alleOpphold),\n            ]}\n            isReadOnly={readOnly || opphold.forVisning}\n          />\n        </HStack>\n        <VerticalSpacer thirtyTwoPx />\n        <RadioGroupPanel\n          name={`${index}.oppholdÅrsak`}\n          label={intl.formatMessage({ id: 'OppholdForm.GrunnTilOpphold' })}\n          validate={[required]}\n          isReadOnly={readOnly || opphold.forVisning}\n          radios={[\n            {\n              label: intl.formatMessage({ id: 'OppholdForm.Sykepenger' }),\n              value: 'SYKEPENGER',\n            },\n            {\n              label: intl.formatMessage({ id: 'OppholdForm.Ferie' }),\n              value: 'FERIE',\n            },\n          ]}\n        />\n        <VerticalSpacer thirtyTwoPx />\n        {!opphold.forVisning && !readOnly && (\n          <HStack gap=\"2\">\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              type=\"button\"\n              disabled={!formMethods.formState.isDirty || false}\n              loading={false}\n              onClick={formMethods.handleSubmit((values: FormValues) => lagreIForm(values))}\n            >\n              {erNyPeriode ? (\n                <FormattedMessage id=\"OppholdForm.LeggTil\" />\n              ) : (\n                <FormattedMessage id=\"OppholdForm.Oppdater\" />\n              )}\n            </Button>\n            <Button size=\"small\" variant=\"secondary\" onClick={avbryt} type=\"button\">\n              {erNyPeriode ? (\n                <FormattedMessage id=\"OppholdForm.AvsluttOgSlett\" />\n              ) : (\n                <FormattedMessage id=\"OppholdForm.Avbryt\" />\n              )}\n            </Button>\n            {!erNyPeriode && (\n              <>\n                <Spacer />\n                <Button size=\"small\" variant=\"secondary\" onClick={slett} type=\"button\">\n                  <FormattedMessage id=\"OppholdForm.SlettPeriode\" />\n                </Button>\n              </>\n            )}\n          </HStack>\n        )}\n      </div>\n    </FormProvider>\n  );\n};\n\nexport default OppholdForm;\n","import React, { FunctionComponent, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { Table, Tag } from '@navikt/ds-react';\nimport { ArbeidsforholdFodselOgTilrettelegging, SvpAvklartOppholdPeriode } from '@navikt/fp-types';\nimport { PeriodLabel } from '@navikt/ft-ui-komponenter';\n\nimport OppholdForm from './OppholdForm';\n\nimport styles from './oppholdPeriodeTabellRad.module.css';\n\nconst utledTypeTekst = (intl: IntlShape, opphold: SvpAvklartOppholdPeriode) => {\n  if (opphold.oppholdÅrsak === undefined) {\n    return intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.Opphold' });\n  }\n\n  return opphold.oppholdÅrsak === 'FERIE'\n    ? intl.formatMessage({\n        id: 'TilretteleggingPerioderTabellRad.Ferie',\n      })\n    : intl.formatMessage({\n        id: 'TilretteleggingPerioderTabellRad.Sykepenger',\n      });\n};\n\nconst utledKilde = (intl: IntlShape, opphold: SvpAvklartOppholdPeriode) => {\n  if (opphold.oppholdÅrsak === 'FERIE') {\n    return opphold.forVisning\n      ? intl.formatMessage({\n          id: 'TilretteleggingPerioderTabellRad.Inntektsmelding',\n        })\n      : intl.formatMessage({\n          id: 'TilretteleggingPerioderTabellRad.Saksbehandler',\n        });\n  }\n  return intl.formatMessage({ id: 'TilretteleggingPerioderTabellRad.Saksbehandler' });\n};\n\ninterface OwnProps {\n  navn: string;\n  opphold: SvpAvklartOppholdPeriode;\n  readOnly: boolean;\n  index: number;\n  openRad: boolean;\n  fjernOpphold: (fomDato?: string) => void;\n  setLeggTilKnapperDisablet: React.Dispatch<React.SetStateAction<boolean>>;\n  arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging;\n  termindato: string;\n}\n\nconst OppholdPeriodeTabellRad: FunctionComponent<OwnProps> = ({\n  navn,\n  opphold,\n  index,\n  readOnly,\n  openRad,\n  fjernOpphold,\n  setLeggTilKnapperDisablet,\n  arbeidsforhold,\n  termindato,\n}) => {\n  const intl = useIntl();\n  const [open, setOpen] = useState(openRad);\n\n  const { setValue } = useFormContext();\n\n  const oppdaterOpphold = (values: SvpAvklartOppholdPeriode) => {\n    setOpen(false);\n    setLeggTilKnapperDisablet(false);\n    setValue(navn, values, { shouldDirty: true });\n  };\n\n  const avbrytEditering = () => {\n    if (!opphold.fom) {\n      fjernOpphold();\n    }\n    setLeggTilKnapperDisablet(false);\n    setOpen(false);\n  };\n\n  return (\n    <Table.ExpandableRow\n      open={open}\n      expandOnRowClick\n      onOpenChange={() => setOpen(!open)}\n      onClick={() => setOpen(!open)}\n      content={\n        <OppholdForm\n          opphold={opphold}\n          index={index}\n          oppdaterOpphold={oppdaterOpphold}\n          avbrytEditering={avbrytEditering}\n          readOnly={readOnly}\n          alleTilrettelegginger={arbeidsforhold.tilretteleggingDatoer}\n          alleOpphold={arbeidsforhold.avklarteOppholdPerioder}\n          termindato={termindato}\n          slettOpphold={fjernOpphold}\n        />\n      }\n      togglePlacement=\"right\"\n      className={open ? styles.openRow : styles.row}\n    >\n      <Table.DataCell>\n        {opphold.fom ? (\n          <PeriodLabel dateStringFom={opphold.fom} dateStringTom={opphold.tom} />\n        ) : (\n          <FormattedMessage id=\"TilretteleggingPerioderTabellRad.Periode\" />\n        )}\n      </Table.DataCell>\n      <Table.DataCell>{utledTypeTekst(intl, opphold)}</Table.DataCell>\n      <Table.DataCell>\n        <Tag size=\"small\" variant=\"neutral-moderate\">\n          {utledKilde(intl, opphold)}\n        </Tag>\n      </Table.DataCell>\n    </Table.ExpandableRow>\n  );\n};\n\nexport default OppholdPeriodeTabellRad;\n","import React, { useState, FunctionComponent } from 'react';\nimport { useFieldArray } from 'react-hook-form';\nimport { ArbeidsforholdFodselOgTilrettelegging, ArbeidsforholdTilretteleggingDato } from '@navikt/fp-types';\n\nimport { Button, HStack, Table } from '@navikt/ds-react';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { FormattedMessage } from 'react-intl';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport dayjs from 'dayjs';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport TilretteleggingPeriodeTabellRad from './tilrettelegging/TilretteleggingPeriodeTabellRad';\nimport OppholdPeriodeTabellRad from './opphold/OppholdPeriodeTabellRad';\n\nconst finnTilrettelegging = (\n  alleFomDatoerSortert: string[],\n  tilretteleggingDatoer: ArbeidsforholdTilretteleggingDato[],\n  index: number,\n): ArbeidsforholdTilretteleggingDato | undefined => {\n  const nesteFomDato = alleFomDatoerSortert[index + 1];\n  if (!nesteFomDato) {\n    return undefined;\n  }\n  const nesteTilrettelegging = tilretteleggingDatoer.find(t => t.fom === nesteFomDato);\n  return nesteTilrettelegging || finnTilrettelegging(alleFomDatoerSortert, tilretteleggingDatoer, index + 1);\n};\n\ninterface OwnProps {\n  arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging;\n  arbeidsforholdIndex: number;\n  readOnly: boolean;\n  stillingsprosentArbeidsforhold: number;\n  termindato: string;\n}\n\nconst TilretteleggingOgOppholdPerioderPanel: FunctionComponent<OwnProps> = ({\n  arbeidsforhold,\n  arbeidsforholdIndex,\n  readOnly,\n  stillingsprosentArbeidsforhold,\n  termindato,\n}) => {\n  const tilretteleggingStateName = `arbeidsforhold.${arbeidsforholdIndex}.tilretteleggingDatoer`;\n  const oppholdPerioderStateName = `arbeidsforhold.${arbeidsforholdIndex}.avklarteOppholdPerioder`;\n\n  const [erLeggTilKnapperDisablet, setLeggTilKnapperDisablet] = useState(false);\n\n  const { append: appendTilrettelegging, remove: removeTilrettelegging } = useFieldArray({\n    name: tilretteleggingStateName,\n  });\n  const { append: appendOpphold, remove: removeOpphold } = useFieldArray({ name: oppholdPerioderStateName });\n\n  const { tilretteleggingDatoer, avklarteOppholdPerioder } = arbeidsforhold;\n\n  const leggTilOpphold = () => {\n    setLeggTilKnapperDisablet(true);\n    appendOpphold({\n      fom: undefined,\n      tom: undefined,\n      oppholdÅrsak: undefined,\n    });\n  };\n  const leggTilTilrettelegging = () => {\n    setLeggTilKnapperDisablet(true);\n    appendTilrettelegging({\n      fom: undefined,\n      type: undefined,\n    });\n  };\n\n  const fjernTilrettelegging = (fomDato?: string) => {\n    removeTilrettelegging(\n      fomDato ? tilretteleggingDatoer.findIndex(t => t.fom === fomDato) : tilretteleggingDatoer.length - 1,\n    );\n  };\n  const fjernOpphold = (fomDato?: string) => {\n    removeOpphold(\n      fomDato ? avklarteOppholdPerioder.findIndex(t => t.fom === fomDato) : avklarteOppholdPerioder.length - 1,\n    );\n  };\n\n  const antallRader = tilretteleggingDatoer.length + avklarteOppholdPerioder.length;\n  const alleFomDatoerSortert = tilretteleggingDatoer\n    .map(t => t.fom)\n    .concat(avklarteOppholdPerioder.map(t => t.fom))\n    .sort((fom1, fom2) => {\n      if (!fom1) {\n        return 1;\n      }\n      if (!fom2) {\n        return -1;\n      }\n      return dayjs(fom1).diff(dayjs(fom2));\n    });\n\n  return (\n    <>\n      <Table size=\"small\">\n        <Table.Body>\n          {[...Array(antallRader)].map((_d, index) => {\n            const fomDato = alleFomDatoerSortert[index];\n            const tilretteleggingIndex = tilretteleggingDatoer.findIndex(t => t.fom === fomDato);\n            if (tilretteleggingIndex !== -1) {\n              const navn = `${tilretteleggingStateName}.${tilretteleggingIndex}`;\n\n              const nesteTilrettelegging = finnTilrettelegging(alleFomDatoerSortert, tilretteleggingDatoer, index);\n\n              const tomDatoForTilrettelegging = nesteTilrettelegging?.fom\n                ? dayjs(nesteTilrettelegging.fom).subtract(1, 'day').format(ISO_DATE_FORMAT)\n                : dayjs(termindato).subtract(3, 'week').subtract(1, 'day').format(ISO_DATE_FORMAT);\n\n              return (\n                <TilretteleggingPeriodeTabellRad\n                  key={navn}\n                  navn={navn}\n                  tilrettelegging={tilretteleggingDatoer[tilretteleggingIndex]}\n                  readOnly={readOnly}\n                  index={arbeidsforholdIndex + tilretteleggingIndex}\n                  openRad={fomDato === undefined}\n                  fjernTilrettelegging={fjernTilrettelegging}\n                  setLeggTilKnapperDisablet={setLeggTilKnapperDisablet}\n                  stillingsprosentArbeidsforhold={stillingsprosentArbeidsforhold}\n                  arbeidsforhold={arbeidsforhold}\n                  tomDatoForTilrettelegging={tomDatoForTilrettelegging}\n                  termindato={termindato}\n                />\n              );\n            }\n\n            const oppholdIndex = avklarteOppholdPerioder.findIndex(t => t.fom === fomDato);\n            const navn = `${oppholdPerioderStateName}.${oppholdIndex}`;\n\n            return (\n              <OppholdPeriodeTabellRad\n                key={navn}\n                navn={navn}\n                opphold={avklarteOppholdPerioder[oppholdIndex]}\n                readOnly={readOnly}\n                index={arbeidsforholdIndex + oppholdIndex}\n                openRad={fomDato === undefined}\n                fjernOpphold={fjernOpphold}\n                setLeggTilKnapperDisablet={setLeggTilKnapperDisablet}\n                arbeidsforhold={arbeidsforhold}\n                termindato={termindato}\n              />\n            );\n          })}\n        </Table.Body>\n      </Table>\n      {!readOnly && (\n        <>\n          <VerticalSpacer fourtyPx />\n          <HStack gap=\"4\">\n            <Button\n              size=\"small\"\n              variant=\"secondary\"\n              type=\"button\"\n              icon={<PlusIcon aria-hidden />}\n              onClick={leggTilTilrettelegging}\n              disabled={erLeggTilKnapperDisablet}\n            >\n              <FormattedMessage id=\"TilretteleggingFieldArray.LeggTilTilrettelegging\" />\n            </Button>\n            <Button\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={leggTilOpphold}\n              icon={<PlusIcon aria-hidden />}\n              type=\"button\"\n              disabled={erLeggTilKnapperDisablet}\n            >\n              <FormattedMessage id=\"TilretteleggingFieldArray.LeggTilOpphold\" />\n            </Button>\n          </HStack>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default TilretteleggingOgOppholdPerioderPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm, FormProvider, useFormContext } from 'react-hook-form';\nimport { Alert, Button, HStack, VStack } from '@navikt/ds-react';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { required } from '@navikt/ft-form-validators';\nimport { Permisjon } from '@navikt/fp-types';\n\nimport TilretteleggingFormValues from '../../../types/TilretteleggingFormValues';\n\ntype FormValues = Record<number, Permisjon>;\n\ninterface OwnProps {\n  velferdspermisjon: Permisjon;\n  arbeidsforholdIndex: number;\n  readOnly: boolean;\n  lukkRad: () => void;\n}\n\nconst VelferdspermisjonForm: FunctionComponent<OwnProps> = ({\n  velferdspermisjon,\n  arbeidsforholdIndex,\n  readOnly,\n  lukkRad,\n}) => {\n  const intl = useIntl();\n\n  const { setValue, getValues } = useFormContext<TilretteleggingFormValues>();\n\n  const alleVelferdpermisjoner = getValues(`arbeidsforhold.${arbeidsforholdIndex}.velferdspermisjoner`);\n  const permisjonIndex = alleVelferdpermisjoner.findIndex(\n    v => v.permisjonFom === velferdspermisjon.permisjonFom && v.permisjonTom === velferdspermisjon.permisjonTom,\n  );\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: {\n      [permisjonIndex]: {\n        ...velferdspermisjon,\n      },\n    },\n  });\n\n  const lagreForm = (values: FormValues) => {\n    const formValues = values[permisjonIndex];\n    setValue(`arbeidsforhold.${arbeidsforholdIndex}.velferdspermisjoner.${permisjonIndex}`, formValues, {\n      shouldDirty: true,\n    });\n\n    if (formValues.erGyldig && velferdspermisjon.permisjonsprosent === 100) {\n      setValue(`arbeidsforhold.${arbeidsforholdIndex}.skalBrukes`, false, {\n        shouldDirty: true,\n      });\n    }\n\n    formMethods.reset(values);\n    lukkRad();\n    return Promise.resolve();\n  };\n\n  // @ts-ignore Fiks denne\n  const erGyldig = formMethods.watch(`${permisjonIndex}.erGyldig`);\n\n  return (\n    <FormProvider {...formMethods}>\n      <div\n        style={{\n          backgroundColor: 'white',\n          marginLeft: '-56px',\n          marginTop: '-9px',\n          marginBottom: '-8px',\n          marginRight: '-56px',\n          padding: '24px',\n        }}\n      >\n        <VStack gap=\"5\">\n          <RadioGroupPanel\n            name={`${permisjonIndex}.erGyldig`}\n            label={intl.formatMessage({ id: 'VelferdspermisjonPanel.PermisjonGyldig' })}\n            description={intl.formatMessage({ id: 'VelferdspermisjonPanel.PermisjonGyldigDetaljer' })}\n            validate={[required]}\n            isReadOnly={readOnly}\n            isTrueOrFalseSelection\n            radios={[\n              {\n                label: intl.formatMessage({ id: 'VelferdspermisjonPanel.Ja' }),\n                value: 'true',\n              },\n              {\n                label: intl.formatMessage({ id: 'VelferdspermisjonPanel.Nei' }),\n                value: 'false',\n              },\n            ]}\n          />\n          {erGyldig && velferdspermisjon.permisjonsprosent === 100 && (\n            <Alert variant=\"info\" size=\"small\">\n              <FormattedMessage id=\"VelferdspermisjonPanel.Permisjon100ProsentOgGyldig\" />\n            </Alert>\n          )}\n          <HStack>\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              type=\"button\"\n              disabled={!formMethods.formState.isDirty || false}\n              onClick={formMethods.handleSubmit(lagreForm)}\n            >\n              <FormattedMessage id=\"VelferdspermisjonPanel.Oppdater\" />\n            </Button>\n          </HStack>\n        </VStack>\n      </div>\n    </FormProvider>\n  );\n};\nexport default VelferdspermisjonForm;\n","import React, { useState, FunctionComponent, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Table, Tag } from '@navikt/ds-react';\nimport { Permisjon } from '@navikt/fp-types';\nimport { PeriodLabel } from '@navikt/ft-ui-komponenter';\n\nimport VelferdspermisjonForm from './VelferdspermisjonForm';\n\nimport styles from './velferdspermisjonTabellRad.module.css';\n\nconst utledStyleForRad = (open: boolean, erIkkeValgt: boolean) => {\n  if (erIkkeValgt) {\n    return styles.apRow;\n  }\n  return open ? styles.openRow : styles.row;\n};\n\ninterface OwnProps {\n  velferdspermisjon: Permisjon;\n  arbeidsforholdIndex: number;\n  readOnly: boolean;\n}\n\nconst VelferdspermisjonTabellRad: FunctionComponent<OwnProps> = ({\n  velferdspermisjon,\n  arbeidsforholdIndex,\n  readOnly,\n}) => {\n  const erIkkeValgt = velferdspermisjon.erGyldig === undefined || velferdspermisjon.erGyldig === null;\n\n  const [open, setOpen] = useState(erIkkeValgt);\n  const lukkRad = useCallback(() => setOpen(false), []);\n\n  return (\n    <Table.ExpandableRow\n      open={open}\n      expandOnRowClick\n      onOpenChange={() => setOpen(!open)}\n      onClick={() => setOpen(!open)}\n      content={\n        <VelferdspermisjonForm\n          velferdspermisjon={velferdspermisjon}\n          arbeidsforholdIndex={arbeidsforholdIndex}\n          readOnly={readOnly}\n          lukkRad={lukkRad}\n        />\n      }\n      togglePlacement=\"right\"\n      className={utledStyleForRad(open, erIkkeValgt)}\n    >\n      <Table.DataCell>\n        <PeriodLabel dateStringFom={velferdspermisjon.permisjonFom} dateStringTom={velferdspermisjon.permisjonTom} />\n      </Table.DataCell>\n      <Table.DataCell>\n        <FormattedMessage\n          id=\"VelferdspermisjonPanel.Permisjon\"\n          values={{\n            type: velferdspermisjon.type.toLowerCase(),\n            permisjon: velferdspermisjon.permisjonsprosent,\n          }}\n        />\n      </Table.DataCell>\n      <Table.DataCell>\n        <Tag variant=\"neutral-moderate\" size=\"small\">\n          <FormattedMessage id=\"VelferdspermisjonPanel.AAregisteret\" />\n        </Tag>\n      </Table.DataCell>\n    </Table.ExpandableRow>\n  );\n};\n\nexport default VelferdspermisjonTabellRad;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { HStack, Label, Table } from '@navikt/ds-react';\n\nimport { Permisjon } from '@navikt/fp-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\n\nimport VelferdspermisjonTabellRad from './VelferdspermisjonTabellRad';\n\nimport styles from './velferdspermisjonPanel.module.css';\n\ninterface OwnProps {\n  velferdspermisjoner: Permisjon[];\n  arbeidsforholdIndex: number;\n  readOnly: boolean;\n}\n\nconst VelferdspermisjonPanel: FunctionComponent<OwnProps> = ({\n  velferdspermisjoner,\n  arbeidsforholdIndex,\n  readOnly,\n}) => {\n  const intl = useIntl();\n  return (\n    <>\n      <VerticalSpacer fourtyPx />\n      <HStack gap=\"4\">\n        <Label size=\"small\">\n          <FormattedMessage id=\"TilretteleggingForArbeidsgiverPanel.Velferdspermisjon\" />\n        </Label>\n        {velferdspermisjoner.some(permisjon => permisjon.erGyldig === undefined || permisjon.erGyldig === null) && (\n          <ExclamationmarkTriangleFillIcon\n            title={intl.formatMessage({ id: 'TilretteleggingForArbeidsgiverPanel.ErPermisjonGyldg' })}\n            className={styles.image}\n          />\n        )}\n      </HStack>\n      <VerticalSpacer sixteenPx />\n      <Table size=\"small\">\n        <Table.Body>\n          {velferdspermisjoner.map(permisjon => (\n            <VelferdspermisjonTabellRad\n              key={permisjon.permisjonFom}\n              velferdspermisjon={permisjon}\n              readOnly={readOnly}\n              arbeidsforholdIndex={arbeidsforholdIndex}\n            />\n          ))}\n        </Table.Body>\n      </Table>\n    </>\n  );\n};\n\nexport default VelferdspermisjonPanel;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { Label } from '@navikt/ds-react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { UseFormGetValues, useFormContext } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport minMax from 'dayjs/plugin/minMax';\n\nimport { CheckboxField, Datepicker } from '@navikt/ft-form-hooks';\nimport { hasValidDate, required } from '@navikt/ft-form-validators';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { ArbeidsforholdFodselOgTilrettelegging, Permisjon } from '@navikt/fp-types';\n\nimport TilretteleggingOgOppholdPerioderPanel from './tilretteleggingOgOpphold/TilretteleggingOgOppholdPerioderPanel';\nimport VelferdspermisjonPanel from './velferdspermisjon/VelferdspermisjonPanel';\n\ndayjs.extend(minMax);\n\nconst validerTidligereEnn =\n  (intl: IntlShape, getValues: UseFormGetValues<any>, tilretteleggingBehovFom: string) => (): string | null => {\n    const termindato = getValues('termindato');\n    const fødselsdato = getValues('fødselsdato');\n\n    const tilretteleggingFomDato = dayjs(tilretteleggingBehovFom);\n    const treUkerFørTermindato = dayjs(termindato).subtract(3, 'week').subtract(1, 'day');\n    const tidligsteTidspunkt = fødselsdato ? dayjs.min(treUkerFørTermindato, dayjs(fødselsdato)) : treUkerFørTermindato;\n\n    if (\n      tidligsteTidspunkt &&\n      tilretteleggingFomDato.isValid() &&\n      !tilretteleggingFomDato.isBefore(tidligsteTidspunkt)\n    ) {\n      return intl.formatMessage(\n        {\n          id: 'TilretteleggingForArbeidsgiverPanel.TilretteleggingTidligereEnn',\n        },\n        {\n          dato: tidligsteTidspunkt.format(DDMMYYYY_DATE_FORMAT),\n        },\n      );\n    }\n    return null;\n  };\n\nexport const filtrerVelferdspermisjoner = (\n  velferdspermisjoner: Permisjon[],\n  tilretteleggingBehovFom: string,\n): Permisjon[] =>\n  velferdspermisjoner.filter(\n    permisjon =>\n      !dayjs(permisjon.permisjonFom).isAfter(tilretteleggingBehovFom) &&\n      (permisjon.permisjonTom == null || !dayjs(permisjon.permisjonTom).isBefore(tilretteleggingBehovFom)),\n  );\n\ninterface OwnProps {\n  arbeidsforhold: ArbeidsforholdFodselOgTilrettelegging;\n  arbeidsforholdIndex: number;\n  readOnly: boolean;\n  visInfoAlert: boolean;\n  stillingsprosentArbeidsforhold: number;\n}\n\nconst ArbeidsforholdPanel: FunctionComponent<OwnProps> = ({\n  arbeidsforhold,\n  arbeidsforholdIndex,\n  readOnly,\n  visInfoAlert,\n  stillingsprosentArbeidsforhold,\n}) => {\n  const intl = useIntl();\n\n  const { getValues, watch } = useFormContext();\n\n  const tilretteleggingBehovFom = watch(`arbeidsforhold.${arbeidsforholdIndex}.tilretteleggingBehovFom`);\n\n  const filtrerteVelferdspermisjoner = useMemo(\n    () => filtrerVelferdspermisjoner(arbeidsforhold.velferdspermisjoner, tilretteleggingBehovFom),\n    [arbeidsforhold.velferdspermisjoner, tilretteleggingBehovFom],\n  );\n\n  const termindato = watch('termindato');\n\n  return (\n    <>\n      {visInfoAlert && (\n        <>\n          <VerticalSpacer eightPx />\n          <AksjonspunktHelpTextHTML>\n            {[<FormattedMessage id=\"TilretteleggingFaktaForm.UndersokNarmere\" key=\"svangerskapspengerAp\" />]}\n          </AksjonspunktHelpTextHTML>\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n      <VerticalSpacer sixteenPx />\n      <CheckboxField\n        readOnly={readOnly}\n        name={`arbeidsforhold.${arbeidsforholdIndex}.skalBrukes`}\n        label={<FormattedMessage id=\"TilretteleggingForArbeidsgiverPanel.SkalHaSvpForArbeidsforhold\" />}\n      />\n      <VerticalSpacer sixteenPx />\n      <Datepicker\n        name={`arbeidsforhold.${arbeidsforholdIndex}.tilretteleggingBehovFom`}\n        label={intl.formatMessage({\n          id: 'TilretteleggingForArbeidsgiverPanel.DatoForTilrettelegging',\n        })}\n        validate={[required, hasValidDate, validerTidligereEnn(intl, getValues, tilretteleggingBehovFom)]}\n        isReadOnly={readOnly}\n      />\n      {filtrerteVelferdspermisjoner.length > 0 && (\n        <VelferdspermisjonPanel\n          velferdspermisjoner={filtrerteVelferdspermisjoner}\n          arbeidsforholdIndex={arbeidsforholdIndex}\n          readOnly={readOnly}\n        />\n      )}\n      <VerticalSpacer fourtyPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"TilretteleggingForArbeidsgiverPanel.Perioder\" />\n      </Label>\n      <VerticalSpacer sixteenPx />\n      <TilretteleggingOgOppholdPerioderPanel\n        arbeidsforhold={arbeidsforhold}\n        arbeidsforholdIndex={arbeidsforholdIndex}\n        readOnly={readOnly}\n        stillingsprosentArbeidsforhold={stillingsprosentArbeidsforhold}\n        termindato={termindato}\n      />\n    </>\n  );\n};\n\nexport default ArbeidsforholdPanel;\n","import React, { FunctionComponent } from 'react';\nimport dayjs from 'dayjs';\nimport { BodyShort, ExpansionCard, Heading, Tag } from '@navikt/ds-react';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Buldings3Icon, ExclamationmarkTriangleFillIcon } from '@navikt/aksel-icons';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport {\n  AoIArbeidsforhold,\n  ArbeidsforholdFodselOgTilrettelegging,\n  ArbeidsgiverOpplysningerPerId,\n  KodeverkMedNavn,\n} from '@navikt/fp-types';\n\nimport { FormattedMessage } from 'react-intl';\nimport styles from './arbeidsforholdFieldArray.module.css';\nimport ArbeidsforholdPanel from './ArbeidsforholdPanel';\n\nconst getEndCharFromId = (id?: string): string => (id ? `...${id.substring(id.length - 4, id.length)}` : '');\n\nconst finnArbeidsforhold = (\n  alleIafAf: AoIArbeidsforhold[],\n  internArbeidsforholdReferanse?: string,\n): AoIArbeidsforhold | undefined => {\n  if (alleIafAf.length > 1) {\n    return alleIafAf.find(iafAf => iafAf.internArbeidsforholdId === internArbeidsforholdReferanse);\n  }\n  return alleIafAf.length === 1 ? alleIafAf[0] : undefined;\n};\n\nconst erInnenforIntervall = (tilretteleggingBehovFom: string, fomDato: string, tomDato: string): boolean => {\n  const dato = dayjs(tilretteleggingBehovFom);\n  return !(dato.isBefore(dayjs(fomDato)) || dato.isAfter(dayjs(tomDato)));\n};\n\nconst finnSvpTagTekst = (skalBrukes: boolean, visInfoAlert: boolean) => {\n  if (visInfoAlert && skalBrukes) {\n    return <FormattedMessage id=\"ArbeidsforholdFieldArray.SvpIkkeBeregnet\" />;\n  }\n  return skalBrukes ? (\n    <FormattedMessage id=\"ArbeidsforholdFieldArray.SkalHaSvp\" />\n  ) : (\n    <FormattedMessage id=\"ArbeidsforholdFieldArray.SkalIkkeHaSvp\" />\n  );\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  sorterteArbeidsforhold: ArbeidsforholdFodselOgTilrettelegging[];\n  aoiArbeidsforhold: AoIArbeidsforhold[];\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  uttakArbeidTyper: KodeverkMedNavn[];\n}\n\nconst ArbeidsforholdFieldArray: FunctionComponent<OwnProps> = ({\n  sorterteArbeidsforhold,\n  aoiArbeidsforhold,\n  arbeidsgiverOpplysningerPerId,\n  readOnly,\n  uttakArbeidTyper,\n}) => {\n  const { control } = useFormContext();\n  const { fields } = useFieldArray({\n    control,\n    name: 'arbeidsforhold',\n  });\n\n  return (\n    <>\n      {fields.map((field, index: number) => {\n        const arbeidsforhold = sorterteArbeidsforhold[index];\n        const arbeidsgiverOpplysning = arbeidsgiverOpplysningerPerId[arbeidsforhold.arbeidsgiverReferanse];\n\n        const alleIafAf = aoiArbeidsforhold.filter(\n          iaya => iaya.arbeidsgiverIdent === arbeidsforhold.arbeidsgiverReferanse,\n        );\n\n        const af = finnArbeidsforhold(alleIafAf, arbeidsforhold.internArbeidsforholdReferanse);\n        const alleAf = alleIafAf.filter(a => a.arbeidsgiverIdent === arbeidsforhold.arbeidsgiverReferanse);\n\n        const visInfoAlert = af\n          ? !erInnenforIntervall(arbeidsforhold.tilretteleggingBehovFom, af.fom, af.tom)\n          : alleAf.every(a => !erInnenforIntervall(arbeidsforhold.tilretteleggingBehovFom, a.fom, a.tom));\n\n        const stillingsprosentArbeidsforhold = af ? af.stillingsprosent : 100;\n\n        const arbeidType = uttakArbeidTyper.find(type => type.kode === arbeidsforhold.uttakArbeidType);\n\n        return (\n          <React.Fragment key={field.id}>\n            <ExpansionCard aria-label=\"arbeidsgiver\" defaultOpen className={styles.card}>\n              <ExpansionCard.Header>\n                <div className={styles.padding}>\n                  <FlexContainer>\n                    <FlexRow>\n                      <FlexColumn>\n                        <Buldings3Icon color=\"var(--a-blue-600)\" className={styles.image} />\n                      </FlexColumn>\n                      <FlexColumn>\n                        <Heading size=\"small\">{arbeidsgiverOpplysning?.navn || arbeidType?.navn}</Heading>\n                      </FlexColumn>\n                      {arbeidsgiverOpplysning?.identifikator && (\n                        <FlexColumn className={styles.idMargin}>\n                          <BodyShort size=\"small\">{arbeidsgiverOpplysning.identifikator}</BodyShort>\n                        </FlexColumn>\n                      )}\n                      {arbeidsforhold.eksternArbeidsforholdReferanse && (\n                        <FlexColumn className={styles.idMargin}>\n                          <BodyShort size=\"small\">\n                            {getEndCharFromId(arbeidsforhold.eksternArbeidsforholdReferanse)}\n                          </BodyShort>\n                        </FlexColumn>\n                      )}\n                      <FlexColumn className={styles.tagMargin}>\n                        <Tag size=\"small\" variant=\"neutral-moderate\">\n                          <FormattedMessage\n                            id=\"ArbeidsforholdFieldArray.Stillingsprosent\"\n                            values={{ stillingsprosent: stillingsprosentArbeidsforhold }}\n                          />\n                        </Tag>\n                      </FlexColumn>\n                      <FlexColumn>\n                        <Tag size=\"small\" variant=\"neutral-moderate\">\n                          {finnSvpTagTekst(arbeidsforhold.skalBrukes, visInfoAlert)}\n                        </Tag>\n                      </FlexColumn>\n                      {arbeidsforhold.skalBrukes && visInfoAlert && (\n                        <FlexColumn>\n                          <ExclamationmarkTriangleFillIcon color=\"var(--a-orange-600)\" className={styles.image} />\n                        </FlexColumn>\n                      )}\n                    </FlexRow>\n                  </FlexContainer>\n                </div>\n              </ExpansionCard.Header>\n              <ExpansionCard.Content>\n                <ArbeidsforholdPanel\n                  arbeidsforhold={arbeidsforhold}\n                  arbeidsforholdIndex={index}\n                  readOnly={readOnly}\n                  visInfoAlert={arbeidsforhold.skalBrukes && visInfoAlert}\n                  stillingsprosentArbeidsforhold={stillingsprosentArbeidsforhold}\n                />\n              </ExpansionCard.Content>\n            </ExpansionCard>\n            <VerticalSpacer twentyPx />\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n};\n\nexport default ArbeidsforholdFieldArray;\n","import React, { useMemo, FunctionComponent, useState, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Datepicker, Form, TextAreaField } from '@navikt/ft-form-hooks';\nimport { AksjonspunktHelpTextHTML, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { hasValidDate, hasValidText, maxLength, required } from '@navikt/ft-form-validators';\n\nimport {\n  Aksjonspunkt,\n  ArbeidsgiverOpplysningerPerId,\n  FodselOgTilrettelegging,\n  ArbeidsforholdFodselOgTilrettelegging,\n  AoIArbeidsforhold,\n  KodeverkMedNavn,\n} from '@navikt/fp-types';\nimport { BekreftSvangerskapspengerAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { FaktaSubmitButtonNew } from '@navikt/fp-fakta-felles';\nimport { Alert, HStack } from '@navikt/ds-react';\n\nimport ArbeidsforholdFieldArray from './arbeidsforhold/ArbeidsforholdFieldArray';\nimport { filtrerVelferdspermisjoner } from './arbeidsforhold/ArbeidsforholdPanel';\nimport TilretteleggingFormValues from '../types/TilretteleggingFormValues';\n\nconst maxLength1500 = maxLength(1500);\n\nconst sorterArbeidsforhold = (\n  alleArbeidsforhold: ArbeidsforholdFodselOgTilrettelegging[],\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId,\n): ArbeidsforholdFodselOgTilrettelegging[] =>\n  [...(alleArbeidsforhold || [])].sort((a, b) => {\n    const arbeidsgiverOpplysningerA1 = arbeidsgiverOpplysningerPerId[a.arbeidsgiverReferanse];\n    const arbeidsgiverOpplysningerA2 = arbeidsgiverOpplysningerPerId[b.arbeidsgiverReferanse];\n    return arbeidsgiverOpplysningerA1 && arbeidsgiverOpplysningerA2\n      ? arbeidsgiverOpplysningerA1.navn.localeCompare(arbeidsgiverOpplysningerA2.navn)\n      : 0;\n  });\n\nconst getAksjonspunktBegrunnelse = (aksjonspunkter: Aksjonspunkt[]): string | undefined => {\n  const aksjonpunkt = aksjonspunkter.find(ap => ap.definisjon === AksjonspunktCode.FODSELTILRETTELEGGING);\n  return aksjonpunkt ? aksjonpunkt.begrunnelse : undefined;\n};\n\nconst getIsBegrunnelseRequired = (isDirty: boolean) => (value?: string) => value !== undefined || isDirty;\n\nconst utledOmEnSkalVurdereVelferdspermisjoner = (alleArbeidsforhold: ArbeidsforholdFodselOgTilrettelegging[]) =>\n  alleArbeidsforhold.some(arbeidsforhold =>\n    filtrerVelferdspermisjoner(arbeidsforhold.velferdspermisjoner, arbeidsforhold.tilretteleggingBehovFom).some(\n      p => p.erGyldig === undefined || p.erGyldig === null,\n    ),\n  );\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  readOnly: boolean;\n  hasOpenAksjonspunkter: boolean;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  svangerskapspengerTilrettelegging: FodselOgTilrettelegging;\n  aoiArbeidsforhold: AoIArbeidsforhold[];\n  aksjonspunkter: Aksjonspunkt[];\n  submitCallback: (data: BekreftSvangerskapspengerAp) => Promise<void>;\n  formData: TilretteleggingFormValues;\n  setFormData: (data: TilretteleggingFormValues) => void;\n  submittable: boolean;\n  uttakArbeidTyper: KodeverkMedNavn[];\n}\n\n/**\n * TilretteleggingFaktaForm\n *\n * Viser tillrettlegging før svangerskapspenger\n */\nconst TilretteleggingFaktaForm: FunctionComponent<OwnProps> = ({\n  behandlingVersjon,\n  readOnly,\n  hasOpenAksjonspunkter,\n  arbeidsgiverOpplysningerPerId,\n  aksjonspunkter,\n  svangerskapspengerTilrettelegging,\n  aoiArbeidsforhold,\n  submitCallback,\n  formData,\n  setFormData,\n  submittable,\n  uttakArbeidTyper,\n}) => {\n  const intl = useIntl();\n\n  const sorterteArbeidsforhold = useMemo(\n    () => sorterArbeidsforhold(svangerskapspengerTilrettelegging.arbeidsforholdListe, arbeidsgiverOpplysningerPerId),\n    [behandlingVersjon],\n  );\n\n  const formMethods = useForm<TilretteleggingFormValues>({\n    defaultValues: formData || {\n      arbeidsforhold: sorterteArbeidsforhold,\n      termindato: svangerskapspengerTilrettelegging ? svangerskapspengerTilrettelegging.termindato : '',\n      fødselsdato: svangerskapspengerTilrettelegging ? svangerskapspengerTilrettelegging.fødselsdato : '',\n      begrunnelse: getAksjonspunktBegrunnelse(aksjonspunkter),\n    },\n  });\n\n  const fødselsdato = svangerskapspengerTilrettelegging?.fødselsdato || '';\n\n  const isRequiredFn = getIsBegrunnelseRequired(formMethods.formState.isDirty);\n\n  const arbeidsforhold = formMethods.watch('arbeidsforhold');\n\n  const skalVurdereVelferdspermisjoner = utledOmEnSkalVurdereVelferdspermisjoner(sorterteArbeidsforhold);\n  const harIkkeVurdertAlleVelferdspermisjoner = utledOmEnSkalVurdereVelferdspermisjoner(arbeidsforhold);\n\n  const harIkkeValgtNoenArbeidsforhold = !arbeidsforhold.some(a => a.skalBrukes);\n  const harPeriodeSomIkkeErFerdig = arbeidsforhold.some(\n    a => a.tilretteleggingDatoer.some(td => !td.fom) || a.avklarteOppholdPerioder.some(td => !td.fom),\n  );\n  const harArbeidsforholdUtenTilrettelegging = arbeidsforhold.some(\n    a => a.skalBrukes && a.tilretteleggingDatoer.length === 0,\n  );\n  const harGyldig100PermisjonDerEnHarValgtSvp = arbeidsforhold.some(\n    a => a.skalBrukes && a.velferdspermisjoner.some(vp => vp.erGyldig && vp.permisjonsprosent === 100),\n  );\n\n  const [visFeil, skalViseFeil] = useState(false);\n\n  const harFeil =\n    harIkkeVurdertAlleVelferdspermisjoner ||\n    harIkkeValgtNoenArbeidsforhold ||\n    harPeriodeSomIkkeErFerdig ||\n    harArbeidsforholdUtenTilrettelegging ||\n    harGyldig100PermisjonDerEnHarValgtSvp;\n\n  const onSubmit = useCallback(\n    (values: TilretteleggingFormValues) => {\n      if (harFeil) {\n        skalViseFeil(true);\n        return Promise.resolve();\n      }\n      return submitCallback({\n        kode: AksjonspunktCode.FODSELTILRETTELEGGING,\n        termindato: values.termindato,\n        fødselsdato: values.fødselsdato,\n        begrunnelse: values.begrunnelse,\n        bekreftetSvpArbeidsforholdList: values.arbeidsforhold,\n      });\n    },\n    [harFeil, submitCallback],\n  );\n\n  return (\n    <Form formMethods={formMethods} setDataOnUnmount={setFormData} onSubmit={onSubmit}>\n      {hasOpenAksjonspunkter && (\n        <>\n          <AksjonspunktHelpTextHTML>\n            {skalVurdereVelferdspermisjoner\n              ? [\n                  <FormattedMessage\n                    id=\"TilretteleggingFaktaForm.AksjonspunktOgVelferdspermisjoner\"\n                    key=\"svangerskapspengerAp\"\n                  />,\n                ]\n              : [<FormattedMessage id=\"TilretteleggingFaktaForm.Aksjonspunkt\" key=\"svangerskapspengerAp\" />]}\n          </AksjonspunktHelpTextHTML>\n          <VerticalSpacer fourtyPx />\n        </>\n      )}\n      <HStack gap=\"4\" wrap>\n        <Datepicker\n          name=\"termindato\"\n          label={intl.formatMessage({ id: 'TilretteleggingFaktaForm.Termindato' })}\n          validate={[required, hasValidDate]}\n          isReadOnly={readOnly}\n        />\n        {fødselsdato && (\n          <Datepicker\n            name=\"fødselsdato\"\n            label={intl.formatMessage({ id: 'TilretteleggingFaktaForm.Fodselsdato' })}\n            validate={[required, hasValidDate]}\n            isReadOnly={readOnly}\n          />\n        )}\n      </HStack>\n      <VerticalSpacer fourtyPx />\n      <ArbeidsforholdFieldArray\n        sorterteArbeidsforhold={arbeidsforhold}\n        aoiArbeidsforhold={aoiArbeidsforhold}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        readOnly={readOnly}\n        uttakArbeidTyper={uttakArbeidTyper}\n      />\n      {harIkkeVurdertAlleVelferdspermisjoner && visFeil && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"error\">\n            <FormattedMessage id=\"TilretteleggingFaktaForm.IkkeAllePermisjonerVurdert\" />\n          </Alert>\n        </>\n      )}\n      {harIkkeValgtNoenArbeidsforhold && visFeil && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"error\">\n            <FormattedMessage id=\"TilretteleggingFaktaForm.HarIkkeValgtArbeidsforhold\" />\n          </Alert>\n        </>\n      )}\n      {harPeriodeSomIkkeErFerdig && visFeil && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"error\">\n            <FormattedMessage id=\"TilretteleggingFaktaForm.PeriodeIkkeLagtTil\" />\n          </Alert>\n        </>\n      )}\n      {harArbeidsforholdUtenTilrettelegging && visFeil && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"error\">\n            <FormattedMessage id=\"TilretteleggingFaktaForm.ArbeidsforholdUtenTilrettelegging\" />\n          </Alert>\n        </>\n      )}\n      {harGyldig100PermisjonDerEnHarValgtSvp && visFeil && (\n        <>\n          <VerticalSpacer sixteenPx />\n          <Alert variant=\"error\">\n            <FormattedMessage id=\"TilretteleggingFaktaForm.ValgtSvpVedGyldig100Permisjon\" />\n          </Alert>\n        </>\n      )}\n      <VerticalSpacer fourtyPx />\n      <TextAreaField\n        name=\"begrunnelse\"\n        label={intl.formatMessage({ id: 'TilretteleggingFaktaForm.BegrunnEndringene' })}\n        validate={[isRequiredFn, maxLength1500, hasValidText]}\n        maxLength={1500}\n        readOnly={readOnly}\n      />\n      <VerticalSpacer fourtyPx />\n      <FaktaSubmitButtonNew\n        isSubmittable={submittable}\n        isReadOnly={readOnly}\n        isSubmitting={formMethods.formState.isSubmitting}\n        isDirty={formMethods.formState.isDirty}\n      />\n      <VerticalSpacer fourtyPx />\n    </Form>\n  );\n};\n\nexport default TilretteleggingFaktaForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport {\n  ArbeidsgiverOpplysningerPerId,\n  StandardFaktaPanelProps,\n  FodselOgTilrettelegging,\n  ArbeidOgInntektsmelding,\n} from '@navikt/fp-types';\nimport { KodeverkType } from '@navikt/fp-kodeverk';\n\nimport TilretteleggingFaktaForm from './components/TilretteleggingFaktaForm';\n\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  svangerskapspengerTilrettelegging: FodselOgTilrettelegging;\n  arbeidOgInntekt: ArbeidOgInntektsmelding;\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\nconst TilretteleggingFaktaIndex: FunctionComponent<OwnProps & StandardFaktaPanelProps> = ({\n  behandling,\n  svangerskapspengerTilrettelegging,\n  aksjonspunkter,\n  submitCallback,\n  readOnly,\n  harApneAksjonspunkter,\n  submittable,\n  arbeidsgiverOpplysningerPerId,\n  formData,\n  setFormData,\n  arbeidOgInntekt,\n  alleKodeverk,\n}) => (\n  <RawIntlProvider value={intl}>\n    <TilretteleggingFaktaForm\n      behandlingVersjon={behandling.versjon}\n      svangerskapspengerTilrettelegging={svangerskapspengerTilrettelegging}\n      aoiArbeidsforhold={arbeidOgInntekt.arbeidsforhold}\n      aksjonspunkter={aksjonspunkter}\n      submitCallback={submitCallback}\n      readOnly={readOnly}\n      hasOpenAksjonspunkter={harApneAksjonspunkter}\n      submittable={submittable}\n      arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n      formData={formData}\n      setFormData={setFormData}\n      uttakArbeidTyper={alleKodeverk[KodeverkType.UTTAK_ARBEID_TYPE]}\n    />\n  </RawIntlProvider>\n);\n\nexport default TilretteleggingFaktaIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { TilretteleggingFaktaIndex } from '@navikt/fp-fakta-tilrettelegging';\nimport { FaktaPanelCode } from '@navikt/fp-konstanter';\nimport { ArbeidOgInntektsmelding, ArbeidsgiverOpplysningerPerId, FodselOgTilrettelegging } from '@navikt/fp-types';\n\nimport FaktaPanelInitProps from '../../felles/typer/faktaPanelInitProps';\nimport FaktaDefaultInitPanel from '../../felles/fakta/FaktaDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.FODSELTILRETTELEGGING];\n\nconst OVERSTYRING_AP_CODES = [AksjonspunktCode.OVERSTYR_AVKLAR_STARTDATO];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.ARBEID_OG_INNTEKT,\n  BehandlingApiKeys.SVANGERSKAPSPENGER_TILRETTELEGGING,\n];\ntype EndepunktPanelData = {\n  arbeidOgInntekt: ArbeidOgInntektsmelding;\n  svangerskapspengerTilrettelegging: FodselOgTilrettelegging;\n};\n\ninterface OwnProps {\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n}\n\n/**\n * FodseltilretteleggingFaktaInitPanel\n */\nconst FodseltilretteleggingFaktaInitPanel: FunctionComponent<OwnProps & FaktaPanelInitProps> = ({\n  arbeidsgiverOpplysningerPerId,\n  ...props\n}) => (\n  <FaktaDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    overstyringApKoder={OVERSTYRING_AP_CODES}\n    faktaPanelKode={FaktaPanelCode.FODSELTILRETTELEGGING}\n    faktaPanelMenyTekst={useIntl().formatMessage({\n      id: 'FodselOgTilretteleggingInfoPanel.FaktaFodselOgTilrettelegging',\n    })}\n    skalPanelVisesIMeny={() => true}\n    renderPanel={data => (\n      <TilretteleggingFaktaIndex\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        {...data}\n        readOnly={\n          data.readOnly ||\n          !props.behandling.aksjonspunkt.some((ap: { definisjon: any }) =>\n            AKSJONSPUNKT_KODER.some(kode => kode === ap.definisjon),\n          )\n        }\n      />\n    )}\n  />\n);\n\nexport default FodseltilretteleggingFaktaInitPanel;\n","import React, { FunctionComponent, useCallback, useEffect, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport moment from 'moment';\nimport { Label } from '@navikt/ds-react';\n\nimport { Form } from '@navikt/ft-form-hooks';\nimport {\n  VilkarType,\n  vilkarUtfallType,\n  KodeverkType,\n  AksjonspunktCode,\n  tilretteleggingType,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport {\n  ProsessStegBegrunnelseTextFieldNew,\n  VilkarResultPicker,\n  ProsessPanelTemplate,\n} from '@navikt/fp-prosess-felles';\nimport {\n  Aksjonspunkt,\n  AlleKodeverk,\n  ArbeidsforholdFodselOgTilrettelegging,\n  ArbeidsforholdTilretteleggingDato,\n  Behandling,\n  FodselOgTilrettelegging,\n  Vilkar,\n} from '@navikt/fp-types';\nimport { BekreftSvangerskapspengervilkarAp } from '@navikt/fp-types-avklar-aksjonspunkter';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\n\nconst finnesUttakPåArbfor = (arbfor: ArbeidsforholdFodselOgTilrettelegging): boolean => {\n  const finnesAnnenTilretteleggingEnnHel = arbfor.tilretteleggingDatoer.some(\n    (dato: ArbeidsforholdTilretteleggingDato) => dato.type !== tilretteleggingType.HEL_TILRETTELEGGING,\n  );\n  const finnesHelTilretteleggingEtterBehovOppstår = arbfor.tilretteleggingDatoer.some(\n    (dato: ArbeidsforholdTilretteleggingDato) =>\n      dato.type === tilretteleggingType.HEL_TILRETTELEGGING &&\n      moment(dato.fom).isAfter(moment(arbfor.tilretteleggingBehovFom)),\n  );\n  return finnesAnnenTilretteleggingEnnHel || finnesHelTilretteleggingEtterBehovOppstår;\n};\n\nconst finnesInnvilgetUttak = (svangerskapspengerTilrettelegging: FodselOgTilrettelegging): boolean =>\n  svangerskapspengerTilrettelegging && svangerskapspengerTilrettelegging.arbeidsforholdListe\n    ? svangerskapspengerTilrettelegging.arbeidsforholdListe.some(arbfor => finnesUttakPåArbfor(arbfor))\n    : false;\n\ntype FormValues = {\n  erVilkarOk?: boolean;\n  avslagCode?: string;\n  avslagDato?: string;\n  begrunnelse?: string;\n};\n\nconst buildInitialValues = (\n  aksjonspunkter: Aksjonspunkt[],\n  status: string,\n  behandlingsresultat?: Behandling['behandlingsresultat'],\n): FormValues => ({\n  ...VilkarResultPicker.buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n  ...ProsessStegBegrunnelseTextFieldNew.buildInitialValues(aksjonspunkter),\n});\n\nconst transformValues = (values: FormValues): BekreftSvangerskapspengervilkarAp => ({\n  ...VilkarResultPicker.transformValues(values),\n  ...ProsessStegBegrunnelseTextFieldNew.transformValues(values),\n  kode: AksjonspunktCode.SVANGERSKAPSVILKARET,\n});\n\ninterface OwnProps {\n  behandlingsresultat?: Behandling['behandlingsresultat'];\n  aksjonspunkter: Aksjonspunkt[];\n  status: string;\n  vilkar: Vilkar[];\n  submitCallback: (aksjonspunktData: BekreftSvangerskapspengervilkarAp) => Promise<void>;\n  readOnly: boolean;\n  readOnlySubmitButton: boolean;\n  isApOpen: boolean;\n  alleKodeverk: AlleKodeverk;\n  erIkkeGodkjentAvBeslutter: boolean;\n  svangerskapspengerTilrettelegging: FodselOgTilrettelegging;\n  formData?: FormValues;\n  setFormData: (data: FormValues) => void;\n}\n\n/**\n * SvangerskapsvilkårForm\n */\nconst SvangerskapVilkarForm: FunctionComponent<OwnProps> = ({\n  readOnly,\n  readOnlySubmitButton,\n  isApOpen,\n  erIkkeGodkjentAvBeslutter,\n  svangerskapspengerTilrettelegging,\n  aksjonspunkter,\n  behandlingsresultat,\n  alleKodeverk,\n  submitCallback,\n  status,\n  formData,\n  setFormData,\n}) => {\n  const finnesUttak = useMemo(\n    () => finnesInnvilgetUttak(svangerskapspengerTilrettelegging),\n    [svangerskapspengerTilrettelegging],\n  );\n\n  const intl = useIntl();\n\n  const initialValues = useMemo(\n    () => buildInitialValues(aksjonspunkter, status, behandlingsresultat),\n    [behandlingsresultat, aksjonspunkter, status],\n  );\n  const formMethods = useForm<FormValues>({\n    defaultValues: formData || initialValues,\n  });\n\n  const erVilkarOk = formMethods.watch('erVilkarOk');\n\n  useEffect(() => {\n    if (erVilkarOk) {\n      formMethods.clearErrors();\n    }\n  }, [erVilkarOk]);\n\n  const avslagsarsaker = alleKodeverk[KodeverkType.AVSLAGSARSAK][VilkarType.SVANGERSKAPVILKARET];\n\n  const isOpenAksjonspunkt = aksjonspunkter.some(ap => ap.status === aksjonspunktStatus.OPPRETTET);\n  const originalErVilkarOk = isOpenAksjonspunkt ? undefined : vilkarUtfallType.OPPFYLT === status;\n\n  const bTag = useCallback((chunks: any) => <b>{chunks}</b>, []);\n\n  return (\n    <Form\n      formMethods={formMethods}\n      onSubmit={(values: FormValues) => submitCallback(transformValues(values))}\n      setDataOnUnmount={setFormData}\n    >\n      <ProsessPanelTemplate\n        title={intl.formatMessage({ id: 'SvangerskapVilkarForm.Svangerskap' })}\n        isAksjonspunktOpen={isApOpen}\n        readOnlySubmitButton={readOnlySubmitButton}\n        readOnly={readOnly}\n        originalErVilkarOk={originalErVilkarOk}\n        erIkkeGodkjentAvBeslutter={erIkkeGodkjentAvBeslutter}\n        isDirty={formMethods.formState.isDirty}\n        isSubmitting={formMethods.formState.isSubmitting}\n      >\n        <Label size=\"small\">\n          <FormattedMessage id=\"SvangerskapVilkarForm.RettTilSvp\" />\n        </Label>\n        {!finnesUttak && (\n          <>\n            <VerticalSpacer sixteenPx />\n            <Label size=\"small\">\n              <FormattedMessage id=\"SvangerskapVilkarForm.IkkeInnvilgetUttak\" />\n            </Label>\n          </>\n        )}\n        <VilkarResultPicker\n          avslagsarsaker={avslagsarsaker}\n          readOnly={readOnly}\n          skalKunneInnvilge={finnesUttak}\n          customVilkarOppfyltText={<FormattedMessage id=\"SvangerskapVilkarForm.Oppfylt\" />}\n          customVilkarIkkeOppfyltText={<FormattedMessage id=\"SvangerskapVilkarForm.IkkeOppfylt\" values={{ b: bTag }} />}\n        />\n        <ProsessStegBegrunnelseTextFieldNew readOnly={readOnly} notRequired={erVilkarOk} />\n      </ProsessPanelTemplate>\n    </Form>\n  );\n};\n\nexport default SvangerskapVilkarForm;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { FodselOgTilrettelegging, StandardProsessPanelProps } from '@navikt/fp-types';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport SvangerskapVilkarForm from './components/SvangerskapVilkarForm';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  svangerskapspengerTilrettelegging: FodselOgTilrettelegging;\n}\n\nconst SvangerskapVilkarProsessIndex: FunctionComponent<StandardProsessPanelProps & OwnProps> = ({\n  behandling,\n  aksjonspunkter,\n  status,\n  vilkar,\n  submitCallback,\n  isReadOnly,\n  readOnlySubmitButton,\n  isAksjonspunktOpen,\n  alleKodeverk,\n  alleMerknaderFraBeslutter,\n  svangerskapspengerTilrettelegging,\n  formData,\n  setFormData,\n}) => (\n  <RawIntlProvider value={intl}>\n    <SvangerskapVilkarForm\n      behandlingsresultat={behandling.behandlingsresultat}\n      aksjonspunkter={aksjonspunkter}\n      status={status}\n      vilkar={vilkar}\n      submitCallback={submitCallback}\n      readOnly={isReadOnly}\n      readOnlySubmitButton={readOnlySubmitButton}\n      isApOpen={isAksjonspunktOpen}\n      alleKodeverk={alleKodeverk}\n      svangerskapspengerTilrettelegging={svangerskapspengerTilrettelegging}\n      erIkkeGodkjentAvBeslutter={aksjonspunkter.some(a => alleMerknaderFraBeslutter[a.definisjon]?.notAccepted)}\n      formData={formData}\n      setFormData={setFormData}\n    />\n  </RawIntlProvider>\n);\n\nexport default SvangerskapVilkarProsessIndex;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { VilkarType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { SvangerskapVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-svangerskap';\nimport { FodselOgTilrettelegging } from '@navikt/fp-types';\n\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport { BehandlingApiKeys } from '../../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.SVANGERSKAPSVILKARET];\n\nconst VILKAR_KODER = [VilkarType.SVANGERSKAPVILKARET];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.SVANGERSKAPSPENGER_TILRETTELEGGING];\n\ntype EndepunktPanelData = {\n  svangerskapspengerTilrettelegging: FodselOgTilrettelegging;\n};\n\ninterface OwnProps {\n  behandlingVersjon: number;\n}\n\nconst SvangerskapInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"SVANGERSKAP\"\n      hentInngangsvilkarPanelTekst={() => intl.formatMessage({ id: 'SvangerskapVilkarForm.FyllerVilkår' })}\n      renderPanel={data => (\n        <>\n          <SvangerskapVilkarProsessIndex {...data} />\n          <VerticalSpacer thirtyTwoPx />\n        </>\n      )}\n    />\n  );\n};\n\nexport default SvangerskapInngangsvilkarInitPanel;\n","import React, { FunctionComponent } from 'react';\n\nimport { VilkarType, AksjonspunktCode } from '@navikt/fp-kodeverk';\nimport { AksessRettigheter, Opptjening } from '@navikt/fp-types';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { OpptjeningVilkarProsessIndex } from '@navikt/fp-prosess-vilkar-opptjening';\n\nimport { useIntl } from 'react-intl';\nimport InngangsvilkarPanelInitProps from '../../../felles/typer/inngangsvilkarPanelInitProps';\nimport InngangsvilkarDefaultInitPanel from '../../../felles/prosess/InngangsvilkarDefaultInitPanel';\nimport OverstyringPanelDef from '../../../felles/prosess/OverstyringPanelDef';\nimport { BehandlingApiKeys } from '../../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_OPPTJENINGSVILKARET];\n\nconst VILKAR_KODER = [VilkarType.OPPTJENINGSPERIODE, VilkarType.OPPTJENINGSVILKARET];\n\nconst ENDEPUNKTER_PANEL_DATA = [BehandlingApiKeys.OPPTJENING];\ntype EndepunktPanelData = {\n  opptjening: Opptjening;\n};\n\ninterface OwnProps {\n  behandlingVersjon: number;\n  rettigheter: AksessRettigheter;\n}\n\nconst OpptjeningInngangsvilkarInitPanel: FunctionComponent<OwnProps & InngangsvilkarPanelInitProps> = ({\n  behandlingVersjon,\n  rettigheter,\n  ...props\n}) => {\n  const intl = useIntl();\n  return (\n    <InngangsvilkarDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      behandlingVersjon={behandlingVersjon}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      vilkarKoder={VILKAR_KODER}\n      inngangsvilkarPanelKode=\"OPPTJENINGSVILKARET\"\n      hentInngangsvilkarPanelTekst={() => intl.formatMessage({ id: 'OpptjeningVilkarView.VurderOmSøkerHarRett' })}\n      renderPanel={(data, erOverstyrt, toggleOverstyring) => (\n        <>\n          {data.aksjonspunkter.length === 0 && (\n            <>\n              <OverstyringPanelDef\n                aksjonspunkter={data.aksjonspunkter}\n                aksjonspunktKode={AksjonspunktCode.OVERSTYRING_AV_OPPTJENINGSVILKARET}\n                vilkar={data.vilkar}\n                vilkarKoder={VILKAR_KODER}\n                panelTekstKode=\"Inngangsvilkar.Opptjeningsvilkaret\"\n                erMedlemskapsPanel={false}\n                toggleOverstyring={toggleOverstyring}\n                erOverstyrt={erOverstyrt}\n                overrideReadOnly={\n                  data.isReadOnly ||\n                  (props.harInngangsvilkarApentAksjonspunkt && !(data.isAksjonspunktOpen || erOverstyrt))\n                }\n                kanOverstyreAccess={rettigheter.kanOverstyreAccess}\n              />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n          {data.aksjonspunkter.length > 0 && (\n            <>\n              <OpptjeningVilkarProsessIndex erSvpFagsak lovReferanse={data.vilkar[0].lovReferanse} {...data} />\n              <VerticalSpacer thirtyTwoPx />\n            </>\n          )}\n        </>\n      )}\n    />\n  );\n};\n\nexport default OpptjeningInngangsvilkarInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { AksessRettigheter } from '@navikt/fp-types';\n\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport InngangsvilkarDefaultInitWrapper from '../../felles/prosess/InngangsvilkarDefaultInitWrapper';\nimport SvangerskapInngangsvilkarInitPanel from './inngangsvilkarPaneler/SvangerskapInngangsvilkarInitPanel';\nimport MedlemskapInngangsvilkarInitPanel from '../../fellesPaneler/prosess/inngangsvilkarPaneler/MedlemskapInngangsvilkarInitPanel';\nimport OpptjeningInngangsvilkarInitPanel from './inngangsvilkarPaneler/OpptjeningInngangsvilkarInitPanel';\nimport InngangsvilkarPanelInitProps from '../../felles/typer/inngangsvilkarPanelInitProps';\n\ninterface OwnProps {\n  apentFaktaPanelInfo?: { urlCode: string; text: string };\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  rettigheter: AksessRettigheter;\n}\n\nconst InngangsvilkarSvpProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  behandling,\n  valgtProsessSteg,\n  registrerProsessPanel,\n  apentFaktaPanelInfo,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  rettigheter,\n}) => {\n  const leftPanels = useCallback(\n    (props: InngangsvilkarPanelInitProps) => (\n      <>\n        <SvangerskapInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} {...props} />\n        <MedlemskapInngangsvilkarInitPanel\n          behandlingVersjon={behandling.versjon}\n          rettigheter={rettigheter}\n          {...props}\n        />\n      </>\n    ),\n    [behandling.versjon, rettigheter],\n  );\n\n  const rightPanels = useCallback(\n    (props: InngangsvilkarPanelInitProps) => (\n      <OpptjeningInngangsvilkarInitPanel behandlingVersjon={behandling.versjon} rettigheter={rettigheter} {...props} />\n    ),\n    [behandling.versjon, rettigheter],\n  );\n\n  return (\n    <InngangsvilkarDefaultInitWrapper\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      registrerProsessPanel={registrerProsessPanel}\n      apentFaktaPanelInfo={apentFaktaPanelInfo}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      leftPanels={leftPanels}\n      rightPanels={rightPanels}\n    />\n  );\n};\n\nexport default InngangsvilkarSvpProsessStegInitPanel;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { AksjonspunktCode, vilkarUtfallType } from '@navikt/fp-kodeverk';\nimport { TilkjentYtelseProsessIndex } from '@navikt/fp-prosess-tilkjent-ytelse';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  ArbeidsgiverOpplysningerPerId,\n  BeregningsresultatDagytelse,\n  Fagsak,\n  FamilieHendelseSamling,\n  Feriepengegrunnlag,\n  Personoversikt,\n  Soknad,\n} from '@navikt/fp-types';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport { BehandlingApiKeys, requestBehandlingApi } from '../../../data/behandlingContextApi';\n\nconst AKSJONSPUNKT_KODER = [AksjonspunktCode.VURDER_TILBAKETREKK];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.BEREGNINGRESULTAT_DAGYTELSE,\n  BehandlingApiKeys.FAMILIEHENDELSE,\n  BehandlingApiKeys.SOKNAD,\n  BehandlingApiKeys.FERIEPENGEGRUNNLAG,\n];\ntype EndepunktPanelData = {\n  familiehendelse: FamilieHendelseSamling;\n  soknad: Soknad;\n  feriepengegrunnlag: Feriepengegrunnlag;\n  beregningresultatDagytelse: BeregningsresultatDagytelse;\n};\n\ninterface OwnProps {\n  arbeidsgiverOpplysningerPerId: ArbeidsgiverOpplysningerPerId;\n  fagsak: Fagsak;\n  personoversikt: Personoversikt;\n}\n\nconst TilkjentYtelseProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  arbeidsgiverOpplysningerPerId,\n  fagsak,\n  personoversikt,\n  ...props\n}) => (\n  <ProsessDefaultInitPanel<EndepunktPanelData>\n    {...props}\n    panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n    aksjonspunktKoder={AKSJONSPUNKT_KODER}\n    prosessPanelKode={ProsessStegCode.TILKJENT_YTELSE}\n    prosessPanelMenyTekst={useIntl().formatMessage({ id: 'Behandlingspunkt.TilkjentYtelse' })}\n    skalPanelVisesIMeny={() => true}\n    hentOverstyrtStatus={() =>\n      requestBehandlingApi.hasPath(BehandlingApiKeys.BEREGNINGRESULTAT_DAGYTELSE.name)\n        ? vilkarUtfallType.OPPFYLT\n        : vilkarUtfallType.IKKE_VURDERT\n    }\n    renderPanel={data => (\n      <TilkjentYtelseProsessIndex\n        fagsak={fagsak}\n        arbeidsgiverOpplysningerPerId={arbeidsgiverOpplysningerPerId}\n        personoversikt={personoversikt}\n        beregningresultat={data?.beregningresultatDagytelse}\n        {...data}\n      />\n    )}\n  />\n);\n\nexport default TilkjentYtelseProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  isAvslag,\n  fagsakYtelseType,\n  AksjonspunktCode,\n  vilkarUtfallType,\n  aksjonspunktStatus,\n} from '@navikt/fp-kodeverk';\nimport { VedtakProsessIndex, ForhandsvisData } from '@navikt/fp-prosess-vedtak';\nimport { ProsessStegCode } from '@navikt/fp-konstanter';\nimport {\n  Aksjonspunkt,\n  Behandling,\n  Behandlingsresultat,\n  Beregningsgrunnlag,\n  BeregningsresultatDagytelse,\n  Fagsak,\n  ForhåndsvisMeldingParams,\n  Medlemskap,\n  SimuleringResultat,\n  TilbakekrevingValg,\n  Vilkar,\n} from '@navikt/fp-types';\nimport { forhandsvisDokument } from '@navikt/ft-utils';\n\nimport ProsessDefaultInitPanel from '../../felles/prosess/ProsessDefaultInitPanel';\nimport ProsessPanelInitProps from '../../felles/typer/prosessPanelInitProps';\nimport IverksetterVedtakStatusModal from '../../felles/modaler/vedtak/IverksetterVedtakStatusModal';\nimport FatterVedtakStatusModal from '../../felles/modaler/vedtak/FatterVedtakStatusModal';\nimport useStandardProsessPanelProps from '../../felles/prosess/useStandardProsessPanelProps';\nimport { BehandlingApiKeys, restBehandlingApiHooks } from '../../../data/behandlingContextApi';\n\nconst hasOnlyClosedAps = (aksjonspunkter: Aksjonspunkt[], vedtakAksjonspunkter: Aksjonspunkt[]): boolean =>\n  aksjonspunkter\n    .filter(ap => !vedtakAksjonspunkter.some(vap => vap.definisjon === ap.definisjon))\n    .every(ap => ap.status !== aksjonspunktStatus.OPPRETTET);\n\nconst hasAksjonspunkt = (ap: Aksjonspunkt): boolean =>\n  ap.definisjon === AksjonspunktCode.OVERSTYR_BEREGNING ||\n  ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_ALENEOMSORG ||\n  ap.definisjon === AksjonspunktCode.MANUELL_KONTROLL_AV_OM_BRUKER_HAR_OMSORG ||\n  ap.definisjon === AksjonspunktCode.VURDER_SOKNADSFRIST_FORELDREPENGER;\n\nconst isAksjonspunktOpenAndOfType = (ap: Aksjonspunkt): boolean =>\n  hasAksjonspunkt(ap) && ap.status === aksjonspunktStatus.OPPRETTET;\n\nconst findStatusForVedtak = (\n  vilkar: Vilkar[],\n  aksjonspunkter: Aksjonspunkt[],\n  vedtakAksjonspunkter: Aksjonspunkt[],\n  behandlingsresultat?: Behandlingsresultat,\n): string => {\n  if (vilkar.length === 0) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (\n    hasOnlyClosedAps(aksjonspunkter, vedtakAksjonspunkter) &&\n    vilkar.some(v => v.vilkarStatus === vilkarUtfallType.IKKE_OPPFYLT)\n  ) {\n    return vilkarUtfallType.IKKE_OPPFYLT;\n  }\n\n  if (\n    vilkar.some(v => v.vilkarStatus === vilkarUtfallType.IKKE_VURDERT) ||\n    aksjonspunkter.some(isAksjonspunktOpenAndOfType)\n  ) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (!hasOnlyClosedAps(aksjonspunkter, vedtakAksjonspunkter)) {\n    return vilkarUtfallType.IKKE_VURDERT;\n  }\n\n  if (behandlingsresultat && isAvslag(behandlingsresultat.type)) {\n    return vilkarUtfallType.IKKE_OPPFYLT;\n  }\n  return vilkarUtfallType.OPPFYLT;\n};\n\nconst getForhandsvisCallback =\n  (\n    forhandsvisMelding: (params: ForhåndsvisMeldingParams, keepData?: boolean) => Promise<unknown>,\n    fagsak: Fagsak,\n    behandling: Behandling,\n  ) =>\n  (data: ForhandsvisData) => {\n    const brevData = {\n      ...data,\n      behandlingUuid: behandling.uuid,\n      fagsakYtelseType: fagsak.fagsakYtelseType,\n    };\n\n    return forhandsvisMelding(brevData).then(response => forhandsvisDokument(response));\n  };\n\nconst IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER = [\n  AksjonspunktCode.FATTER_VEDTAK,\n  AksjonspunktCode.FORESLA_VEDTAK_MANUELT,\n  AksjonspunktCode.VEDTAK_UTEN_TOTRINNSKONTROLL,\n  AksjonspunktCode.VURDERE_ANNEN_YTELSE,\n  AksjonspunktCode.VURDERE_DOKUMENT,\n  AksjonspunktCode.KONTROLLER_REVURDERINGSBEHANDLING_VARSEL_VED_UGUNST,\n  AksjonspunktCode.KONTROLL_AV_MAUNELT_OPPRETTET_REVURDERINGSBEHANDLING,\n];\n\nconst getLagringSideeffekter =\n  (\n    toggleIverksetterVedtakModal: (visIverksetterModal: boolean) => void,\n    toggleFatterVedtakModal: (skalFatterModal: boolean) => void,\n    toggleOppdatereFagsakContext: (skalHenteFagsak: boolean) => void,\n  ) =>\n  (aksjonspunktModels: { kode: string; skalBrukeOverstyrendeFritekstBrev: boolean }[]) => {\n    toggleOppdatereFagsakContext(false);\n\n    // Returner funksjon som blir kjørt etter lagring av aksjonspunkt(er)\n    return () => {\n      const skalTilTotrinnskontroll = aksjonspunktModels.some(\n        ap => ap.kode === AksjonspunktCode.FORESLA_VEDTAK || ap.skalBrukeOverstyrendeFritekstBrev,\n      );\n      if (skalTilTotrinnskontroll) {\n        toggleFatterVedtakModal(true);\n      } else {\n        toggleIverksetterVedtakModal(true);\n      }\n    };\n  };\n\nconst AKSJONSPUNKT_KODER = [...IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER, AksjonspunktCode.FORESLA_VEDTAK];\n\nconst ENDEPUNKTER_PANEL_DATA = [\n  BehandlingApiKeys.TILBAKEKREVINGVALG,\n  BehandlingApiKeys.BEREGNINGSRESULTAT_DAGYTELSE_ORIGINAL_BEHANDLING,\n  BehandlingApiKeys.MEDLEMSKAP,\n  BehandlingApiKeys.SIMULERING_RESULTAT,\n  BehandlingApiKeys.BEREGNINGRESULTAT_DAGYTELSE,\n  BehandlingApiKeys.BEREGNINGSGRUNNLAG,\n];\ntype EndepunktPanelData = {\n  tilbakekrevingvalg?: TilbakekrevingValg;\n  beregningsresultatOriginalBehandling?: {\n    'beregningsresultat-foreldrepenger'?: BeregningsresultatDagytelse;\n  };\n  medlemskap: Medlemskap;\n  simuleringResultat: SimuleringResultat;\n  beregningresultatDagytelse?: BeregningsresultatDagytelse;\n  beregningsgrunnlag?: Beregningsgrunnlag;\n};\n\ninterface OwnProps {\n  toggleOppdatereFagsakContext: (skalHenteFagsak: boolean) => void;\n  fagsak: Fagsak;\n  opneSokeside: () => void;\n}\n\nconst VedtakSvpProsessStegInitPanel: FunctionComponent<OwnProps & ProsessPanelInitProps> = ({\n  toggleOppdatereFagsakContext,\n  fagsak,\n  opneSokeside,\n  ...props\n}) => {\n  const intl = useIntl();\n  const [visIverksetterVedtakModal, toggleIverksetterVedtakModal] = useState(false);\n  const [visFatterVedtakModal, toggleFatterVedtakModal] = useState(false);\n  const lagringSideEffekter = getLagringSideeffekter(\n    toggleIverksetterVedtakModal,\n    toggleFatterVedtakModal,\n    toggleOppdatereFagsakContext,\n  );\n\n  const standardPanelProps = useStandardProsessPanelProps();\n\n  const { startRequest: forhandsvisMelding } = restBehandlingApiHooks.useRestApiRunner(\n    BehandlingApiKeys.PREVIEW_MESSAGE,\n  );\n  const previewCallback = useCallback(\n    getForhandsvisCallback(forhandsvisMelding, fagsak, standardPanelProps.behandling),\n    [standardPanelProps.behandling.versjon],\n  );\n\n  const lukkIverksetterModal = useCallback(() => {\n    toggleIverksetterVedtakModal(false);\n    opneSokeside();\n  }, []);\n  const lukkFatterModal = useCallback(() => {\n    toggleFatterVedtakModal(false);\n    opneSokeside();\n  }, []);\n\n  const { aksjonspunkt: aksjonspunkter, vilkår } = props.behandling;\n\n  return (\n    <ProsessDefaultInitPanel<EndepunktPanelData>\n      {...props}\n      panelEndepunkter={ENDEPUNKTER_PANEL_DATA}\n      aksjonspunktKoder={AKSJONSPUNKT_KODER}\n      prosessPanelKode={ProsessStegCode.VEDTAK}\n      prosessPanelMenyTekst={intl.formatMessage({ id: 'Behandlingspunkt.Vedtak' })}\n      skalPanelVisesIMeny={() => true}\n      hentOverstyrtStatus={standardData =>\n        findStatusForVedtak(\n          vilkår || [],\n          aksjonspunkter || [],\n          standardData.aksjonspunkter,\n          standardData.behandling.behandlingsresultat,\n        )\n      }\n      lagringSideEffekter={lagringSideEffekter}\n      hentSkalMarkeresSomAktiv={standardData =>\n        !standardData.behandling.behandlingHenlagt &&\n        findStatusForVedtak(\n          vilkår || [],\n          aksjonspunkter || [],\n          standardData.aksjonspunkter,\n          standardData.behandling.behandlingsresultat,\n        ) !== vilkarUtfallType.IKKE_VURDERT\n      }\n      renderPanel={data => (\n        <>\n          <IverksetterVedtakStatusModal\n            visModal={visIverksetterVedtakModal}\n            lukkModal={lukkIverksetterModal}\n            behandlingsresultat={data.behandling.behandlingsresultat}\n          />\n          <FatterVedtakStatusModal\n            visModal={visFatterVedtakModal}\n            lukkModal={lukkFatterModal}\n            tekst={intl.formatMessage({ id: 'FatterVedtakStatusModal.SendtBeslutter' })}\n          />\n          <VedtakProsessIndex\n            ytelseTypeKode={fagsakYtelseType.SVANGERSKAPSPENGER}\n            previewCallback={previewCallback}\n            {...data}\n            aksjonspunkter={aksjonspunkter}\n            vilkar={vilkår}\n          />\n        </>\n      )}\n    />\n  );\n};\n\nexport default VedtakSvpProsessStegInitPanel;\n","import React, { FunctionComponent, useCallback } from 'react';\n\nimport { AksessRettigheter, ArbeidsgiverOpplysningerPerId, Behandling, Fagsak, Personoversikt } from '@navikt/fp-types';\n\nimport BehandlingContainer from '../felles/BehandlingContainer';\nimport SakenFaktaInitPanel from '../fellesPaneler/fakta/SakenFaktaInitPanel';\nimport ArbeidsforholdFaktaInitPanel from '../fellesPaneler/fakta/ArbeidsforholdFaktaInitPanel';\nimport ArbeidOgInntektFaktaInitPanel from '../fellesPaneler/fakta/ArbeidOgInntektFaktaInitPanel';\nimport YtelserFaktaInitPanel from '../fellesPaneler/fakta/YtelserFaktaInitPanel';\nimport VergeFaktaInitPanel from '../fellesPaneler/fakta/VergeFaktaInitPanel';\nimport FodseltilretteleggingFaktaInitPanel from './faktaPaneler/FodseltilretteleggingFaktaInitPanel';\nimport MedlemskapsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/MedlemskapsvilkaretFaktaInitPanel';\nimport OpptjeningsvilkaretFaktaInitPanel from '../fellesPaneler/fakta/OpptjeningsvilkaretFaktaInitPanel';\nimport BeregningFaktaInitPanel from '../fellesPaneler/fakta/BeregningFaktaInitPanel';\nimport FordelingFaktaInitPanel from '../fellesPaneler/fakta/FordelingFaktaInitPanel';\nimport OpplysningspliktProsessStegInitPanel from '../fellesPaneler/prosess/OpplysningspliktProsessStegInitPanel';\nimport InngangsvilkarSvpProsessStegInitPanel from './prosessPaneler/InngangsvilkarSvpProsessStegInitPanel';\nimport BeregningsgrunnlagProsessStegInitPanel from '../fellesPaneler/prosess/BeregningsgrunnlagProsessStegInitPanel';\nimport SoknadsfristProsessStegInitPanel from '../fellesPaneler/prosess/SoknadsfristProsessStegInitPanel';\nimport FortsattMedlemskapProsessStegInitPanel from '../fellesPaneler/prosess/FortsattMedlemskapProsessStegInitPanel';\nimport TilkjentYtelseProsessStegInitPanel from './prosessPaneler/TilkjentYtelseProsessStegInitPanel';\nimport SimuleringProsessStegInitPanel from '../fellesPaneler/prosess/SimuleringProsessStegInitPanel';\nimport VedtakSvpProsessStegInitPanel from './prosessPaneler/VedtakSvpProsessStegInitPanel';\nimport PermisjonFaktaInitPanel from '../fellesPaneler/fakta/PermisjonFaktaInitPanel';\nimport ProsessPanelInitProps, { ProsessPanelExtraInitProps } from '../felles/typer/prosessPanelInitProps';\nimport FaktaPanelInitProps from '../felles/typer/faktaPanelInitProps';\n\ninterface OwnProps {\n  behandling: Behandling;\n  fagsak: Fagsak;\n  valgtProsessSteg?: string;\n  valgtFaktaSteg?: string;\n  oppdaterProsessStegOgFaktaPanelIUrl: (punktnavn?: string, faktanavn?: string) => void;\n  opneSokeside: () => void;\n  toggleOppdateringAvFagsakOgBehandling: (skalHenteFagsak: boolean) => void;\n  arbeidsgivere: ArbeidsgiverOpplysningerPerId;\n  personoversikt: Personoversikt;\n  rettigheter: AksessRettigheter;\n  hentOgSettBehandling: () => void;\n}\n\nconst SvangerskapspengerPaneler: FunctionComponent<OwnProps> = ({\n  behandling,\n  fagsak,\n  valgtProsessSteg,\n  valgtFaktaSteg,\n  oppdaterProsessStegOgFaktaPanelIUrl,\n  opneSokeside,\n  toggleOppdateringAvFagsakOgBehandling,\n  arbeidsgivere,\n  personoversikt,\n  rettigheter,\n  hentOgSettBehandling,\n}) => {\n  const faktaPaneler = useCallback(\n    (props: FaktaPanelInitProps) => (\n      <>\n        <SakenFaktaInitPanel {...props} fagsak={fagsak} />\n        <ArbeidOgInntektFaktaInitPanel\n          {...props}\n          saksnummer={fagsak.saksnummer}\n          behandlingUuid={behandling.uuid}\n          rettigheter={rettigheter}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n          hentOgSettBehandling={hentOgSettBehandling}\n        />\n        <ArbeidsforholdFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <YtelserFaktaInitPanel {...props} />\n        <VergeFaktaInitPanel {...props} />\n        <FodseltilretteleggingFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <MedlemskapsvilkaretFaktaInitPanel {...props} />\n        <OpptjeningsvilkaretFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <PermisjonFaktaInitPanel\n          {...props}\n          saksnummer={fagsak.saksnummer}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n        />\n        <BeregningFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} rettigheter={rettigheter} />\n        <FordelingFaktaInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n      </>\n    ),\n    [personoversikt, behandling, rettigheter, fagsak, arbeidsgivere, hentOgSettBehandling],\n  );\n\n  const prosessPaneler = useCallback(\n    (props: ProsessPanelInitProps, ekstraProps: ProsessPanelExtraInitProps) => (\n      <>\n        <OpplysningspliktProsessStegInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <InngangsvilkarSvpProsessStegInitPanel\n          {...props}\n          rettigheter={rettigheter}\n          oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n        />\n        <BeregningsgrunnlagProsessStegInitPanel {...props} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <SoknadsfristProsessStegInitPanel {...props} />\n        <FortsattMedlemskapProsessStegInitPanel {...props} rettigheter={rettigheter} />\n        <TilkjentYtelseProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          arbeidsgiverOpplysningerPerId={arbeidsgivere}\n          personoversikt={personoversikt}\n        />\n        <SimuleringProsessStegInitPanel {...props} fagsak={fagsak} menyData={ekstraProps.allMenyData} arbeidsgiverOpplysningerPerId={arbeidsgivere} />\n        <VedtakSvpProsessStegInitPanel\n          {...props}\n          fagsak={fagsak}\n          opneSokeside={opneSokeside}\n          toggleOppdatereFagsakContext={toggleOppdateringAvFagsakOgBehandling}\n        />\n      </>\n    ),\n    [\n      personoversikt,\n      fagsak,\n      opneSokeside,\n      toggleOppdateringAvFagsakOgBehandling,\n      arbeidsgivere,\n      rettigheter,\n      oppdaterProsessStegOgFaktaPanelIUrl,\n    ],\n  );\n\n  return (\n    <BehandlingContainer\n      behandling={behandling}\n      valgtProsessSteg={valgtProsessSteg}\n      valgtFaktaSteg={valgtFaktaSteg}\n      oppdaterProsessStegOgFaktaPanelIUrl={oppdaterProsessStegOgFaktaPanelIUrl}\n      hentFaktaPaneler={faktaPaneler}\n      hentProsessPaneler={prosessPaneler}\n    />\n  );\n};\n\nexport default SvangerskapspengerPaneler;\n"],"names":["__rest","this","s","e","p","SvgBranching","forwardRef","_a","ref","title","_titleId","props","titleId","useId","React.createElement","BranchingIcon","SvpTilretteleggingFomKilde","n","module","t","i","finnTekst","intl","termindato","fom","dager","dayjs","finnProsentSvangerskapspenger","tilrettelegging","tilretteleggingType","finnProsentArbeid","TilretteleggingInfoPanel","erTomDatoTreUkerFørTermin","stillingsprosentArbeidsforhold","tomDato","useIntl","dagerOgUker","calcDaysAndWeeks","fremTilTidspunkt","registrertAvSaksbehandler","jsx","jsxs","HStack","PersonPregnantIcon","BodyShort","FormattedMessage","Detail","CalendarIcon","DDMMYYYY_DATE_FORMAT","maxValue100","maxValue","minValue0","minValue","validerAtDatoErUnik","alleTilrettelegginger","oppholdPerioder","dato","harDuplikatFomTilrettelegging","alle","harDuplikatFomOpphold","validerAtPeriodeErGyldig","tilretteleggingBehovFom","finnVelferdspermisjonprosent","arbeidsforhold","sum","prosent","finnUtbetalingsgradForTilrettelegging","velferdspermisjonprosent","stillingsprosent","effektivStillingsprosent","defaultUtbetalingsgrad","sjekkOmTomDatoErTreUkerFørTermin","tom","TilretteleggingForm","index","readOnly","oppdaterTilrettelegging","avbrytEditering","tomDatoForTilrettelegging","slettTilrettelegging","erNyPeriode","prosentSvangerskapspenger","useMemo","formMethods","useForm","formValues","lagreIForm","values","lagreFormValues","kilde","v","avbryt","slett","FormProvider","Fragment","VerticalSpacer","Datepicker","required","hasValidDate","RadioGroupPanel","NumberField","styles","hasValidDecimal","value","utbetalingsgrad","verdi","Button","Spacer","utledTypeTekst","velferdspermisjonsprosent","utledKilde","TilretteleggingPeriodeTabellRad","navn","openRad","fjernTilrettelegging","setLeggTilKnapperDisablet","open","setOpen","useState","setValue","useFormContext","Table","PeriodLabel","Tag","opphold","validerTomEtterFom","getValues","tilrettelegginger","førsteDato","a","validerAtPeriodeIkkeOverlapper","valgtOpphold","alleOpphold","fomDato","periodeMap","dateRangesNotOverlapping","OppholdForm","oppdaterOpphold","slettOpphold","OppholdPeriodeTabellRad","fjernOpphold","finnTilrettelegging","alleFomDatoerSortert","tilretteleggingDatoer","nesteFomDato","TilretteleggingOgOppholdPerioderPanel","arbeidsforholdIndex","tilretteleggingStateName","oppholdPerioderStateName","erLeggTilKnapperDisablet","appendTilrettelegging","removeTilrettelegging","useFieldArray","appendOpphold","removeOpphold","avklarteOppholdPerioder","leggTilOpphold","leggTilTilrettelegging","antallRader","fom1","fom2","_d","tilretteleggingIndex","navn2","nesteTilrettelegging","ISO_DATE_FORMAT","oppholdIndex","PlusIcon","VelferdspermisjonForm","velferdspermisjon","lukkRad","permisjonIndex","lagreForm","erGyldig","VStack","Alert","utledStyleForRad","erIkkeValgt","VelferdspermisjonTabellRad","useCallback","VelferdspermisjonPanel","velferdspermisjoner","Label","permisjon","ExclamationmarkTriangleFillIcon","minMax","validerTidligereEnn","fødselsdato","tilretteleggingFomDato","treUkerFørTermindato","tidligsteTidspunkt","filtrerVelferdspermisjoner","ArbeidsforholdPanel","visInfoAlert","watch","filtrerteVelferdspermisjoner","AksjonspunktHelpTextHTML","CheckboxField","getEndCharFromId","id","finnArbeidsforhold","alleIafAf","internArbeidsforholdReferanse","iafAf","erInnenforIntervall","finnSvpTagTekst","skalBrukes","ArbeidsforholdFieldArray","sorterteArbeidsforhold","aoiArbeidsforhold","arbeidsgiverOpplysningerPerId","uttakArbeidTyper","control","fields","field","arbeidsgiverOpplysning","iaya","af","alleAf","arbeidType","type","React","ExpansionCard","FlexContainer","FlexRow","FlexColumn","Buldings3Icon","Heading","maxLength1500","maxLength","sorterArbeidsforhold","alleArbeidsforhold","b","arbeidsgiverOpplysningerA1","arbeidsgiverOpplysningerA2","getAksjonspunktBegrunnelse","aksjonspunkter","aksjonpunkt","ap","AksjonspunktCode","getIsBegrunnelseRequired","isDirty","utledOmEnSkalVurdereVelferdspermisjoner","TilretteleggingFaktaForm","behandlingVersjon","hasOpenAksjonspunkter","svangerskapspengerTilrettelegging","submitCallback","formData","setFormData","submittable","isRequiredFn","skalVurdereVelferdspermisjoner","harIkkeVurdertAlleVelferdspermisjoner","harIkkeValgtNoenArbeidsforhold","harPeriodeSomIkkeErFerdig","td","harArbeidsforholdUtenTilrettelegging","harGyldig100PermisjonDerEnHarValgtSvp","vp","visFeil","skalViseFeil","harFeil","onSubmit","Form","TextAreaField","hasValidText","FaktaSubmitButtonNew","createIntl","messages","TilretteleggingFaktaIndex","behandling","harApneAksjonspunkter","arbeidOgInntekt","alleKodeverk","RawIntlProvider","KodeverkType","AKSJONSPUNKT_KODER","OVERSTYRING_AP_CODES","ENDEPUNKTER_PANEL_DATA","BehandlingApiKeys","FodseltilretteleggingFaktaInitPanel","FaktaDefaultInitPanel","FaktaPanelCode","data","kode","finnesUttakPåArbfor","arbfor","finnesAnnenTilretteleggingEnnHel","finnesHelTilretteleggingEtterBehovOppstår","moment","finnesInnvilgetUttak","buildInitialValues","status","behandlingsresultat","VilkarResultPicker","ProsessStegBegrunnelseTextFieldNew","transformValues","SvangerskapVilkarForm","readOnlySubmitButton","isApOpen","erIkkeGodkjentAvBeslutter","finnesUttak","initialValues","erVilkarOk","useEffect","avslagsarsaker","VilkarType","originalErVilkarOk","aksjonspunktStatus","vilkarUtfallType","bTag","chunks","ProsessPanelTemplate","SvangerskapVilkarProsessIndex","vilkar","isReadOnly","isAksjonspunktOpen","alleMerknaderFraBeslutter","VILKAR_KODER","SvangerskapInngangsvilkarInitPanel","InngangsvilkarDefaultInitPanel","OpptjeningInngangsvilkarInitPanel","rettigheter","erOverstyrt","toggleOverstyring","OverstyringPanelDef","OpptjeningVilkarProsessIndex","InngangsvilkarSvpProsessStegInitPanel","valgtProsessSteg","registrerProsessPanel","apentFaktaPanelInfo","oppdaterProsessStegOgFaktaPanelIUrl","leftPanels","MedlemskapInngangsvilkarInitPanel","rightPanels","InngangsvilkarDefaultInitWrapper","TilkjentYtelseProsessStegInitPanel","fagsak","personoversikt","ProsessDefaultInitPanel","ProsessStegCode","requestBehandlingApi","TilkjentYtelseProsessIndex","hasOnlyClosedAps","vedtakAksjonspunkter","vap","hasAksjonspunkt","isAksjonspunktOpenAndOfType","findStatusForVedtak","isAvslag","getForhandsvisCallback","forhandsvisMelding","brevData","response","forhandsvisDokument","IVERKSETTER_VEDTAK_AKSJONSPUNKT_KODER","getLagringSideeffekter","toggleIverksetterVedtakModal","toggleFatterVedtakModal","toggleOppdatereFagsakContext","aksjonspunktModels","VedtakSvpProsessStegInitPanel","opneSokeside","visIverksetterVedtakModal","visFatterVedtakModal","lagringSideEffekter","standardPanelProps","useStandardProsessPanelProps","restBehandlingApiHooks","previewCallback","lukkIverksetterModal","lukkFatterModal","vilkår","standardData","IverksetterVedtakStatusModal","FatterVedtakStatusModal","VedtakProsessIndex","fagsakYtelseType","SvangerskapspengerPaneler","valgtFaktaSteg","toggleOppdateringAvFagsakOgBehandling","arbeidsgivere","hentOgSettBehandling","faktaPaneler","SakenFaktaInitPanel","ArbeidOgInntektFaktaInitPanel","ArbeidsforholdFaktaInitPanel","YtelserFaktaInitPanel","VergeFaktaInitPanel","MedlemskapsvilkaretFaktaInitPanel","OpptjeningsvilkaretFaktaInitPanel","PermisjonFaktaInitPanel","BeregningFaktaInitPanel","FordelingFaktaInitPanel","prosessPaneler","ekstraProps","OpplysningspliktProsessStegInitPanel","BeregningsgrunnlagProsessStegInitPanel","SoknadsfristProsessStegInitPanel","FortsattMedlemskapProsessStegInitPanel","SimuleringProsessStegInitPanel","BehandlingContainer"],"mappings":"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","x_google_ignoreList":[0,2]}