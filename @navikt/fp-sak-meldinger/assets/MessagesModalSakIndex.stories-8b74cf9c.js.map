{"version":3,"file":"MessagesModalSakIndex.stories-8b74cf9c.js","sources":["../../../../node_modules/@navikt/ds-react/esm/typography/Heading.js","../../../../node_modules/@navikt/aksel-icons/dist/react/esm/XMark.js","../../../../node_modules/@navikt/ds-react/esm/typography/Detail.js","../../../../node_modules/@floating-ui/react/dist/floating-ui.react.esm.js","../../../../node_modules/@navikt/ds-react/esm/modal/ModalContext.js","../../../../node_modules/@navikt/ds-react/esm/modal/dialog-polyfill.js","../../../../node_modules/@navikt/ds-react/esm/modal/ModalBody.js","../../../../node_modules/@navikt/ds-react/esm/modal/ModalHeader.js","../../../../node_modules/@navikt/ds-react/esm/modal/ModalFooter.js","../../../../node_modules/@navikt/ds-react/esm/modal/ModalUtils.js","../../../../node_modules/@navikt/ds-react/esm/modal/Modal.js","../../../../node_modules/@navikt/ds-react/esm/provider/Provider.js","../../src/images/innvilget_valgt.svg","../../src/components/MessagesModal.tsx","../../src/MessagesModalSakIndex.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\n/**\n * Part of a set of components for displaying text with consistent typography.\n *\n * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/typography)\n * @see üè∑Ô∏è {@link HeadingProps}\n * @see [ü§ñ OverridableComponent](https://aksel.nav.no/grunnleggende/kode/overridablecomponent) support\n *\n * @example\n * ```jsx\n *     <Heading level=\"1\" size=\"xlarge\">\n *       Pengest√∏tte n√•r du er syk\n *     </Heading>\n * ```\n */\nexport const Heading = forwardRef((_a, ref) => {\n    var { level = \"1\", size, spacing = false, className, as } = _a, rest = __rest(_a, [\"level\", \"size\", \"spacing\", \"className\", \"as\"]);\n    let HeadingTag = as !== null && as !== void 0 ? as : `h${level}`;\n    return (React.createElement(HeadingTag, Object.assign({}, rest, { ref: ref, className: cl(className, \"navds-heading\", `navds-heading--${size}`, {\n            \"navds-typo--spacing\": spacing,\n        }) })));\n});\nexport default Heading;\n//# sourceMappingURL=Heading.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgXMark = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M6.53 5.47a.75.75 0 0 0-1.06 1.06L10.94 12l-5.47 5.47a.75.75 0 1 0 1.06 1.06L12 13.06l5.47 5.47a.75.75 0 1 0 1.06-1.06L13.06 12l5.47-5.47a.75.75 0 0 0-1.06-1.06L12 10.94 6.53 5.47Z\", fill: \"currentColor\" })));\n});\nexport default SvgXMark;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\n/**\n * Part of a set of components for displaying text with consistent typography.\n *\n * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/typography)\n * @see üè∑Ô∏è {@link DetailProps}\n * @see [ü§ñ OverridableComponent](https://aksel.nav.no/grunnleggende/kode/overridablecomponent) support\n *\n * @example\n * ```jsx\n *     <Detail level=\"1\" size=\"xlarge\">\n *       Pengest√∏tte n√•r du er syk\n *     </Detail>\n * ```\n */\nexport const Detail = forwardRef((_a, ref) => {\n    var { className, size = \"medium\", spacing, uppercase, as: Component = \"p\" } = _a, rest = __rest(_a, [\"className\", \"size\", \"spacing\", \"uppercase\", \"as\"]);\n    return (React.createElement(Component, Object.assign({}, rest, { ref: ref, className: cl(className, \"navds-detail\", {\n            \"navds-detail--small\": size === \"small\",\n            \"navds-typo--spacing\": !!spacing,\n            \"navds-typo--uppercase\": !!uppercase,\n        }) })));\n});\nexport default Detail;\n//# sourceMappingURL=Detail.js.map","import { platform, getOverflowAncestors, offset, detectOverflow, useFloating as useFloating$1 } from '@floating-ui/react-dom';\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/react-dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect, useRef } from 'react';\nimport { hideOthers } from 'aria-hidden';\nimport { tabbable } from 'tabbable';\nimport { createPortal, flushSync } from 'react-dom';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = () => \"floating-ui-\" + count++;\nfunction useFloatingId() {\n  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(() => {\n    if (!serverHandoffComplete) {\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id;\n}\n\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useReactId = React[/*#__PURE__*/'useId'.toString()];\n\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/useId\n */\nconst useId = useReactId || useFloatingId;\n\n/**\n * Renders a pointing arrow triangle.\n * @see https://floating-ui.com/docs/FloatingArrow\n */\nconst FloatingArrow = /*#__PURE__*/React.forwardRef(function FloatingArrow(_ref, ref) {\n  let {\n    context: {\n      placement,\n      elements: {\n        floating\n      },\n      middlewareData: {\n        arrow\n      }\n    },\n    width = 14,\n    height = 7,\n    tipRadius = 0,\n    strokeWidth = 0,\n    staticOffset,\n    stroke,\n    d,\n    style: {\n      transform,\n      ...restStyle\n    } = {},\n    ...rest\n  } = _ref;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!ref) {\n      console.warn('Floating UI: The `ref` prop is required for the `FloatingArrow`', 'component.');\n    }\n  }\n  const clipPathId = useId();\n  if (!floating) {\n    return null;\n  }\n\n  // Strokes must be double the border width, this ensures the stroke's width\n  // works as you'd expect.\n  strokeWidth *= 2;\n  const halfStrokeWidth = strokeWidth / 2;\n  const svgX = width / 2 * (tipRadius / -8 + 1);\n  const svgY = height / 2 * tipRadius / 4;\n  const [side, alignment] = placement.split('-');\n  const isRTL = floating ? platform.isRTL(floating) : false;\n  const isCustomShape = !!d;\n  const isVerticalSide = side === 'top' || side === 'bottom';\n  const yOffsetProp = staticOffset && alignment === 'end' ? 'bottom' : 'top';\n  let xOffsetProp = staticOffset && alignment === 'end' ? 'right' : 'left';\n  if (staticOffset && isRTL) {\n    xOffsetProp = alignment === 'end' ? 'left' : 'right';\n  }\n  const arrowOffsetY = isCustomShape ? 0 : halfStrokeWidth;\n  const arrowX = (arrow == null ? void 0 : arrow.x) != null ? staticOffset || arrow.x : '';\n  const arrowY = (arrow == null ? void 0 : arrow.y) != null ? staticOffset || arrow.y + arrowOffsetY : '';\n  const dValue = d || 'M0,0' + (\" H\" + width) + (\" L\" + (width - svgX) + \",\" + (height - svgY)) + (\" Q\" + width / 2 + \",\" + height + \" \" + svgX + \",\" + (height - svgY)) + ' Z';\n  const rotation = {\n    top: isCustomShape ? 'rotate(180deg)' : '',\n    left: isCustomShape ? 'rotate(90deg)' : 'rotate(-90deg)',\n    bottom: isCustomShape ? '' : 'rotate(180deg)',\n    right: isCustomShape ? 'rotate(-90deg)' : 'rotate(90deg)'\n  }[side];\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({}, rest, {\n    \"aria-hidden\": true,\n    ref: ref,\n    width: isCustomShape ? width : width + strokeWidth,\n    height: width,\n    viewBox: \"0 0 \" + width + \" \" + (height > width ? height : width),\n    style: {\n      position: 'absolute',\n      pointerEvents: 'none',\n      [xOffsetProp]: arrowX,\n      [yOffsetProp]: arrowY,\n      [side]: isVerticalSide || isCustomShape ? '100%' : \"calc(100% - \" + strokeWidth / 2 + \"px)\",\n      transform: \"\" + rotation + (transform != null ? transform : ''),\n      ...restStyle\n    }\n  }), strokeWidth > 0 && /*#__PURE__*/React.createElement(\"path\", {\n    clipPath: \"url(#\" + clipPathId + \")\",\n    fill: \"none\",\n    stroke: stroke\n    // Account for the stroke on the fill path rendered below.\n    ,\n    strokeWidth: strokeWidth + (d ? 0 : 1),\n    d: dValue\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    stroke: strokeWidth && !d ? rest.fill : 'none',\n    d: dValue\n  }), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: clipPathId\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: -halfStrokeWidth,\n    y: halfStrokeWidth * (isCustomShape ? -1 : 1),\n    width: width + strokeWidth,\n    height: width\n  })));\n});\n\nfunction createPubSub() {\n  const map = new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(handler => handler(data));\n    },\n    on(event, listener) {\n      map.set(event, [...(map.get(event) || []), listener]);\n    },\n    off(event, listener) {\n      var _map$get2;\n      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter(l => l !== listener)) || []);\n    }\n  };\n}\n\nconst FloatingNodeContext = /*#__PURE__*/React.createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/React.createContext(null);\nconst useFloatingParentNodeId = () => {\n  var _React$useContext;\n  return ((_React$useContext = React.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\nconst useFloatingTree = () => React.useContext(FloatingTreeContext);\n\n/**\n * Registers a node into the floating tree, returning its id.\n */\nfunction useFloatingNodeId(customParentId) {\n  const id = useId();\n  const tree = useFloatingTree();\n  const reactParentId = useFloatingParentNodeId();\n  const parentId = customParentId || reactParentId;\n  index(() => {\n    const node = {\n      id,\n      parentId\n    };\n    tree == null ? void 0 : tree.addNode(node);\n    return () => {\n      tree == null ? void 0 : tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n}\n\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction FloatingNode(_ref) {\n  let {\n    children,\n    id\n  } = _ref;\n  const parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/React.createElement(FloatingNodeContext.Provider, {\n    value: React.useMemo(() => ({\n      id,\n      parentId\n    }), [id, parentId])\n  }, children);\n}\n\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM (i.e. portalled to a common node, rather than their\n * respective parent).\n * @see https://floating-ui.com/docs/FloatingTree\n */\nfunction FloatingTree(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const nodesRef = React.useRef([]);\n  const addNode = React.useCallback(node => {\n    nodesRef.current = [...nodesRef.current, node];\n  }, []);\n  const removeNode = React.useCallback(node => {\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\n  }, []);\n  const events = React.useState(() => createPubSub())[0];\n  return /*#__PURE__*/React.createElement(FloatingTreeContext.Provider, {\n    value: React.useMemo(() => ({\n      nodesRef,\n      addNode,\n      removeNode,\n      events\n    }), [nodesRef, addNode, removeNode, events])\n  }, children);\n}\n\nfunction getDocument(node) {\n  return (node == null ? void 0 : node.ownerDocument) || document;\n}\n\n// Avoid Chrome DevTools blue warning.\nfunction getPlatform() {\n  const uaData = navigator.userAgentData;\n  if (uaData != null && uaData.platform) {\n    return uaData.platform;\n  }\n  return navigator.platform;\n}\nfunction getUserAgent() {\n  const uaData = navigator.userAgentData;\n  if (uaData && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(_ref => {\n      let {\n        brand,\n        version\n      } = _ref;\n      return brand + \"/\" + version;\n    }).join(' ');\n  }\n  return navigator.userAgent;\n}\n\nfunction getWindow(value) {\n  return getDocument(value).defaultView || window;\n}\nfunction isElement(value) {\n  return value ? value instanceof getWindow(value).Element : false;\n}\nfunction isHTMLElement(value) {\n  return value ? value instanceof getWindow(value).HTMLElement : false;\n}\nfunction isShadowRoot(node) {\n  // Browsers without `ShadowRoot` support\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  const OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n  const androidRe = /Android/i;\n  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {\n    return event.type === 'click' && event.buttons === 1;\n  }\n  return event.detail === 0 && !event.pointerType;\n}\nfunction isVirtualPointerEvent(event) {\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== 'mouse' ||\n  // iOS VoiceOver returns 0.333‚Ä¢ for width/height.\n  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;\n}\nfunction isSafari() {\n  // Chrome DevTools does not complain about navigator.vendor\n  return /apple/i.test(navigator.vendor);\n}\nfunction isMac() {\n  return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\n}\nfunction isMouseLikePointerType(pointerType, strict) {\n  // On some Linux machines with Chromium, mouse inputs return a `pointerType`\n  // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\n  const values = ['mouse', 'pen'];\n  if (!strict) {\n    values.push('', undefined);\n  }\n  return values.includes(pointerType);\n}\n\nfunction contains(parent, child) {\n  if (!parent || !child) {\n    return false;\n  }\n  const rootNode = child.getRootNode && child.getRootNode();\n\n  // First, attempt with faster native method\n  if (parent.contains(child)) {\n    return true;\n  }\n\n  // then fallback to custom implementation with Shadow DOM support\n  if (rootNode && isShadowRoot(rootNode)) {\n    let next = child;\n    while (next) {\n      if (parent === next) {\n        return true;\n      }\n      // @ts-ignore\n      next = next.parentNode || next.host;\n    }\n  }\n\n  // Give up, the result is false\n  return false;\n}\n\nfunction useLatestRef(value) {\n  const ref = useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nconst safePolygonIdentifier = 'data-floating-ui-safe-polygon';\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && !isMouseLikePointerType(pointerType)) {\n    return 0;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value == null ? void 0 : value[prop];\n}\n/**\n * Opens the floating element while hovering over the reference element, like\n * CSS `:hover`.\n * @see https://floating-ui.com/docs/useHover\n */\nfunction useHover(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    elements: {\n      domReference,\n      floating\n    },\n    refs\n  } = context;\n  const {\n    enabled = true,\n    delay = 0,\n    handleClose = null,\n    mouseOnly = false,\n    restMs = 0,\n    move = true\n  } = props;\n  const tree = useFloatingTree();\n  const parentId = useFloatingParentNodeId();\n  const handleCloseRef = useLatestRef(handleClose);\n  const delayRef = useLatestRef(delay);\n  const pointerTypeRef = React.useRef();\n  const timeoutRef = React.useRef();\n  const handlerRef = React.useRef();\n  const restTimeoutRef = React.useRef();\n  const blockMouseMoveRef = React.useRef(true);\n  const performedPointerEventsMutationRef = React.useRef(false);\n  const unbindMouseMoveRef = React.useRef(() => {});\n  const isHoverOpen = React.useCallback(() => {\n    var _dataRef$current$open;\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\n  }, [dataRef]);\n\n  // When dismissing before opening, clear the delay timeouts to cancel it\n  // from showing.\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss() {\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      blockMouseMoveRef.current = true;\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [enabled, events]);\n  React.useEffect(() => {\n    if (!enabled || !handleCloseRef.current || !open) {\n      return;\n    }\n    function onLeave() {\n      if (isHoverOpen()) {\n        onOpenChange(false);\n      }\n    }\n    const html = getDocument(floating).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return () => {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);\n  const closeWithDelay = React.useCallback(function (runElseBranch) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\n    if (closeDelay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);\n    } else if (runElseBranch) {\n      clearTimeout(timeoutRef.current);\n      onOpenChange(false);\n    }\n  }, [delayRef, onOpenChange]);\n  const cleanupMouseMoveHandler = React.useCallback(() => {\n    unbindMouseMoveRef.current();\n    handlerRef.current = undefined;\n  }, []);\n  const clearPointerEvents = React.useCallback(() => {\n    if (performedPointerEventsMutationRef.current) {\n      const body = getDocument(refs.floating.current).body;\n      body.style.pointerEvents = '';\n      body.removeAttribute(safePolygonIdentifier);\n      performedPointerEventsMutationRef.current = false;\n    }\n  }, [refs]);\n\n  // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function isClickLikeOpenEvent() {\n      return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\n    }\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {\n        return;\n      }\n      dataRef.current.openEvent = event;\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\n      if (openDelay) {\n        timeoutRef.current = setTimeout(() => {\n          onOpenChange(true);\n        }, openDelay);\n      } else {\n        onOpenChange(true);\n      }\n    }\n    function onMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      unbindMouseMoveRef.current();\n      const doc = getDocument(floating);\n      clearTimeout(restTimeoutRef.current);\n      if (handleCloseRef.current) {\n        // Prevent clearing `onScrollMouseLeave` timeout.\n        if (!open) {\n          clearTimeout(timeoutRef.current);\n        }\n        handlerRef.current = handleCloseRef.current({\n          ...context,\n          tree,\n          x: event.clientX,\n          y: event.clientY,\n          onClose() {\n            clearPointerEvents();\n            cleanupMouseMoveHandler();\n            closeWithDelay();\n          }\n        });\n        const handler = handlerRef.current;\n        doc.addEventListener('mousemove', handler);\n        unbindMouseMoveRef.current = () => {\n          doc.removeEventListener('mousemove', handler);\n        };\n        return;\n      }\n\n      // Allow interactivity without `safePolygon` on touch devices. With a\n      // pointer, a short close delay is an alternative, so it should work\n      // consistently.\n      const shouldClose = pointerTypeRef.current === 'touch' ? !contains(floating, event.relatedTarget) : true;\n      if (shouldClose) {\n        closeWithDelay();\n      }\n    }\n\n    // Ensure the floating element closes after scrolling even if the pointer\n    // did not move.\n    // https://github.com/floating-ui/floating-ui/discussions/1692\n    function onScrollMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      handleCloseRef.current == null ? void 0 : handleCloseRef.current({\n        ...context,\n        tree,\n        x: event.clientX,\n        y: event.clientY,\n        onClose() {\n          clearPointerEvents();\n          cleanupMouseMoveHandler();\n          closeWithDelay();\n        }\n      })(event);\n    }\n    if (isElement(domReference)) {\n      const ref = domReference;\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\n      floating == null ? void 0 : floating.addEventListener('mouseleave', onScrollMouseLeave);\n      move && ref.addEventListener('mousemove', onMouseEnter, {\n        once: true\n      });\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      return () => {\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\n        floating == null ? void 0 : floating.removeEventListener('mouseleave', onScrollMouseLeave);\n        move && ref.removeEventListener('mousemove', onMouseEnter);\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);\n\n  // Block pointer-events of every element other than the reference and floating\n  // while the floating element is open and has a `handleClose` handler. Also\n  // handles nested floating elements.\n  // https://github.com/floating-ui/floating-ui/issues/1722\n  index(() => {\n    var _handleCloseRef$curre;\n    if (!enabled) {\n      return;\n    }\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\n      const body = getDocument(floating).body;\n      body.setAttribute(safePolygonIdentifier, '');\n      body.style.pointerEvents = 'none';\n      performedPointerEventsMutationRef.current = true;\n      if (isElement(domReference) && floating) {\n        var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n        const ref = domReference;\n        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\n        if (parentFloating) {\n          parentFloating.style.pointerEvents = '';\n        }\n        ref.style.pointerEvents = 'auto';\n        floating.style.pointerEvents = 'auto';\n        return () => {\n          ref.style.pointerEvents = '';\n          floating.style.pointerEvents = '';\n        };\n      }\n    }\n  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);\n  index(() => {\n    if (!open) {\n      pointerTypeRef.current = undefined;\n      cleanupMouseMoveHandler();\n      clearPointerEvents();\n    }\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\n  React.useEffect(() => {\n    return () => {\n      cleanupMouseMoveHandler();\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      clearPointerEvents();\n    };\n  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    function setPointerRef(event) {\n      pointerTypeRef.current = event.pointerType;\n    }\n    return {\n      reference: {\n        onPointerDown: setPointerRef,\n        onPointerEnter: setPointerRef,\n        onMouseMove() {\n          if (open || restMs === 0) {\n            return;\n          }\n          clearTimeout(restTimeoutRef.current);\n          restTimeoutRef.current = setTimeout(() => {\n            if (!blockMouseMoveRef.current) {\n              onOpenChange(true);\n            }\n          }, restMs);\n        }\n      },\n      floating: {\n        onMouseEnter() {\n          clearTimeout(timeoutRef.current);\n        },\n        onMouseLeave() {\n          events.emit('dismiss', {\n            type: 'mouseLeave',\n            data: {\n              returnFocus: false\n            }\n          });\n          closeWithDelay(false);\n        }\n      }\n    };\n  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);\n}\n\nconst FloatingDelayGroupContext = /*#__PURE__*/React.createContext({\n  delay: 0,\n  initialDelay: 0,\n  timeoutMs: 0,\n  currentId: null,\n  setCurrentId: () => {},\n  setState: () => {},\n  isInstantPhase: false\n});\nconst useDelayGroupContext = () => React.useContext(FloatingDelayGroupContext);\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nconst FloatingDelayGroup = _ref => {\n  let {\n    children,\n    delay,\n    timeoutMs = 0\n  } = _ref;\n  const [state, setState] = React.useReducer((prev, next) => ({\n    ...prev,\n    ...next\n  }), {\n    delay,\n    timeoutMs,\n    initialDelay: delay,\n    currentId: null,\n    isInstantPhase: false\n  });\n  const initialCurrentIdRef = React.useRef(null);\n  const setCurrentId = React.useCallback(currentId => {\n    setState({\n      currentId\n    });\n  }, []);\n  index(() => {\n    if (state.currentId) {\n      if (initialCurrentIdRef.current === null) {\n        initialCurrentIdRef.current = state.currentId;\n      } else {\n        setState({\n          isInstantPhase: true\n        });\n      }\n    } else {\n      setState({\n        isInstantPhase: false\n      });\n      initialCurrentIdRef.current = null;\n    }\n  }, [state.currentId]);\n  return /*#__PURE__*/React.createElement(FloatingDelayGroupContext.Provider, {\n    value: React.useMemo(() => ({\n      ...state,\n      setState,\n      setCurrentId\n    }), [state, setState, setCurrentId])\n  }, children);\n};\nconst useDelayGroup = (_ref2, _ref3) => {\n  let {\n    open,\n    onOpenChange\n  } = _ref2;\n  let {\n    id\n  } = _ref3;\n  const {\n    currentId,\n    setCurrentId,\n    initialDelay,\n    setState,\n    timeoutMs\n  } = useDelayGroupContext();\n  index(() => {\n    if (currentId) {\n      setState({\n        delay: {\n          open: 1,\n          close: getDelay(initialDelay, 'close')\n        }\n      });\n      if (currentId !== id) {\n        onOpenChange(false);\n      }\n    }\n  }, [id, onOpenChange, setState, currentId, initialDelay]);\n  index(() => {\n    function unset() {\n      onOpenChange(false);\n      setState({\n        delay: initialDelay,\n        currentId: null\n      });\n    }\n    if (!open && currentId === id) {\n      if (timeoutMs) {\n        const timeout = window.setTimeout(unset, timeoutMs);\n        return () => {\n          clearTimeout(timeout);\n        };\n      } else {\n        unset();\n      }\n    }\n  }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\n  index(() => {\n    if (open) {\n      setCurrentId(id);\n    }\n  }, [open, setCurrentId, id]);\n};\n\n/**\n * Find the real active element. Traverses into shadowRoots.\n */\nfunction activeElement(doc) {\n  let activeElement = doc.activeElement;\n  while (((_activeElement = activeElement) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {\n    var _activeElement, _activeElement$shadow;\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n  return activeElement;\n}\n\nlet rafId = 0;\nfunction enqueueFocus(el, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    preventScroll = false,\n    cancelPrevious = true,\n    sync = false\n  } = options;\n  cancelPrevious && cancelAnimationFrame(rafId);\n  const exec = () => el == null ? void 0 : el.focus({\n    preventScroll\n  });\n  if (sync) {\n    exec();\n  } else {\n    rafId = requestAnimationFrame(exec);\n  }\n}\n\nfunction getAncestors(nodes, id) {\n  var _nodes$find;\n  let allAncestors = [];\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\n  while (currentParentId) {\n    const currentNode = nodes.find(node => node.id === currentParentId);\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n    if (currentNode) {\n      allAncestors = allAncestors.concat(currentNode);\n    }\n  }\n  return allAncestors;\n}\n\nfunction getChildren(nodes, id) {\n  let allChildren = nodes.filter(node => {\n    var _node$context;\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  });\n  let currentChildren = allChildren;\n  while (currentChildren.length) {\n    currentChildren = nodes.filter(node => {\n      var _currentChildren;\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\n        var _node$context2;\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    });\n    allChildren = allChildren.concat(currentChildren);\n  }\n  return allChildren;\n}\n\nfunction getTarget(event) {\n  if ('composedPath' in event) {\n    return event.composedPath()[0];\n  }\n\n  // TS thinks `event` is of type never as it assumes all browsers support\n  // `composedPath()`, but browsers without shadow DOM don't.\n  return event.target;\n}\n\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\nfunction isTypeableElement(element) {\n  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nconst getTabbableOptions = () => ({\n  getShadowRoot: true,\n  displayCheck:\n  // JSDOM does not support the `tabbable` library. To solve this we can\n  // check if `ResizeObserver` is a real function (not polyfilled), which\n  // determines if the current environment is JSDOM-like.\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\n});\nfunction getTabbableIn(container, direction) {\n  const allTabbable = tabbable(container, getTabbableOptions());\n  if (direction === 'prev') {\n    allTabbable.reverse();\n  }\n  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\n  return nextTabbableElements[0];\n}\nfunction getNextTabbable() {\n  return getTabbableIn(document.body, 'next');\n}\nfunction getPreviousTabbable() {\n  return getTabbableIn(document.body, 'prev');\n}\nfunction isOutsideEvent(event, container) {\n  const containerElement = container || event.currentTarget;\n  const relatedTarget = event.relatedTarget;\n  return !relatedTarget || !contains(containerElement, relatedTarget);\n}\nfunction disableFocusInside(container) {\n  const tabbableElements = tabbable(container, getTabbableOptions());\n  tabbableElements.forEach(element => {\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\n    element.setAttribute('tabindex', '-1');\n  });\n}\nfunction enableFocusInside(container) {\n  const elements = container.querySelectorAll('[data-tabindex]');\n  elements.forEach(element => {\n    const tabindex = element.dataset.tabindex;\n    delete element.dataset.tabindex;\n    if (tabindex) {\n      element.setAttribute('tabindex', tabindex);\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  });\n}\n\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\n\nconst HIDDEN_STYLES = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'fixed',\n  whiteSpace: 'nowrap',\n  width: '1px',\n  top: 0,\n  left: 0\n};\nlet timeoutId;\nfunction setActiveElementOnTab(event) {\n  if (event.key === 'Tab') {\n    event.target;\n    clearTimeout(timeoutId);\n  }\n}\nconst FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {\n  const [role, setRole] = React.useState();\n  index(() => {\n    if (isSafari()) {\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\n      // trap element. On Safari, only buttons trigger the onFocus event.\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\n      // button role.\n      setRole('button');\n    }\n    document.addEventListener('keydown', setActiveElementOnTab);\n    return () => {\n      document.removeEventListener('keydown', setActiveElementOnTab);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, props, {\n    ref: ref,\n    tabIndex: 0\n    // Role is only for VoiceOver\n    ,\n    role: role,\n    \"aria-hidden\": role ? undefined : true,\n    \"data-floating-ui-focus-guard\": \"\",\n    style: HIDDEN_STYLES\n  }));\n});\n\nconst PortalContext = /*#__PURE__*/React.createContext(null);\nfunction useFloatingPortalNode(_temp) {\n  let {\n    id,\n    root\n  } = _temp === void 0 ? {} : _temp;\n  const [portalNode, setPortalNode] = React.useState(null);\n  const uniqueId = useId();\n  const portalContext = usePortalContext();\n  const data = React.useMemo(() => ({\n    id,\n    root,\n    portalContext,\n    uniqueId\n  }), [id, root, portalContext, uniqueId]);\n  const dataRef = React.useRef();\n  index(() => {\n    return () => {\n      portalNode == null ? void 0 : portalNode.remove();\n    };\n  }, [portalNode, data]);\n  index(() => {\n    if (dataRef.current === data) return;\n    dataRef.current = data;\n    const {\n      id,\n      root,\n      portalContext,\n      uniqueId\n    } = data;\n    const existingIdRoot = id ? document.getElementById(id) : null;\n    const attr = 'data-floating-ui-portal';\n    if (existingIdRoot) {\n      const subRoot = document.createElement('div');\n      subRoot.id = uniqueId;\n      subRoot.setAttribute(attr, '');\n      existingIdRoot.appendChild(subRoot);\n      setPortalNode(subRoot);\n    } else {\n      let container = (portalContext == null ? void 0 : portalContext.portalNode) || root || document.body;\n      let idWrapper = null;\n      if (id) {\n        idWrapper = document.createElement('div');\n        idWrapper.id = id;\n        container.appendChild(idWrapper);\n      }\n      const subRoot = document.createElement('div');\n      subRoot.id = uniqueId;\n      subRoot.setAttribute(attr, '');\n      container = idWrapper || container;\n      container.appendChild(subRoot);\n      setPortalNode(subRoot);\n    }\n  }, [data]);\n  return portalNode;\n}\n/**\n * Portals the floating element into a given container element ‚Äî by default,\n * outside of the app root and into the body.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\nfunction FloatingPortal(_ref) {\n  let {\n    children,\n    id,\n    root = null,\n    preserveTabOrder = true\n  } = _ref;\n  const portalNode = useFloatingPortalNode({\n    id,\n    root\n  });\n  const [focusManagerState, setFocusManagerState] = React.useState(null);\n  const beforeOutsideRef = React.useRef(null);\n  const afterOutsideRef = React.useRef(null);\n  const beforeInsideRef = React.useRef(null);\n  const afterInsideRef = React.useRef(null);\n  const shouldRenderGuards =\n  // The FocusManager and therefore floating element are currently open/\n  // rendered.\n  !!focusManagerState &&\n  // Guards are only for non-modal focus management.\n  !focusManagerState.modal &&\n  // Don't render if unmount is transitioning.\n  focusManagerState.open && preserveTabOrder && !!(root || portalNode);\n\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\n  React.useEffect(() => {\n    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {\n      return;\n    }\n\n    // Make sure elements inside the portal element are tabbable only when the\n    // portal has already been focused, either by tabbing into a focus trap\n    // element outside or using the mouse.\n    function onFocus(event) {\n      if (portalNode && isOutsideEvent(event)) {\n        const focusing = event.type === 'focusin';\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\n        manageFocus(portalNode);\n      }\n    }\n    // Listen to the event on the capture phase so they run before the focus\n    // trap elements onFocus prop is called.\n    portalNode.addEventListener('focusin', onFocus, true);\n    portalNode.addEventListener('focusout', onFocus, true);\n    return () => {\n      portalNode.removeEventListener('focusin', onFocus, true);\n      portalNode.removeEventListener('focusout', onFocus, true);\n    };\n  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: React.useMemo(() => ({\n      preserveTabOrder,\n      beforeOutsideRef,\n      afterOutsideRef,\n      beforeInsideRef,\n      afterInsideRef,\n      portalNode,\n      setFocusManagerState\n    }), [preserveTabOrder, portalNode])\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: beforeOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _beforeInsideRef$curr;\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();\n      } else {\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        prevTabbable == null ? void 0 : prevTabbable.focus();\n      }\n    }\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-owns\": portalNode.id,\n    style: HIDDEN_STYLES\n  }), portalNode && /*#__PURE__*/createPortal(children, portalNode), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: afterOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _afterInsideRef$curre;\n        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();\n      } else {\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        nextTabbable == null ? void 0 : nextTabbable.focus();\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));\n      }\n    }\n  }));\n}\nconst usePortalContext = () => React.useContext(PortalContext);\n\nconst VisuallyHiddenDismiss = /*#__PURE__*/React.forwardRef(function VisuallyHiddenDismiss(props, ref) {\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n    type: \"button\",\n    ref: ref,\n    tabIndex: -1,\n    style: HIDDEN_STYLES\n  }));\n});\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(props) {\n  const {\n    context,\n    children,\n    order = ['content'],\n    guards = true,\n    initialFocus = 0,\n    returnFocus = true,\n    modal = true,\n    visuallyHiddenDismiss = false,\n    closeOnFocusOut = true\n  } = props;\n  const {\n    open,\n    refs,\n    nodeId,\n    onOpenChange,\n    events,\n    dataRef,\n    elements: {\n      domReference,\n      floating\n    }\n  } = context;\n  const orderRef = useLatestRef(order);\n  const initialFocusRef = useLatestRef(initialFocus);\n  const returnFocusRef = useLatestRef(returnFocus);\n  const tree = useFloatingTree();\n  const portalContext = usePortalContext();\n\n  // Controlled by `useListNavigation`.\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\n  const startDismissButtonRef = React.useRef(null);\n  const endDismissButtonRef = React.useRef(null);\n  const preventReturnFocusRef = React.useRef(false);\n  const previouslyFocusedElementRef = React.useRef(null);\n  const isPointerDownRef = React.useRef(false);\n  const isInsidePortal = portalContext != null;\n\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\n  // there are different focus semantics. The guards should not be rendered, but\n  // aria-hidden should be applied to all nodes still. Further, the visually\n  // hidden dismiss button should only appear at the end of the list, not the\n  // start.\n  const isTypeableCombobox = domReference && domReference.getAttribute('role') === 'combobox' && isTypeableElement(domReference);\n  const getTabbableContent = React.useCallback(function (container) {\n    if (container === void 0) {\n      container = floating;\n    }\n    return container ? tabbable(container, getTabbableOptions()) : [];\n  }, [floating]);\n  const getTabbableElements = React.useCallback(container => {\n    const content = getTabbableContent(container);\n    return orderRef.current.map(type => {\n      if (domReference && type === 'reference') {\n        return domReference;\n      }\n      if (floating && type === 'floating') {\n        return floating;\n      }\n      return content;\n    }).filter(Boolean).flat();\n  }, [domReference, floating, orderRef, getTabbableContent]);\n  React.useEffect(() => {\n    if (!modal) {\n      return;\n    }\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        // The focus guards have nothing to focus, so we need to stop the event.\n        if (contains(floating, activeElement(getDocument(floating))) && getTabbableContent().length === 0 && !isTypeableCombobox) {\n          stopEvent(event);\n        }\n        const els = getTabbableElements();\n        const target = getTarget(event);\n        if (orderRef.current[0] === 'reference' && target === domReference) {\n          stopEvent(event);\n          if (event.shiftKey) {\n            enqueueFocus(els[els.length - 1]);\n          } else {\n            enqueueFocus(els[1]);\n          }\n        }\n        if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {\n          stopEvent(event);\n          enqueueFocus(els[0]);\n        }\n      }\n    }\n    const doc = getDocument(floating);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [domReference, floating, modal, orderRef, refs, isTypeableCombobox, getTabbableContent, getTabbableElements]);\n  React.useEffect(() => {\n    if (!closeOnFocusOut) {\n      return;\n    }\n\n    // In Safari, buttons lose focus when pressing them.\n    function handlePointerDown() {\n      isPointerDownRef.current = true;\n      setTimeout(() => {\n        isPointerDownRef.current = false;\n      });\n    }\n    function handleFocusOutside(event) {\n      const relatedTarget = event.relatedTarget;\n      queueMicrotask(() => {\n        const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute('data-floating-ui-focus-guard') || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\n          var _node$context, _node$context2;\n          return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\n        }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\n          var _node$context3, _node$context4;\n          return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\n        })));\n\n        // Focus did not move inside the floating tree, and there are no tabbable\n        // portal guards to handle closing.\n        if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\n        // Fix React 18 Strict Mode returnFocus due to double rendering.\n        relatedTarget !== previouslyFocusedElementRef.current) {\n          preventReturnFocusRef.current = true;\n          onOpenChange(false);\n        }\n      });\n    }\n    if (floating && isHTMLElement(domReference)) {\n      domReference.addEventListener('focusout', handleFocusOutside);\n      domReference.addEventListener('pointerdown', handlePointerDown);\n      !modal && floating.addEventListener('focusout', handleFocusOutside);\n      return () => {\n        domReference.removeEventListener('focusout', handleFocusOutside);\n        domReference.removeEventListener('pointerdown', handlePointerDown);\n        !modal && floating.removeEventListener('focusout', handleFocusOutside);\n      };\n    }\n  }, [domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);\n  React.useEffect(() => {\n    var _portalContext$portal;\n    // Don't hide portals nested within the parent portal.\n    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll('[data-floating-ui-portal]')) || []);\n    function getDismissButtons() {\n      return [startDismissButtonRef.current, endDismissButtonRef.current].filter(Boolean);\n    }\n    if (floating && modal) {\n      const insideNodes = [floating, ...portalNodes, ...getDismissButtons()];\n      const cleanup = hideOthers(orderRef.current.includes('reference') || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);\n      return () => {\n        cleanup();\n      };\n    }\n  }, [domReference, floating, modal, orderRef, portalContext, isTypeableCombobox]);\n  React.useEffect(() => {\n    if (modal && !guards && floating) {\n      const tabIndexValues = [];\n      const options = getTabbableOptions();\n      const allTabbable = tabbable(getDocument(floating).body, options);\n      const floatingTabbable = getTabbableElements();\n\n      // Exclude all tabbable elements that are part of the order\n      const elements = allTabbable.filter(el => !floatingTabbable.includes(el));\n      elements.forEach((el, i) => {\n        tabIndexValues[i] = el.getAttribute('tabindex');\n        el.setAttribute('tabindex', '-1');\n      });\n      return () => {\n        elements.forEach((el, i) => {\n          const value = tabIndexValues[i];\n          if (value == null) {\n            el.removeAttribute('tabindex');\n          } else {\n            el.setAttribute('tabindex', value);\n          }\n        });\n      };\n    }\n  }, [floating, modal, guards, getTabbableElements]);\n  index(() => {\n    if (!floating) return;\n    const doc = getDocument(floating);\n    const previouslyFocusedElement = activeElement(doc);\n\n    // Wait for any layout effect state setters to execute to set `tabIndex`.\n    queueMicrotask(() => {\n      const focusableElements = getTabbableElements(floating);\n      const initialFocusValue = initialFocusRef.current;\n      const elToFocus = (typeof initialFocusValue === 'number' ? focusableElements[initialFocusValue] : initialFocusValue.current) || floating;\n      const focusAlreadyInsideFloatingEl = contains(floating, previouslyFocusedElement);\n      if (!ignoreInitialFocus && !focusAlreadyInsideFloatingEl && open) {\n        enqueueFocus(elToFocus, {\n          preventScroll: elToFocus === floating\n        });\n      }\n    });\n  }, [open, floating, ignoreInitialFocus, getTabbableElements, initialFocusRef]);\n  index(() => {\n    if (!floating) return;\n    let preventReturnFocusScroll = false;\n    const doc = getDocument(floating);\n    const previouslyFocusedElement = activeElement(doc);\n    const contextData = dataRef.current;\n    previouslyFocusedElementRef.current = previouslyFocusedElement;\n\n    // Dismissing via outside press should always ignore `returnFocus` to\n    // prevent unwanted scrolling.\n    function onDismiss(payload) {\n      if (payload.type === 'escapeKey' && refs.domReference.current) {\n        previouslyFocusedElementRef.current = refs.domReference.current;\n      }\n      if (['referencePress', 'escapeKey'].includes(payload.type)) {\n        return;\n      }\n      const returnFocus = payload.data.returnFocus;\n      if (typeof returnFocus === 'object') {\n        preventReturnFocusRef.current = false;\n        preventReturnFocusScroll = returnFocus.preventScroll;\n      } else {\n        preventReturnFocusRef.current = !returnFocus;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n      const activeEl = activeElement(doc);\n      const shouldFocusReference = contains(floating, activeEl) || tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n        var _node$context5;\n        return contains((_node$context5 = node.context) == null ? void 0 : _node$context5.elements.floating, activeEl);\n      }) || contextData.openEvent && ['click', 'mousedown'].includes(contextData.openEvent.type);\n      if (shouldFocusReference && refs.domReference.current) {\n        previouslyFocusedElementRef.current = refs.domReference.current;\n      }\n      if (\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      returnFocusRef.current && isHTMLElement(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {\n        enqueueFocus(previouslyFocusedElementRef.current, {\n          // When dismissing nested floating elements, by the time the rAF has\n          // executed, the menus will all have been unmounted. When they try\n          // to get focused, the calls get ignored ‚Äî leaving the root\n          // reference focused as desired.\n          cancelPrevious: false,\n          preventScroll: preventReturnFocusScroll\n        });\n      }\n    };\n  }, [floating, returnFocusRef, dataRef, refs, events, tree, nodeId]);\n\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\n  // It will decide whether or not it needs to render its own guards.\n  index(() => {\n    if (!portalContext) return;\n    portalContext.setFocusManagerState({\n      ...context,\n      modal,\n      closeOnFocusOut,\n      open\n    });\n    return () => {\n      portalContext.setFocusManagerState(null);\n    };\n  }, [portalContext, modal, open, closeOnFocusOut, context]);\n  index(() => {\n    if (floating && typeof MutationObserver === 'function') {\n      const handleMutation = () => {\n        const tabIndex = floating.getAttribute('tabindex');\n        if (orderRef.current.includes('floating') || activeElement(getDocument(floating)) !== refs.domReference.current && getTabbableContent().length === 0) {\n          if (tabIndex !== '0') {\n            floating.setAttribute('tabindex', '0');\n          }\n        } else if (tabIndex !== '-1') {\n          floating.setAttribute('tabindex', '-1');\n        }\n      };\n      handleMutation();\n      const observer = new MutationObserver(handleMutation);\n      observer.observe(floating, {\n        childList: true,\n        subtree: true,\n        attributes: true\n      });\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [floating, refs, orderRef, getTabbableContent]);\n  function renderDismissButton(location) {\n    return visuallyHiddenDismiss && modal ? /*#__PURE__*/React.createElement(VisuallyHiddenDismiss, {\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\n      onClick: () => onOpenChange(false)\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss') : null;\n  }\n  const shouldRenderGuards = guards && !isTypeableCombobox && (isInsidePortal || modal);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\n    onFocus: event => {\n      if (modal) {\n        const els = getTabbableElements();\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = false;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const nextTabbable = getNextTabbable() || domReference;\n          nextTabbable == null ? void 0 : nextTabbable.focus();\n        } else {\n          var _portalContext$before;\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();\n        }\n      }\n    }\n  }), !isTypeableCombobox && renderDismissButton('start'), children, renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\n    onFocus: event => {\n      if (modal) {\n        enqueueFocus(getTabbableElements()[0]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        if (closeOnFocusOut) {\n          preventReturnFocusRef.current = true;\n        }\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const prevTabbable = getPreviousTabbable() || domReference;\n          prevTabbable == null ? void 0 : prevTabbable.focus();\n        } else {\n          var _portalContext$afterO;\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();\n        }\n      }\n    }\n  }));\n}\n\nfunction sortByDocumentPosition(a, b) {\n  const position = a.compareDocumentPosition(b);\n  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n    return -1;\n  }\n  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {\n    return 1;\n  }\n  return 0;\n}\nfunction areMapsEqual(map1, map2) {\n  if (map1.size !== map2.size) {\n    return false;\n  }\n  for (const [key, value] of map1.entries()) {\n    if (value !== map2.get(key)) {\n      return false;\n    }\n  }\n  return true;\n}\nconst FloatingListContext = /*#__PURE__*/React.createContext({\n  register: () => {},\n  unregister: () => {},\n  map: /*#__PURE__*/new Map(),\n  elementsRef: {\n    current: []\n  }\n});\n/**\n * Provides context for a list of items within the floating element.\n * @see https://floating-ui.com/docs/FloatingList\n */\nfunction FloatingList(_ref) {\n  let {\n    children,\n    elementsRef,\n    labelsRef\n  } = _ref;\n  const [map, setMap] = React.useState(() => new Map());\n  const register = React.useCallback(node => {\n    setMap(prevMap => new Map(prevMap).set(node, null));\n  }, []);\n  const unregister = React.useCallback(node => {\n    setMap(prevMap => {\n      const map = new Map(prevMap);\n      map.delete(node);\n      return map;\n    });\n  }, []);\n  index(() => {\n    const newMap = new Map(map);\n    const nodes = Array.from(newMap.keys()).sort(sortByDocumentPosition);\n    nodes.forEach((node, index) => {\n      newMap.set(node, index);\n    });\n    if (!areMapsEqual(map, newMap)) {\n      setMap(newMap);\n    }\n  }, [map]);\n  return /*#__PURE__*/React.createElement(FloatingListContext.Provider, {\n    value: {\n      register,\n      unregister,\n      map,\n      elementsRef,\n      labelsRef\n    }\n  }, children);\n}\nfunction useListItem(_temp) {\n  let {\n    label\n  } = _temp === void 0 ? {} : _temp;\n  const [index$1, setIndex] = React.useState(null);\n  const componentRef = React.useRef(null);\n  const {\n    register,\n    unregister,\n    map,\n    elementsRef,\n    labelsRef\n  } = React.useContext(FloatingListContext);\n  const ref = React.useCallback(node => {\n    componentRef.current = node;\n    if (index$1 !== null) {\n      elementsRef.current[index$1] = node;\n      if (labelsRef) {\n        var _node$textContent;\n        const isLabelDefined = label !== undefined;\n        labelsRef.current[index$1] = isLabelDefined ? label : (_node$textContent = node == null ? void 0 : node.textContent) != null ? _node$textContent : null;\n      }\n    }\n  }, [index$1, elementsRef, labelsRef, label]);\n  index(() => {\n    const node = componentRef.current;\n    if (!node) return;\n    register(node);\n    return () => {\n      unregister(node);\n    };\n  }, [register, unregister]);\n  index(() => {\n    const index = componentRef.current ? map.get(componentRef.current) : null;\n    if (index != null) {\n      setIndex(index);\n    }\n  }, [map]);\n  return React.useMemo(() => ({\n    ref,\n    index: index$1 == null ? -1 : index$1\n  }), [index$1, ref]);\n}\n\nconst identifier = 'data-floating-ui-scroll-lock';\n\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\nconst FloatingOverlay = /*#__PURE__*/React.forwardRef(function FloatingOverlay(_ref, ref) {\n  let {\n    lockScroll = false,\n    ...rest\n  } = _ref;\n  index(() => {\n    var _window$visualViewpor, _window$visualViewpor2;\n    if (!lockScroll) {\n      return;\n    }\n    const alreadyLocked = document.body.hasAttribute(identifier);\n    if (alreadyLocked) {\n      return;\n    }\n    document.body.setAttribute(identifier, '');\n\n    // RTL <body> scrollbar\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n    const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n\n    // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n    // technique has fewer side effects.\n    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {\n      Object.assign(document.body.style, {\n        overflow: 'hidden',\n        [paddingProp]: scrollbarWidth + \"px\"\n      });\n      return () => {\n        document.body.removeAttribute(identifier);\n        Object.assign(document.body.style, {\n          overflow: '',\n          [paddingProp]: ''\n        });\n      };\n    }\n\n    // iOS 12 does not support `visualViewport`.\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\n    const scrollX = window.pageXOffset;\n    const scrollY = window.pageYOffset;\n    Object.assign(document.body.style, {\n      position: 'fixed',\n      overflow: 'hidden',\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n      right: '0',\n      [paddingProp]: scrollbarWidth + \"px\"\n    });\n    return () => {\n      Object.assign(document.body.style, {\n        position: '',\n        overflow: '',\n        top: '',\n        left: '',\n        right: '',\n        [paddingProp]: ''\n      });\n      document.body.removeAttribute(identifier);\n      window.scrollTo(scrollX, scrollY);\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: {\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...rest.style\n    }\n  }));\n});\n\nfunction isButtonTarget(event) {\n  return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';\n}\nfunction isSpaceIgnored(element) {\n  return isTypeableElement(element);\n}\n/**\n * Opens or closes the floating element when clicking the reference element.\n * @see https://floating-ui.com/docs/useClick\n */\nfunction useClick(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    elements: {\n      domReference\n    }\n  } = context;\n  const {\n    enabled = true,\n    event: eventOption = 'click',\n    toggle = true,\n    ignoreMouse = false,\n    keyboardHandlers = true\n  } = props;\n  const pointerTypeRef = React.useRef();\n  const didKeyDownRef = React.useRef(false);\n  return React.useMemo(() => {\n    if (!enabled) return {};\n    return {\n      reference: {\n        onPointerDown(event) {\n          pointerTypeRef.current = event.pointerType;\n        },\n        onMouseDown(event) {\n          // Ignore all buttons except for the \"main\" button.\n          // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n          if (event.button !== 0) {\n            return;\n          }\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\n            return;\n          }\n          if (eventOption === 'click') {\n            return;\n          }\n          if (open) {\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {\n              onOpenChange(false);\n            }\n          } else {\n            // Prevent stealing focus from the floating element\n            event.preventDefault();\n            onOpenChange(true);\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n        },\n        onClick(event) {\n          if (eventOption === 'mousedown' && pointerTypeRef.current) {\n            pointerTypeRef.current = undefined;\n            return;\n          }\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\n            return;\n          }\n          if (open) {\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {\n              onOpenChange(false);\n            }\n          } else {\n            onOpenChange(true);\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n        },\n        onKeyDown(event) {\n          pointerTypeRef.current = undefined;\n          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {\n            return;\n          }\n          if (event.key === ' ' && !isSpaceIgnored(domReference)) {\n            // Prevent scrolling\n            event.preventDefault();\n            didKeyDownRef.current = true;\n          }\n          if (event.key === 'Enter') {\n            if (open) {\n              if (toggle) {\n                onOpenChange(false);\n              }\n            } else {\n              onOpenChange(true);\n            }\n          }\n        },\n        onKeyUp(event) {\n          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {\n            return;\n          }\n          if (event.key === ' ' && didKeyDownRef.current) {\n            didKeyDownRef.current = false;\n            if (open) {\n              if (toggle) {\n                onOpenChange(false);\n              }\n            } else {\n              onOpenChange(true);\n            }\n          }\n        }\n      }\n    };\n  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);\n}\n\n// `toString()` prevents bundlers from trying to `import { useInsertionEffect } from 'react'`\nconst useInsertionEffect = React[/*#__PURE__*/'useInsertionEffect'.toString()];\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\nfunction useEvent(callback) {\n  const ref = React.useRef(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      throw new Error('Cannot call an event handler while rendering.');\n    }\n  });\n  useSafeInsertionEffect(() => {\n    ref.current = callback;\n  });\n  return React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}\n\nfunction createVirtualElement(domRef, data) {\n  let offsetX = null;\n  let offsetY = null;\n  let isAutoUpdateEvent = false;\n  return {\n    contextElement: domRef.current || undefined,\n    getBoundingClientRect() {\n      var _domRef$current, _data$dataRef$current;\n      const domRect = ((_domRef$current = domRef.current) == null ? void 0 : _domRef$current.getBoundingClientRect()) || {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n      const isXAxis = data.axis === 'x' || data.axis === 'both';\n      const isYAxis = data.axis === 'y' || data.axis === 'both';\n      const canTrackCursorOnAutoUpdate = ['mouseenter', 'mousemove'].includes(((_data$dataRef$current = data.dataRef.current.openEvent) == null ? void 0 : _data$dataRef$current.type) || '') && data.pointerType !== 'touch';\n      let width = domRect.width;\n      let height = domRect.height;\n      let x = domRect.x;\n      let y = domRect.y;\n      if (offsetX == null && data.x && isXAxis) {\n        offsetX = domRect.x - data.x;\n      }\n      if (offsetY == null && data.y && isYAxis) {\n        offsetY = domRect.y - data.y;\n      }\n      x -= offsetX || 0;\n      y -= offsetY || 0;\n      width = 0;\n      height = 0;\n      if (!isAutoUpdateEvent || canTrackCursorOnAutoUpdate) {\n        width = data.axis === 'y' ? domRect.width : 0;\n        height = data.axis === 'x' ? domRect.height : 0;\n        x = isXAxis && data.x != null ? data.x : x;\n        y = isYAxis && data.y != null ? data.y : y;\n      } else if (isAutoUpdateEvent && !canTrackCursorOnAutoUpdate) {\n        height = data.axis === 'x' ? domRect.height : height;\n        width = data.axis === 'y' ? domRect.width : width;\n      }\n      isAutoUpdateEvent = true;\n      return {\n        width,\n        height,\n        x,\n        y,\n        top: y,\n        right: x + width,\n        bottom: y + height,\n        left: x\n      };\n    }\n  };\n}\nfunction isMouseBasedEvent(event) {\n  return event != null && event.clientX != null;\n}\n/**\n * Positions the floating element relative to a client point (in the viewport),\n * such as the mouse position. By default, it follows the mouse cursor.\n * @see https://floating-ui.com/docs/useClientPoint\n */\nfunction useClientPoint(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    refs,\n    dataRef,\n    elements: {\n      floating\n    }\n  } = context;\n  const {\n    enabled = true,\n    axis = 'both',\n    x = null,\n    y = null\n  } = props;\n  const initialRef = React.useRef(false);\n  const cleanupListenerRef = React.useRef(null);\n  const [pointerType, setPointerType] = React.useState();\n  const [reactive, setReactive] = React.useState([]);\n  const setReference = useEvent((x, y) => {\n    if (initialRef.current) return;\n\n    // Prevent setting if the open event was not a mouse-like one\n    // (e.g. focus to open, then hover over the reference element).\n    // Only apply if the event exists.\n    if (dataRef.current.openEvent && !isMouseBasedEvent(dataRef.current.openEvent)) {\n      return;\n    }\n    refs.setPositionReference(createVirtualElement(refs.domReference, {\n      x,\n      y,\n      axis,\n      dataRef,\n      pointerType\n    }));\n  });\n  const handleReferenceEnterOrMove = useEvent(event => {\n    if (x != null || y != null) return;\n    if (!open) {\n      setReference(event.clientX, event.clientY);\n    } else if (!cleanupListenerRef.current) {\n      // If there's no cleanup, there's no listener, but we want to ensure\n      // we add the listener if the cursor landed on the floating element and\n      // then back on the reference (i.e. it's interactive).\n      setReactive([]);\n    }\n  });\n\n  // If the pointer is a mouse-like pointer, we want to continue following the\n  // mouse even if the floating element is transitioning out. On touch\n  // devices, this is undesirable because the floating element will move to\n  // the dismissal touch point.\n  const openCheck = isMouseLikePointerType(pointerType) ? floating : open;\n  const addListener = React.useCallback(() => {\n    // Explicitly specified `x`/`y` coordinates shouldn't add a listener.\n    if (!openCheck || !enabled || x != null || y != null) return;\n    const win = getWindow(refs.floating.current);\n    function handleMouseMove(event) {\n      const target = getTarget(event);\n      if (!contains(refs.floating.current, target)) {\n        setReference(event.clientX, event.clientY);\n      } else {\n        win.removeEventListener('mousemove', handleMouseMove);\n        cleanupListenerRef.current = null;\n      }\n    }\n    if (!dataRef.current.openEvent || isMouseBasedEvent(dataRef.current.openEvent)) {\n      win.addEventListener('mousemove', handleMouseMove);\n      const cleanup = () => {\n        win.removeEventListener('mousemove', handleMouseMove);\n        cleanupListenerRef.current = null;\n      };\n      cleanupListenerRef.current = cleanup;\n      return cleanup;\n    }\n    refs.setPositionReference(refs.domReference.current);\n  }, [dataRef, enabled, openCheck, refs, setReference, x, y]);\n  React.useEffect(() => {\n    return addListener();\n  }, [addListener, reactive]);\n  React.useEffect(() => {\n    if (enabled && !floating) {\n      initialRef.current = false;\n    }\n  }, [enabled, floating]);\n  React.useEffect(() => {\n    if (!enabled && open) {\n      initialRef.current = true;\n    }\n  }, [enabled, open]);\n  index(() => {\n    if (enabled && (x != null || y != null)) {\n      initialRef.current = false;\n      setReference(x, y);\n    }\n  }, [enabled, x, y, setReference]);\n  return React.useMemo(() => {\n    if (!enabled) return {};\n    function setPointerTypeRef(_ref) {\n      let {\n        pointerType\n      } = _ref;\n      setPointerType(pointerType);\n    }\n    return {\n      reference: {\n        onPointerDown: setPointerTypeRef,\n        onPointerEnter: setPointerTypeRef,\n        onMouseMove: handleReferenceEnterOrMove,\n        onMouseEnter: handleReferenceEnterOrMove\n      }\n    };\n  }, [enabled, handleReferenceEnterOrMove]);\n}\n\n/**\n * Check whether the event.target is within the provided node. Uses event.composedPath if available for custom element support.\n *\n * @param event The event whose target/composedPath to check\n * @param node The node to check against\n * @returns Whether the event.target/composedPath is within the node.\n */\nfunction isEventTargetWithin(event, node) {\n  if (node == null) {\n    return false;\n  }\n  if ('composedPath' in event) {\n    return event.composedPath().includes(node);\n  }\n\n  // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\n  const e = event;\n  return e.target != null && node.contains(e.target);\n}\n\nconst bubbleHandlerKeys = {\n  pointerdown: 'onPointerDown',\n  mousedown: 'onMouseDown',\n  click: 'onClick'\n};\nconst captureHandlerKeys = {\n  pointerdown: 'onPointerDownCapture',\n  mousedown: 'onMouseDownCapture',\n  click: 'onClickCapture'\n};\nconst normalizeBubblesProp = bubbles => {\n  var _bubbles$escapeKey, _bubbles$outsidePress;\n  return {\n    escapeKeyBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$escapeKey = bubbles == null ? void 0 : bubbles.escapeKey) != null ? _bubbles$escapeKey : false,\n    outsidePressBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$outsidePress = bubbles == null ? void 0 : bubbles.outsidePress) != null ? _bubbles$outsidePress : true\n  };\n};\n/**\n * Closes the floating element when a dismissal is requested ‚Äî by default, when\n * the user presses the `escape` key or outside of the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nfunction useDismiss(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    events,\n    nodeId,\n    elements: {\n      reference,\n      domReference,\n      floating\n    },\n    dataRef\n  } = context;\n  const {\n    enabled = true,\n    escapeKey = true,\n    outsidePress: unstable_outsidePress = true,\n    outsidePressEvent = 'pointerdown',\n    referencePress = false,\n    referencePressEvent = 'pointerdown',\n    ancestorScroll = false,\n    bubbles\n  } = props;\n  const tree = useFloatingTree();\n  const nested = useFloatingParentNodeId() != null;\n  const outsidePressFn = useEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\n  const insideReactTreeRef = React.useRef(false);\n  const {\n    escapeKeyBubbles,\n    outsidePressBubbles\n  } = normalizeBubblesProp(bubbles);\n  const closeOnEscapeKeyDown = useEvent(event => {\n    if (!open || !enabled || !escapeKey || event.key !== 'Escape') {\n      return;\n    }\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n    if (!escapeKeyBubbles) {\n      event.stopPropagation();\n      if (children.length > 0) {\n        let shouldDismiss = true;\n        children.forEach(child => {\n          var _child$context;\n          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\n            shouldDismiss = false;\n            return;\n          }\n        });\n        if (!shouldDismiss) {\n          return;\n        }\n      }\n    }\n    events.emit('dismiss', {\n      type: 'escapeKey',\n      data: {\n        returnFocus: {\n          preventScroll: false\n        }\n      }\n    });\n    onOpenChange(false);\n  });\n  const closeOnPressOutside = useEvent(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = insideReactTreeRef.current;\n    insideReactTreeRef.current = false;\n    if (insideReactTree) {\n      return;\n    }\n    if (typeof outsidePress === 'function' && !outsidePress(event)) {\n      return;\n    }\n    const target = getTarget(event);\n\n    // Check if the click occurred on the scrollbar\n    if (isHTMLElement(target) && floating) {\n      // In Firefox, `target.scrollWidth > target.clientWidth` for inline\n      // elements.\n      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;\n      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;\n      let xCond = canScrollY && event.offsetX > target.clientWidth;\n\n      // In some browsers it is possible to change the <body> (or window)\n      // scrollbar to the left side, but is very rare and is difficult to\n      // check for. Plus, for modal dialogs with backdrops, it is more\n      // important that the backdrop is checked but not so much the window.\n      if (canScrollY) {\n        const isRTL = getWindow(floating).getComputedStyle(target).direction === 'rtl';\n        if (isRTL) {\n          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\n        }\n      }\n      if (xCond || canScrollX && event.offsetY > target.clientHeight) {\n        return;\n      }\n    }\n    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n      var _node$context;\n      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\n    });\n    if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {\n      return;\n    }\n    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n    if (children.length > 0) {\n      let shouldDismiss = true;\n      children.forEach(child => {\n        var _child$context2;\n        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\n          shouldDismiss = false;\n          return;\n        }\n      });\n      if (!shouldDismiss) {\n        return;\n      }\n    }\n    events.emit('dismiss', {\n      type: 'outsidePress',\n      data: {\n        returnFocus: nested ? {\n          preventScroll: true\n        } : isVirtualClick(event) || isVirtualPointerEvent(event)\n      }\n    });\n    onOpenChange(false);\n  });\n  React.useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\n    function onScroll() {\n      onOpenChange(false);\n    }\n    const doc = getDocument(floating);\n    escapeKey && doc.addEventListener('keydown', closeOnEscapeKeyDown);\n    outsidePress && doc.addEventListener(outsidePressEvent, closeOnPressOutside);\n    let ancestors = [];\n    if (ancestorScroll) {\n      if (isElement(domReference)) {\n        ancestors = getOverflowAncestors(domReference);\n      }\n      if (isElement(floating)) {\n        ancestors = ancestors.concat(getOverflowAncestors(floating));\n      }\n      if (!isElement(reference) && reference && reference.contextElement) {\n        ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));\n      }\n    }\n\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n    ancestors = ancestors.filter(ancestor => {\n      var _doc$defaultView;\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\n    });\n    ancestors.forEach(ancestor => {\n      ancestor.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    });\n    return () => {\n      escapeKey && doc.removeEventListener('keydown', closeOnEscapeKeyDown);\n      outsidePress && doc.removeEventListener(outsidePressEvent, closeOnPressOutside);\n      ancestors.forEach(ancestor => {\n        ancestor.removeEventListener('scroll', onScroll);\n      });\n    };\n  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, closeOnPressOutside]);\n  React.useEffect(() => {\n    insideReactTreeRef.current = false;\n  }, [outsidePress, outsidePressEvent]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        onKeyDown: closeOnEscapeKeyDown,\n        [bubbleHandlerKeys[referencePressEvent]]: () => {\n          if (referencePress) {\n            events.emit('dismiss', {\n              type: 'referencePress',\n              data: {\n                returnFocus: false\n              }\n            });\n            onOpenChange(false);\n          }\n        }\n      },\n      floating: {\n        onKeyDown: closeOnEscapeKeyDown,\n        [captureHandlerKeys[outsidePressEvent]]: () => {\n          insideReactTreeRef.current = true;\n        }\n      }\n    };\n  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange, closeOnEscapeKeyDown]);\n}\n\n/**\n * Opens the floating element while the reference element has focus, like CSS\n * `:focus`.\n * @see https://floating-ui.com/docs/useFocus\n */\nfunction useFocus(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    refs,\n    elements: {\n      floating,\n      domReference\n    }\n  } = context;\n  const {\n    enabled = true,\n    keyboardOnly = true\n  } = props;\n  const pointerTypeRef = React.useRef('');\n  const blockFocusRef = React.useRef(false);\n  const timeoutRef = React.useRef();\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const doc = getDocument(floating);\n    const win = doc.defaultView || window;\n\n    // If the reference was focused and the user left the tab/window, and the\n    // floating element was not open, the focus should be blocked when they\n    // return to the tab/window.\n    function onBlur() {\n      if (!open && isHTMLElement(domReference) && domReference === activeElement(getDocument(domReference))) {\n        blockFocusRef.current = true;\n      }\n    }\n    win.addEventListener('blur', onBlur);\n    return () => {\n      win.removeEventListener('blur', onBlur);\n    };\n  }, [floating, domReference, open, enabled]);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss(payload) {\n      if (payload.type === 'referencePress' || payload.type === 'escapeKey') {\n        blockFocusRef.current = true;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [events, enabled]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        onPointerDown(_ref) {\n          let {\n            pointerType\n          } = _ref;\n          pointerTypeRef.current = pointerType;\n          blockFocusRef.current = !!(pointerType && keyboardOnly);\n        },\n        onMouseLeave() {\n          blockFocusRef.current = false;\n        },\n        onFocus(event) {\n          var _dataRef$current$open;\n          if (blockFocusRef.current) {\n            return;\n          }\n\n          // Dismiss with click should ignore the subsequent `focus` trigger,\n          // but only if the click originated inside the reference element.\n          if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {\n            return;\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n          onOpenChange(true);\n        },\n        onBlur(event) {\n          blockFocusRef.current = false;\n          const relatedTarget = event.relatedTarget;\n\n          // Hit the non-modal focus management portal guard. Focus will be\n          // moved into the floating element immediately after.\n          const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute('data-floating-ui-focus-guard') && relatedTarget.getAttribute('data-type') === 'outside';\n\n          // Wait for the window blur listener to fire.\n          timeoutRef.current = setTimeout(() => {\n            // When focusing the reference element (e.g. regular click), then\n            // clicking into the floating element, prevent it from hiding.\n            // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n            if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {\n              return;\n            }\n            onOpenChange(false);\n          });\n        }\n      }\n    };\n  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);\n}\n\nlet isPreventScrollSupported = false;\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\nfunction isDifferentRow(index, cols, prevRow) {\n  return Math.floor(index / cols) !== prevRow;\n}\nfunction isIndexOutOfBounds(listRef, index) {\n  return index < 0 || index >= listRef.current.length;\n}\nfunction findNonDisabledIndex(listRef, _temp) {\n  let {\n    startingIndex = -1,\n    decrement = false,\n    disabledIndices,\n    amount = 1\n  } = _temp === void 0 ? {} : _temp;\n  const list = listRef.current;\n  let index = startingIndex;\n  do {\n    var _list$index, _list$index2;\n    index = index + (decrement ? -amount : amount);\n  } while (index >= 0 && index <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index) : list[index] == null || ((_list$index = list[index]) == null ? void 0 : _list$index.hasAttribute('disabled')) || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'));\n  return index;\n}\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n    case 'horizontal':\n      return horizontal;\n    default:\n      return vertical || horizontal;\n  }\n}\nfunction isMainOrientationKey(key, orientation) {\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  const vertical = key === ARROW_DOWN;\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  const horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  const horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction getMinIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    disabledIndices\n  });\n}\nfunction getMaxIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length,\n    disabledIndices\n  });\n}\n/**\n * Adds arrow key-based navigation of a list of items, either using real DOM\n * focus or virtual focus.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nfunction useListNavigation(context, props) {\n  const {\n    open,\n    onOpenChange,\n    refs,\n    elements: {\n      domReference,\n      floating\n    }\n  } = context;\n  const {\n    listRef,\n    activeIndex,\n    onNavigate: unstable_onNavigate = () => {},\n    enabled = true,\n    selectedIndex = null,\n    allowEscape = false,\n    loop = false,\n    nested = false,\n    rtl = false,\n    virtual = false,\n    focusItemOnOpen = 'auto',\n    focusItemOnHover = true,\n    openOnArrowKeyDown = true,\n    disabledIndices = undefined,\n    orientation = 'vertical',\n    cols = 1,\n    scrollItemIntoView = true\n  } = props;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (allowEscape) {\n      if (!loop) {\n        console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));\n      }\n      if (!virtual) {\n        console.warn(['Floating UI: `useListNavigation` must be virtual to allow', 'escaping.'].join(' '));\n      }\n    }\n    if (orientation === 'vertical' && cols > 1) {\n      console.warn(['Floating UI: In grid list navigation mode (`cols` > 1), the', '`orientation` should be either \"horizontal\" or \"both\".'].join(' '));\n    }\n  }\n  const parentId = useFloatingParentNodeId();\n  const tree = useFloatingTree();\n  const onNavigate = useEvent(unstable_onNavigate);\n  const focusItemOnOpenRef = React.useRef(focusItemOnOpen);\n  const indexRef = React.useRef(selectedIndex != null ? selectedIndex : -1);\n  const keyRef = React.useRef(null);\n  const isPointerModalityRef = React.useRef(true);\n  const previousOnNavigateRef = React.useRef(onNavigate);\n  const previousMountedRef = React.useRef(!!floating);\n  const forceSyncFocus = React.useRef(false);\n  const forceScrollIntoViewRef = React.useRef(false);\n  const disabledIndicesRef = useLatestRef(disabledIndices);\n  const latestOpenRef = useLatestRef(open);\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\n  const [activeId, setActiveId] = React.useState();\n  const focusItem = useEvent(function (listRef, indexRef, forceScrollIntoView) {\n    if (forceScrollIntoView === void 0) {\n      forceScrollIntoView = false;\n    }\n    const item = listRef.current[indexRef.current];\n    if (!item) return;\n    if (virtual) {\n      setActiveId(item.id);\n    } else {\n      enqueueFocus(item, {\n        preventScroll: true,\n        // Mac Safari does not move the virtual cursor unless the focus call\n        // is sync. However, for the very first focus call, we need to wait\n        // for the position to be ready in order to prevent unwanted\n        // scrolling. This means the virtual cursor will not move to the first\n        // item when first opening the floating element, but will on\n        // subsequent calls. `preventScroll` is supported in modern Safari,\n        // so we can use that instead.\n        // iOS Safari must be async or the first item will not be focused.\n        sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false\n      });\n    }\n    requestAnimationFrame(() => {\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\n      if (shouldScrollIntoView) {\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\n        // by all browsers.\n        item.scrollIntoView == null ? void 0 : item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\n          block: 'nearest',\n          inline: 'nearest'\n        } : scrollIntoViewOptions);\n      }\n    });\n  });\n  index(() => {\n    document.createElement('div').focus({\n      get preventScroll() {\n        isPreventScrollSupported = true;\n        return false;\n      }\n    });\n  }, []);\n\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n  // element. Also, reset `activeIndex` upon closing the floating element.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (open && floating) {\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\n        // Regardless of the pointer modality, we want to ensure the selected\n        // item comes into view when the floating element is opened.\n        forceScrollIntoViewRef.current = true;\n        onNavigate(selectedIndex);\n      }\n    } else if (previousMountedRef.current) {\n      // Since the user can specify `onNavigate` conditionally\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\n      // we store and call the previous function.\n      indexRef.current = -1;\n      previousOnNavigateRef.current(null);\n    }\n  }, [enabled, open, floating, selectedIndex, onNavigate]);\n\n  // Sync `activeIndex` to be the focused item while the floating element is\n  // open.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (open && floating) {\n      if (activeIndex == null) {\n        forceSyncFocus.current = false;\n        if (selectedIndex != null) {\n          return;\n        }\n\n        // Reset while the floating element was open (e.g. the list changed).\n        if (previousMountedRef.current) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n        }\n\n        // Initial sync.\n        if (!previousMountedRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n          let runs = 0;\n          const waitForListPopulated = () => {\n            if (listRef.current[0] == null) {\n              // Avoid letting the browser paint if possible on the first try,\n              // otherwise use rAF. Don't try more than twice, since something\n              // is wrong otherwise.\n              if (runs < 2) {\n                const scheduler = runs ? requestAnimationFrame : queueMicrotask;\n                scheduler(waitForListPopulated);\n              }\n              runs++;\n            } else {\n              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\n              keyRef.current = null;\n              onNavigate(indexRef.current);\n            }\n          };\n          waitForListPopulated();\n        }\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\n        indexRef.current = activeIndex;\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\n        forceScrollIntoViewRef.current = false;\n      }\n    }\n  }, [enabled, open, floating, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\n\n  // Ensure the parent floating element has focus when a nested child closes\n  // to allow arrow key navigation to work after the pointer leaves the child.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (previousMountedRef.current && !floating && tree) {\n      var _nodes$find, _nodes$find$context;\n      const nodes = tree.nodesRef.current;\n      const parent = (_nodes$find = nodes.find(node => node.id === parentId)) == null ? void 0 : (_nodes$find$context = _nodes$find.context) == null ? void 0 : _nodes$find$context.elements.floating;\n      const activeEl = activeElement(getDocument(floating));\n      const treeContainsActiveEl = nodes.some(node => node.context && contains(node.context.elements.floating, activeEl));\n      if (parent && !treeContainsActiveEl) {\n        parent.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [enabled, floating, tree, parentId]);\n  index(() => {\n    previousOnNavigateRef.current = onNavigate;\n    previousMountedRef.current = !!floating;\n  });\n  index(() => {\n    if (!open) {\n      keyRef.current = null;\n    }\n  }, [open]);\n  const hasActiveIndex = activeIndex != null;\n  const item = React.useMemo(() => {\n    function syncCurrentTarget(currentTarget) {\n      if (!open) return;\n      const index = listRef.current.indexOf(currentTarget);\n      if (index !== -1) {\n        onNavigate(index);\n      }\n    }\n    const props = {\n      onFocus(_ref) {\n        let {\n          currentTarget\n        } = _ref;\n        syncCurrentTarget(currentTarget);\n      },\n      onClick: _ref2 => {\n        let {\n          currentTarget\n        } = _ref2;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      },\n      // Safari\n      ...(focusItemOnHover && {\n        onMouseMove(_ref3) {\n          let {\n            currentTarget\n          } = _ref3;\n          syncCurrentTarget(currentTarget);\n        },\n        onPointerLeave(_ref4) {\n          let {\n            pointerType\n          } = _ref4;\n          if (!isPointerModalityRef.current || pointerType === 'touch') {\n            return;\n          }\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n          onNavigate(null);\n          if (!virtual) {\n            enqueueFocus(refs.floating.current, {\n              preventScroll: true\n            });\n          }\n        }\n      })\n    };\n    return props;\n  }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    const disabledIndices = disabledIndicesRef.current;\n    function onKeyDown(event) {\n      isPointerModalityRef.current = false;\n      forceSyncFocus.current = true;\n\n      // If the floating element is animating out, ignore navigation. Otherwise,\n      // the `activeIndex` gets set to 0 despite not being open so the next time\n      // the user ArrowDowns, the first item won't be focused.\n      if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {\n        return;\n      }\n      if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n        stopEvent(event);\n        onOpenChange(false);\n        if (isHTMLElement(domReference)) {\n          domReference.focus();\n        }\n        return;\n      }\n      const currentIndex = indexRef.current;\n      const minIndex = getMinIndex(listRef, disabledIndices);\n      const maxIndex = getMaxIndex(listRef, disabledIndices);\n      if (event.key === 'Home') {\n        stopEvent(event);\n        indexRef.current = minIndex;\n        onNavigate(indexRef.current);\n      }\n      if (event.key === 'End') {\n        stopEvent(event);\n        indexRef.current = maxIndex;\n        onNavigate(indexRef.current);\n      }\n\n      // Grid navigation.\n      if (cols > 1) {\n        const prevIndex = indexRef.current;\n        if (event.key === ARROW_UP) {\n          stopEvent(event);\n          if (prevIndex === -1) {\n            indexRef.current = maxIndex;\n          } else {\n            indexRef.current = findNonDisabledIndex(listRef, {\n              startingIndex: prevIndex,\n              amount: cols,\n              decrement: true,\n              disabledIndices\n            });\n            if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {\n              const col = prevIndex % cols;\n              const maxCol = maxIndex % cols;\n              const offset = maxIndex - (maxCol - col);\n              if (maxCol === col) {\n                indexRef.current = maxIndex;\n              } else {\n                indexRef.current = maxCol > col ? offset : offset - cols;\n              }\n            }\n          }\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            indexRef.current = prevIndex;\n          }\n          onNavigate(indexRef.current);\n        }\n        if (event.key === ARROW_DOWN) {\n          stopEvent(event);\n          if (prevIndex === -1) {\n            indexRef.current = minIndex;\n          } else {\n            indexRef.current = findNonDisabledIndex(listRef, {\n              startingIndex: prevIndex,\n              amount: cols,\n              disabledIndices\n            });\n            if (loop && prevIndex + cols > maxIndex) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex % cols - cols,\n                amount: cols,\n                disabledIndices\n              });\n            }\n          }\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            indexRef.current = prevIndex;\n          }\n          onNavigate(indexRef.current);\n        }\n\n        // Remains on the same row/column.\n        if (orientation === 'both') {\n          const prevRow = Math.floor(prevIndex / cols);\n          if (event.key === ARROW_RIGHT) {\n            stopEvent(event);\n            if (prevIndex % cols !== cols - 1) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex,\n                disabledIndices\n              });\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\n                indexRef.current = findNonDisabledIndex(listRef, {\n                  startingIndex: prevIndex - prevIndex % cols - 1,\n                  disabledIndices\n                });\n              }\n            } else if (loop) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex - prevIndex % cols - 1,\n                disabledIndices\n              });\n            }\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\n              indexRef.current = prevIndex;\n            }\n          }\n          if (event.key === ARROW_LEFT) {\n            stopEvent(event);\n            if (prevIndex % cols !== 0) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex,\n                disabledIndices,\n                decrement: true\n              });\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\n                indexRef.current = findNonDisabledIndex(listRef, {\n                  startingIndex: prevIndex + (cols - prevIndex % cols),\n                  decrement: true,\n                  disabledIndices\n                });\n              }\n            } else if (loop) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex + (cols - prevIndex % cols),\n                decrement: true,\n                disabledIndices\n              });\n            }\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\n              indexRef.current = prevIndex;\n            }\n          }\n          const lastRow = Math.floor(maxIndex / cols) === prevRow;\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            if (loop && lastRow) {\n              indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex - prevIndex % cols - 1,\n                disabledIndices\n              });\n            } else {\n              indexRef.current = prevIndex;\n            }\n          }\n          onNavigate(indexRef.current);\n          return;\n        }\n      }\n      if (isMainOrientationKey(event.key, orientation)) {\n        stopEvent(event);\n\n        // Reset the index if no item is focused.\n        if (open && !virtual && activeElement(event.currentTarget.ownerDocument) === event.currentTarget) {\n          indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n          onNavigate(indexRef.current);\n          return;\n        }\n        if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n          if (loop) {\n            indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              disabledIndices\n            });\n          } else {\n            indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              disabledIndices\n            }));\n          }\n        } else {\n          if (loop) {\n            indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              decrement: true,\n              disabledIndices\n            });\n          } else {\n            indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              decrement: true,\n              disabledIndices\n            }));\n          }\n        }\n        if (isIndexOutOfBounds(listRef, indexRef.current)) {\n          onNavigate(null);\n        } else {\n          onNavigate(indexRef.current);\n        }\n      }\n    }\n    function checkVirtualMouse(event) {\n      if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    function checkVirtualPointer(event) {\n      // `pointerdown` fires first, reset the state then perform the checks.\n      focusItemOnOpenRef.current = focusItemOnOpen;\n      if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {\n      'aria-activedescendant': activeId\n    };\n    return {\n      reference: {\n        ...ariaActiveDescendantProp,\n        onKeyDown(event) {\n          isPointerModalityRef.current = false;\n          const isArrowKey = event.key.indexOf('Arrow') === 0;\n          if (virtual && open) {\n            return onKeyDown(event);\n          }\n\n          // If a floating element should not open on arrow key down, avoid\n          // setting `activeIndex` while it's closed.\n          if (!open && !openOnArrowKeyDown && isArrowKey) {\n            return;\n          }\n          const isNavigationKey = isArrowKey || event.key === 'Enter' || event.key.trim() === '';\n          const isMainKey = isMainOrientationKey(event.key, orientation);\n          const isCrossKey = isCrossOrientationOpenKey(event.key, orientation, rtl);\n          if (isNavigationKey) {\n            keyRef.current = nested && isMainKey ? null : event.key;\n          }\n          if (nested) {\n            if (isCrossKey) {\n              stopEvent(event);\n              if (open) {\n                indexRef.current = getMinIndex(listRef, disabledIndices);\n                onNavigate(indexRef.current);\n              } else {\n                onOpenChange(true);\n              }\n            }\n            return;\n          }\n          if (isMainKey) {\n            if (selectedIndex != null) {\n              indexRef.current = selectedIndex;\n            }\n            stopEvent(event);\n            if (!open && openOnArrowKeyDown) {\n              onOpenChange(true);\n            } else {\n              onKeyDown(event);\n            }\n            if (open) {\n              onNavigate(indexRef.current);\n            }\n          }\n        },\n        onFocus() {\n          if (open) {\n            onNavigate(null);\n          }\n        },\n        onPointerDown: checkVirtualPointer,\n        onMouseDown: checkVirtualMouse,\n        onClick: checkVirtualMouse\n      },\n      floating: {\n        'aria-orientation': orientation === 'both' ? undefined : orientation,\n        ...ariaActiveDescendantProp,\n        onKeyDown,\n        onPointerMove() {\n          isPointerModalityRef.current = true;\n        }\n      },\n      item\n    };\n  }, [domReference, refs, activeId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item]);\n}\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/useMergeRefs\n */\nfunction useMergeRefs(refs) {\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return value => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref != null) {\n          ref.current = value;\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n/**\n * Adds base screen reader props to the reference and floating elements for a\n * given floating element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nfunction useRole(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    floatingId\n  } = context;\n  const {\n    enabled = true,\n    role = 'dialog'\n  } = props;\n  const referenceId = useId();\n  return React.useMemo(() => {\n    const floatingProps = {\n      id: floatingId,\n      role\n    };\n    if (!enabled) {\n      return {};\n    }\n    if (role === 'tooltip') {\n      return {\n        reference: {\n          'aria-describedby': open ? floatingId : undefined\n        },\n        floating: floatingProps\n      };\n    }\n    return {\n      reference: {\n        'aria-expanded': open ? 'true' : 'false',\n        'aria-haspopup': role === 'alertdialog' ? 'dialog' : role,\n        'aria-controls': open ? floatingId : undefined,\n        ...(role === 'listbox' && {\n          role: 'combobox'\n        }),\n        ...(role === 'menu' && {\n          id: referenceId\n        })\n      },\n      floating: {\n        ...floatingProps,\n        ...(role === 'menu' && {\n          'aria-labelledby': referenceId\n        })\n      }\n    };\n  }, [enabled, role, open, floatingId, referenceId]);\n}\n\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\n// like `background-color`.\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\nfunction execWithArgsOrReturn(valueOrFn, args) {\n  return typeof valueOrFn === 'function' ? valueOrFn(args) : valueOrFn;\n}\nfunction useDelayUnmount(open, durationMs) {\n  const [isMounted, setIsMounted] = React.useState(open);\n  if (open && !isMounted) {\n    setIsMounted(true);\n  }\n  React.useEffect(() => {\n    if (!open) {\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\n      return () => clearTimeout(timeout);\n    }\n  }, [open, durationMs]);\n  return isMounted;\n}\n/**\n * Provides a status string to apply CSS transitions to a floating element,\n * correctly handling placement-aware transitions.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\n */\nfunction useTransitionStatus(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    open,\n    elements: {\n      floating\n    }\n  } = context;\n  const {\n    duration = 250\n  } = props;\n  const isNumberDuration = typeof duration === 'number';\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [initiated, setInitiated] = React.useState(false);\n  const [status, setStatus] = React.useState('unmounted');\n  const isMounted = useDelayUnmount(open, closeDuration);\n\n  // `initiated` check prevents this `setState` call from breaking\n  // <FloatingPortal />. This call is necessary to ensure subsequent opens\n  // after the initial one allows the correct side animation to play when the\n  // placement has changed.\n  index(() => {\n    if (initiated && !isMounted) {\n      setStatus('unmounted');\n    }\n  }, [initiated, isMounted]);\n  index(() => {\n    if (!floating) return;\n    if (open) {\n      setStatus('initial');\n      const frame = requestAnimationFrame(() => {\n        setStatus('open');\n      });\n      return () => {\n        cancelAnimationFrame(frame);\n      };\n    } else {\n      setInitiated(true);\n      setStatus('close');\n    }\n  }, [open, floating]);\n  return {\n    isMounted,\n    status\n  };\n}\n/**\n * Provides styles to apply CSS transitions to a floating element, correctly\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\n */\nfunction useTransitionStyles(context, props) {\n  if (props === void 0) {\n    props = {};\n  }\n  const {\n    initial: unstable_initial = {\n      opacity: 0\n    },\n    open: unstable_open,\n    close: unstable_close,\n    common: unstable_common,\n    duration = 250\n  } = props;\n  const placement = context.placement;\n  const side = placement.split('-')[0];\n  const fnArgs = React.useMemo(() => ({\n    side,\n    placement\n  }), [side, placement]);\n  const isNumberDuration = typeof duration === 'number';\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [styles, setStyles] = React.useState(() => ({\n    ...execWithArgsOrReturn(unstable_common, fnArgs),\n    ...execWithArgsOrReturn(unstable_initial, fnArgs)\n  }));\n  const {\n    isMounted,\n    status\n  } = useTransitionStatus(context, {\n    duration\n  });\n  const initialRef = useLatestRef(unstable_initial);\n  const openRef = useLatestRef(unstable_open);\n  const closeRef = useLatestRef(unstable_close);\n  const commonRef = useLatestRef(unstable_common);\n  index(() => {\n    const initialStyles = execWithArgsOrReturn(initialRef.current, fnArgs);\n    const closeStyles = execWithArgsOrReturn(closeRef.current, fnArgs);\n    const commonStyles = execWithArgsOrReturn(commonRef.current, fnArgs);\n    const openStyles = execWithArgsOrReturn(openRef.current, fnArgs) || Object.keys(initialStyles).reduce((acc, key) => {\n      acc[key] = '';\n      return acc;\n    }, {});\n    if (status === 'initial') {\n      setStyles(styles => ({\n        transitionProperty: styles.transitionProperty,\n        ...commonStyles,\n        ...initialStyles\n      }));\n    }\n    if (status === 'open') {\n      setStyles({\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: openDuration + \"ms\",\n        ...commonStyles,\n        ...openStyles\n      });\n    }\n    if (status === 'close') {\n      const styles = closeStyles || initialStyles;\n      setStyles({\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: closeDuration + \"ms\",\n        ...commonStyles,\n        ...styles\n      });\n    }\n  }, [closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status, fnArgs]);\n  return {\n    isMounted,\n    styles\n  };\n}\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nfunction useTypeahead(context, props) {\n  var _ref;\n  const {\n    open,\n    dataRef\n  } = context;\n  const {\n    listRef,\n    activeIndex,\n    onMatch: unstable_onMatch,\n    onTypingChange: unstable_onTypingChange,\n    enabled = true,\n    findMatch = null,\n    resetMs = 750,\n    ignoreKeys = [],\n    selectedIndex = null\n  } = props;\n  const timeoutIdRef = React.useRef();\n  const stringRef = React.useRef('');\n  const prevIndexRef = React.useRef((_ref = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref : -1);\n  const matchIndexRef = React.useRef(null);\n  const onMatch = useEvent(unstable_onMatch);\n  const onTypingChange = useEvent(unstable_onTypingChange);\n  const findMatchRef = useLatestRef(findMatch);\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\n  index(() => {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(() => {\n    // Sync arrow key navigation but not typeahead navigation.\n    if (open && stringRef.current === '') {\n      var _ref2;\n      prevIndexRef.current = (_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    function setTypingChange(value) {\n      if (value) {\n        if (!dataRef.current.typing) {\n          dataRef.current.typing = value;\n          onTypingChange(value);\n        }\n      } else {\n        if (dataRef.current.typing) {\n          dataRef.current.typing = value;\n          onTypingChange(value);\n        }\n      }\n    }\n    function getMatchingIndex(list, orderedList, string) {\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, string) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(string.toLocaleLowerCase())) === 0);\n      return str ? list.indexOf(str) : -1;\n    }\n    function onKeyDown(event) {\n      const listContent = listRef.current;\n      if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n        if (getMatchingIndex(listContent, listContent, stringRef.current) === -1) {\n          setTypingChange(false);\n        } else if (event.key === ' ') {\n          stopEvent(event);\n        }\n      }\n      if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\n      // Character key.\n      event.key.length !== 1 ||\n      // Modifier key.\n      event.ctrlKey || event.metaKey || event.altKey) {\n        return;\n      }\n      if (open && event.key !== ' ') {\n        stopEvent(event);\n        setTypingChange(true);\n      }\n\n      // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n      // allow it in this case, too.\n      const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\n        var _text$, _text$2;\n        return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n      });\n\n      // Allows the user to cycle through items that start with the same letter\n      // in rapid succession.\n      if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n        stringRef.current = '';\n        prevIndexRef.current = matchIndexRef.current;\n      }\n      stringRef.current += event.key;\n      clearTimeout(timeoutIdRef.current);\n      timeoutIdRef.current = setTimeout(() => {\n        stringRef.current = '';\n        prevIndexRef.current = matchIndexRef.current;\n        setTypingChange(false);\n      }, resetMs);\n      const prevIndex = prevIndexRef.current;\n      const index = getMatchingIndex(listContent, [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)], stringRef.current);\n      if (index !== -1) {\n        onMatch(index);\n        matchIndexRef.current = index;\n      } else if (event.key !== ' ') {\n        stringRef.current = '';\n        setTypingChange(false);\n      }\n    }\n    return {\n      reference: {\n        onKeyDown\n      },\n      floating: {\n        onKeyDown,\n        onKeyUp(event) {\n          if (event.key === ' ') {\n            setTypingChange(false);\n          }\n        }\n      }\n    };\n  }, [enabled, open, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch, onTypingChange]);\n}\n\nfunction getArgsWithCustomFloatingHeight(state, height) {\n  return {\n    ...state,\n    rects: {\n      ...state.rects,\n      floating: {\n        ...state.rects.floating,\n        height\n      }\n    }\n  };\n}\n/**\n * Positions the floating element such that an inner element inside\n * of it is anchored to the reference element.\n * @see https://floating-ui.com/docs/inner\n */\nconst inner = props => ({\n  name: 'inner',\n  options: props,\n  async fn(state) {\n    const {\n      listRef,\n      overflowRef,\n      onFallbackChange,\n      offset: innerOffset = 0,\n      index = 0,\n      minItemsVisible = 4,\n      referenceOverflowThreshold = 0,\n      scrollRef,\n      ...detectOverflowOptions\n    } = props;\n    const {\n      rects,\n      elements: {\n        floating\n      }\n    } = state;\n    const item = listRef.current[index];\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state.placement.startsWith('bottom')) {\n        console.warn(['Floating UI: `placement` side must be \"bottom\" when using the', '`inner` middleware.'].join(' '));\n      }\n    }\n    if (!item) {\n      return {};\n    }\n    const nextArgs = {\n      ...state,\n      ...(await offset(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\n    };\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n    const overflow = await detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);\n    const refOverflow = await detectOverflow(nextArgs, {\n      ...detectOverflowOptions,\n      elementContext: 'reference'\n    });\n    const diffY = Math.max(0, overflow.top);\n    const nextY = nextArgs.y + diffY;\n    const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));\n    el.style.maxHeight = maxHeight + \"px\";\n    el.scrollTop = diffY;\n\n    // There is not enough space, fallback to standard anchored positioning\n    if (onFallbackChange) {\n      if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {\n        flushSync(() => onFallbackChange(true));\n      } else {\n        flushSync(() => onFallbackChange(false));\n      }\n    }\n    if (overflowRef) {\n      overflowRef.current = await detectOverflow(getArgsWithCustomFloatingHeight({\n        ...nextArgs,\n        y: nextY\n      }, el.offsetHeight), detectOverflowOptions);\n    }\n    return {\n      y: nextY\n    };\n  }\n});\n/**\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\n * expand the floating element's height, revealing more list items.\n * @see https://floating-ui.com/docs/inner\n */\nfunction useInnerOffset(context, props) {\n  const {\n    open,\n    elements\n  } = context;\n  const {\n    enabled = true,\n    overflowRef,\n    scrollRef,\n    onChange: unstable_onChange\n  } = props;\n  const onChange = useEvent(unstable_onChange);\n  const controlledScrollingRef = React.useRef(false);\n  const prevScrollTopRef = React.useRef(null);\n  const initialOverflowRef = React.useRef(null);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onWheel(e) {\n      if (e.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      const dY = e.deltaY;\n      const isAtTop = overflowRef.current.top >= -0.5;\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\n      const remainingScroll = el.scrollHeight - el.clientHeight;\n      const sign = dY < 0 ? -1 : 1;\n      const method = dY < 0 ? 'max' : 'min';\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e.preventDefault();\n        flushSync(() => {\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\n        });\n      } else if (/firefox/i.test(getUserAgent())) {\n        // Needed to propagate scrolling during momentum scrolling phase once\n        // it gets limited by the boundary. UX improvement, not critical.\n        el.scrollTop += dY;\n      }\n    }\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n    if (open && el) {\n      el.addEventListener('wheel', onWheel);\n\n      // Wait for the position to be ready.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = {\n            ...overflowRef.current\n          };\n        }\n      });\n      return () => {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener('wheel', onWheel);\n      };\n    }\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      floating: {\n        onKeyDown() {\n          controlledScrollingRef.current = true;\n        },\n        onWheel() {\n          controlledScrollingRef.current = false;\n        },\n        onPointerMove() {\n          controlledScrollingRef.current = false;\n        },\n        onScroll() {\n          const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n          if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n            return;\n          }\n          if (prevScrollTopRef.current !== null) {\n            const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n            if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n              flushSync(() => onChange(d => d + scrollDiff));\n            }\n          }\n\n          // [Firefox] Wait for the height change to have been applied.\n          requestAnimationFrame(() => {\n            prevScrollTopRef.current = el.scrollTop;\n          });\n        }\n      }\n    };\n  }, [enabled, overflowRef, elements.floating, scrollRef, onChange]);\n}\n\nfunction isPointInPolygon(point, polygon) {\n  const [x, y] = point;\n  let isInside = false;\n  const length = polygon.length;\n  for (let i = 0, j = length - 1; i < length; j = i++) {\n    const [xi, yi] = polygon[i] || [0, 0];\n    const [xj, yj] = polygon[j] || [0, 0];\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\nfunction isInside(point, rect) {\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n}\n/**\n * Generates a safe polygon area that the user can traverse without closing the\n * floating element once leaving the reference element.\n * @see https://floating-ui.com/docs/useHover#safePolygon\n */\nfunction safePolygon(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    buffer = 0.5,\n    blockPointerEvents = false,\n    requireIntent = true\n  } = options;\n  let timeoutId;\n  let hasLanded = false;\n  let lastX = null;\n  let lastY = null;\n  let lastCursorTime = performance.now();\n  function getCursorSpeed(x, y) {\n    const currentTime = performance.now();\n    const elapsedTime = currentTime - lastCursorTime;\n    if (lastX === null || lastY === null || elapsedTime === 0) {\n      lastX = x;\n      lastY = y;\n      lastCursorTime = currentTime;\n      return null;\n    }\n    const deltaX = x - lastX;\n    const deltaY = y - lastY;\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    const speed = distance / elapsedTime; // px / ms\n\n    lastX = x;\n    lastY = y;\n    lastCursorTime = currentTime;\n    return speed;\n  }\n  const fn = _ref => {\n    let {\n      x,\n      y,\n      placement,\n      elements,\n      onClose,\n      nodeId,\n      tree\n    } = _ref;\n    return function onMouseMove(event) {\n      function close() {\n        clearTimeout(timeoutId);\n        onClose();\n      }\n      clearTimeout(timeoutId);\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\n        return;\n      }\n      const {\n        clientX,\n        clientY\n      } = event;\n      const clientPoint = [clientX, clientY];\n      const target = getTarget(event);\n      const isLeave = event.type === 'mouseleave';\n      const isOverFloatingEl = contains(elements.floating, target);\n      const isOverReferenceEl = contains(elements.domReference, target);\n      const refRect = elements.domReference.getBoundingClientRect();\n      const rect = elements.floating.getBoundingClientRect();\n      const side = placement.split('-')[0];\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\n      const isOverReferenceRect = isInside(clientPoint, refRect);\n      const isFloatingWider = rect.width > refRect.width;\n      const isFloatingTaller = rect.height > refRect.height;\n      const left = (isFloatingWider ? refRect : rect).left;\n      const right = (isFloatingWider ? refRect : rect).right;\n      const top = (isFloatingTaller ? refRect : rect).top;\n      const bottom = (isFloatingTaller ? refRect : rect).bottom;\n      if (isOverFloatingEl) {\n        hasLanded = true;\n        if (!isLeave) {\n          return;\n        }\n      }\n      if (isOverReferenceEl) {\n        hasLanded = false;\n      }\n      if (isOverReferenceEl && !isLeave) {\n        hasLanded = true;\n        return;\n      }\n\n      // Prevent overlapping floating element from being stuck in an open-close\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\n      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\n        return;\n      }\n\n      // If any nested child is open, abort.\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\n        let {\n          context\n        } = _ref2;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      }\n\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\n      // creates a point where the floating element remains open, but should be\n      // ignored.\n      // A constant of 1 handles floating point rounding errors.\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\n        return close();\n      }\n\n      // Ignore when the cursor is within the rectangular trough between the\n      // two elements. Since the triangle is created from the cursor point,\n      // which can start beyond the ref element's edge, traversing back and\n      // forth from the ref to the floating element can cause it to close. This\n      // ensures it always remains open in that case.\n      let rectPoly = [];\n      switch (side) {\n        case 'top':\n          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];\n          break;\n        case 'bottom':\n          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];\n          break;\n        case 'left':\n          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];\n          break;\n        case 'right':\n          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];\n          break;\n      }\n      function getPolygon(_ref3) {\n        let [x, y] = _ref3;\n        switch (side) {\n          case 'top':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'bottom':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'left':\n            {\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\n            }\n          case 'right':\n            {\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n        }\n      }\n      if (isPointInPolygon([clientX, clientY], rectPoly)) {\n        return;\n      } else if (hasLanded && !isOverReferenceRect) {\n        return close();\n      }\n      if (!isLeave && requireIntent) {\n        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);\n        const cursorSpeedThreshold = 0.1;\n        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {\n          return close();\n        }\n      }\n      if (!isPointInPolygon([clientX, clientY], getPolygon([x, y]))) {\n        close();\n      } else if (!hasLanded && requireIntent) {\n        timeoutId = window.setTimeout(close, 40);\n      }\n    };\n  };\n  fn.__options = {\n    blockPointerEvents\n  };\n  return fn;\n}\n\n/**\n * Provides data to position a floating element and context to add interactions.\n * @see https://floating-ui.com/docs/react\n */\nfunction useFloating(options) {\n  var _options$elements;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    open = false,\n    onOpenChange: unstable_onOpenChange,\n    nodeId\n  } = options;\n  const [_domReference, setDomReference] = React.useState(null);\n  const domReference = ((_options$elements = options.elements) == null ? void 0 : _options$elements.reference) || _domReference;\n  const position = useFloating$1(options);\n  const tree = useFloatingTree();\n  const onOpenChange = useEvent(unstable_onOpenChange);\n  const domReferenceRef = React.useRef(null);\n  const dataRef = React.useRef({});\n  const events = React.useState(() => createPubSub())[0];\n  const floatingId = useId();\n  const setPositionReference = React.useCallback(node => {\n    const positionReference = isElement(node) ? {\n      getBoundingClientRect: () => node.getBoundingClientRect(),\n      contextElement: node\n    } : node;\n    position.refs.setReference(positionReference);\n  }, [position.refs]);\n  const setReference = React.useCallback(node => {\n    if (isElement(node) || node === null) {\n      domReferenceRef.current = node;\n      setDomReference(node);\n    }\n\n    // Backwards-compatibility for passing a virtual element to `reference`\n    // after it has set the DOM reference.\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||\n    // Don't allow setting virtual elements using the old technique back to\n    // `null` to support `positionReference` + an unstable `reference`\n    // callback ref.\n    node !== null && !isElement(node)) {\n      position.refs.setReference(node);\n    }\n  }, [position.refs]);\n  const refs = React.useMemo(() => ({\n    ...position.refs,\n    setReference,\n    setPositionReference,\n    domReference: domReferenceRef\n  }), [position.refs, setReference, setPositionReference]);\n  const elements = React.useMemo(() => ({\n    ...position.elements,\n    domReference: domReference\n  }), [position.elements, domReference]);\n  const context = React.useMemo(() => ({\n    ...position,\n    refs,\n    elements,\n    dataRef,\n    nodeId,\n    floatingId,\n    events,\n    open,\n    onOpenChange\n  }), [position, nodeId, floatingId, events, open, onOpenChange, refs, elements]);\n  index(() => {\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\n    if (node) {\n      node.context = context;\n    }\n  });\n  return React.useMemo(() => ({\n    ...position,\n    context,\n    refs,\n    elements\n  }), [position, refs, elements, context]);\n}\n\nfunction mergeProps(userProps, propsList, elementKey) {\n  const map = new Map();\n  return {\n    ...(elementKey === 'floating' && {\n      tabIndex: -1\n    }),\n    ...userProps,\n    ...propsList.map(value => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n      Object.entries(props).forEach(_ref => {\n        let [key, value] = _ref;\n        if (key.indexOf('on') === 0) {\n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n          if (typeof value === 'function') {\n            var _map$get;\n            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);\n            acc[key] = function () {\n              var _map$get2;\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map(fn => fn(...args)).find(val => val !== undefined);\n            };\n          }\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\n\n/**\n * Merges an array of interaction hooks' props into prop getters, allowing\n * event handler functions to be composed together without overwriting one\n * another.\n * @see https://floating-ui.com/docs/react#interaction-hooks\n */\nfunction useInteractions(propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  // The dependencies are a dynamic array, so we can't use the linter's\n  // suggestion to add it to the deps array.\n  const deps = propsList;\n  const getReferenceProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n  const getFloatingProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n  const getItemProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\n  // Granularly check for `item` changes, because the `getItemProps` getter\n  // should be as referentially stable as possible since it may be passed as\n  // a prop to many components. All `item` key values must therefore be\n  // memoized.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  propsList.map(key => key == null ? void 0 : key.item));\n  return React.useMemo(() => ({\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\n}\n\nexport { FloatingArrow, FloatingDelayGroup, FloatingFocusManager, FloatingList, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, inner, safePolygon, useClick, useClientPoint, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingPortalNode, useFloatingTree, useFocus, useHover, useId, useInnerOffset, useInteractions, useListItem, useListNavigation, useMergeRefs, useRole, useTransitionStatus, useTransitionStyles, useTypeahead };\n","import React from \"react\";\nexport const ModalContext = React.createContext(null);\n//# sourceMappingURL=ModalContext.js.map","// @ts-nocheck\nexport const needPolyfill = typeof window !== \"undefined\" &&\n    (window.HTMLDialogElement === undefined ||\n        navigator.userAgent.includes(\"jsdom\"));\n// Copyright (c) 2013 The Chromium Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n/**\n * Dispatches the passed event to both an \"on<type>\" handler as well as via the\n * normal dispatch operation. Does not bubble.\n *\n * @param {!EventTarget} target\n * @param {!Event} event\n * @return {boolean}\n */\nfunction safeDispatchEvent(target, event) {\n    var check = \"on\" + event.type.toLowerCase();\n    if (typeof target[check] === \"function\") {\n        target[check](event);\n    }\n    return target.dispatchEvent(event);\n}\n/**\n * Finds the nearest <dialog> from the passed element.\n *\n * @param {Element} el to search from\n * @return {HTMLDialogElement} dialog found\n */\nfunction findNearestDialog(el) {\n    while (el) {\n        if (el.localName === \"dialog\") {\n            return /** @type {HTMLDialogElement} */ el;\n        }\n        if (el.parentElement) {\n            el = el.parentElement;\n        }\n        else if (el.parentNode) {\n            el = el.parentNode.host;\n        }\n        else {\n            el = null;\n        }\n    }\n    return null;\n}\n/**\n * Blur the specified element, as long as it's not the HTML body element.\n * This works around an IE9/10 bug - blurring the body causes Windows to\n * blur the whole application.\n *\n * @param {Element} el to blur\n */\nfunction safeBlur(el) {\n    // Find the actual focused element when the active element is inside a shadow root\n    while (el && el.shadowRoot && el.shadowRoot.activeElement) {\n        el = el.shadowRoot.activeElement;\n    }\n    if (el && el.blur && el !== document.body) {\n        el.blur();\n    }\n}\n/**\n * @param {!NodeList} nodeList to search\n * @param {Node} node to find\n * @return {boolean} whether node is inside nodeList\n */\nfunction inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n        if (nodeList[i] === node) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {HTMLFormElement} el to check\n * @return {boolean} whether this form has method=\"dialog\"\n */\nfunction isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute(\"method\")) {\n        return false;\n    }\n    return el.getAttribute(\"method\").toLowerCase() === \"dialog\";\n}\n/**\n * @param {!DocumentFragment|!Element} hostElement\n * @return {?Element}\n */\nfunction findFocusableElementWithin(hostElement) {\n    // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n    // alternative involves stepping through and trying to focus everything.\n    var opts = [\"button\", \"input\", \"keygen\", \"select\", \"textarea\"];\n    var query = opts.map(function (el) {\n        return el + \":not([disabled])\";\n    });\n    // TODO(samthor): tabindex values that are not numeric are not focusable.\n    query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])'); // tabindex != \"\", not disabled\n    var target = hostElement.querySelector(query.join(\", \"));\n    if (!target && \"attachShadow\" in Element.prototype) {\n        // If we haven't found a focusable target, see if the host element contains an element\n        // which has a shadowRoot.\n        // Recursively search for the first focusable item in shadow roots.\n        var elems = hostElement.querySelectorAll(\"*\");\n        for (var i = 0; i < elems.length; i++) {\n            if (elems[i].tagName && elems[i].shadowRoot) {\n                target = findFocusableElementWithin(elems[i].shadowRoot);\n                if (target) {\n                    break;\n                }\n            }\n        }\n    }\n    return target;\n}\n/**\n * Determines if an element is attached to the DOM.\n * @param {Element} element to check\n * @return {boolean} whether the element is in DOM\n */\nfunction isConnected(element) {\n    return element.isConnected || document.body.contains(element);\n}\n/**\n * @param {!Event} event\n * @return {?Element}\n */\nfunction findFormSubmitter(event) {\n    if (event.submitter) {\n        return event.submitter;\n    }\n    var form = event.target;\n    if (!(form instanceof HTMLFormElement)) {\n        return null;\n    }\n    var submitter = dialogPolyfill.formSubmitter;\n    if (!submitter) {\n        var target = event.target;\n        var root = (\"getRootNode\" in target && target.getRootNode()) || document;\n        submitter = root.activeElement;\n    }\n    if (!submitter || submitter.form !== form) {\n        return null;\n    }\n    return submitter;\n}\n/**\n * @param {!Event} event\n */\nfunction maybeHandleSubmit(event) {\n    if (event.defaultPrevented) {\n        return;\n    }\n    var form = /** @type {!HTMLFormElement} */ event.target;\n    // We'd have a value if we clicked on an imagemap.\n    var value = dialogPolyfill.imagemapUseValue;\n    var submitter = findFormSubmitter(event);\n    if (value === null && submitter) {\n        value = submitter.value;\n    }\n    // There should always be a dialog as this handler is added specifically on them, but check just\n    // in case.\n    var dialog = findNearestDialog(form);\n    if (!dialog) {\n        return;\n    }\n    // Prefer formmethod on the button.\n    var formmethod = (submitter && submitter.getAttribute(\"formmethod\")) ||\n        form.getAttribute(\"method\");\n    if (formmethod !== \"dialog\") {\n        return;\n    }\n    event.preventDefault();\n    if (value != null) {\n        // nb. we explicitly check against null/undefined\n        dialog.close(value);\n    }\n    else {\n        dialog.close();\n    }\n}\n/**\n * @param {!HTMLDialogElement} dialog to upgrade\n * @constructor\n */\nfunction dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute(\"role\")) {\n        dialog.setAttribute(\"role\", \"dialog\");\n    }\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n    dialog.addEventListener(\"submit\", maybeHandleSubmit, false);\n    if (!(\"returnValue\" in dialog)) {\n        dialog.returnValue = \"\";\n    }\n    if (\"MutationObserver\" in window) {\n        var mo = new MutationObserver(this.maybeHideModal.bind(this));\n        mo.observe(dialog, { attributes: true, attributeFilter: [\"open\"] });\n    }\n    else {\n        // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n        // seem to fire even if the element was removed as part of a parent removal. Use the removed\n        // events to force downgrade (useful if removed/immediately added).\n        var removed = false;\n        var cb = function () {\n            removed ? this.downgradeModal() : this.maybeHideModal();\n            removed = false;\n        }.bind(this);\n        var timeout;\n        var delayModel = function (ev) {\n            if (ev.target !== dialog) {\n                return;\n            } // not for a child element\n            var cand = \"DOMNodeRemoved\";\n            removed |= ev.type.substr(0, cand.length) === cand;\n            window.clearTimeout(timeout);\n            timeout = window.setTimeout(cb, 0);\n        };\n        [\"DOMAttrModified\", \"DOMNodeRemoved\", \"DOMNodeRemovedFromDocument\"].forEach(function (name) {\n            dialog.addEventListener(name, delayModel);\n        });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n    Object.defineProperty(dialog, \"open\", {\n        set: this.setOpen.bind(this),\n        get: dialog.hasAttribute.bind(dialog, \"open\"),\n    });\n    this.backdrop_ = document.createElement(\"div\");\n    this.backdrop_.className = \"backdrop\";\n    this.backdrop_.addEventListener(\"mouseup\", this.backdropMouseEvent_.bind(this));\n    this.backdrop_.addEventListener(\"mousedown\", this.backdropMouseEvent_.bind(this));\n    this.backdrop_.addEventListener(\"click\", this.backdropMouseEvent_.bind(this));\n}\ndialogPolyfillInfo.prototype = /** @type {HTMLDialogElement.prototype} */ {\n    get dialog() {\n        return this.dialog_;\n    },\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function () {\n        if (this.dialog_.hasAttribute(\"open\") && isConnected(this.dialog_)) {\n            return;\n        }\n        this.downgradeModal();\n    },\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function () {\n        if (!this.openAsModal_) {\n            return;\n        }\n        this.openAsModal_ = false;\n        this.dialog_.style.zIndex = \"\";\n        // This won't match the native <dialog> exactly because if the user set top on a centered\n        // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n        // possible to polyfill this perfectly.\n        if (this.replacedStyleTop_) {\n            this.dialog_.style.top = \"\";\n            this.replacedStyleTop_ = false;\n        }\n        // Clear the backdrop and remove from the manager.\n        this.backdrop_.parentNode &&\n            this.backdrop_.parentNode.removeChild(this.backdrop_);\n        dialogPolyfill.dm.removeDialog(this);\n    },\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function (value) {\n        if (value) {\n            this.dialog_.hasAttribute(\"open\") ||\n                this.dialog_.setAttribute(\"open\", \"\");\n        }\n        else {\n            this.dialog_.removeAttribute(\"open\");\n            this.maybeHideModal(); // nb. redundant with MutationObserver\n        }\n    },\n    /**\n     * Handles mouse events ('mouseup', 'mousedown', 'click') on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropMouseEvent_: function (e) {\n        if (!this.dialog_.hasAttribute(\"tabindex\")) {\n            // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n            // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n            // would not be needed - clicks would move the implicit cursor there.\n            var fake = document.createElement(\"div\");\n            this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n            fake.tabIndex = -1;\n            fake.focus();\n            this.dialog_.removeChild(fake);\n        }\n        else {\n            this.dialog_.focus();\n        }\n        var redirectedEvent = document.createEvent(\"MouseEvents\");\n        redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n        this.dialog_.dispatchEvent(redirectedEvent);\n        e.stopPropagation();\n    },\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function () {\n        // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n        var target = this.dialog_.querySelector(\"[autofocus]:not([disabled])\");\n        if (!target && this.dialog_.tabIndex >= 0) {\n            target = this.dialog_;\n        }\n        if (!target) {\n            target = findFocusableElementWithin(this.dialog_);\n        }\n        safeBlur(document.activeElement);\n        target && target.focus();\n    },\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function (dialogZ, backdropZ) {\n        if (dialogZ < backdropZ) {\n            throw new Error(\"dialogZ should never be < backdropZ\");\n        }\n        this.dialog_.style.zIndex = dialogZ;\n        this.backdrop_.style.zIndex = backdropZ;\n    },\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function () {\n        if (!this.dialog_.open) {\n            this.setOpen(true);\n            this.focus_();\n        }\n    },\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function () {\n        if (this.dialog_.hasAttribute(\"open\")) {\n            throw new Error(\"Failed to execute 'showModal' on dialog: The element is already open, and therefore cannot be opened modally.\");\n        }\n        if (!isConnected(this.dialog_)) {\n            throw new Error(\"Failed to execute 'showModal' on dialog: The element is not in a Document.\");\n        }\n        if (!dialogPolyfill.dm.pushDialog(this)) {\n            throw new Error(\"Failed to execute 'showModal' on dialog: There are too many open modal dialogs.\");\n        }\n        this.setOpen(true);\n        this.openAsModal_ = true;\n        // Optionally center vertically, relative to the current viewport.\n        if (dialogPolyfill.needsCentering(this.dialog_)) {\n            dialogPolyfill.reposition(this.dialog_);\n            this.replacedStyleTop_ = true;\n        }\n        else {\n            this.replacedStyleTop_ = false;\n        }\n        // Insert backdrop.\n        this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n        // Focus on whatever inside the dialog.\n        this.focus_();\n    },\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function (opt_returnValue) {\n        if (!this.dialog_.hasAttribute(\"open\")) {\n            throw new Error(\"Failed to execute 'close' on dialog: The element does not have an 'open' attribute, and therefore cannot be closed.\");\n        }\n        this.setOpen(false);\n        // Leave returnValue untouched in case it was set directly on the element\n        if (opt_returnValue !== undefined) {\n            this.dialog_.returnValue = opt_returnValue;\n        }\n        // Triggering \"close\" event for any attached listeners on the <dialog>.\n        var closeEvent = new window.CustomEvent(\"close\", {\n            bubbles: false,\n            cancelable: false,\n        });\n        safeDispatchEvent(this.dialog_, closeEvent);\n    },\n};\nvar dialogPolyfill = {};\ndialogPolyfill.reposition = function (element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + \"px\";\n};\ndialogPolyfill.isInlinePositionSetByStylesheet = function (element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n        var styleSheet = document.styleSheets[i];\n        var cssRules = null;\n        // Some browsers throw on cssRules.\n        try {\n            cssRules = styleSheet.cssRules;\n        }\n        catch (e) {\n            /* empty */\n        }\n        if (!cssRules) {\n            continue;\n        }\n        for (var j = 0; j < cssRules.length; ++j) {\n            var rule = cssRules[j];\n            var selectedNodes = null;\n            // Ignore errors on invalid selector texts.\n            try {\n                selectedNodes = document.querySelectorAll(rule.selectorText);\n            }\n            catch (e) {\n                /* empty */\n            }\n            if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n                continue;\n            }\n            var cssTop = rule.style.getPropertyValue(\"top\");\n            var cssBottom = rule.style.getPropertyValue(\"bottom\");\n            if ((cssTop && cssTop !== \"auto\") ||\n                (cssBottom && cssBottom !== \"auto\")) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\ndialogPolyfill.needsCentering = function (dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== \"absolute\") {\n        return false;\n    }\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== \"auto\" && dialog.style.top !== \"\") ||\n        (dialog.style.bottom !== \"auto\" && dialog.style.bottom !== \"\")) {\n        return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n};\n/**\n * @param {!Element} element to force upgrade\n */\ndialogPolyfill.forceRegisterDialog = function (element) {\n    if (element.showModal) {\n        console.warn(\"This browser already supports <dialog>, the polyfill \" +\n            \"may not work correctly\", element);\n    }\n    if (element.localName !== \"dialog\") {\n        throw new Error(\"Failed to register dialog: The element is not a dialog.\");\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ element);\n};\n/**\n * @param {!Element} element to upgrade, if necessary\n */\ndialogPolyfill.registerDialog = function (element) {\n    if (!element.showModal) {\n        dialogPolyfill.forceRegisterDialog(element);\n    }\n};\n/**\n * @constructor\n */\ndialogPolyfill.DialogManager = function () {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n    var checkDOM = this.checkDOM_.bind(this);\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement(\"div\");\n    this.overlay.className = \"_dialog_overlay\";\n    this.overlay.addEventListener(\"click\", function (e) {\n        this.forwardTab_ = undefined;\n        e.stopPropagation();\n        checkDOM([]); // sanity-check DOM\n    }.bind(this));\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n    this.forwardTab_ = undefined;\n    if (\"MutationObserver\" in window) {\n        this.mo_ = new MutationObserver(function (records) {\n            var removed = [];\n            records.forEach(function (rec) {\n                for (var i = 0, c; (c = rec.removedNodes[i]); ++i) {\n                    if (!(c instanceof Element)) {\n                        continue;\n                    }\n                    else if (c.localName === \"dialog\") {\n                        removed.push(c);\n                    }\n                    removed = removed.concat(c.querySelectorAll(\"dialog\"));\n                }\n            });\n            removed.length && checkDOM(removed);\n        });\n    }\n};\n/**\n * Called on the first modal dialog being shown. Adds the overlay and related\n * handlers.\n */\ndialogPolyfill.DialogManager.prototype.blockDocument = function () {\n    document.documentElement.addEventListener(\"focus\", this.handleFocus_, true);\n    document.addEventListener(\"keydown\", this.handleKey_);\n    this.mo_ && this.mo_.observe(document, { childList: true, subtree: true });\n};\n/**\n * Called on the first modal dialog being removed, i.e., when no more modal\n * dialogs are visible.\n */\ndialogPolyfill.DialogManager.prototype.unblockDocument = function () {\n    document.documentElement.removeEventListener(\"focus\", this.handleFocus_, true);\n    document.removeEventListener(\"keydown\", this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n};\n/**\n * Updates the stacking of all known dialogs.\n */\ndialogPolyfill.DialogManager.prototype.updateStacking = function () {\n    var zIndex = this.zIndexHigh_;\n    for (var i = 0, dpi; (dpi = this.pendingDialogStack[i]); ++i) {\n        dpi.updateZIndex(--zIndex, --zIndex);\n        if (i === 0) {\n            this.overlay.style.zIndex = --zIndex;\n        }\n    }\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n        var p = last.dialog.parentNode || document.body;\n        p.appendChild(this.overlay);\n    }\n    else if (this.overlay.parentNode) {\n        this.overlay.parentNode.removeChild(this.overlay);\n    }\n};\n/**\n * @param {Element} candidate to check if contained or is the top-most modal dialog\n * @return {boolean} whether candidate is contained in top dialog\n */\ndialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function (candidate) {\n    while ((candidate = findNearestDialog(candidate))) {\n        for (var i = 0, dpi; (dpi = this.pendingDialogStack[i]); ++i) {\n            if (dpi.dialog === candidate) {\n                return i === 0; // only valid if top-most\n            }\n        }\n        candidate = candidate.parentElement;\n    }\n    return false;\n};\ndialogPolyfill.DialogManager.prototype.handleFocus_ = function (event) {\n    var target = event.composedPath ? event.composedPath()[0] : event.target;\n    if (this.containedByTopDialog_(target)) {\n        return;\n    }\n    if (document.activeElement === document.documentElement) {\n        return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ target);\n    if (this.forwardTab_ === undefined) {\n        return;\n    } // move focus only from a tab key\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n        if (this.forwardTab_) {\n            // forward\n            dpi.focus_();\n        }\n        else if (target !== document.documentElement) {\n            // backwards if we're not already focused on <html>\n            document.documentElement.focus();\n        }\n    }\n    else {\n        // TODO: Focus after the dialog, is ignored.\n    }\n    return false;\n};\ndialogPolyfill.DialogManager.prototype.handleKey_ = function (event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n        event.preventDefault();\n        event.stopPropagation();\n        var cancelEvent = new window.CustomEvent(\"cancel\", {\n            bubbles: false,\n            cancelable: true,\n        });\n        var dpi = this.pendingDialogStack[0];\n        if (dpi && safeDispatchEvent(dpi.dialog, cancelEvent)) {\n            dpi.dialog.close();\n        }\n    }\n    else if (event.keyCode === 9) {\n        this.forwardTab_ = !event.shiftKey;\n    }\n};\n/**\n * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n * removed and immediately readded don't stay modal, they become normal.\n *\n * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n */\ndialogPolyfill.DialogManager.prototype.checkDOM_ = function (removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function (dpi) {\n        if (removed.indexOf(dpi.dialog) !== -1) {\n            dpi.downgradeModal();\n        }\n        else {\n            dpi.maybeHideModal();\n        }\n    });\n};\n/**\n * @param {!dialogPolyfillInfo} dpi\n * @return {boolean} whether the dialog was allowed\n */\ndialogPolyfill.DialogManager.prototype.pushDialog = function (dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n        return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n        this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n};\n/**\n * @param {!dialogPolyfillInfo} dpi\n */\ndialogPolyfill.DialogManager.prototype.removeDialog = function (dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) {\n        return;\n    }\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n        this.unblockDocument();\n    }\n    this.updateStacking();\n};\nif (needPolyfill) {\n    dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n    dialogPolyfill.formSubmitter = null;\n    dialogPolyfill.imagemapUseValue = null;\n}\n/**\n * Installs global handlers, such as click listers and native method overrides. These are needed\n * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n */\nif (needPolyfill) {\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement(\"form\");\n    testForm.setAttribute(\"method\", \"dialog\");\n    if (testForm.method !== \"dialog\") {\n        var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, \"method\");\n        if (methodDescriptor) {\n            // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n            // and don't bother to update the element.\n            var realGet = methodDescriptor.get;\n            methodDescriptor.get = function () {\n                if (isFormMethodDialog(this)) {\n                    return \"dialog\";\n                }\n                return realGet.call(this);\n            };\n            var realSet = methodDescriptor.set;\n            /** @this {HTMLElement} */\n            methodDescriptor.set = function (v) {\n                if (typeof v === \"string\" && v.toLowerCase() === \"dialog\") {\n                    return this.setAttribute(\"method\", v);\n                }\n                return realSet.call(this, v);\n            };\n            Object.defineProperty(HTMLFormElement.prototype, \"method\", methodDescriptor);\n        }\n    }\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener(\"click\", function (ev) {\n        dialogPolyfill.formSubmitter = null;\n        dialogPolyfill.imagemapUseValue = null;\n        if (ev.defaultPrevented) {\n            return;\n        } // e.g. a submit which prevents default submission\n        var target = /** @type {Element} */ ev.target;\n        if (\"composedPath\" in ev) {\n            var path = ev.composedPath();\n            target = path.shift() || target;\n        }\n        if (!target || !isFormMethodDialog(target.form)) {\n            return;\n        }\n        var valid = target.type === \"submit\" &&\n            [\"button\", \"input\"].indexOf(target.localName) > -1;\n        if (!valid) {\n            if (!(target.localName === \"input\" && target.type === \"image\")) {\n                return;\n            }\n            // this is a <input type=\"image\">, which can submit forms\n            dialogPolyfill.imagemapUseValue = ev.offsetX + \",\" + ev.offsetY;\n        }\n        var dialog = findNearestDialog(target);\n        if (!dialog) {\n            return;\n        }\n        dialogPolyfill.formSubmitter = target;\n    }, false);\n    /**\n     * Global 'submit' handler. This handles submits of `method=\"dialog\"` which are invalid, i.e.,\n     * outside a dialog. They get prevented.\n     */\n    document.addEventListener(\"submit\", function (ev) {\n        var form = ev.target;\n        var dialog = findNearestDialog(form);\n        if (dialog) {\n            return; // ignore, handle there\n        }\n        var submitter = findFormSubmitter(ev);\n        var formmethod = (submitter && submitter.getAttribute(\"formmethod\")) ||\n            form.getAttribute(\"method\");\n        if (formmethod === \"dialog\") {\n            ev.preventDefault();\n        }\n    });\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n        if (!isFormMethodDialog(this)) {\n            return nativeFormSubmit.call(this);\n        }\n        var dialog = findNearestDialog(this);\n        dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n}\nexport default dialogPolyfill;\n//# sourceMappingURL=dialog-polyfill.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\nconst ModalBody = forwardRef((_a, ref) => {\n    var { className } = _a, rest = __rest(_a, [\"className\"]);\n    return (React.createElement(\"div\", Object.assign({}, rest, { ref: ref, className: cl(\"navds-modal__body\", className) })));\n});\nexport default ModalBody;\n//# sourceMappingURL=ModalBody.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, useContext } from \"react\";\nimport cl from \"clsx\";\nimport { XMarkIcon } from \"@navikt/aksel-icons\";\nimport { Button } from \"../button\";\nimport { ModalContext } from \"./ModalContext\";\nconst ModalHeader = forwardRef((_a, ref) => {\n    var { children, className, closeButton = true } = _a, rest = __rest(_a, [\"children\", \"className\", \"closeButton\"]);\n    const context = useContext(ModalContext);\n    if (context === null) {\n        console.error(\"<Modal.Header> has to be used within a <Modal>\");\n        return null;\n    }\n    return (React.createElement(\"div\", Object.assign({}, rest, { ref: ref, className: cl(\"navds-modal__header\", className) }),\n        context.closeHandler && closeButton && (React.createElement(Button, { type: \"button\", className: \"navds-modal__button\", size: \"small\", variant: \"tertiary-neutral\", onClick: context.closeHandler, icon: React.createElement(XMarkIcon, { title: \"Lukk modalvindu\" }) })),\n        children));\n});\nexport default ModalHeader;\n//# sourceMappingURL=ModalHeader.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cl from \"clsx\";\nconst ModalFooter = forwardRef((_a, ref) => {\n    var { className } = _a, rest = __rest(_a, [\"className\"]);\n    return (React.createElement(\"div\", Object.assign({}, rest, { ref: ref, className: cl(\"navds-modal__footer\", className) })));\n});\nexport default ModalFooter;\n//# sourceMappingURL=ModalFooter.js.map","import React from \"react\";\nexport function getCloseHandler(modalRef, header, onBeforeClose) {\n    if (header && header.closeButton === false)\n        return undefined;\n    if (onBeforeClose) {\n        return () => { var _a; return onBeforeClose() !== false && ((_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.close()); };\n    }\n    return () => { var _a; return (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.close(); };\n}\nexport const BODY_CLASS = \"navds-modal__document-body\";\nexport function useBodyScrollLock(modalRef, portalNode) {\n    React.useEffect(() => {\n        if (!modalRef.current || !portalNode)\n            return; // We check both to avoid running this twice when not using portal\n        if (modalRef.current.open)\n            document.body.classList.add(BODY_CLASS); // In case `open` is true initially\n        const observer = new MutationObserver(() => {\n            var _a;\n            if ((_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.open)\n                document.body.classList.add(BODY_CLASS);\n            else\n                document.body.classList.remove(BODY_CLASS);\n        });\n        observer.observe(modalRef.current, {\n            attributes: true,\n            attributeFilter: [\"open\"],\n        });\n        return () => {\n            observer.disconnect();\n            document.body.classList.remove(BODY_CLASS); // In case modal is unmounted before it's closed\n        };\n    }, [modalRef, portalNode]);\n}\n//# sourceMappingURL=ModalUtils.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, useContext, useEffect, useMemo, useRef, } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { useFloatingPortalNode } from \"@floating-ui/react\";\nimport cl from \"clsx\";\nimport dialogPolyfill, { needPolyfill } from \"./dialog-polyfill\";\nimport { Detail, Heading, mergeRefs, useId, useProvider } from \"..\";\nimport ModalBody from \"./ModalBody\";\nimport ModalHeader from \"./ModalHeader\";\nimport ModalFooter from \"./ModalFooter\";\nimport { getCloseHandler, useBodyScrollLock } from \"./ModalUtils\";\nimport { ModalContext } from \"./ModalContext\";\n/**\n * A component that displays a modal dialog.\n *\n * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/modal)\n * @see üè∑Ô∏è {@link ModalProps}\n *\n * @example\n * State change with `useRef`\n * ```jsx\n * const ref = useRef<HTMLDialogElement>(null);\n * <Button onClick={() => ref.current?.showModal()}>Open modal</Button>\n * <Modal\n *   ref={ref}\n *   header={{\n *     label: \"Optional label\",\n *     icon: <FileIcon aria-hidden />,\n *     heading: \"My heading\",\n *   }}\n * >\n *   <Modal.Body>\n *     <BodyLong>Hello world</BodyLong>\n *   </Modal.Body>\n *   <Modal.Footer>\n *     <Button>Save</Button>\n *     <Button type=\"button\" variant=\"tertiary\" onClick={() => ref.current?.close()}>Close</Button>\n *   </Modal.Footer>\n * </Modal>\n * ```\n * @example\n * State change with `useState`\n * ```jsx\n * const [open, setOpen] = useState(false);\n * <Modal\n *   open={open}\n *   onClose={() => setOpen(false)}\n *   aria-labelledby=\"modal-heading\"\n * >\n *   <Modal.Header>\n *     <Heading level=\"1\" size=\"large\" id=\"modal-heading\">My heading</Heading>\n *   </Modal.Header>\n *   <Modal.Body>\n *     <BodyLong>Hello world</BodyLong>\n *   </Modal.Body>\n * </Modal>\n * ```\n */\nexport const Modal = forwardRef((_a, ref) => {\n    var _b, _c;\n    var { header, children, open, onBeforeClose, onCancel, width, portal, className, \"aria-labelledby\": ariaLabelledby, style } = _a, rest = __rest(_a, [\"header\", \"children\", \"open\", \"onBeforeClose\", \"onCancel\", \"width\", \"portal\", \"className\", \"aria-labelledby\", \"style\"]);\n    const modalRef = useRef(null);\n    const mergedRef = useMemo(() => mergeRefs([modalRef, ref]), [ref]);\n    const ariaLabelId = useId();\n    const rootElement = (_b = useProvider()) === null || _b === void 0 ? void 0 : _b.rootElement;\n    const portalNode = useFloatingPortalNode({ root: rootElement });\n    if (useContext(ModalContext)) {\n        console.error(\"Modals should not be nested\");\n    }\n    useEffect(() => {\n        // If using portal, modalRef.current will not be set before portalNode is set.\n        // If not using portal, modalRef.current is available first.\n        // We check both to avoid activating polyfill twice when not using portal.\n        if (needPolyfill && modalRef.current && portalNode) {\n            dialogPolyfill.registerDialog(modalRef.current);\n        }\n    }, [modalRef, portalNode]);\n    useEffect(() => {\n        // We need to have this in a useEffect so that the content renders before the modal is displayed,\n        // and in case `open` is true initially.\n        // We need to check both modalRef.current and portalNode to make sure the polyfill has been activated.\n        if (modalRef.current && portalNode && open !== undefined) {\n            if (open && !modalRef.current.open) {\n                modalRef.current.showModal();\n            }\n            else if (!open && modalRef.current.open) {\n                modalRef.current.close();\n            }\n        }\n    }, [modalRef, portalNode, open]);\n    useBodyScrollLock(modalRef, portalNode);\n    const isWidthPreset = typeof width === \"string\" && [\"small\", \"medium\"].includes(width);\n    const component = (React.createElement(\"dialog\", Object.assign({ ref: mergedRef, className: cl(\"navds-modal\", className, {\n            \"navds-modal--polyfilled\": needPolyfill,\n            \"navds-modal--autowidth\": !width,\n            [`navds-modal--${width}`]: isWidthPreset,\n        }), style: Object.assign(Object.assign({}, style), (!isWidthPreset ? { width } : {})), onCancel: (event) => {\n            // FYI: onCancel fires when you press Esc\n            if (onBeforeClose && onBeforeClose() === false) {\n                event.preventDefault();\n            }\n            else if (onCancel)\n                onCancel(event);\n        }, \"aria-labelledby\": !ariaLabelledby && !rest[\"aria-label\"] && header\n            ? ariaLabelId\n            : ariaLabelledby }, rest),\n        React.createElement(ModalContext.Provider, { value: {\n                closeHandler: getCloseHandler(modalRef, header, onBeforeClose),\n            } },\n            header && (React.createElement(ModalHeader, null,\n                header.label && (React.createElement(Detail, { className: \"navds-modal__label\" }, header.label)),\n                React.createElement(Heading, { size: (_c = header.size) !== null && _c !== void 0 ? _c : \"medium\", level: \"1\", id: ariaLabelId },\n                    React.createElement(\"span\", { className: \"navds-modal__header-icon\" }, header.icon),\n                    header.heading))),\n            children)));\n    if (portal) {\n        if (portalNode)\n            return createPortal(component, portalNode);\n        return null;\n    }\n    return component;\n});\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;\nexport default Modal;\n//# sourceMappingURL=Modal.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { createContext, useContext } from \"react\";\nexport const ProviderContext = createContext(undefined);\nexport const useProvider = () => useContext(ProviderContext);\n/**\n * Provides added context to the component tree.\n *\n * @see [üìù Documentation](https://aksel.nav.no/komponenter/core/provider)\n * @see üè∑Ô∏è {@link ProviderProps}\n *\n * @example\n * ```jsx\n * <Provider rootElement={rootElement}>\n *   {app}\n * </Provider>\n * ```\n */\nexport const Provider = (_a) => {\n    var { children } = _a, rest = __rest(_a, [\"children\"]);\n    return (React.createElement(ProviderContext.Provider, { value: rest }, children));\n};\nexport default Provider;\n//# sourceMappingURL=Provider.js.map","export default \"__VITE_ASSET__16bb7a12__\"","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Button, Modal, Label } from '@navikt/ds-react';\nimport { FlexColumn, FlexContainer, FlexRow, Image } from '@navikt/ft-ui-komponenter';\n\nimport innvilgetImageUrl from '../images/innvilget_valgt.svg';\n\nimport styles from './MessagesModal.module.css';\n\ninterface OwnProps {\n  showModal: boolean;\n  closeEvent: () => void;\n}\n\n/**\n * MessagesModal\n *\n * Denne modalen vises etter at et brev har blitt bestilt.\n * Ved √• trykke p√• knapp blir fritekst-feltet t√∏mt.\n */\nconst MessagesModal: FunctionComponent<OwnProps> = ({ showModal, closeEvent }) => {\n  const intl = useIntl();\n  return (\n    <Modal\n      className={styles.modal}\n      open={showModal}\n      aria-label={intl.formatMessage({ id: 'MessagesModal.description' })}\n      onClose={closeEvent}\n    >\n      <Modal.Body>\n        <FlexContainer>\n          <FlexRow>\n            <FlexColumn>\n              <Image\n                className={styles.image}\n                alt={intl.formatMessage({ id: 'MessagesModal.description' })}\n                src={innvilgetImageUrl}\n              />\n            </FlexColumn>\n            <FlexColumn className={styles.text}>\n              <Label size=\"small\">\n                <FormattedMessage id=\"MessagesModal.text\" />\n              </Label>\n            </FlexColumn>\n            <FlexColumn className={styles.button}>\n              <Button size=\"small\" variant=\"primary\" onClick={closeEvent} autoFocus type=\"button\">\n                {intl.formatMessage({ id: 'MessagesModal.OK' })}\n              </Button>\n            </FlexColumn>\n          </FlexRow>\n        </FlexContainer>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default MessagesModal;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\n\nimport { createIntl } from '@navikt/ft-utils';\n\nimport MessagesModal from './components/MessagesModal';\nimport messages from '../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  showModal: boolean;\n  closeEvent: () => void;\n}\n\nconst MessagesModalSakIndex: FunctionComponent<OwnProps> = ({ showModal, closeEvent }) => (\n  <RawIntlProvider value={intl}>\n    <MessagesModal showModal={showModal} closeEvent={closeEvent} />\n  </RawIntlProvider>\n);\n\nexport default MessagesModalSakIndex;\n"],"names":["__rest","this","s","e","t","p","i","Heading","forwardRef","_a","ref","level","size","spacing","className","as","rest","HeadingTag","React","cl","cr","SvgXMark","title","_titleId","props","titleId","useId","React.createElement","Gr","Detail","uppercase","Component","Nr","index","useLayoutEffect","useEffect","serverHandoffComplete","count","genId","useFloatingId","id","setId","React.useState","React.useEffect","useReactId","PortalContext","React.createContext","useFloatingPortalNode","_temp","root","portalNode","setPortalNode","uniqueId","portalContext","usePortalContext","data","React.useMemo","dataRef","React.useRef","existingIdRoot","attr","subRoot","container","idWrapper","React.useContext","ModalContext","needPolyfill","safeDispatchEvent","target","event","check","findNearestDialog","el","safeBlur","inNodeList","nodeList","node","isFormMethodDialog","findFocusableElementWithin","hostElement","opts","query","elems","isConnected","element","findFormSubmitter","form","submitter","dialogPolyfill","maybeHandleSubmit","value","dialog","formmethod","dialogPolyfillInfo","mo","removed","cb","timeout","delayModel","ev","cand","name","fake","redirectedEvent","dialogZ","backdropZ","opt_returnValue","closeEvent","scrollTop","topValue","styleSheet","cssRules","j","rule","selectedNodes","cssTop","cssBottom","computedStyle","checkDOM","records","rec","c","zIndex","dpi","last","candidate","position","cancelEvent","clone","allowed","testForm","methodDescriptor","realGet","realSet","v","path","valid","nativeFormSubmit","replacementFormSubmit","dialogPolyfill$1","ModalBody","ModalBody$1","ModalHeader","children","closeButton","context","useContext","Button","XMarkIcon","ModalHeader$1","ModalFooter","ModalFooter$1","getCloseHandler","modalRef","header","onBeforeClose","BODY_CLASS","useBodyScrollLock","observer","Modal","_b","_c","open","onCancel","width","portal","ariaLabelledby","style","useRef","mergedRef","useMemo","mergeRefs","ariaLabelId","rootElement","useProvider","isWidthPreset","component","createPortal","Modal$1","ProviderContext","createContext","innvilgetImageUrl","MessagesModal","showModal","intl","useIntl","jsx","styles","FlexContainer","jsxs","FlexRow","FlexColumn","Image","Label","FormattedMessage","createIntl","messages","MessagesModalSakIndex","RawIntlProvider","MessagesModalSakIndex$1"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}