{"version":3,"file":"FlyttReservasjonModal.stories-7975d589.js","sources":["../../../rest-api-hooks/src/RestApiState.ts","../../../rest-api-hooks/src/global-data/RestApiContext.tsx","../../../rest-api-hooks/src/error/RestApiErrorContext.tsx","../../../rest-api-hooks/src/error/useRestApiError.tsx","../../../rest-api-hooks/src/error/useRestApiErrorDispatcher.tsx","../../../rest-api-hooks/src/local-data/useRestApi.tsx","../../../rest-api-hooks/src/local-data/useMultipleRestApi.tsx","../../../rest-api-hooks/src/local-data/useRestApiRunner.tsx","../../../rest-api-hooks/src/global-data/useGlobalStateRestApiData.tsx","../../src/flyttReservasjon/FlyttReservasjonModal.tsx"],"sourcesContent":["enum RestApiState {\n  NOT_STARTED = 'NOT_STARTED',\n  LOADING = 'LOADING',\n  SUCCESS = 'SUCCESS',\n  ERROR = 'ERROR',\n}\n\nexport default RestApiState;\n","import React, { createContext, useReducer, FunctionComponent, ReactNode } from 'react';\n\nconst defaultInitialState = {};\n\ntype Action = { type: 'success'; key: string; data: any } | { type: 'remove'; key: string };\ntype Dispatch = (action: Action) => void;\ntype State = { [key: string]: any };\n\nexport const RestApiStateContext = createContext<State>(defaultInitialState);\nexport const RestApiDispatchContext = createContext<Dispatch | undefined>(undefined);\n\ninterface OwnProps {\n  children: ReactNode;\n  initialState?: { [key in string]: any };\n}\n\n/**\n * Håndterer state for data som skal hentes fra backend kun en gang og som en trenger aksess til\n * mange steder i applikasjonen.\n */\nexport const RestApiProvider: FunctionComponent<OwnProps> = ({ children, initialState }): JSX.Element => {\n  const [state, dispatch] = useReducer((oldState: State, action: Action) => {\n    switch (action.type) {\n      case 'success':\n        return {\n          ...oldState,\n          [action.key]: action.data,\n        };\n      case 'remove':\n        return Object.keys(oldState)\n          .filter(key => key !== action.key)\n          .reduce(\n            (acc, key) => ({\n              ...acc,\n              [key]: oldState[key],\n            }),\n            {},\n          );\n      default:\n        throw new Error();\n    }\n  }, initialState || defaultInitialState);\n\n  return (\n    <RestApiStateContext.Provider value={state}>\n      <RestApiDispatchContext.Provider value={dispatch}>{children}</RestApiDispatchContext.Provider>\n    </RestApiStateContext.Provider>\n  );\n};\n","import React, { createContext, useReducer, FunctionComponent, ReactNode } from 'react';\n\nconst defaultInitialState = {\n  errors: [],\n};\n\ntype Action = { type: 'add'; data: any } | { type: 'remove' };\ntype Dispatch = (action: Action) => void;\ntype State = { errors: any[] };\n\nexport const RestApiErrorStateContext = createContext<State>(defaultInitialState);\nexport const RestApiErrorDispatchContext = createContext<Dispatch | undefined>(undefined);\n\ninterface OwnProps {\n  children: ReactNode;\n  initialState?: State;\n}\n\n/**\n * Tilbyr kontekst for lagring av feilmeldinger.\n */\nexport const RestApiErrorProvider: FunctionComponent<OwnProps> = ({ children, initialState }): JSX.Element => {\n  const [state, dispatch] = useReducer((oldState: State, action: Action) => {\n    switch (action.type) {\n      case 'add':\n        return {\n          errors: oldState.errors.concat(action.data),\n        };\n      case 'remove':\n        return defaultInitialState;\n      default:\n        throw new Error();\n    }\n  }, initialState || defaultInitialState);\n\n  return (\n    <RestApiErrorStateContext.Provider value={state}>\n      <RestApiErrorDispatchContext.Provider value={dispatch}>{children}</RestApiErrorDispatchContext.Provider>\n    </RestApiErrorStateContext.Provider>\n  );\n};\n","import { useContext } from 'react';\n\nimport { RestApiErrorStateContext } from './RestApiErrorContext';\n\n/**\n * Hook som henter alle feilmeldinger registrert i kontekst.\n * Fungerer kun i komponenter som har en @see RestApiErrorProvider over seg i komponent-treet.\n */\nconst useRestApiError = () => {\n  const state = useContext(RestApiErrorStateContext);\n  return state.errors;\n};\n\nexport default useRestApiError;\n","import { useContext, useCallback } from 'react';\n\nimport { RestApiErrorDispatchContext } from './RestApiErrorContext';\n\n/**\n * Hook som tilbyr funksjoner for å legge til eller fjerne feil i kontekst.\n * Fungerer kun i komponenter som har en @see RestApiErrorProvider over seg i komponent-treet.\n */\nconst useRestApiErrorDispatcher = () => {\n  const dispatch = useContext(RestApiErrorDispatchContext);\n\n  const addErrorMessage = useCallback((data: any) => {\n    if (dispatch) {\n      dispatch({ type: 'add', data });\n    }\n  }, []);\n  const removeErrorMessages = useCallback(() => {\n    if (dispatch) {\n      dispatch({ type: 'remove' });\n    }\n  }, []);\n\n  return {\n    addErrorMessage,\n    removeErrorMessages,\n  };\n};\n\nexport default useRestApiErrorDispatcher;\n","import { useState, useEffect, DependencyList } from 'react';\n\nimport { REQUEST_POLLING_CANCELLED, RequestApi, RestKey } from '@navikt/fp-rest-api';\n\nimport RestApiState from '../RestApiState';\n\nexport interface RestApiData<T> {\n  state: RestApiState;\n  error?: Error;\n  data?: T;\n}\n\nexport interface Options {\n  updateTriggers?: DependencyList;\n  keepData?: boolean;\n  suspendRequest?: boolean;\n  isCachingOn?: boolean;\n}\n\nconst defaultOptions = {\n  updateTriggers: [],\n  keepData: false,\n  suspendRequest: false,\n  isCachingOn: false,\n};\n\nconst DEFAULT_STATE = {\n  state: RestApiState.NOT_STARTED,\n  error: undefined,\n  data: undefined,\n};\n\n/**\n * Hook som utfører et restkall ved mount. En kan i tillegg legge ved en dependencies-liste som kan trigge ny henting når data\n * blir oppdatert. Hook returnerer rest-kallets status/resultat/feil\n */\nconst getUseRestApi = (requestApi: RequestApi) =>\n  function useRestApi<T, P>(key: RestKey<T, P>, params?: P, options: Options = defaultOptions): RestApiData<T> {\n    const allOptions = { ...defaultOptions, ...options };\n\n    const [data, setData] = useState<RestApiData<T>>(DEFAULT_STATE);\n\n    useEffect(() => {\n      if (requestApi.hasPath(key.name) && !allOptions.suspendRequest) {\n        setData(oldState => ({\n          state: RestApiState.LOADING,\n          error: undefined,\n          data: allOptions.keepData ? oldState.data : undefined,\n        }));\n\n        requestApi\n          .startRequest<T, P>(key.name, params, options.isCachingOn)\n          .then(dataRes => {\n            setData({\n              state: RestApiState.SUCCESS,\n              data: dataRes.payload,\n              error: undefined,\n            });\n          })\n          .catch(error => {\n            if (error?.message !== REQUEST_POLLING_CANCELLED) {\n              setData({\n                state: RestApiState.ERROR,\n                data: undefined,\n                error,\n              });\n            }\n          });\n      } else if (!requestApi.hasPath(key.name)) {\n        setData(DEFAULT_STATE);\n      }\n    }, [...allOptions.updateTriggers]);\n\n    if (!requestApi.hasPath(key.name) && allOptions.suspendRequest) {\n      return DEFAULT_STATE;\n    }\n    return data;\n  };\n\nexport default getUseRestApi;\n","import { useState, useEffect, DependencyList, useRef } from 'react';\n\nimport { RequestApi, RestKey } from '@navikt/fp-rest-api';\n\nimport RestApiState from '../RestApiState';\n\nconst notEqual = (array1: DependencyList, array2: DependencyList) =>\n  !(array1.length === array2.length && array1.every((value, index) => value === array2[index]));\nconst format = (name: string): string =>\n  name\n    .toLowerCase()\n    .replace(/_([a-z])/g, m => m.toUpperCase())\n    .replace(/_/g, '');\n\nexport interface RestApiData<T> {\n  state: RestApiState;\n  error?: Error;\n  data?: T;\n}\n\nexport interface EndpointData {\n  key: RestKey<any, any>;\n  params?: any;\n}\n\nexport interface Options {\n  updateTriggers?: DependencyList;\n  keepData?: boolean;\n  suspendRequest?: boolean;\n  isCachingOn?: boolean;\n}\n\nconst defaultOptions = {\n  updateTriggers: [],\n  keepData: false,\n  suspendRequest: false,\n  isCachingOn: false,\n};\n\nconst DEFAULT_STATE = {\n  state: RestApiState.NOT_STARTED,\n  error: undefined,\n  data: undefined,\n};\n\n/**\n * Hook som utfører et restkall ved mount. En kan i tillegg legge ved en dependencies-liste som kan trigge ny henting når data\n * blir oppdatert. Hook returnerer rest-kallets status/resultat/feil\n */\nconst getUseMultipleRestApi = (requestApi: RequestApi) =>\n  function useMultipleRestApi<T, P>(endpoints: EndpointData[], options: Options = defaultOptions): RestApiData<T> {\n    const [data, setData] = useState<RestApiData<T>>(DEFAULT_STATE);\n\n    const allOptions = { ...defaultOptions, ...options };\n\n    const ref = useRef<DependencyList>();\n    useEffect(() => {\n      ref.current = allOptions.updateTriggers;\n    }, [options.updateTriggers]);\n    const previousTriggers = ref.current;\n\n    useEffect(() => {\n      if (!allOptions.suspendRequest) {\n        setData(oldState => ({\n          state: RestApiState.LOADING,\n          error: undefined,\n          data: allOptions.keepData ? oldState.data : undefined,\n        }));\n\n        const filteredEndpoints = endpoints.filter(e => requestApi.hasPath(e.key.name));\n\n        Promise.all(\n          filteredEndpoints.map(e => requestApi.startRequest<T, P>(e.key.name, e.params, options.isCachingOn)),\n        )\n          .then(dataRes => {\n            setData({\n              state: RestApiState.SUCCESS,\n              data: dataRes.reduce(\n                (acc, result, index) => ({\n                  ...acc,\n                  [format(filteredEndpoints[index].key.name)]: result.payload,\n                }),\n                {} as T,\n              ),\n              error: undefined,\n            });\n          })\n          .catch(error => {\n            setData({\n              state: RestApiState.ERROR,\n              data: undefined,\n              error,\n            });\n          });\n      } else {\n        setData(DEFAULT_STATE);\n      }\n    }, [...allOptions.updateTriggers]);\n\n    return previousTriggers && notEqual(previousTriggers, allOptions.updateTriggers)\n      ? { ...DEFAULT_STATE, data: options.keepData ? data.data : undefined }\n      : data;\n  };\n\nexport default getUseMultipleRestApi;\n","import { useState, useCallback } from 'react';\n\nimport { REQUEST_POLLING_CANCELLED, ErrorType, RequestApi, RestKey } from '@navikt/fp-rest-api';\n\nimport RestApiState from '../RestApiState';\n\nexport type RestApiData<T> = {\n  state: RestApiState;\n  error?: ErrorType;\n  data?: T;\n};\n\nexport type RunnerOutput<T, P> = {\n  startRequest: (params?: P, keepData?: boolean) => Promise<T | undefined>;\n  resetRequestData: () => void;\n} & RestApiData<T>;\n\nconst DEFAULT_STATE = {\n  state: RestApiState.NOT_STARTED,\n  error: undefined,\n  data: undefined,\n};\n\n/**\n * Hook som gir deg ein funksjon til å starte restkall, i tillegg til kallets status/resultat/feil\n */\nconst getUseRestApiRunner = (requestApi: RequestApi) =>\n  function useRestApiRunner<T, P>(key: RestKey<T, P>): RunnerOutput<T, P> {\n    const [data, setData] = useState<RestApiData<T>>(DEFAULT_STATE);\n\n    const startRequest = useCallback((params?: P, keepData = false): Promise<T | undefined> => {\n      if (requestApi.hasPath(key.name)) {\n        setData(oldState => ({\n          state: RestApiState.LOADING,\n          data: keepData ? oldState.data : undefined,\n          error: undefined,\n        }));\n\n        return requestApi\n          .startRequest<T, P>(key.name, params)\n          .then(dataRes => {\n            setData({\n              state: RestApiState.SUCCESS,\n              data: dataRes.payload,\n              error: undefined,\n            });\n            return Promise.resolve(dataRes.payload);\n          })\n          .catch(error => {\n            if (error?.message !== REQUEST_POLLING_CANCELLED) {\n              setData({\n                state: RestApiState.ERROR,\n                data: undefined,\n                error,\n              });\n              throw error;\n            }\n            return undefined;\n          });\n      }\n      setData(DEFAULT_STATE);\n      return Promise.resolve(undefined);\n    }, []);\n\n    const resetRequestData = useCallback(() => {\n      setData(DEFAULT_STATE);\n    }, []);\n\n    return {\n      startRequest,\n      resetRequestData,\n      ...data,\n    };\n  };\n\nexport default getUseRestApiRunner;\n","import { useContext } from 'react';\n\nimport { RestKey } from '@navikt/fp-rest-api';\n\nimport { RestApiStateContext } from './RestApiContext';\n\n/**\n * Hook som bruker respons som allerede er hentet fra backend. For å kunne bruke denne\n * må @see useGlobalStateRestApi først brukes for å hente data fra backend\n */\nfunction useGlobalStateRestApiData<T, P>(key: RestKey<T, P>): T {\n  const state = useContext(RestApiStateContext);\n  return state[key.name];\n}\n\nexport default useGlobalStateRestApiData;\n","import React, { FunctionComponent, useEffect, useCallback } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Label, Button, BodyShort, Modal as NavModal } from '@navikt/ds-react';\nimport { Form, TextAreaField, InputField } from '@navikt/ft-form-hooks';\nimport { VerticalSpacer, FlexContainer, FlexRow, FlexColumn } from '@navikt/ft-ui-komponenter';\nimport { hasValidText, maxLength, minLength, required } from '@navikt/ft-form-validators';\n\nimport { RestApiState } from '@navikt/fp-rest-api-hooks';\n\nimport SaksbehandlerForFlytting from '../typer/saksbehandlerForFlyttingTsType';\n\nimport styles from './flyttReservasjonModal.module.css';\n\nconst minLength3 = minLength(3);\nconst maxLength500 = maxLength(500);\nconst minLength7 = minLength(7);\nconst maxLength7 = maxLength(7);\n\nconst formatText = (state: RestApiState, intl: IntlShape, saksbehandler?: SaksbehandlerForFlytting): string => {\n  if (state === RestApiState.SUCCESS && !saksbehandler) {\n    return intl.formatMessage({ id: 'LeggTilSaksbehandlerForm.FinnesIkke' });\n  }\n\n  return saksbehandler ? `${saksbehandler.navn}, ${saksbehandler.avdelingsnavn.join(', ')}` : '';\n};\n\ntype SøkFormValues = {\n  brukerIdent: string;\n};\ntype LagreFormValues = {\n  begrunnelse: string;\n};\n\ninterface OwnProps {\n  showModal: boolean;\n  oppgaveId: number;\n  closeModal: () => void;\n  toggleMenu: () => void;\n  hentReserverteOppgaver: (params: any, keepData: boolean) => void;\n  flyttOppgavereservasjon: (params: { oppgaveId: number; brukerIdent: string; begrunnelse: string }) => Promise<void>;\n  hentSaksbehandler: (params: { brukerIdent: string }) => Promise<SaksbehandlerForFlytting | undefined>;\n  hentSaksbehandlerState: RestApiState;\n  saksbehandler?: SaksbehandlerForFlytting;\n  resetHentSaksbehandler: () => void;\n}\n\n/**\n * FlyttReservasjonModal\n *\n * Modal som lar en søke opp en saksbehandler som saken skal flyttes til. En kan også begrunne hvorfor saken skal flyttes.\n */\nconst FlyttReservasjonModal: FunctionComponent<OwnProps> = ({\n  showModal,\n  closeModal,\n  oppgaveId,\n  toggleMenu,\n  hentReserverteOppgaver,\n  flyttOppgavereservasjon,\n  hentSaksbehandler,\n  hentSaksbehandlerState,\n  saksbehandler,\n  resetHentSaksbehandler,\n}) => {\n  const intl = useIntl();\n\n  const finnSaksbehandler = useCallback((brukerIdent: string) => hentSaksbehandler({ brukerIdent }), []);\n\n  const flyttReservasjon = useCallback(\n    (brukerident: string, begrunnelse: string) =>\n      flyttOppgavereservasjon({\n        oppgaveId,\n        brukerIdent: brukerident,\n        begrunnelse,\n      }).then(() => hentReserverteOppgaver({}, true)),\n    [],\n  );\n\n  useEffect(\n    () => () => {\n      resetHentSaksbehandler();\n    },\n    [],\n  );\n\n  const søkFormMethods = useForm<SøkFormValues>();\n  const brukerIdentValue = søkFormMethods.watch('brukerIdent');\n\n  const lagreFormMethods = useForm<LagreFormValues>();\n  const begrunnelseValue = lagreFormMethods.watch('begrunnelse');\n\n  return (\n    <NavModal\n      className={styles.modal}\n      open={showModal}\n      aria-label={intl.formatMessage({ id: 'FlyttReservasjonModal.FlyttReservasjon' })}\n      onClose={closeModal}\n    >\n      <NavModal.Header>\n        <Label size=\"small\">\n          <FormattedMessage id=\"FlyttReservasjonModal.FlyttReservasjon\" />\n        </Label>\n      </NavModal.Header>\n      <NavModal.Body>\n        <Form<SøkFormValues> formMethods={søkFormMethods} onSubmit={values => finnSaksbehandler(values.brukerIdent)}>\n          <FlexContainer>\n            <FlexRow>\n              <FlexColumn>\n                <InputField\n                  name=\"brukerIdent\"\n                  label={intl.formatMessage({ id: 'FlyttReservasjonModal.Brukerident' })}\n                  validate={[required, minLength7, maxLength7]}\n                  autoFocus\n                  autoComplete\n                />\n              </FlexColumn>\n              <FlexColumn className={styles.buttonDiv}>\n                <Button\n                  size=\"small\"\n                  variant=\"primary\"\n                  loading={hentSaksbehandlerState === RestApiState.LOADING}\n                  disabled={!brukerIdentValue || hentSaksbehandlerState === RestApiState.LOADING}\n                >\n                  <FormattedMessage id=\"FlyttReservasjonModal.Sok\" />\n                </Button>\n              </FlexColumn>\n            </FlexRow>\n          </FlexContainer>\n          {hentSaksbehandlerState === RestApiState.SUCCESS && (\n            <>\n              <BodyShort size=\"small\">{formatText(hentSaksbehandlerState, intl, saksbehandler)}</BodyShort>\n              <VerticalSpacer sixteenPx />\n            </>\n          )}\n        </Form>\n        <VerticalSpacer sixteenPx />\n        <Form<LagreFormValues>\n          formMethods={lagreFormMethods}\n          onSubmit={values => {\n            toggleMenu();\n            flyttReservasjon(saksbehandler ? saksbehandler.brukerIdent : '', values.begrunnelse);\n          }}\n        >\n          <TextAreaField\n            name=\"begrunnelse\"\n            label={intl.formatMessage({ id: 'FlyttReservasjonModal.Begrunn' })}\n            validate={[required, maxLength500, minLength3, hasValidText]}\n            maxLength={500}\n          />\n          <VerticalSpacer sixteenPx />\n          <NavModal.Footer>\n            <Button\n              className={styles.submitButton}\n              size=\"small\"\n              variant=\"primary\"\n              disabled={!saksbehandler || !begrunnelseValue || begrunnelseValue.length < 3}\n            >\n              <FormattedMessage id=\"FlyttReservasjonModal.Ok\" />\n            </Button>\n            <Button className={styles.cancelButton} size=\"small\" variant=\"secondary\" onClick={closeModal} type=\"button\">\n              <FormattedMessage id=\"FlyttReservasjonModal.Avbryt\" />\n            </Button>\n          </NavModal.Footer>\n        </Form>\n      </NavModal.Body>\n    </NavModal>\n  );\n};\n\nexport default FlyttReservasjonModal;\n"],"names":["RestApiState","defaultInitialState","RestApiStateContext","createContext","RestApiDispatchContext","RestApiProvider","children","initialState","state","dispatch","useReducer","oldState","action","key","acc","jsx","RestApiErrorStateContext","RestApiErrorDispatchContext","RestApiErrorProvider","useRestApiError","useContext","useRestApiErrorDispatcher","addErrorMessage","useCallback","data","removeErrorMessages","useGlobalStateRestApiData","minLength3","minLength","maxLength500","maxLength","minLength7","maxLength7","formatText","intl","saksbehandler","FlyttReservasjonModal","showModal","closeModal","oppgaveId","toggleMenu","hentReserverteOppgaver","flyttOppgavereservasjon","hentSaksbehandler","hentSaksbehandlerState","resetHentSaksbehandler","useIntl","finnSaksbehandler","brukerIdent","flyttReservasjon","brukerident","begrunnelse","useEffect","søkFormMethods","useForm","brukerIdentValue","lagreFormMethods","begrunnelseValue","jsxs","NavModal","styles","Label","FormattedMessage","Form","values","FlexContainer","FlexRow","FlexColumn","InputField","required","Button","Fragment","BodyShort","VerticalSpacer","TextAreaField","hasValidText","FlyttReservasjonModal$1"],"mappings":"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"}