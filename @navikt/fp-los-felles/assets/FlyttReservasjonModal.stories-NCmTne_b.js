import{j as t,a as p,F as ne}from"./jsx-runtime-CUEGZZF9.js";import{r as n}from"./index-DogsOklH.js";import{u as re,a as M,b as h,L as ae,F as v,O as P,h as se,M as ie,i as N,C as le,r as E,B as q,j as de,k as b,w as ue,Z as oe,l as B,n as G,g as pe,f as k,m as ce}from"./nb_NO-avYX3XQS.js";import"./preview-errors-7FWlPnjy.js";import"./index-PPLHz8o0.js";import"./index-MroJ3egt.js";var s=(e=>(e.NOT_STARTED="NOT_STARTED",e.LOADING="LOADING",e.SUCCESS="SUCCESS",e.ERROR="ERROR",e))(s||{});const z={},$=n.createContext(z),me=n.createContext(void 0),H=({children:e,initialState:a})=>{const[r,i]=n.useReducer((l,d)=>{switch(d.type){case"success":return{...l,[d.key]:d.data};case"remove":return Object.keys(l).filter(c=>c!==d.key).reduce((c,u)=>({...c,[u]:l[u]}),{});default:throw new Error}},a||z);return t($.Provider,{value:r,children:t(me.Provider,{value:i,children:e})})};try{H.displayName="RestApiProvider",H.__docgenInfo={description:`Håndterer state for data som skal hentes fra backend kun en gang og som en trenger aksess til
mange steder i applikasjonen.`,displayName:"RestApiProvider",props:{initialState:{defaultValue:null,description:"",name:"initialState",required:!1,type:{name:"{ [x: string]: any; }"}}}}}catch{}const _={errors:[]},Z=n.createContext(_),J=n.createContext(void 0),T=({children:e,initialState:a})=>{const[r,i]=n.useReducer((l,d)=>{switch(d.type){case"add":return{errors:l.errors.concat(d.data)};case"remove":return _;default:throw new Error}},a||_);return t(Z.Provider,{value:r,children:t(J.Provider,{value:i,children:e})})};try{T.displayName="RestApiErrorProvider",T.__docgenInfo={description:"Tilbyr kontekst for lagring av feilmeldinger.",displayName:"RestApiErrorProvider",props:{initialState:{defaultValue:null,description:"",name:"initialState",required:!1,type:{name:"State"}}}}}catch{}const L=()=>n.useContext(Z).errors;try{L.displayName="useRestApiError",L.__docgenInfo={description:`Hook som henter alle feilmeldinger registrert i kontekst.
Fungerer kun i komponenter som har en`,displayName:"useRestApiError",props:{}}}catch{}const I=()=>{const e=n.useContext(J),a=n.useCallback(i=>{e&&e({type:"add",data:i})},[]),r=n.useCallback(()=>{e&&e({type:"remove"})},[]);return{addErrorMessage:a,removeErrorMessages:r}};try{I.displayName="useRestApiErrorDispatcher",I.__docgenInfo={description:`Hook som tilbyr funksjoner for å legge til eller fjerne feil i kontekst.
Fungerer kun i komponenter som har en`,displayName:"useRestApiErrorDispatcher",props:{}}}catch{}s.NOT_STARTED;try{useRestApi.displayName="useRestApi",useRestApi.__docgenInfo={description:`Hook som utfører et restkall ved mount. En kan i tillegg legge ved en dependencies-liste som kan trigge ny henting når data
blir oppdatert. Hook returnerer rest-kallets status/resultat/feil`,displayName:"useRestApi",props:{httpClientApi:{defaultValue:null,description:"",name:"httpClientApi",required:!0,type:{name:"HttpClientApi"}},endpointConfigList:{defaultValue:null,description:"",name:"endpointConfigList",required:!0,type:{name:"RequestConfig[]"}},links:{defaultValue:null,description:"",name:"links",required:!0,type:{name:"{ [key: string]: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[]; }"}},notificationMapper:{defaultValue:null,description:"",name:"notificationMapper",required:!0,type:{name:"NotificationMapper"}},cache:{defaultValue:null,description:"",name:"cache",required:!0,type:{name:"ResponseCache"}},activeRunners:{defaultValue:null,description:"",name:"activeRunners",required:!0,type:{name:"Record<string, RequestRunner>"}},doCaching:{defaultValue:null,description:"",name:"doCaching",required:!0,type:{name:"(endpointName: string) => Promise<any>"}},findLinks:{defaultValue:null,description:"",name:"findLinks",required:!0,type:{name:"(rel?: string | undefined) => Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }> | undefined"}},cancelRequest:{defaultValue:null,description:"",name:"cancelRequest",required:!0,type:{name:"(endpointName: string) => void"}},startRequest:{defaultValue:null,description:"",name:"startRequest",required:!0,type:{name:"<T, P>(endpointName: string, params?: P | undefined, isCachingOn?: boolean) => Promise<{ payload: T; }>"}},hasPath:{defaultValue:null,description:"",name:"hasPath",required:!0,type:{name:"(endpointName: string) => boolean"}},setLinks:{defaultValue:null,description:"",name:"setLinks",required:!0,type:{name:"(links: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[], linkCategory?: string) => void"}},resetLinks:{defaultValue:null,description:"",name:"resetLinks",required:!0,type:{name:"() => void"}},setRequestPendingHandler:{defaultValue:null,description:"",name:"setRequestPendingHandler",required:!0,type:{name:"(requestPendingHandler: (message?: string | undefined) => void) => void"}},setAddErrorMessageHandler:{defaultValue:null,description:"",name:"setAddErrorMessageHandler",required:!0,type:{name:"(addErrorMessage: (message: string) => void) => void"}},resetCache:{defaultValue:null,description:"",name:"resetCache",required:!0,type:{name:"() => void"}},getAxios:{defaultValue:null,description:"",name:"getAxios",required:!0,type:{name:"() => AxiosInstance"}},getUrl:{defaultValue:null,description:"",name:"getUrl",required:!0,type:{name:"(endpointName: string) => string | undefined"}},getRestType:{defaultValue:null,description:"",name:"getRestType",required:!0,type:{name:"(endpointName: string) => string"}}}}}catch{}s.NOT_STARTED;try{useMultipleRestApi.displayName="useMultipleRestApi",useMultipleRestApi.__docgenInfo={description:`Hook som utfører et restkall ved mount. En kan i tillegg legge ved en dependencies-liste som kan trigge ny henting når data
blir oppdatert. Hook returnerer rest-kallets status/resultat/feil`,displayName:"useMultipleRestApi",props:{httpClientApi:{defaultValue:null,description:"",name:"httpClientApi",required:!0,type:{name:"HttpClientApi"}},endpointConfigList:{defaultValue:null,description:"",name:"endpointConfigList",required:!0,type:{name:"RequestConfig[]"}},links:{defaultValue:null,description:"",name:"links",required:!0,type:{name:"{ [key: string]: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[]; }"}},notificationMapper:{defaultValue:null,description:"",name:"notificationMapper",required:!0,type:{name:"NotificationMapper"}},cache:{defaultValue:null,description:"",name:"cache",required:!0,type:{name:"ResponseCache"}},activeRunners:{defaultValue:null,description:"",name:"activeRunners",required:!0,type:{name:"Record<string, RequestRunner>"}},doCaching:{defaultValue:null,description:"",name:"doCaching",required:!0,type:{name:"(endpointName: string) => Promise<any>"}},findLinks:{defaultValue:null,description:"",name:"findLinks",required:!0,type:{name:"(rel?: string | undefined) => Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }> | undefined"}},cancelRequest:{defaultValue:null,description:"",name:"cancelRequest",required:!0,type:{name:"(endpointName: string) => void"}},startRequest:{defaultValue:null,description:"",name:"startRequest",required:!0,type:{name:"<T, P>(endpointName: string, params?: P | undefined, isCachingOn?: boolean) => Promise<{ payload: T; }>"}},hasPath:{defaultValue:null,description:"",name:"hasPath",required:!0,type:{name:"(endpointName: string) => boolean"}},setLinks:{defaultValue:null,description:"",name:"setLinks",required:!0,type:{name:"(links: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[], linkCategory?: string) => void"}},resetLinks:{defaultValue:null,description:"",name:"resetLinks",required:!0,type:{name:"() => void"}},setRequestPendingHandler:{defaultValue:null,description:"",name:"setRequestPendingHandler",required:!0,type:{name:"(requestPendingHandler: (message?: string | undefined) => void) => void"}},setAddErrorMessageHandler:{defaultValue:null,description:"",name:"setAddErrorMessageHandler",required:!0,type:{name:"(addErrorMessage: (message: string) => void) => void"}},resetCache:{defaultValue:null,description:"",name:"resetCache",required:!0,type:{name:"() => void"}},getAxios:{defaultValue:null,description:"",name:"getAxios",required:!0,type:{name:"() => AxiosInstance"}},getUrl:{defaultValue:null,description:"",name:"getUrl",required:!0,type:{name:"(endpointName: string) => string | undefined"}},getRestType:{defaultValue:null,description:"",name:"getRestType",required:!0,type:{name:"(endpointName: string) => string"}}}}}catch{}s.NOT_STARTED;try{useRestApiRunner.displayName="useRestApiRunner",useRestApiRunner.__docgenInfo={description:"Hook som gir deg ein funksjon til å starte restkall, i tillegg til kallets status/resultat/feil",displayName:"useRestApiRunner",props:{httpClientApi:{defaultValue:null,description:"",name:"httpClientApi",required:!0,type:{name:"HttpClientApi"}},endpointConfigList:{defaultValue:null,description:"",name:"endpointConfigList",required:!0,type:{name:"RequestConfig[]"}},links:{defaultValue:null,description:"",name:"links",required:!0,type:{name:"{ [key: string]: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[]; }"}},notificationMapper:{defaultValue:null,description:"",name:"notificationMapper",required:!0,type:{name:"NotificationMapper"}},cache:{defaultValue:null,description:"",name:"cache",required:!0,type:{name:"ResponseCache"}},activeRunners:{defaultValue:null,description:"",name:"activeRunners",required:!0,type:{name:"Record<string, RequestRunner>"}},doCaching:{defaultValue:null,description:"",name:"doCaching",required:!0,type:{name:"(endpointName: string) => Promise<any>"}},findLinks:{defaultValue:null,description:"",name:"findLinks",required:!0,type:{name:"(rel?: string | undefined) => Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }> | undefined"}},cancelRequest:{defaultValue:null,description:"",name:"cancelRequest",required:!0,type:{name:"(endpointName: string) => void"}},startRequest:{defaultValue:null,description:"",name:"startRequest",required:!0,type:{name:"<T, P>(endpointName: string, params?: P | undefined, isCachingOn?: boolean) => Promise<{ payload: T; }>"}},hasPath:{defaultValue:null,description:"",name:"hasPath",required:!0,type:{name:"(endpointName: string) => boolean"}},setLinks:{defaultValue:null,description:"",name:"setLinks",required:!0,type:{name:"(links: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[], linkCategory?: string) => void"}},resetLinks:{defaultValue:null,description:"",name:"resetLinks",required:!0,type:{name:"() => void"}},setRequestPendingHandler:{defaultValue:null,description:"",name:"setRequestPendingHandler",required:!0,type:{name:"(requestPendingHandler: (message?: string | undefined) => void) => void"}},setAddErrorMessageHandler:{defaultValue:null,description:"",name:"setAddErrorMessageHandler",required:!0,type:{name:"(addErrorMessage: (message: string) => void) => void"}},resetCache:{defaultValue:null,description:"",name:"resetCache",required:!0,type:{name:"() => void"}},getAxios:{defaultValue:null,description:"",name:"getAxios",required:!0,type:{name:"() => AxiosInstance"}},getUrl:{defaultValue:null,description:"",name:"getUrl",required:!0,type:{name:"(endpointName: string) => string | undefined"}},getRestType:{defaultValue:null,description:"",name:"getRestType",required:!0,type:{name:"(endpointName: string) => string"}}}}}catch{}try{useGlobalStateRestApi.displayName="useGlobalStateRestApi",useGlobalStateRestApi.__docgenInfo={description:"Hook som henter data fra backend og deretter lagrer i",displayName:"useGlobalStateRestApi",props:{httpClientApi:{defaultValue:null,description:"",name:"httpClientApi",required:!0,type:{name:"HttpClientApi"}},endpointConfigList:{defaultValue:null,description:"",name:"endpointConfigList",required:!0,type:{name:"RequestConfig[]"}},links:{defaultValue:null,description:"",name:"links",required:!0,type:{name:"{ [key: string]: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[]; }"}},notificationMapper:{defaultValue:null,description:"",name:"notificationMapper",required:!0,type:{name:"NotificationMapper"}},cache:{defaultValue:null,description:"",name:"cache",required:!0,type:{name:"ResponseCache"}},activeRunners:{defaultValue:null,description:"",name:"activeRunners",required:!0,type:{name:"Record<string, RequestRunner>"}},doCaching:{defaultValue:null,description:"",name:"doCaching",required:!0,type:{name:"(endpointName: string) => Promise<any>"}},findLinks:{defaultValue:null,description:"",name:"findLinks",required:!0,type:{name:"(rel?: string | undefined) => Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }> | undefined"}},cancelRequest:{defaultValue:null,description:"",name:"cancelRequest",required:!0,type:{name:"(endpointName: string) => void"}},startRequest:{defaultValue:null,description:"",name:"startRequest",required:!0,type:{name:"<T, P>(endpointName: string, params?: P | undefined, isCachingOn?: boolean) => Promise<{ payload: T; }>"}},hasPath:{defaultValue:null,description:"",name:"hasPath",required:!0,type:{name:"(endpointName: string) => boolean"}},setLinks:{defaultValue:null,description:"",name:"setLinks",required:!0,type:{name:"(links: Readonly<{ href: string; rel: string; requestPayload?: any; type: string; }>[], linkCategory?: string) => void"}},resetLinks:{defaultValue:null,description:"",name:"resetLinks",required:!0,type:{name:"() => void"}},setRequestPendingHandler:{defaultValue:null,description:"",name:"setRequestPendingHandler",required:!0,type:{name:"(requestPendingHandler: (message?: string | undefined) => void) => void"}},setAddErrorMessageHandler:{defaultValue:null,description:"",name:"setAddErrorMessageHandler",required:!0,type:{name:"(addErrorMessage: (message: string) => void) => void"}},resetCache:{defaultValue:null,description:"",name:"resetCache",required:!0,type:{name:"() => void"}},getAxios:{defaultValue:null,description:"",name:"getAxios",required:!0,type:{name:"() => AxiosInstance"}},getUrl:{defaultValue:null,description:"",name:"getUrl",required:!0,type:{name:"(endpointName: string) => string | undefined"}},getRestType:{defaultValue:null,description:"",name:"getRestType",required:!0,type:{name:"(endpointName: string) => string"}}}}}catch{}function O(e){return n.useContext($)[e.name]}try{O.displayName="useGlobalStateRestApiData",O.__docgenInfo={description:`Hook som bruker respons som allerede er hentet fra backend. For å kunne bruke denne
må`,displayName:"useGlobalStateRestApiData",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},data:{defaultValue:null,description:"",name:"data",required:!0,type:{name:"T"}},params:{defaultValue:null,description:"",name:"params",required:!0,type:{name:"P"}}}}}catch{}const ge="_modal_1pn1d_1",ye="_submitButton_1pn1d_5",fe="_cancelButton_1pn1d_10",he="_buttonDiv_1pn1d_14",R={modal:ge,submitButton:ye,cancelButton:fe,buttonDiv:he},ve=B(3),Re=G(500),ke=B(7),qe=G(7),be=(e,a,r)=>e===s.SUCCESS&&!r?a.formatMessage({id:"LeggTilSaksbehandlerForm.FinnesIkke"}):r?`${r.navn}, ${r.avdelingsnavn.join(", ")}`:"",V=({showModal:e,closeModal:a,oppgaveId:r,toggleMenu:i,hentReserverteOppgaver:l,flyttOppgavereservasjon:d,hentSaksbehandler:c,hentSaksbehandlerState:u,saksbehandler:y,resetHentSaksbehandler:W})=>{const f=re(),X=n.useCallback(o=>c({brukerIdent:o}),[]),Y=n.useCallback((o,te)=>d({oppgaveId:r,brukerIdent:o,begrunnelse:te}).then(()=>l({},!0)),[]);n.useEffect(()=>()=>{W()},[]);const C=M(),ee=C.watch("brukerIdent"),A=M(),S=A.watch("begrunnelse");return p(h,{className:R.modal,open:e,"aria-label":f.formatMessage({id:"FlyttReservasjonModal.FlyttReservasjon"}),onClose:a,children:[t(h.Header,{children:t(ae,{size:"small",children:t(v,{id:"FlyttReservasjonModal.FlyttReservasjon"})})}),p(h.Body,{children:[p(P,{formMethods:C,onSubmit:o=>X(o.brukerIdent),children:[t(se,{children:p(ie,{children:[t(N,{children:t(le,{name:"brukerIdent",label:f.formatMessage({id:"FlyttReservasjonModal.Brukerident"}),validate:[E,ke,qe],autoFocus:!0,autoComplete:!0})}),t(N,{className:R.buttonDiv,children:t(q,{size:"small",variant:"primary",loading:u===s.LOADING,disabled:!ee||u===s.LOADING,children:t(v,{id:"FlyttReservasjonModal.Sok"})})})]})}),u===s.SUCCESS&&p(ne,{children:[t(de,{size:"small",children:be(u,f,y)}),t(b,{sixteenPx:!0})]})]}),t(b,{sixteenPx:!0}),p(P,{formMethods:A,onSubmit:o=>{i(),Y(y?y.brukerIdent:"",o.begrunnelse)},children:[t(ue,{name:"begrunnelse",label:f.formatMessage({id:"FlyttReservasjonModal.Begrunn"}),validate:[E,Re,ve,oe],maxLength:500}),t(b,{sixteenPx:!0}),p(h.Footer,{children:[t(q,{className:R.submitButton,size:"small",variant:"primary",disabled:!y||!S||S.length<3,children:t(v,{id:"FlyttReservasjonModal.Ok"})}),t(q,{className:R.cancelButton,size:"small",variant:"secondary",onClick:a,type:"button",children:t(v,{id:"FlyttReservasjonModal.Avbryt"})})]})]})]})]})},K=V;try{V.displayName="FlyttReservasjonModal",V.__docgenInfo={description:`FlyttReservasjonModal

Modal som lar en søke opp en saksbehandler som saken skal flyttes til. En kan også begrunne hvorfor saken skal flyttes.`,displayName:"FlyttReservasjonModal",props:{showModal:{defaultValue:null,description:"",name:"showModal",required:!0,type:{name:"boolean"}},oppgaveId:{defaultValue:null,description:"",name:"oppgaveId",required:!0,type:{name:"number"}},closeModal:{defaultValue:null,description:"",name:"closeModal",required:!0,type:{name:"() => void"}},toggleMenu:{defaultValue:null,description:"",name:"toggleMenu",required:!0,type:{name:"() => void"}},hentReserverteOppgaver:{defaultValue:null,description:"",name:"hentReserverteOppgaver",required:!0,type:{name:"(params: any, keepData: boolean) => void"}},flyttOppgavereservasjon:{defaultValue:null,description:"",name:"flyttOppgavereservasjon",required:!0,type:{name:"(params: { oppgaveId: number; brukerIdent: string; begrunnelse: string; }) => Promise<void>"}},hentSaksbehandler:{defaultValue:null,description:"",name:"hentSaksbehandler",required:!0,type:{name:"(params: { brukerIdent: string; }) => Promise<Readonly<{ brukerIdent: string; navn: string; avdelingsnavn: string[]; }> | undefined>"}},hentSaksbehandlerState:{defaultValue:null,description:"",name:"hentSaksbehandlerState",required:!0,type:{name:"enum",value:[{value:'"NOT_STARTED"'},{value:'"LOADING"'},{value:'"SUCCESS"'},{value:'"ERROR"'}]}},saksbehandler:{defaultValue:null,description:"",name:"saksbehandler",required:!1,type:{name:"Readonly<{ brukerIdent: string; navn: string; avdelingsnavn: string[]; }>"}},resetHentSaksbehandler:{defaultValue:null,description:"",name:"resetHentSaksbehandler",required:!0,type:{name:"() => void"}}}}}catch{}const _e=pe(ce),Ne={title:"los/avdelingsleder/behandlingskoer/FlyttReservasjonModal",component:K,decorators:[_e]},Q=({saksbehandler:e,hentReserverteOppgaver:a})=>{const[r,i]=n.useState(!1),l=()=>(i(!0),Promise.resolve(e));return t(K,{showModal:!0,oppgaveId:1,closeModal:k("button-click"),toggleMenu:k("button-click"),hentReserverteOppgaver:a,flyttOppgavereservasjon:()=>Promise.resolve(),hentSaksbehandler:l,hentSaksbehandlerState:r?s.SUCCESS:s.NOT_STARTED,saksbehandler:e,resetHentSaksbehandler:()=>{}})},m=Q.bind({});m.args={hentReserverteOppgaver:k("button-click"),saksbehandler:void 0};const g=Q.bind({});g.args={hentReserverteOppgaver:k("button-click"),saksbehandler:{brukerIdent:"R232323",navn:"Espen Utvikler",avdelingsnavn:["NAV Viken"]}};var x,F,j;m.parameters={...m.parameters,docs:{...(x=m.parameters)==null?void 0:x.docs,source:{originalSource:`({
  saksbehandler,
  hentReserverteOppgaver
}) => {
  const [harHentet, setHentet] = useState(false);
  const hentSaksbehandler = () => {
    setHentet(true);
    return Promise.resolve(saksbehandler);
  };
  return <FlyttReservasjonModal showModal oppgaveId={1} closeModal={action('button-click')} toggleMenu={action('button-click')} hentReserverteOppgaver={hentReserverteOppgaver} flyttOppgavereservasjon={() => Promise.resolve()} hentSaksbehandler={hentSaksbehandler} hentSaksbehandlerState={harHentet ? RestApiState.SUCCESS : RestApiState.NOT_STARTED} saksbehandler={saksbehandler} resetHentSaksbehandler={() => undefined} />;
}`,...(j=(F=m.parameters)==null?void 0:F.docs)==null?void 0:j.source}}};var D,U,w;g.parameters={...g.parameters,docs:{...(D=g.parameters)==null?void 0:D.docs,source:{originalSource:`({
  saksbehandler,
  hentReserverteOppgaver
}) => {
  const [harHentet, setHentet] = useState(false);
  const hentSaksbehandler = () => {
    setHentet(true);
    return Promise.resolve(saksbehandler);
  };
  return <FlyttReservasjonModal showModal oppgaveId={1} closeModal={action('button-click')} toggleMenu={action('button-click')} hentReserverteOppgaver={hentReserverteOppgaver} flyttOppgavereservasjon={() => Promise.resolve()} hentSaksbehandler={hentSaksbehandler} hentSaksbehandlerState={harHentet ? RestApiState.SUCCESS : RestApiState.NOT_STARTED} saksbehandler={saksbehandler} resetHentSaksbehandler={() => undefined} />;
}`,...(w=(U=g.parameters)==null?void 0:U.docs)==null?void 0:w.source}}};const Ee=["Default","MedTreffPåSøk"];export{m as Default,g as MedTreffPåSøk,Ee as __namedExportsOrder,Ne as default};
