{"version":3,"file":"FagsakSearchIndex-989b3fca.js","sources":["../../src/fagsakSearch/FagsakSearchIndex.tsx"],"sourcesContent":["import React, { useState, FunctionComponent, useEffect } from 'react';\n\nimport { errorOfType, ErrorTypes, getErrorResponseData } from '@navikt/fp-rest-api';\nimport { FagsakEnkel } from '@navikt/fp-types';\nimport { OppgaveStatus, Oppgave } from '@navikt/fp-los-felles';\n\nimport FagsakSearch from './components/FagsakSearch';\nimport { RestApiPathsKeys, restApiHooks } from '../data/fplosSaksbehandlerRestApi';\nimport OppgaveErReservertAvAnnenModal from '../components/OppgaveErReservertAvAnnenModal';\n\ninterface OwnProps {\n  åpneFagsak: (saksnummer: string, behandlingUuid?: string) => void;\n  kanSaksbehandle: boolean;\n}\n\nconst EMPTY_ARRAY_FAGSAK: FagsakEnkel[] = [];\nconst EMPTY_ARRAY_OPPGAVER: Oppgave[] = [];\n\n/**\n * FagsakSearchIndex\n *\n * Container komponent. Har ansvar for å vise søkeskjermbildet og å håndtere fagsaksøket\n * mot server og lagringen av resultatet i klientens state.\n */\nconst FagsakSearchIndex: FunctionComponent<OwnProps> = ({ åpneFagsak, kanSaksbehandle }) => {\n  const [skalReservere, setSkalReservere] = useState(false);\n  const [reservertAvAnnenSaksbehandler, setReservertAvAnnenSaksbehandler] = useState(false);\n  const [reservertOppgave, setReservertOppgave] = useState<Oppgave>();\n  const [sokStartet, setSokStartet] = useState(false);\n  const [sokFerdig, setSokFerdig] = useState(false);\n\n  const { startRequest: reserverOppgave } = restApiHooks.useRestApiRunner(RestApiPathsKeys.RESERVER_OPPGAVE);\n  const {\n    startRequest: sokFagsak,\n    resetRequestData: resetFagsakSok,\n    data: fagsaker = EMPTY_ARRAY_FAGSAK,\n    error: fagsakError,\n  } = restApiHooks.useRestApiRunner(RestApiPathsKeys.SEARCH_FAGSAK);\n  const { startRequest: hentOppgaverForFagsaker, data: fagsakOppgaver = EMPTY_ARRAY_OPPGAVER } =\n    restApiHooks.useRestApiRunner(RestApiPathsKeys.OPPGAVER_FOR_FAGSAKER);\n  const { startRequest: hentReservasjonsstatus } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.HENT_RESERVASJONSSTATUS,\n  );\n\n  const searchResultAccessDenied =\n    fagsakError && errorOfType(ErrorTypes.MANGLER_TILGANG_FEIL, fagsakError)\n      ? getErrorResponseData(fagsakError)\n      : undefined;\n\n  useEffect(() => {\n    if (sokFerdig && fagsaker.length === 1) {\n      if (fagsakOppgaver.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        velgFagsakOperasjoner(fagsakOppgaver[0], false);\n      } else if (fagsakOppgaver.length === 0) {\n        åpneFagsak(fagsaker[0].saksnummer);\n      }\n    }\n  }, [sokFerdig, fagsaker, fagsakOppgaver]);\n\n  useEffect(\n    () => () => {\n      resetFagsakSok();\n    },\n    [],\n  );\n\n  const goToFagsakEllerApneModal = (oppgave: Oppgave, oppgaveStatus?: OppgaveStatus) => {\n    if (\n      oppgaveStatus &&\n      (!oppgaveStatus.erReservert || (oppgaveStatus.erReservert && oppgaveStatus.erReservertAvInnloggetBruker))\n    ) {\n      åpneFagsak(oppgave.saksnummer.toString(), oppgave.behandlingId);\n    } else if (oppgaveStatus && oppgaveStatus.erReservert && !oppgaveStatus.erReservertAvInnloggetBruker) {\n      setReservertOppgave(oppgave);\n      setReservertAvAnnenSaksbehandler(true);\n    }\n  };\n\n  const velgFagsakOperasjoner = (oppgave: Oppgave, skalSjekkeOmReservert: boolean) => {\n    if (oppgave.status.erReservert && !oppgave.status.erReservertAvInnloggetBruker) {\n      setReservertOppgave(oppgave);\n      setReservertAvAnnenSaksbehandler(true);\n    } else if (!skalReservere) {\n      if (skalSjekkeOmReservert) {\n        hentReservasjonsstatus({ oppgaveId: oppgave.id }).then(status => {\n          goToFagsakEllerApneModal(oppgave, status);\n        });\n      } else {\n        åpneFagsak(oppgave.saksnummer.toString(), oppgave.behandlingId);\n      }\n    } else {\n      reserverOppgave({ oppgaveId: oppgave.id }).then(data => {\n        goToFagsakEllerApneModal(oppgave, data);\n      });\n    }\n  };\n\n  const reserverOppgaveOgApne = (oppgave: Oppgave) => {\n    velgFagsakOperasjoner(oppgave, true);\n  };\n\n  const sokFagsakFn = (values: { searchString: string; skalReservere: boolean }) => {\n    setSkalReservere(values.skalReservere);\n    setSokStartet(true);\n    setSokFerdig(false);\n\n    return sokFagsak(values).then(fagsakerResultat => {\n      if (fagsakerResultat && fagsakerResultat.length > 0) {\n        hentOppgaverForFagsaker({\n          saksnummerListe: fagsakerResultat.map(fagsak => `${fagsak.saksnummer}`).join(','),\n        }).then(() => {\n          setSokStartet(false);\n          setSokFerdig(true);\n        });\n      } else {\n        setSokStartet(false);\n        setSokFerdig(true);\n      }\n    });\n  };\n\n  const lukkErReservertModalOgOpneOppgave = (oppgave: Oppgave) => {\n    setReservertOppgave(undefined);\n    setReservertAvAnnenSaksbehandler(false);\n    åpneFagsak(oppgave.saksnummer.toString(), oppgave.behandlingId);\n  };\n\n  const resetSearchFn = () => {\n    resetFagsakSok();\n    setSokStartet(false);\n    setSokFerdig(false);\n  };\n\n  return (\n    <>\n      <FagsakSearch\n        fagsaker={fagsaker || []}\n        fagsakOppgaver={fagsakOppgaver || []}\n        searchFagsakCallback={sokFagsakFn}\n        searchResultReceived={sokFerdig}\n        åpneFagsak={åpneFagsak}\n        selectOppgaveCallback={reserverOppgaveOgApne}\n        searchStarted={sokStartet}\n        searchResultAccessDenied={searchResultAccessDenied}\n        resetSearch={resetSearchFn}\n        kanSaksbehandle={kanSaksbehandle}\n      />\n      {reservertAvAnnenSaksbehandler && reservertOppgave && (\n        <OppgaveErReservertAvAnnenModal\n          lukkErReservertModalOgOpneOppgave={lukkErReservertModalOgOpneOppgave}\n          oppgave={reservertOppgave}\n          oppgaveStatus={reservertOppgave.status}\n        />\n      )}\n    </>\n  );\n};\n\nexport default FagsakSearchIndex;\n"],"names":["EMPTY_ARRAY_FAGSAK","EMPTY_ARRAY_OPPGAVER","FagsakSearchIndex","åpneFagsak","kanSaksbehandle","skalReservere","setSkalReservere","useState","reservertAvAnnenSaksbehandler","setReservertAvAnnenSaksbehandler","reservertOppgave","setReservertOppgave","sokStartet","setSokStartet","sokFerdig","setSokFerdig","reserverOppgave","restApiHooks","RestApiPathsKeys","sokFagsak","resetFagsakSok","fagsaker","fagsakError","hentOppgaverForFagsaker","fagsakOppgaver","hentReservasjonsstatus","searchResultAccessDenied","errorOfType","ErrorTypes","getErrorResponseData","useEffect","velgFagsakOperasjoner","goToFagsakEllerApneModal","oppgave","oppgaveStatus","skalSjekkeOmReservert","data","status","reserverOppgaveOgApne","sokFagsakFn","values","fagsakerResultat","fagsak","lukkErReservertModalOgOpneOppgave","resetSearchFn","jsxs","Fragment","jsx","FagsakSearch","OppgaveErReservertAvAnnenModal","FagsakSearchIndex$1"],"mappings":"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"}