{"version":3,"file":"SakslisteVelgerForm-2f8df57b.js","sources":["../../src/kodeverk/KoSortering.ts","../../src/kodeverk/andreKriterierType.ts","../../src/images/gruppe_hover.svg","../../src/images/gruppe.svg","../../src/behandlingskoer/components/SakslisteVelgerForm.tsx"],"sourcesContent":["enum KoSortering {\n  OPPRETT_BEHANDLING = 'OPPRBEH',\n  BEHANDLINGSFRIST = 'BEHFRIST',\n  BELOP = 'BELOP',\n  FEILUTBETALINGSTART = 'FEILUTBETALINGSTART',\n  FORSTE_STONADSDAG = 'FORSTONAD',\n}\n\nexport default KoSortering;\n","enum AndreKriterierType {\n  TIL_BESLUTTER = 'TIL_BESLUTTER',\n  REGISTRER_PAPIRSOKNAD = 'PAPIRSOKNAD',\n  UTBETALING_TIL_BRUKER = 'UTBETALING_TIL_BRUKER',\n}\n\nexport default AndreKriterierType;\n","export default \"__VITE_ASSET__e4619b9f__\"","export default \"__VITE_ASSET__c183d8b6__\"","import React, { FunctionComponent, useEffect, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport { useForm } from 'react-hook-form';\nimport { useIntl, FormattedMessage, IntlShape } from 'react-intl';\nimport { Label, BodyShort } from '@navikt/ds-react';\nimport { DDMMYYYY_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Image, FlexContainer, FlexRow, FlexColumn, VerticalSpacer, LabelWithHeader } from '@navikt/ft-ui-komponenter';\nimport { Form, SelectField } from '@navikt/ft-form-hooks';\n\nimport { AlleKodeverk } from '@navikt/fp-types';\nimport { KodeverkType, getKodeverknavnFraKode } from '@navikt/fp-kodeverk';\n\nimport gruppeHoverUrl from '../../images/gruppe_hover.svg';\nimport gruppeUrl from '../../images/gruppe.svg';\nimport Saksliste from '../../typer/sakslisteTsType';\nimport Saksbehandler from '../../typer/saksbehandlerTsType';\nimport { RestApiPathsKeys, RestApiGlobalStatePathsKeys, restApiHooks } from '../../data/fplosSaksbehandlerRestApi';\n\nimport styles from './sakslisteVelgerForm.module.css';\n\ninterface OwnProps {\n  sakslister: Saksliste[];\n  setValgtSakslisteId: (sakslisteId: number) => void;\n  fetchAntallOppgaver: (data: { sakslisteId: number }) => void;\n  getValueFromLocalStorage: (key: string) => string | undefined;\n  setValueInLocalStorage: (key: string, value: string) => void;\n  removeValueFromLocalStorage: (key: string) => void;\n}\n\nconst getDefaultSaksliste = (\n  sorterteSakslister: Saksliste[],\n  getValueFromLocalStorage: (key: string) => string | undefined,\n  removeValueFromLocalStorage: (key: string) => void,\n) => {\n  const lagretSakslisteId = getValueFromLocalStorage('sakslisteId');\n  if (lagretSakslisteId) {\n    if (sorterteSakslister.some(s => `${s.sakslisteId}` === lagretSakslisteId)) {\n      return parseInt(lagretSakslisteId, 10);\n    }\n    removeValueFromLocalStorage('sakslisteId');\n  }\n\n  return sorterteSakslister.length > 0 ? sorterteSakslister[0].sakslisteId : undefined;\n};\n\nconst getInitialValues = (\n  sorterteSakslister: Saksliste[],\n  getValueFromLocalStorage: (key: string) => string | undefined,\n  removeValueFromLocalStorage: (key: string) => void,\n) => {\n  if (sorterteSakslister.length === 0) {\n    return {\n      sakslisteId: undefined,\n    };\n  }\n  const defaultSaksliste = getDefaultSaksliste(\n    sorterteSakslister,\n    getValueFromLocalStorage,\n    removeValueFromLocalStorage,\n  );\n  return {\n    sakslisteId: defaultSaksliste ? `${defaultSaksliste}` : undefined,\n  };\n};\n\nconst getValgtSaksliste = (sakslister: Saksliste[], sakslisteId: string) =>\n  sakslister.find(s => sakslisteId === `${s.sakslisteId}`);\n\nconst getStonadstyper = (intl: IntlShape, alleKodeverk: AlleKodeverk, saksliste?: Saksliste) =>\n  saksliste && saksliste.fagsakYtelseTyper.length > 0\n    ? saksliste.fagsakYtelseTyper.map(type => getKodeverknavnFraKode(alleKodeverk, KodeverkType.FAGSAK_YTELSE, type))\n    : [intl.formatMessage({ id: 'SakslisteVelgerForm.Alle' })];\n\nconst getBehandlingstyper = (intl: IntlShape, alleKodeverk: AlleKodeverk, saksliste?: Saksliste) =>\n  saksliste && saksliste.behandlingTyper.length > 0\n    ? saksliste.behandlingTyper.map(type => getKodeverknavnFraKode(alleKodeverk, KodeverkType.BEHANDLING_TYPE, type))\n    : [intl.formatMessage({ id: 'SakslisteVelgerForm.Alle' })];\n\nconst getAndreKriterier = (intl: IntlShape, alleKodeverk: AlleKodeverk, saksliste?: Saksliste) => {\n  if (saksliste && saksliste.andreKriterier.length > 0) {\n    return saksliste.andreKriterier.map(ak =>\n      ak.inkluder\n        ? getKodeverknavnFraKode(alleKodeverk, 'AndreKriterierType', ak.andreKriterierType)\n        : intl.formatMessage(\n            { id: 'SakslisteVelgerForm.Uten' },\n            {\n              kriterie: getKodeverknavnFraKode(alleKodeverk, 'AndreKriterierType', ak.andreKriterierType),\n            },\n          ),\n    );\n  }\n  return [intl.formatMessage({ id: 'SakslisteVelgerForm.Alle' })];\n};\n\ntype TextValues = {\n  navn: string;\n  fomDato?: string;\n  tomDato?: string;\n  br: JSX.Element;\n};\n\nconst getNavn = (values: TextValues, intl: IntlShape) => {\n  if (!values.fomDato) {\n    return intl.formatMessage({ id: 'SakslisteVelgerForm.SorteringsinfoTom' }, values) as string;\n  }\n  if (!values.tomDato) {\n    return intl.formatMessage({ id: 'SakslisteVelgerForm.SorteringsinfoFom' }, values) as string;\n  }\n  return intl.formatMessage({ id: 'SakslisteVelgerForm.Sorteringsinfo' }, values) as string;\n};\n\nconst getSorteringsnavnForPeriode = (\n  intl: IntlShape,\n  alleKodeverk: AlleKodeverk,\n  sorteringType: string,\n  fomDato?: string,\n  tomDato?: string,\n) => {\n  if (!fomDato && !tomDato) {\n    return getKodeverknavnFraKode(alleKodeverk, 'KøSortering', sorteringType);\n  }\n\n  const values = {\n    navn: getKodeverknavnFraKode(alleKodeverk, 'KøSortering', sorteringType),\n    fomDato: fomDato ? dayjs(fomDato).format(DDMMYYYY_DATE_FORMAT) : undefined,\n    tomDato: tomDato ? dayjs(tomDato).format(DDMMYYYY_DATE_FORMAT) : undefined,\n    br: <br />,\n  };\n  return getNavn(values, intl);\n};\n\nconst getSorteringsnavnForDynamiskPeriode = (\n  intl: IntlShape,\n  alleKodeverk: AlleKodeverk,\n  sorteringType: string,\n  fra?: number,\n  til?: number,\n) => {\n  if (!fra && !til) {\n    return getKodeverknavnFraKode(alleKodeverk, 'KøSortering', sorteringType);\n  }\n  const values = {\n    navn: getKodeverknavnFraKode(alleKodeverk, 'KøSortering', sorteringType),\n    fomDato: fra ? dayjs().add(fra, 'days').format(DDMMYYYY_DATE_FORMAT) : undefined,\n    tomDato: til ? dayjs().add(til, 'days').format(DDMMYYYY_DATE_FORMAT) : undefined,\n    br: <br />,\n  };\n  return getNavn(values, intl);\n};\n\nconst getSorteringsnavn = (intl: IntlShape, alleKodeverk: AlleKodeverk, saksliste?: Saksliste): string => {\n  if (!saksliste || !saksliste.sortering) {\n    return '';\n  }\n\n  const { erDynamiskPeriode, sorteringType, fra, til, fomDato, tomDato } = saksliste.sortering;\n\n  return erDynamiskPeriode\n    ? getSorteringsnavnForDynamiskPeriode(intl, alleKodeverk, sorteringType, fra, til)\n    : getSorteringsnavnForPeriode(intl, alleKodeverk, sorteringType, fomDato, tomDato);\n};\n\nconst createTooltip = (saksbehandlere?: Saksbehandler[]) => {\n  if (!saksbehandlere || saksbehandlere.length === 0) {\n    return undefined;\n  }\n\n  return (\n    <div>\n      <Label size=\"small\">\n        <FormattedMessage id=\"SakslisteVelgerForm.SaksbehandlerToolip\" />\n      </Label>\n      {saksbehandlere\n        .map(s => s.navn)\n        .sort((n1, n2) => n1.localeCompare(n2))\n        .map(navn => (\n          <BodyShort size=\"small\" key={navn}>\n            {navn}\n          </BodyShort>\n        ))}\n    </div>\n  );\n};\n\ntype FormValues = {\n  sakslisteId: string | undefined;\n};\n\n/**\n * SakslisteVelgerForm\n *\n */\nconst SakslisteVelgerForm: FunctionComponent<OwnProps> = ({\n  sakslister,\n  setValgtSakslisteId,\n  fetchAntallOppgaver,\n  getValueFromLocalStorage,\n  setValueInLocalStorage,\n  removeValueFromLocalStorage,\n}) => {\n  const intl = useIntl();\n\n  const sorterteSakslister = [...sakslister].sort((saksliste1, saksliste2) =>\n    saksliste1.navn.localeCompare(saksliste2.navn),\n  );\n\n  const { data: saksbehandlere, startRequest: fetchSaksbehandlere } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.SAKSLISTE_SAKSBEHANDLERE,\n  );\n  const alleKodeverk = restApiHooks.useGlobalStateRestApiData(RestApiGlobalStatePathsKeys.KODEVERK_LOS);\n\n  const tooltip = useMemo(() => createTooltip(saksbehandlere), [saksbehandlere]);\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: getInitialValues(sorterteSakslister, getValueFromLocalStorage, removeValueFromLocalStorage),\n  });\n\n  const sakslisteId = formMethods.watch('sakslisteId');\n\n  useEffect(() => {\n    if (sakslisteId) {\n      setValueInLocalStorage('sakslisteId', sakslisteId);\n      const id = parseInt(sakslisteId, 10);\n      setValgtSakslisteId(id);\n      fetchSaksbehandlere({ sakslisteId: id });\n      fetchAntallOppgaver({ sakslisteId: id });\n    }\n  }, [sakslisteId]);\n\n  return (\n    <Form<FormValues> formMethods={formMethods}>\n      <Label size=\"small\">\n        <FormattedMessage id=\"SakslisteVelgerForm.Utvalgskriterier\" />\n      </Label>\n      <VerticalSpacer eightPx />\n      <FlexContainer>\n        <FlexRow>\n          <FlexColumn className={styles.navnInput}>\n            <SelectField\n              name=\"sakslisteId\"\n              label={intl.formatMessage({ id: 'SakslisteVelgerForm.Saksliste' })}\n              selectValues={sorterteSakslister.map(saksliste => (\n                <option key={saksliste.sakslisteId} value={`${saksliste.sakslisteId}`}>\n                  {saksliste.navn}\n                </option>\n              ))}\n            />\n          </FlexColumn>\n          {sakslisteId && (\n            <>\n              <FlexColumn>\n                <div className={styles.saksbehandlerIkon} />\n                <Image\n                  alt={intl.formatMessage({ id: 'SakslisteVelgerForm.Saksbehandlere' })}\n                  src={gruppeUrl}\n                  srcHover={gruppeHoverUrl}\n                  tooltip={tooltip}\n                />\n              </FlexColumn>\n              <FlexColumn className={styles.marginFilters}>\n                <LabelWithHeader\n                  header={intl.formatMessage({ id: 'SakslisteVelgerForm.Stonadstype' })}\n                  texts={getStonadstyper(intl, alleKodeverk, getValgtSaksliste(sorterteSakslister, sakslisteId))}\n                />\n              </FlexColumn>\n              <FlexColumn className={styles.marginFilters}>\n                <LabelWithHeader\n                  header={intl.formatMessage({ id: 'SakslisteVelgerForm.Behandlingstype' })}\n                  texts={getBehandlingstyper(intl, alleKodeverk, getValgtSaksliste(sorterteSakslister, sakslisteId))}\n                />\n              </FlexColumn>\n              <FlexColumn className={styles.marginFilters}>\n                <LabelWithHeader\n                  header={intl.formatMessage({ id: 'SakslisteVelgerForm.AndreKriterier' })}\n                  texts={getAndreKriterier(intl, alleKodeverk, getValgtSaksliste(sorterteSakslister, sakslisteId))}\n                />\n              </FlexColumn>\n              <FlexColumn className={styles.marginFilters}>\n                <LabelWithHeader\n                  header={intl.formatMessage({ id: 'SakslisteVelgerForm.Sortering' })}\n                  texts={[getSorteringsnavn(intl, alleKodeverk, getValgtSaksliste(sorterteSakslister, sakslisteId))]}\n                />\n              </FlexColumn>\n            </>\n          )}\n        </FlexRow>\n      </FlexContainer>\n    </Form>\n  );\n};\n\nexport default SakslisteVelgerForm;\n"],"names":["KoSortering","AndreKriterierType","gruppeHoverUrl","gruppeUrl","getDefaultSaksliste","sorterteSakslister","getValueFromLocalStorage","removeValueFromLocalStorage","lagretSakslisteId","s","getInitialValues","defaultSaksliste","getValgtSaksliste","sakslister","sakslisteId","getStonadstyper","intl","alleKodeverk","saksliste","type","getKodeverknavnFraKode","KodeverkType","getBehandlingstyper","getAndreKriterier","ak","getNavn","values","getSorteringsnavnForPeriode","sorteringType","fomDato","tomDato","dayjs","DDMMYYYY_DATE_FORMAT","jsx","getSorteringsnavnForDynamiskPeriode","fra","til","getSorteringsnavn","erDynamiskPeriode","createTooltip","saksbehandlere","jsxs","Label","FormattedMessage","n1","n2","navn","BodyShort","SakslisteVelgerForm","setValgtSakslisteId","fetchAntallOppgaver","setValueInLocalStorage","useIntl","saksliste1","saksliste2","fetchSaksbehandlere","restApiHooks","RestApiPathsKeys","RestApiGlobalStatePathsKeys","tooltip","useMemo","formMethods","useForm","useEffect","id","Form","VerticalSpacer","FlexContainer","FlexRow","FlexColumn","styles","SelectField","Fragment","Image","LabelWithHeader","SakslisteVelgerForm$1"],"mappings":"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"}