{"version":3,"file":"OppgaverTabell-e03e7995.js","sources":["../../src/images/ic-menu-18px_blue.svg","../../src/images/ic-menu-18px_black.svg","../../src/images/bubbletext.svg","../../src/images/bubbletext_filled.svg","../../src/behandlingskoer/components/OppgaverTabell.tsx"],"sourcesContent":["export default \"__VITE_ASSET__31866bd9__\"","export default \"__VITE_ASSET__1256f409__\"","export default \"__VITE_ASSET__a5515a08__\"","export default \"__VITE_ASSET__47ebe705__\"","import React, { useState, useRef, FunctionComponent, useCallback, useMemo, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { ChevronRightIcon } from '@navikt/aksel-icons';\nimport { getDateAndTime } from '@navikt/ft-utils';\nimport { Image, VerticalSpacer, Table, TableRow, TableColumn, DateLabel } from '@navikt/ft-ui-komponenter';\nimport { KodeverkType, getKodeverknavnFraKode } from '@navikt/fp-kodeverk';\nimport { TimeoutError } from '@navikt/fp-rest-api';\nimport { Oppgave, OppgaveStatus } from '@navikt/fp-los-felles';\n\nimport menuIconBlueUrl from '../../images/ic-menu-18px_blue.svg';\nimport menuIconBlackUrl from '../../images/ic-menu-18px_black.svg';\nimport bubbletextUrl from '../../images/bubbletext.svg';\nimport bubbletextFilledUrl from '../../images/bubbletext_filled.svg';\nimport BehandlingPollingTimoutModal from './BehandlingPollingTimoutModal';\nimport OppgaveHandlingerMenu from './menu/OppgaveHandlingerMenu';\nimport {\n  requestApi,\n  RestApiPathsKeys,\n  RestApiGlobalStatePathsKeys,\n  restApiHooks,\n} from '../../data/fplosSaksbehandlerRestApi';\n\nimport styles from './oppgaverTabell.module.css';\n\nconst headerTextCodes = [\n  'OppgaverTabell.Soker',\n  'OppgaverTabell.Behandlingstype',\n  'OppgaverTabell.BehandlingOpprettet',\n  'OppgaverTabell.FristForBehandling',\n  'EMPTY_1',\n  'EMPTY_2',\n];\n\nconst EMPTY_ARRAY: Oppgave[] = [];\n\ntype OppgaveMedReservertIndikator = Oppgave & { underBehandling?: boolean };\n\nconst slaSammenOgMarkerReserverte = (\n  reserverteOppgaver: Oppgave[],\n  oppgaverTilBehandling: Oppgave[],\n): OppgaveMedReservertIndikator[] => {\n  const markedAsUnderBehandling = reserverteOppgaver\n    .filter(reservertOppgave => !oppgaverTilBehandling.some(oppgave => oppgave.id === reservertOppgave.id))\n    .map(f => ({\n      ...f,\n      underBehandling: true,\n    }));\n  const notMarked = oppgaverTilBehandling.map(f => ({\n    ...f,\n    underBehandling: false,\n  }));\n\n  return markedAsUnderBehandling.concat(notMarked.slice(0, 3));\n};\n\nconst getToggleMenuEvent = (oppgave: OppgaveMedReservertIndikator, toggleMenu: (valgtOppgave: Oppgave) => void) =>\n  oppgave.underBehandling ? () => toggleMenu(oppgave) : undefined;\n\ninterface OwnProps {\n  reserverOppgave: (oppgave: Oppgave) => void;\n  antallOppgaver?: number;\n  valgtSakslisteId: number;\n  doPolling?: boolean;\n}\n\n/**\n * OppgaverTabell\n */\nconst OppgaverTabell: FunctionComponent<OwnProps> = ({\n  reserverOppgave,\n  antallOppgaver = 0,\n  valgtSakslisteId,\n  doPolling = true,\n}) => {\n  const intl = useIntl();\n\n  const [showMenu, setShowMenu] = useState(false);\n  const [valgtOppgaveId, setValgtOppgaveId] = useState<number>();\n  const [offset, setOffset] = useState({\n    left: 0,\n    top: 0,\n  });\n\n  const alleKodeverk = restApiHooks.useGlobalStateRestApiData(RestApiGlobalStatePathsKeys.KODEVERK_LOS);\n\n  const { startRequest: forlengOppgavereservasjon } = restApiHooks.useRestApiRunner(\n    RestApiPathsKeys.FORLENG_OPPGAVERESERVASJON,\n  );\n\n  const { startRequest: hentReserverteOppgaver, data: reserverteOppgaver = EMPTY_ARRAY } =\n    restApiHooks.useRestApiRunner(RestApiPathsKeys.RESERVERTE_OPPGAVER);\n\n  const {\n    startRequest: hentOppgaverTilBehandling,\n    data: oppgaverTilBehandling = EMPTY_ARRAY,\n    error: hentOppgaverTilBehandlingError,\n  } = restApiHooks.useRestApiRunner(RestApiPathsKeys.OPPGAVER_TIL_BEHANDLING);\n\n  const fetchSakslisteOppgaverPolling = (keepData: boolean, sakslisteId: number, oppgaveIder?: string) => {\n    hentReserverteOppgaver(undefined, true);\n    hentOppgaverTilBehandling(oppgaveIder ? { sakslisteId, oppgaveIder } : { sakslisteId }, keepData)\n      .then(response =>\n        !response || typeof response === 'string' || !doPolling\n          ? Promise.resolve()\n          : fetchSakslisteOppgaverPolling(true, sakslisteId, response.map(o => o.id).join(',')),\n      )\n      .catch(() => undefined);\n  };\n\n  useEffect(() => {\n    requestApi.cancelRequest(RestApiPathsKeys.OPPGAVER_TIL_BEHANDLING.name);\n    fetchSakslisteOppgaverPolling(false, valgtSakslisteId);\n  }, [valgtSakslisteId]);\n\n  useEffect(\n    () => () => {\n      requestApi.cancelRequest(RestApiPathsKeys.OPPGAVER_TIL_BEHANDLING.name);\n    },\n    [],\n  );\n\n  const forlengOppgaveReservasjonFn = useCallback(\n    (oppgaveId: number): Promise<any> =>\n      forlengOppgavereservasjon({ oppgaveId }).then(() => hentReserverteOppgaver(undefined, true)),\n    [],\n  );\n\n  const ref = useRef<Record<number, HTMLDivElement | null>>({});\n\n  const goToFagsak = useCallback(\n    (event: React.MouseEvent | React.KeyboardEvent, _id?: number, oppgave?: Oppgave) => {\n      if (\n        ref.current &&\n        // @ts-ignore Fiks\n        Object.keys(ref.current).some(key => ref.current[key] && ref.current[key].contains(event.target))\n      ) {\n        return;\n      }\n      if (oppgave) {\n        reserverOppgave(oppgave);\n      }\n    },\n    [ref.current],\n  );\n\n  const toggleMenu = useCallback(\n    (valgtOppgave: Oppgave) => {\n      const newOffset = ref.current[valgtOppgave.id]?.getBoundingClientRect();\n      setShowMenu(!showMenu);\n      setValgtOppgaveId(valgtOppgave.id);\n      if (newOffset) {\n        setOffset({ top: newOffset.top, left: newOffset.left });\n      }\n    },\n    [ref.current, showMenu],\n  );\n\n  const createTooltip = useCallback((oppgaveStatus: OppgaveStatus) => {\n    const { flyttetReservasjon } = oppgaveStatus;\n    if (!flyttetReservasjon) {\n      return undefined;\n    }\n    const datoOgTid = getDateAndTime(flyttetReservasjon.tidspunkt);\n    const textValues = {\n      dato: datoOgTid?.date,\n      tid: datoOgTid?.time,\n      uid: flyttetReservasjon.uid,\n      navn: flyttetReservasjon.navn,\n      beskrivelse: flyttetReservasjon.begrunnelse,\n      br: <br />,\n    };\n    return (\n      <BodyShort size=\"small\">\n        <FormattedMessage id=\"OppgaverTabell.OverfortReservasjonTooltip\" values={textValues} />\n      </BodyShort>\n    );\n  }, []);\n\n  const alleOppgaver = useMemo(\n    () => slaSammenOgMarkerReserverte(reserverteOppgaver, oppgaverTilBehandling),\n    [reserverteOppgaver, oppgaverTilBehandling],\n  );\n  const valgtOppgave = reserverteOppgaver.find(o => o.id === valgtOppgaveId);\n\n  return (\n    <>\n      {hentOppgaverTilBehandlingError instanceof TimeoutError && <BehandlingPollingTimoutModal />}\n      <Label size=\"small\">\n        <FormattedMessage id=\"OppgaverTabell.DineNesteSaker\" values={{ antall: antallOppgaver }} />\n      </Label>\n      {alleOppgaver.length === 0 && (\n        <>\n          <VerticalSpacer eightPx />\n          <BodyShort size=\"small\">\n            <FormattedMessage id=\"OppgaverTabell.IngenOppgaver\" />\n          </BodyShort>\n        </>\n      )}\n      {alleOppgaver.length > 0 && (\n        <>\n          <Table headerTextCodes={headerTextCodes}>\n            {alleOppgaver.map(oppgave => (\n              <TableRow<number, Oppgave>\n                key={oppgave.id}\n                onMouseDown={goToFagsak}\n                onKeyDown={goToFagsak}\n                className={oppgave.underBehandling ? styles.isUnderBehandling : undefined}\n                model={oppgave}\n              >\n                <TableColumn>{oppgave.navn ? `${oppgave.navn} ${oppgave.personnummer}` : '<navn>'}</TableColumn>\n                <TableColumn>\n                  {getKodeverknavnFraKode(alleKodeverk, KodeverkType.BEHANDLING_TYPE, oppgave.behandlingstype)}\n                </TableColumn>\n                <TableColumn>\n                  {oppgave.opprettetTidspunkt && <DateLabel dateString={oppgave.opprettetTidspunkt} />}\n                </TableColumn>\n                <TableColumn>\n                  {oppgave.behandlingsfrist && <DateLabel dateString={oppgave.behandlingsfrist} />}\n                </TableColumn>\n                <TableColumn>\n                  {oppgave.status.flyttetReservasjon && (\n                    <Image\n                      src={bubbletextUrl}\n                      srcHover={bubbletextFilledUrl}\n                      alt={intl.formatMessage({ id: 'OppgaverTabell.OverfortReservasjon' })}\n                      tooltip={createTooltip(oppgave.status)}\n                      alignTooltipLeft\n                    />\n                  )}\n                </TableColumn>\n                <TableColumn className={oppgave.underBehandling ? styles.noPadding : undefined}>\n                  {!oppgave.underBehandling && <ChevronRightIcon />}\n                  {oppgave.underBehandling && (\n                    <div\n                      ref={el => {\n                        ref.current = { ...ref.current, [oppgave.id]: el };\n                      }}\n                    >\n                      <Image\n                        className={styles.image}\n                        src={menuIconBlackUrl}\n                        srcHover={menuIconBlueUrl}\n                        alt={intl.formatMessage({ id: 'OppgaverTabell.OppgaveHandlinger' })}\n                        onMouseDown={getToggleMenuEvent(oppgave, toggleMenu)}\n                        onKeyDown={getToggleMenuEvent(oppgave, toggleMenu)}\n                      />\n                    </div>\n                  )}\n                </TableColumn>\n              </TableRow>\n            ))}\n          </Table>\n          {showMenu && valgtOppgaveId && valgtOppgave && (\n            <OppgaveHandlingerMenu\n              imageNode={ref.current[valgtOppgaveId]}\n              toggleMenu={toggleMenu}\n              offset={offset}\n              oppgave={valgtOppgave}\n              forlengOppgaveReservasjon={forlengOppgaveReservasjonFn}\n              hentReserverteOppgaver={hentReserverteOppgaver}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default OppgaverTabell;\n"],"names":["menuIconBlueUrl","menuIconBlackUrl","bubbletextUrl","bubbletextFilledUrl","headerTextCodes","EMPTY_ARRAY","slaSammenOgMarkerReserverte","reserverteOppgaver","oppgaverTilBehandling","markedAsUnderBehandling","reservertOppgave","oppgave","f","notMarked","getToggleMenuEvent","toggleMenu","OppgaverTabell","reserverOppgave","antallOppgaver","valgtSakslisteId","doPolling","intl","useIntl","showMenu","setShowMenu","useState","valgtOppgaveId","setValgtOppgaveId","offset","setOffset","alleKodeverk","restApiHooks","RestApiGlobalStatePathsKeys","forlengOppgavereservasjon","RestApiPathsKeys","hentReserverteOppgaver","hentOppgaverTilBehandling","hentOppgaverTilBehandlingError","fetchSakslisteOppgaverPolling","keepData","sakslisteId","oppgaveIder","response","o","useEffect","requestApi","forlengOppgaveReservasjonFn","useCallback","oppgaveId","ref","useRef","goToFagsak","event","_id","key","valgtOppgave2","newOffset","_a","createTooltip","oppgaveStatus","flyttetReservasjon","datoOgTid","getDateAndTime","textValues","jsx","BodyShort","FormattedMessage","alleOppgaver","useMemo","valgtOppgave","jsxs","Fragment","TimeoutError","BehandlingPollingTimoutModal","Label","VerticalSpacer","Table","TableRow","styles","TableColumn","getKodeverknavnFraKode","KodeverkType","DateLabel","Image","ChevronRightIcon","el","OppgaveHandlingerMenu","OppgaverTabell$1"],"mappings":"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"}