{"version":3,"file":"NyeOgFerdigstilteOppgaverForIdagPanel-af35b8e8.js","sources":["../../src/saksstotte/nokkeltall/components/nyeOgFerdigstilteOppgaverForIdag/NyeOgFerdigstilteOppgaverForIdagGraf.tsx","../../src/saksstotte/nokkeltall/components/nyeOgFerdigstilteOppgaverForIdag/NyeOgFerdigstilteOppgaverForIdagPanel.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Panel } from '@navikt/ds-react';\nimport { KodeverkMedNavn } from '@navikt/ft-types';\nimport { BehandlingType } from '@navikt/ft-kodeverk';\nimport { ReactECharts } from '@navikt/fp-los-felles';\n\nimport NyeOgFerdigstilteOppgaver from '../../../../typer/nyeOgFerdigstilteOppgaverTsType';\n\nconst behandlingstypeOrder = [\n  BehandlingType.TILBAKEKREVING_REVURDERING,\n  BehandlingType.TILBAKEKREVING,\n  BehandlingType.DOKUMENTINNSYN,\n  BehandlingType.KLAGE,\n  BehandlingType.REVURDERING,\n  BehandlingType.FORSTEGANGSSOKNAD,\n];\n\ninterface OwnProps {\n  height: number;\n  behandlingTyper: KodeverkMedNavn[];\n  nyeOgFerdigstilteOppgaver: NyeOgFerdigstilteOppgaver[];\n}\n\n/**\n * NyeOgFerdigstilteOppgaverForIdagGraf\n */\nconst NyeOgFerdigstilteOppgaverForIdagGraf: FunctionComponent<OwnProps> = ({\n  height,\n  nyeOgFerdigstilteOppgaver,\n  behandlingTyper,\n}) => {\n  const intl = useIntl();\n  const behandlingTypeNavnForYAkse = useMemo(\n    () =>\n      behandlingstypeOrder.map(bType => {\n        if (bType === BehandlingType.FORSTEGANGSSOKNAD) {\n          return intl.formatMessage({ id: 'NyeOgFerdigstilteOppgaverForIdagGraf.FÃ¸rstegangsbehandling' });\n        }\n\n        const type = behandlingTyper.find(bt => bt.kode === bType);\n        return type ? type.navn : '';\n      }),\n    [behandlingTyper],\n  );\n\n  const ferdigLabel = intl.formatMessage({ id: 'NyeOgFerdigstilteOppgaverForIdagGraf.Ferdigstilte' });\n  const nyLabel = intl.formatMessage({ id: 'NyeOgFerdigstilteOppgaverForIdagGraf.Nye' });\n\n  const dataFerdigstilte = useMemo(\n    () =>\n      behandlingstypeOrder.map(type => {\n        const oppgave = nyeOgFerdigstilteOppgaver.find(o => o.behandlingType === type);\n        if (oppgave) {\n          return oppgave.antallFerdigstilte;\n        }\n        return 0;\n      }),\n    [nyeOgFerdigstilteOppgaver],\n  );\n  const dataNye = useMemo(\n    () =>\n      behandlingstypeOrder.map(type => {\n        const oppgave = nyeOgFerdigstilteOppgaver.find(o => o.behandlingType === type);\n        if (oppgave) {\n          return oppgave.antallNye;\n        }\n        return 0;\n      }),\n    [nyeOgFerdigstilteOppgaver],\n  );\n\n  return (\n    <Panel>\n      <ReactECharts\n        height={height}\n        option={{\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n              type: 'shadow',\n            },\n          },\n          legend: {\n            data: [ferdigLabel, nyLabel],\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true,\n          },\n          xAxis: {\n            type: 'value',\n            boundaryGap: [0, 0.01],\n          },\n          yAxis: {\n            type: 'category',\n            data: behandlingTypeNavnForYAkse,\n          },\n          series: [\n            {\n              name: ferdigLabel,\n              type: 'bar',\n              data: dataFerdigstilte,\n            },\n            {\n              name: nyLabel,\n              type: 'bar',\n              data: dataNye,\n            },\n          ],\n          color: ['#38a161', '#337c9b'],\n        }}\n      />\n    </Panel>\n  );\n};\n\nexport default NyeOgFerdigstilteOppgaverForIdagGraf;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport dayjs from 'dayjs';\nimport { FormattedMessage } from 'react-intl';\nimport { Heading, Label } from '@navikt/ds-react';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { KodeverkType } from '@navikt/ft-kodeverk';\n\nimport NyeOgFerdigstilteOppgaver from '../../../../typer/nyeOgFerdigstilteOppgaverTsType';\nimport useLosKodeverk from '../../../../data/useLosKodeverk';\nimport NyeOgFerdigstilteOppgaverForIdagGraf from './NyeOgFerdigstilteOppgaverForIdagGraf';\n\nexport const getNyeOgFerdigstilteForIDag = (\n  nyeOgFerdigstilte: NyeOgFerdigstilteOppgaver[] = [],\n): NyeOgFerdigstilteOppgaver[] => {\n  const iDag = dayjs();\n  return nyeOgFerdigstilte.filter(oppgave => iDag.isSame(dayjs(oppgave.dato, ISO_DATE_FORMAT), 'day'));\n};\n\ninterface OwnProps {\n  height: number;\n  nyeOgFerdigstilteOppgaver?: NyeOgFerdigstilteOppgaver[];\n}\n\n/**\n * NyeOgFerdigstilteOppgaverForIdagPanel.\n */\nconst NyeOgFerdigstilteOppgaverForIdagPanel: FunctionComponent<OwnProps> = ({ height, nyeOgFerdigstilteOppgaver }) => {\n  const behandlingTyper = useLosKodeverk(KodeverkType.BEHANDLING_TYPE);\n\n  const filtrerteNyeOgFerdigstilteOppgaver = useMemo(\n    () => getNyeOgFerdigstilteForIDag(nyeOgFerdigstilteOppgaver),\n    [nyeOgFerdigstilteOppgaver],\n  );\n\n  return (\n    <>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"NyeOgFerdigstilteOppgaverForIdagPanel.NyeOgFerdigstilte\" />\n      </Heading>\n      <VerticalSpacer eightPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"NyeOgFerdigstilteOppgaverForIdagPanel.IDag\" />\n      </Label>\n      <NyeOgFerdigstilteOppgaverForIdagGraf\n        height={height}\n        nyeOgFerdigstilteOppgaver={filtrerteNyeOgFerdigstilteOppgaver}\n        behandlingTyper={behandlingTyper}\n      />\n    </>\n  );\n};\n\nexport default NyeOgFerdigstilteOppgaverForIdagPanel;\n"],"names":["behandlingstypeOrder","BehandlingType","NyeOgFerdigstilteOppgaverForIdagGraf","height","nyeOgFerdigstilteOppgaver","behandlingTyper","intl","useIntl","behandlingTypeNavnForYAkse","useMemo","bType","type","bt","ferdigLabel","nyLabel","dataFerdigstilte","oppgave","o","dataNye","jsx","Panel","ReactECharts","getNyeOgFerdigstilteForIDag","nyeOgFerdigstilte","iDag","dayjs","ISO_DATE_FORMAT","NyeOgFerdigstilteOppgaverForIdagPanel","useLosKodeverk","KodeverkType","filtrerteNyeOgFerdigstilteOppgaver","jsxs","Fragment","Heading","FormattedMessage","VerticalSpacer","Label","NyeOgFerdigstilteOppgaverForIdagPanel$1"],"mappings":"2VASA,MAAAA,EAAA,CAA6BC,EAAA,2BACZA,EAAA,eACAA,EAAA,eACAA,EAAA,MACAA,EAAA,YACAA,EAAA,iBAEjB,EAWAC,EAAA,CAAA,CAA2E,OAAAC,EACzE,0BAAAC,EACA,gBAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,IACAC,EAAAC,EAAA,QAAmC,IAAAT,EAAA,IAAAU,GAAA,CAG7B,GAAAA,IAAAT,EAAA,kBACE,OAAAK,EAAA,cAAA,CAAA,GAAA,4DAAA,CAAA,EAGF,MAAAK,EAAAN,EAAA,KAAAO,GAAAA,EAAA,OAAAF,CAAA,EACA,OAAAC,EAAAA,EAAA,KAAA,EAA0B,CAAA,EAC3B,CAAAN,CAAA,CACa,EAGlBQ,EAAAP,EAAA,cAAA,CAAA,GAAA,mDAAA,CAAA,EACAQ,EAAAR,EAAA,cAAA,CAAA,GAAA,0CAAA,CAAA,EAEAS,EAAAN,EAAA,QAAyB,IAAAT,EAAA,IAAAW,GAAA,CAGnB,MAAAK,EAAAZ,EAAA,KAAAa,GAAAA,EAAA,iBAAAN,CAAA,EACA,OAAAK,EACEA,EAAA,mBAEF,CAAO,CAAA,EACR,CAAAZ,CAAA,CACuB,EAE5Bc,EAAAT,EAAA,QAAgB,IAAAT,EAAA,IAAAW,GAAA,CAGV,MAAAK,EAAAZ,EAAA,KAAAa,GAAAA,EAAA,iBAAAN,CAAA,EACA,OAAAK,EACEA,EAAA,UAEF,CAAO,CAAA,EACR,CAAAZ,CAAA,CACuB,EAG5B,OAAAe,MAAAC,EAAA,CAAA,SAAAD,EAAA,IAEIE,EAAC,CAAA,OAAAlB,EACC,OAAA,CACQ,QAAA,CACG,QAAA,OACE,YAAA,CACI,KAAA,QACL,CACR,EACF,OAAA,CACQ,KAAA,CAAAU,EAAAC,CAAA,CACqB,EAC7B,KAAA,CACM,KAAA,KACE,MAAA,KACC,OAAA,KACC,aAAA,EACM,EAChB,MAAA,CACO,KAAA,QACC,YAAA,CAAA,EAAA,GAAA,CACe,EACvB,MAAA,CACO,KAAA,WACC,KAAAN,CACA,EACR,OAAA,CACQ,CACN,KAAAK,EACQ,KAAA,MACA,KAAAE,CACA,EACR,CACA,KAAAD,EACQ,KAAA,MACA,KAAAI,CACA,CACR,EACF,MAAA,CAAA,UAAA,SAAA,CAC4B,CAC9B,CAAA,CAAA,CAAA,CAIR,ypBCzGO,MAAAI,EAAA,CAAAC,EAAA,KAAA,CAGL,MAAAC,EAAAC,IACA,OAAAF,EAAA,OAAAP,GAAAQ,EAAA,OAAAC,EAAAT,EAAA,KAAAU,CAAA,EAAA,KAAA,CAAA,CACF,EAUAC,EAAA,CAAA,CAAA,OAAAxB,EAAA,0BAAAC,KAAA,CACE,MAAAC,EAAAuB,EAAAC,EAAA,eAAA,EAEAC,EAAArB,EAAA,QAA2C,IAAAa,EAAAlB,CAAA,EACkB,CAAAA,CAAA,CACjC,EAG5B,OAAA2B,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIb,EAAAA,IAAAc,EAAA,CAAA,KAAA,QAAA,SAAAd,MAAAe,EAAA,CAAA,GAAA,yDAAA,CAAA,CAAA,CAAA,EAEAf,EAAAA,IAAAgB,EAAA,CAAA,QAAA,EAAA,CAAA,EACwBhB,EAAAA,IAAAiB,EAAA,CAAA,KAAA,QAAA,SAAAjB,MAAAe,EAAA,CAAA,GAAA,4CAAA,CAAA,CAAA,CAAA,EAGxBf,EAAA,IACAjB,EAAC,CAAA,OAAAC,EACC,0BAAA2B,EAC2B,gBAAAzB,CAC3B,CAAA,CACF,CAAA,CAAA,CAGN,EAEAgC,EAAAV"}