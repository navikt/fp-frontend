{"version":3,"file":"FodselPapirsoknadIndex.stories-ea9212f8.js","sources":["../../src/fodselPanel/components/TerminFodselDatoPanel.tsx","../../src/fodselPanel/FodselPapirsoknadIndex.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { UseFormGetValues, useFormContext } from 'react-hook-form';\nimport moment from 'moment';\nimport { Alert, Label, Heading } from '@navikt/ds-react';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Datepicker, InputField, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { ArrowBox, BorderBox, VerticalSpacer, FlexColumn, FlexContainer, FlexRow } from '@navikt/ft-ui-komponenter';\nimport {\n  dateBeforeOrEqual,\n  dateBeforeOrEqualToToday,\n  hasValidDate,\n  hasValidInteger,\n  maxValue,\n  minValue,\n  required,\n} from '@navikt/ft-form-validators';\n\nconst validateMinValue1 = minValue(1);\nconst validateMaxValue9 = maxValue(9);\n\nexport type FormValues = {\n  termindato?: string;\n  terminbekreftelseDato?: string;\n  antallBarnFraTerminbekreftelse?: number;\n  foedselsDato?: string;\n  antallBarn?: number;\n  erBarnetFodt?: boolean;\n};\n\nconst getToday = (): moment.Moment => moment().startOf('day');\nconst getEarliestTerminDato = (): moment.Moment => getToday().subtract(3, 'weeks');\nconst getLatestTerminbekreftelseDato = (termindato: string): moment.Moment => {\n  const earliestTerminDato = getEarliestTerminDato();\n  const actualTermindato = termindato ? moment(termindato, ISO_DATE_FORMAT) : undefined;\n  const today = getToday();\n  if (actualTermindato && actualTermindato.isSameOrBefore(today)) {\n    return (actualTermindato.isAfter(earliestTerminDato) ? actualTermindato : earliestTerminDato).subtract(1, 'days');\n  }\n  return today;\n};\n\nconst validateTermin = (getValues: UseFormGetValues<FormValues>) => (terminbekreftelseDato: string) =>\n  dateBeforeOrEqual(getLatestTerminbekreftelseDato(getValues('termindato')))(terminbekreftelseDato);\n\ninterface OwnProps {\n  readOnly: boolean;\n  erForeldrepenger?: boolean;\n}\n\n/*\n * TerminFodselDatoPanel\n *\n * Form som brukes for registrere termin i papir soknad.\n */\nconst TerminFodselDatoPanel: FunctionComponent<OwnProps> = ({ readOnly, erForeldrepenger = false }) => {\n  const intl = useIntl();\n\n  const {\n    watch,\n    getValues,\n    trigger,\n    formState: { isSubmitted },\n  } = useFormContext<FormValues>();\n\n  const erBarnetFodt = watch('erBarnetFodt');\n\n  return (\n    <BorderBox>\n      <Heading size=\"small\">{intl.formatMessage({ id: 'Registrering.TerminOgFodsel' })}</Heading>\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"erBarnetFodt\"\n        label={<FormattedMessage id=\"Registrering.Termin.Fodt\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isHorizontal\n        isTrueOrFalseSelection\n        radios={[\n          {\n            label: <FormattedMessage id=\"Registrering.Fodsel.ErFodt\" />,\n            value: 'true',\n          },\n          {\n            label: <FormattedMessage id=\"Registrering.Fodsel.ErIkkeFodt\" />,\n            value: 'false',\n          },\n        ]}\n      />\n      {erBarnetFodt === false && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={64}>\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Datepicker\n                    name=\"termindato\"\n                    label={intl.formatMessage({ id: 'Registrering.Termindato' })}\n                    isReadOnly={readOnly}\n                    validate={[required, hasValidDate]}\n                    onChange={() => (isSubmitted ? trigger() : undefined)}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <InputField\n                    name=\"antallBarnFraTerminbekreftelse\"\n                    label={intl.formatMessage({ id: 'Registrering.AntallBarn' })}\n                    readOnly={readOnly}\n                    validate={[required, hasValidInteger, validateMinValue1, validateMaxValue9]}\n                  />\n                </FlexColumn>\n              </FlexRow>\n              <VerticalSpacer sixteenPx />\n              <FlexRow>\n                <FlexColumn>\n                  <Datepicker\n                    name=\"terminbekreftelseDato\"\n                    label={intl.formatMessage({ id: 'Registrering.UtstedtDato' })}\n                    isReadOnly={readOnly}\n                    validate={[hasValidDate, validateTermin(getValues)]}\n                  />\n                </FlexColumn>\n              </FlexRow>\n            </FlexContainer>\n          </ArrowBox>\n        </>\n      )}\n      {erBarnetFodt && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={0}>\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Datepicker\n                    name=\"foedselsDato\"\n                    label={intl.formatMessage({ id: 'Registrering.Fodselsdato' })}\n                    isReadOnly={readOnly}\n                    validate={[required, hasValidDate, dateBeforeOrEqualToToday]}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <InputField\n                    name=\"antallBarn\"\n                    label={intl.formatMessage({ id: 'Registrering.AntallBarn' })}\n                    readOnly={readOnly}\n                    validate={[required, hasValidInteger, validateMinValue1, validateMaxValue9]}\n                  />\n                </FlexColumn>\n              </FlexRow>\n              {erForeldrepenger && (\n                <>\n                  <VerticalSpacer sixteenPx />\n                  <Alert size=\"small\" variant=\"info\">\n                    <Label size=\"small\">\n                      <FormattedMessage id=\"Registrering.RettTilPrematuruker\" />\n                    </Label>\n                  </Alert>\n                  <VerticalSpacer sixteenPx />\n                  <FlexRow>\n                    <FlexColumn>\n                      <Datepicker\n                        name=\"termindato\"\n                        label={intl.formatMessage({ id: 'Registrering.Termindato' })}\n                        isReadOnly={readOnly}\n                        validate={[hasValidDate]}\n                      />\n                    </FlexColumn>\n                    <FlexColumn>\n                      <Datepicker\n                        name=\"terminbekreftelseDato\"\n                        label={intl.formatMessage({ id: 'Registrering.UtstedtDato' })}\n                        isReadOnly={readOnly}\n                        validate={[hasValidDate]}\n                      />\n                    </FlexColumn>\n                  </FlexRow>\n                </>\n              )}\n            </FlexContainer>\n          </ArrowBox>\n        </>\n      )}\n    </BorderBox>\n  );\n};\n\nexport default TerminFodselDatoPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport TerminFodselDatoPanel from './components/TerminFodselDatoPanel';\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  readOnly: boolean;\n  erForeldrepenger?: boolean;\n}\n\nconst FodselPapirsoknadIndex: FunctionComponent<OwnProps> = ({ readOnly, erForeldrepenger }) => (\n  <RawIntlProvider value={intl}>\n    <TerminFodselDatoPanel readOnly={readOnly} erForeldrepenger={erForeldrepenger} />\n  </RawIntlProvider>\n);\n\nexport default FodselPapirsoknadIndex;\n"],"names":["validateMinValue1","minValue","validateMaxValue9","maxValue","getToday","moment","getEarliestTerminDato","getLatestTerminbekreftelseDato","termindato","earliestTerminDato","actualTermindato","ISO_DATE_FORMAT","today","validateTermin","getValues","terminbekreftelseDato","dateBeforeOrEqual","TerminFodselDatoPanel","readOnly","erForeldrepenger","intl","useIntl","watch","trigger","isSubmitted","useFormContext","erBarnetFodt","jsxs","BorderBox","jsx","Heading","VerticalSpacer","RadioGroupPanel","FormattedMessage","required","Fragment","ArrowBox","FlexContainer","FlexRow","FlexColumn","Datepicker","hasValidDate","InputField","hasValidInteger","dateBeforeOrEqualToToday","Alert","Label","createIntl","messages","FodselPapirsoknadIndex","RawIntlProvider","FodselPapirsoknadIndex$1"],"mappings":"mhBAkBA,MAAAA,EAAAC,EAAA,CAAA,EACAC,EAAAC,EAAA,CAAA,EAWAC,EAAA,IAAAC,EAAA,EAAA,QAAA,KAAA,EACAC,GAAA,IAAAF,EAAA,EAAA,SAAA,EAAA,OAAA,EACAG,GAAAC,GAAA,CACE,MAAAC,EAAAH,KACAI,EAAAF,EAAAH,EAAAG,EAAAG,CAAA,EAAA,OACAC,EAAAR,IACA,OAAAM,GAAAA,EAAA,eAAAE,CAAA,GACEF,EAAA,QAAAD,CAAA,EAAAC,EAAAD,GAAA,SAAA,EAAA,MAAA,EAEFG,CACF,EAEAC,GAAAC,GAAAC,GAAAC,EAAAT,GAAAO,EAAA,YAAA,CAAA,CAAA,EAAAC,CAAA,EAaAE,EAAA,CAAA,CAAA,SAAAC,EAAA,iBAAAC,EAAA,EAAA,IAAA,CACE,MAAAC,EAAAC,IAEA,CAAM,MAAAC,EACJ,UAAAR,EACA,QAAAS,EACA,UAAA,CAAA,YAAAC,CAAA,CACyB,EAAAC,EAAA,EAG3BC,EAAAJ,EAAA,cAAA,EAEA,OAAAK,EAAA,KAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAA,IAAAC,EAAA,CAAA,KAAA,QAAA,SAAAV,EAAA,cAAA,CAAA,GAAA,6BAAA,CAAA,CAAA,CAAA,EAAiFS,EAAAA,IAAAE,EAAA,CAAA,UAAA,EAAA,CAAA,EACvDF,EAAA,IAC1BG,EAAC,CAAA,KAAA,eACM,MAAAH,EAAAA,IAAAI,EAAA,CAAA,GAAA,0BAAA,CAAA,EACkD,SAAA,CAAAC,CAAA,EACpC,WAAAhB,EACP,aAAA,GACA,uBAAA,GACU,OAAA,CACd,CACN,MAAAW,EAAAA,IAAAI,EAAA,CAAA,GAAA,4BAAA,CAAA,EAC2D,MAAA,MAClD,EACT,CACA,MAAAJ,EAAAA,IAAAI,EAAA,CAAA,GAAA,gCAAA,CAAA,EAC+D,MAAA,OACtD,CACT,CACF,CAAA,EACFP,IAAA,IAAAC,EAAAA,KAAAQ,EAAA,SAAA,CAAA,SAAA,CAGIN,EAAAA,IAAAE,EAAA,CAAA,QAAA,EAAA,CAAA,EAAwBF,MAAAO,EAAA,CAAA,YAAA,GAAA,SAAAT,EAAA,KAAAU,EAAA,CAAA,SAAA,CAGpBV,OAAAW,EAAA,CAAA,SAAA,CACET,MAAAU,EAAA,CAAA,SAAAV,EAAA,IACEW,EAAC,CAAA,KAAA,aACM,MAAApB,EAAA,cAAA,CAAA,GAAA,yBAAA,CAAA,EACsD,WAAAF,EAC/C,SAAA,CAAAgB,EAAAO,CAAA,EACqB,SAAA,IAAAjB,EAAAD,EAAA,EAAA,MACU,CAAA,EAAA,EAE/CM,MAAAU,EAAA,CAAA,SAAAV,EAAA,IAEEa,EAAC,CAAA,KAAA,iCACM,MAAAtB,EAAA,cAAA,CAAA,GAAA,yBAAA,CAAA,EACsD,SAAAF,EAC3D,SAAA,CAAAgB,EAAAS,EAAA3C,EAAAE,CAAA,CAC0E,CAAA,EAAA,CAE9E,EAAA,EACF2B,EAAAA,IAAAE,EAAA,CAAA,UAAA,EAAA,CAAA,EAC0BF,EAAA,IAAAS,EAAA,CAAA,SAAAT,EAAA,IAAAU,EAAA,CAAA,SAAAV,EAAA,IAGtBW,EAAC,CAAA,KAAA,wBACM,MAAApB,EAAA,cAAA,CAAA,GAAA,0BAAA,CAAA,EACuD,WAAAF,EAChD,SAAA,CAAAuB,EAAA5B,GAAAC,CAAA,CAAA,CACsC,CAAA,CAAA,CAAA,CAAA,CAAA,CAGxD,CAAA,CAAA,CAAA,CAAA,CAEJ,EAAA,EACFY,GAAAC,EAAA,KAAAQ,WAAA,CAAA,SAAA,CAIEN,EAAAA,IAAAE,EAAA,CAAA,QAAA,EAAA,CAAA,EAAwBF,MAAAO,EAAA,CAAA,YAAA,EAAA,SAAAT,EAAA,KAAAU,EAAA,CAAA,SAAA,CAGpBV,OAAAW,EAAA,CAAA,SAAA,CACET,MAAAU,EAAA,CAAA,SAAAV,EAAA,IACEW,EAAC,CAAA,KAAA,eACM,MAAApB,EAAA,cAAA,CAAA,GAAA,0BAAA,CAAA,EACuD,WAAAF,EAChD,SAAA,CAAAgB,EAAAO,EAAAG,CAAA,CAC+C,CAAA,EAAA,EAE/Df,MAAAU,EAAA,CAAA,SAAAV,EAAA,IAEEa,EAAC,CAAA,KAAA,aACM,MAAAtB,EAAA,cAAA,CAAA,GAAA,yBAAA,CAAA,EACsD,SAAAF,EAC3D,SAAA,CAAAgB,EAAAS,EAAA3C,EAAAE,CAAA,CAC0E,CAAA,EAAA,CAE9E,EAAA,EACFiB,GAAAQ,EAAA,KAAAQ,WAAA,CAAA,SAAA,CAGIN,EAAAA,IAAAE,EAAA,CAAA,UAAA,EAAA,CAAA,EAA0BF,MAAAgB,GAAA,CAAA,KAAA,QAAA,QAAA,OAAA,SAAAhB,EAAAA,IAAAiB,EAAA,CAAA,KAAA,QAAA,SAAAjB,EAAAA,IAAAI,EAAA,CAAA,GAAA,kCAAA,CAAA,CAAA,CAAA,EAAA,EAK1BJ,EAAAA,IAAAE,EAAA,CAAA,UAAA,EAAA,CAAA,EAC0BJ,OAAAW,EAAA,CAAA,SAAA,CAExBT,MAAAU,EAAA,CAAA,SAAAV,EAAA,IACEW,EAAC,CAAA,KAAA,aACM,MAAApB,EAAA,cAAA,CAAA,GAAA,yBAAA,CAAA,EACsD,WAAAF,EAC/C,SAAA,CAAAuB,CAAA,CACW,CAAA,EAAA,EAE3BZ,MAAAU,EAAA,CAAA,SAAAV,EAAA,IAEEW,EAAC,CAAA,KAAA,wBACM,MAAApB,EAAA,cAAA,CAAA,GAAA,0BAAA,CAAA,EACuD,WAAAF,EAChD,SAAA,CAAAuB,CAAA,CACW,CAAA,EAAA,CAE3B,EAAA,CACF,EAAA,CACF,CAAA,CAAA,CAAA,CAAA,CAGN,EAAA,CACF,CAAA,CAAA,CAIR,sVCnLA,MAAArB,GAAA2B,EAAAC,CAAA,EAOAC,EAAA,CAAA,CAAA,SAAA/B,EAAA,iBAAAC,CAAA,IAAAU,EAAA,IAAAqB,EAAA,CAAA,MAAA9B,GAAA,SAAAS,EAAA,IAAAZ,EAAA,CAAA,SAAAC,EAAA,iBAAAC,CAAA,CAAA,CAAA,CAAA,EAMAgC,EAAAF;;;;;;;;;;;;;;;;;;;;;;;;"}