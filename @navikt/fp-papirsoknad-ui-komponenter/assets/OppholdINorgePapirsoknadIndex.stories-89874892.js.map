{"version":3,"file":"OppholdINorgePapirsoknadIndex.stories-89874892.js","sources":["../../../../node_modules/classnames/bind.js","../../src/oppholdINorgePanel/components/UtenlandsOppholdField.tsx","../../src/oppholdINorgePanel/components/OppholdINorgePanel.tsx","../../src/oppholdINorgePanel/OppholdINorgePapirsoknadIndex.tsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(this && this[arg] || arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(this, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(this && this[key] || key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React, { FunctionComponent, ReactElement, useMemo } from 'react';\nimport classnames from 'classnames/bind';\nimport { useIntl } from 'react-intl';\nimport { Datepicker, SelectField, PeriodFieldArray } from '@navikt/ft-form-hooks';\nimport { landkoder as Landkode } from '@navikt/fp-kodeverk';\nimport { KodeverkMedNavn } from '@navikt/ft-types';\n\nimport {\n  dateAfterOrEqual,\n  dateBeforeOrEqual,\n  dateRangesNotOverlapping,\n  hasValidDate,\n  required,\n} from '@navikt/ft-form-validators';\nimport { UseFormGetValues, useFieldArray, useFormContext } from 'react-hook-form';\nimport moment from 'moment';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { AvsnittSkiller, FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport styles from './utenlandsOppholdField.module.css';\n\nconst classNames = classnames.bind(styles);\n\nconst defaultUtenlandsOpphold = {\n  land: '',\n  periodeFom: '',\n  periodeTom: '',\n};\n\nexport type FormValues = {\n  land?: string;\n  periodeFom: string;\n  periodeTom: string;\n};\n\ntype Keys = 'tidligereOppholdUtenlands' | 'fremtidigeOppholdUtenlands';\n\nconst getValue = (\n  getValues: UseFormGetValues<{ [K in Keys]: FormValues[] }>,\n  fieldName: string,\n  // @ts-ignore\n): string => getValues(fieldName);\n\nconst getOverlappingValidator = (getValues: UseFormGetValues<{ [K in Keys]: FormValues[] }>, name: Keys) => () => {\n  const perioder = getValues(name);\n  const periodeMap = perioder\n    .filter(({ periodeFom, periodeTom }) => periodeFom && periodeFom !== '' && periodeTom && periodeTom !== '')\n    .map(({ periodeFom, periodeTom }) => [periodeFom, periodeTom]);\n  return periodeMap.length > 0 ? dateRangesNotOverlapping(periodeMap) : undefined;\n};\n\nconst countrySelectValues = (countryCodes: KodeverkMedNavn[]): ReactElement[] =>\n  countryCodes\n    .filter(({ kode }) => kode !== Landkode.NORGE)\n    .map(\n      ({ kode, navn }): ReactElement => (\n        <option value={kode} key={kode}>\n          {navn}\n        </option>\n      ),\n    );\n\nconst getValiderFørEllerEtter =\n  (getValues: UseFormGetValues<{ [K in Keys]: FormValues[] }>, name: string, index: number, sjekkFør: boolean) =>\n  () => {\n    const fomVerdi = getValue(getValues, `${name}.${index}.periodeFom`);\n    const tomVerdi = getValue(getValues, `${name}.${index}.periodeTom`);\n\n    if (!tomVerdi || !fomVerdi) {\n      return null;\n    }\n\n    return sjekkFør ? dateBeforeOrEqual(tomVerdi)(fomVerdi) : dateAfterOrEqual(fomVerdi)(tomVerdi);\n  };\n\ninterface OwnProps {\n  erTidligereOpphold: boolean;\n  mottattDato?: string;\n  countryCodes: KodeverkMedNavn[];\n  readOnly: boolean;\n}\n\n/**\n * UtenlandsOppholdField\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom søknad gjelder engangsstønad.\n * Komponenten lar saksbehandler legge inn informasjon om ett eller flere utenlandsopphold fra søknaden. Komponenten eksponerer valideringsregler\n * som lar seg tilpasse om opphold skal være fram eller tilbake i tid.\n * Komponenten har inputfelter og må derfor rendres som etterkommer av form-komponent.\n */\nconst UtenlandsOppholdField: FunctionComponent<OwnProps> = ({\n  erTidligereOpphold,\n  mottattDato,\n  readOnly,\n  countryCodes,\n}) => {\n  const intl = useIntl();\n\n  const name = erTidligereOpphold ? 'tidligereOppholdUtenlands' : 'fremtidigeOppholdUtenlands';\n\n  const {\n    control,\n    getValues,\n    trigger,\n    formState: { isSubmitted },\n  } = useFormContext<{ [K in Keys]: FormValues[] }>();\n  const { fields, remove, append } = useFieldArray({\n    control,\n    name,\n  });\n\n  const land = useMemo(() => countrySelectValues(countryCodes), [countryCodes]);\n\n  return (\n    <PeriodFieldArray<FormValues>\n      fields={fields}\n      titleText={intl.formatMessage({ id: 'Registrering.RegistreringOpphold.AngiOpphold' })}\n      bodyText={intl.formatMessage({ id: 'Registrering.RegistreringOpphold.Add' })}\n      emptyPeriodTemplate={defaultUtenlandsOpphold}\n      createAddButtonInsteadOfImageLink\n      readOnly={readOnly}\n      remove={remove}\n      append={append}\n    >\n      {(field, index, getRemoveButton) => (\n        <React.Fragment key={field.id}>\n          {index > 0 && (\n            <>\n              <AvsnittSkiller />\n              <VerticalSpacer sixteenPx />\n            </>\n          )}\n          <SelectField\n            name={`${name}.${index}.land`}\n            label={intl.formatMessage({ id: 'Registrering.RegistreringOpphold.Country' })}\n            selectValues={land}\n            className={styles.selectBredde}\n            readOnly={readOnly}\n            validate={[required]}\n          />\n          <VerticalSpacer sixteenPx />\n          <FlexContainer>\n            <FlexRow className={classNames({ datesRowWithRemoveButton: index > 0 })}>\n              <FlexColumn>\n                <Datepicker\n                  name={`${name}.${index}.periodeFom`}\n                  label={intl.formatMessage({ id: 'Registrering.RegistreringOpphold.periodeFom' })}\n                  isReadOnly={readOnly}\n                  validate={[\n                    required,\n                    hasValidDate,\n                    getValiderFørEllerEtter(getValues, name, index, true),\n                    () => {\n                      const fomVerdi = getValue(getValues, `${name}.${index}.periodeFom`);\n                      if (erTidligereOpphold) {\n                        return dateBeforeOrEqual(moment().format(ISO_DATE_FORMAT))(fomVerdi);\n                      }\n                      return mottattDato ? dateAfterOrEqual(mottattDato)(fomVerdi) : undefined;\n                    },\n                    getOverlappingValidator(getValues, name),\n                  ]}\n                  onChange={() => (isSubmitted ? trigger() : undefined)}\n                />\n              </FlexColumn>\n              <FlexColumn>\n                <Datepicker\n                  name={`${name}.${index}.periodeTom`}\n                  label={intl.formatMessage({ id: 'Registrering.RegistreringOpphold.periodeTom' })}\n                  isReadOnly={readOnly}\n                  validate={[\n                    required,\n                    hasValidDate,\n                    getValiderFørEllerEtter(getValues, name, index, false),\n                    () => {\n                      const tomVerdi = getValue(getValues, `${name}.${index}.periodeTom`);\n                      if (erTidligereOpphold) {\n                        return dateBeforeOrEqual(moment().format(ISO_DATE_FORMAT))(tomVerdi);\n                      }\n                      return mottattDato ? dateAfterOrEqual(mottattDato)(tomVerdi) : undefined;\n                    },\n                    getOverlappingValidator(getValues, name),\n                  ]}\n                  onChange={() => (isSubmitted ? trigger() : undefined)}\n                />\n              </FlexColumn>\n              <FlexColumn>{getRemoveButton()}</FlexColumn>\n            </FlexRow>\n          </FlexContainer>\n          <VerticalSpacer sixteenPx />\n        </React.Fragment>\n      )}\n    </PeriodFieldArray>\n  );\n};\n\nexport default UtenlandsOppholdField;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { ArrowBox, BorderBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { KodeverkType } from '@navikt/fp-kodeverk';\nimport { Heading } from '@navikt/ds-react';\nimport { required } from '@navikt/ft-form-validators';\nimport { AlleKodeverk } from '@navikt/fp-types';\nimport { useFormContext } from 'react-hook-form';\nimport UtenlandsOppholdField, { FormValues as FormValuesFieldArray } from './UtenlandsOppholdField';\n\nexport type FormValues = {\n  oppholdINorge?: boolean;\n  harTidligereOppholdUtenlands?: boolean;\n  harFremtidigeOppholdUtenlands?: boolean;\n  tidligereOppholdUtenlands?: FormValuesFieldArray[];\n  fremtidigeOppholdUtenlands?: FormValuesFieldArray[];\n};\n\ninterface OwnProps {\n  erAdopsjon: boolean;\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  mottattDato?: string;\n}\n\ninterface StaticFunctions {\n  buildInitialValues?: () => FormValues;\n  transformValues?: (formValues: FormValues) => FormValues;\n}\n\n/**\n * OppholdINorgePanel\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom søknad gjelder engangsstønad.\n * Inneholder delen av skjemaet som omhandler informasjon om utenlandsopphold.\n * Komponenten har inputfelter og må derfor rendres som etterkommer av form-komponent.\n */\nconst OppholdINorgePanel: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly = true,\n  alleKodeverk,\n  mottattDato,\n  erAdopsjon,\n}) => {\n  const { formatMessage } = useIntl();\n  const sortedCountriesByName = useMemo(\n    () => alleKodeverk[KodeverkType.LANDKODER].slice().sort((a, b) => a.navn.localeCompare(b.navn)),\n    [alleKodeverk],\n  );\n\n  const { watch } = useFormContext<any>();\n  const harTidligereOppholdUtenlands = watch('harTidligereOppholdUtenlands') || false;\n  const harFremtidigeOppholdUtenlands = watch('harFremtidigeOppholdUtenlands') || false;\n\n  return (\n    <BorderBox>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"Registrering.Opphold\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"oppholdINorge\"\n        label={\n          <FormattedMessage id={erAdopsjon ? 'Registrering.OppholdVedAdopsjon' : 'Registrering.OppholdVedFodsel'} />\n        }\n        validate={[required]}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        isHorizontal\n        radios={[\n          {\n            label: formatMessage({ id: 'Registrering.Opphold.Yes' }),\n            value: 'true',\n          },\n          {\n            label: formatMessage({ id: 'Registrering.Opphold.No' }),\n            value: 'false',\n          },\n        ]}\n      />\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"harTidligereOppholdUtenlands\"\n        label={<FormattedMessage id=\"Registrering.OppholdSisteTolv\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        isHorizontal\n        radios={[\n          {\n            label: formatMessage({ id: 'Registrering.Opphold.Yes' }),\n            value: 'false',\n          },\n          {\n            label: formatMessage({ id: 'Registrering.Opphold.No' }),\n            value: 'true',\n          },\n        ]}\n      />\n      {harTidligereOppholdUtenlands ? (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={64}>\n            <UtenlandsOppholdField\n              erTidligereOpphold\n              mottattDato={mottattDato}\n              countryCodes={sortedCountriesByName}\n              readOnly={readOnly}\n            />\n          </ArrowBox>\n        </>\n      ) : null}\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"harFremtidigeOppholdUtenlands\"\n        label={<FormattedMessage id=\"Registrering.OppholdNesteTolv\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        isHorizontal\n        radios={[\n          {\n            label: formatMessage({ id: 'Registrering.Opphold.Yes' }),\n            value: 'false',\n          },\n          {\n            label: formatMessage({ id: 'Registrering.Opphold.No' }),\n            value: 'true',\n          },\n        ]}\n      />\n      {harFremtidigeOppholdUtenlands ? (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={64}>\n            <UtenlandsOppholdField\n              erTidligereOpphold={false}\n              mottattDato={mottattDato}\n              countryCodes={sortedCountriesByName}\n              readOnly={readOnly}\n            />\n          </ArrowBox>\n        </>\n      ) : null}\n    </BorderBox>\n  );\n};\n\nOppholdINorgePanel.buildInitialValues = (): FormValues => ({\n  tidligereOppholdUtenlands: [{ periodeFom: undefined, periodeTom: undefined }],\n  fremtidigeOppholdUtenlands: [{ periodeFom: undefined, periodeTom: undefined }],\n});\n\nOppholdINorgePanel.transformValues = (formValues: FormValues): FormValues => ({\n  ...formValues,\n  fremtidigeOppholdUtenlands: formValues.harFremtidigeOppholdUtenlands\n    ? formValues.fremtidigeOppholdUtenlands\n    : undefined,\n  tidligereOppholdUtenlands: formValues.harTidligereOppholdUtenlands ? formValues.tidligereOppholdUtenlands : undefined,\n});\n\nexport default OppholdINorgePanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\nimport { AlleKodeverk } from '@navikt/fp-types';\n\nimport OppholdINorgePanel, { FormValues } from './components/OppholdINorgePanel';\n\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  readOnly: boolean;\n  erAdopsjon: boolean;\n  alleKodeverk: AlleKodeverk;\n  mottattDato?: string;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: () => FormValues;\n  transformValues?: (formValues: FormValues) => FormValues;\n}\n\nconst OppholdINorgePapirsoknadIndex: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  erAdopsjon,\n  alleKodeverk,\n  mottattDato,\n}) => (\n  <RawIntlProvider value={intl}>\n    <OppholdINorgePanel\n      readOnly={readOnly}\n      erAdopsjon={erAdopsjon}\n      alleKodeverk={alleKodeverk}\n      mottattDato={mottattDato}\n    />\n  </RawIntlProvider>\n);\n\nOppholdINorgePapirsoknadIndex.buildInitialValues = OppholdINorgePanel.buildInitialValues;\n\nOppholdINorgePapirsoknadIndex.transformValues = OppholdINorgePanel.transformValues;\n\nexport default OppholdINorgePapirsoknadIndex;\n"],"names":["hasOwn","classNames","classes","i","arg","argType","key","module","classnames","styles","defaultUtenlandsOpphold","getValue","getValues","fieldName","getOverlappingValidator","name","periodeMap","periodeFom","periodeTom","dateRangesNotOverlapping","countrySelectValues","countryCodes","kode","Landkode","navn","jsx","getValiderFørEllerEtter","index","sjekkFør","fomVerdi","tomVerdi","dateBeforeOrEqual","dateAfterOrEqual","UtenlandsOppholdField","erTidligereOpphold","mottattDato","readOnly","intl","useIntl","control","trigger","isSubmitted","useFormContext","fields","remove","append","useFieldArray","land","useMemo","PeriodFieldArray","field","getRemoveButton","jsxs","React","Fragment","AvsnittSkiller","VerticalSpacer","SelectField","required","FlexContainer","FlexRow","FlexColumn","Datepicker","hasValidDate","moment","ISO_DATE_FORMAT","OppholdINorgePanel","alleKodeverk","erAdopsjon","formatMessage","sortedCountriesByName","KodeverkType","a","b","watch","harTidligereOppholdUtenlands","harFremtidigeOppholdUtenlands","BorderBox","Heading","FormattedMessage","RadioGroupPanel","ArrowBox","formValues","createIntl","messages","OppholdINorgePapirsoknadIndex","RawIntlProvider","OppholdINorgePapirsoknadIndex$1"],"mappings":"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","x_google_ignoreList":[0]}