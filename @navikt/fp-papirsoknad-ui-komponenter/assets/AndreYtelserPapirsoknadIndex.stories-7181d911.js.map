{"version":3,"file":"AndreYtelserPapirsoknadIndex.stories-7181d911.js","sources":["../../src/andreYtelserPanel/components/RenderAndreYtelserPerioderFieldArray.tsx","../../src/andreYtelserPanel/components/AndreYtelserPanel.tsx","../../src/andreYtelserPanel/AndreYtelserPapirsoknadIndex.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { UseFormGetValues, useFieldArray, useFormContext } from 'react-hook-form';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Datepicker, PeriodFieldArray } from '@navikt/ft-form-hooks';\nimport { required, hasValidDate, dateAfterOrEqual, dateBeforeOrEqual } from '@navikt/ft-form-validators';\n\nimport styles from './renderAndreYtelserPerioderFieldArray.module.css';\n\nexport const ANDRE_YTELSER_NAME_PREFIX = 'andreYtelser';\n\nexport const ANDRE_YTELSER_PERIODE_SUFFIX = 'PERIODER';\n\nexport type FormValues = {\n  periodeFom: string;\n  periodeTom: string;\n};\n\nconst getValue = (\n  getValues: UseFormGetValues<{ [ANDRE_YTELSER_NAME_PREFIX]: FormValues }>,\n  fieldName: string,\n  // @ts-ignore\n): string => getValues(fieldName);\n\ninterface OwnProps {\n  readOnly: boolean;\n  name: string;\n}\n\ninterface StaticFunctions {\n  transformValues: (\n    values: FormValues[],\n    ytelseType: string,\n  ) => {\n    ytelseType: string;\n    periodeFom: string;\n    periodeTom: string;\n  }[];\n}\n\n/**\n * RenderAndreYtelserPerioderFieldArray\n *\n * Viser inputfelter for fra og til dato for perioder for andre ytelser\n */\nconst RenderAndreYtelserPerioderFieldArray: FunctionComponent<OwnProps> & StaticFunctions = ({ readOnly, name }) => {\n  const intl = useIntl();\n\n  const {\n    getValues,\n    control,\n    trigger,\n    formState: { isSubmitted },\n  } = useFormContext<{ [ANDRE_YTELSER_NAME_PREFIX]: FormValues }>();\n  const { fields, remove, append } = useFieldArray({\n    control,\n    // @ts-ignore Usikker på korleis ein fiksar denne (Dynamisk name basert på verdiar fra backend)\n    name: `${ANDRE_YTELSER_NAME_PREFIX}.${name}`,\n  });\n\n  return (\n    <PeriodFieldArray\n      fields={fields}\n      bodyText={intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.NyPeriode' })}\n      readOnly={readOnly}\n      append={append}\n      remove={remove}\n    >\n      {(field, index, getRemoveButton) => {\n        const namePart1 = `${ANDRE_YTELSER_NAME_PREFIX}.${name}.${index}`;\n        return (\n          <div key={field.id}>\n            <div className={index !== fields.length - 1 ? styles.notLastRow : ''}>\n              <FlexContainer>\n                <FlexRow>\n                  <FlexColumn>\n                    <Datepicker\n                      name={`${namePart1}.periodeFom`}\n                      label={index === 0 ? intl.formatMessage({ id: 'Registrering.AndreYtelser.periodeFom' }) : ''}\n                      validate={[\n                        required,\n                        hasValidDate,\n                        () => {\n                          const fomVerdi = getValue(getValues, `${namePart1}.periodeFom`);\n                          const tomVerdi = getValue(getValues, `${namePart1}.periodeTom`);\n                          return tomVerdi && fomVerdi ? dateBeforeOrEqual(tomVerdi)(fomVerdi) : null;\n                        },\n                      ]}\n                      onChange={() => (isSubmitted ? trigger() : undefined)}\n                    />\n                  </FlexColumn>\n                  <FlexColumn>\n                    <Datepicker\n                      name={`${namePart1}.periodeTom`}\n                      label={index === 0 ? intl.formatMessage({ id: 'Registrering.AndreYtelser.periodeTom' }) : ''}\n                      validate={[\n                        required,\n                        hasValidDate,\n                        () => {\n                          const fomVerdi = getValue(getValues, `${namePart1}.periodeFom`);\n                          const tomVerdi = getValue(getValues, `${namePart1}.periodeTom`);\n                          return tomVerdi && fomVerdi ? dateAfterOrEqual(fomVerdi)(tomVerdi) : null;\n                        },\n                      ]}\n                      onChange={() => (isSubmitted ? trigger() : undefined)}\n                    />\n                  </FlexColumn>\n                  <FlexColumn>{getRemoveButton()}</FlexColumn>\n                </FlexRow>\n              </FlexContainer>\n            </div>\n            <VerticalSpacer sixteenPx />\n          </div>\n        );\n      }}\n    </PeriodFieldArray>\n  );\n};\n\nRenderAndreYtelserPerioderFieldArray.transformValues = (values: FormValues[], ytelseType: string): any =>\n  values.map(ytelsePeriode => ({\n    ytelseType,\n    periodeFom: ytelsePeriode.periodeFom,\n    periodeTom: ytelsePeriode.periodeTom,\n  }));\n\nexport default RenderAndreYtelserPerioderFieldArray;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\nimport { CheckboxField } from '@navikt/ft-form-hooks';\nimport { ArrowBox, BorderBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AlleKodeverk, KodeverkMedNavn } from '@navikt/fp-types';\nimport { arbeidType, KodeverkType } from '@navikt/fp-kodeverk';\n\nimport { useFormContext } from 'react-hook-form';\nimport RenderAndreYtelserPerioderFieldArray, {\n  FormValues as PerioderFormValues,\n  ANDRE_YTELSER_PERIODE_SUFFIX,\n  ANDRE_YTELSER_NAME_PREFIX,\n} from './RenderAndreYtelserPerioderFieldArray';\n\nconst removeArbeidstyper = (\n  andreYtelser: KodeverkMedNavn[],\n  kunMiliterEllerSiviltjeneste?: boolean,\n): KodeverkMedNavn[] => {\n  if (kunMiliterEllerSiviltjeneste) {\n    return andreYtelser.filter(ay => ay.kode === arbeidType.MILITÆR_ELLER_SIVILTJENESTE);\n  }\n  return andreYtelser.filter(\n    ay =>\n      ay.kode !== arbeidType.UTENLANDSK_ARBEIDSFORHOLD &&\n      ay.kode !== arbeidType.FRILANSER &&\n      ay.kode !== arbeidType.LONN_UNDER_UTDANNING,\n  );\n};\n\nexport type FormValues = {\n  [ANDRE_YTELSER_NAME_PREFIX]?: {\n    [key: string]: PerioderFormValues[];\n  };\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  kunMiliterEllerSiviltjeneste?: boolean;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (andreYtelser: KodeverkMedNavn[]) => FormValues;\n  transformValues: (values: FormValues, andreYtelser: KodeverkMedNavn[]) => any;\n}\n\n/**\n * AndreYtelserPanel\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom søknad gjelder foreldrepenger.\n */\nconst AndreYtelserPanel: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  kunMiliterEllerSiviltjeneste = false,\n  alleKodeverk,\n}) => {\n  const { watch } = useFormContext<{ [ANDRE_YTELSER_NAME_PREFIX]: FormValues }>();\n  const selectedYtelser = watch(ANDRE_YTELSER_NAME_PREFIX);\n\n  const andreYtelser = alleKodeverk[KodeverkType.ARBEID_TYPE];\n\n  const filtrerteArbeidstyper = useMemo(\n    () => removeArbeidstyper(andreYtelser, kunMiliterEllerSiviltjeneste),\n    [kunMiliterEllerSiviltjeneste],\n  );\n\n  return (\n    <BorderBox>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"Registrering.AndreYtelser.Title\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      {filtrerteArbeidstyper.map(ay => {\n        const ytelseFieldName = `${ay.kode}_${ANDRE_YTELSER_PERIODE_SUFFIX}`;\n        return (\n          <React.Fragment key={ay.kode}>\n            <CheckboxField\n              key={ay.kode}\n              name={`${ANDRE_YTELSER_NAME_PREFIX}.${ay.kode}`}\n              label={ay.navn}\n              readOnly={readOnly}\n            />\n            {selectedYtelser && selectedYtelser[ay.kode] && (\n              <>\n                <VerticalSpacer eightPx />\n                <ArrowBox>\n                  <RenderAndreYtelserPerioderFieldArray name={ytelseFieldName} readOnly={readOnly} />\n                </ArrowBox>\n              </>\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BorderBox>\n  );\n};\n\nAndreYtelserPanel.buildInitialValues = (andreYtelser: KodeverkMedNavn[]): FormValues => {\n  const ytelseInitialValues = {};\n  removeArbeidstyper(andreYtelser).forEach(ay => {\n    const ytelsePeriodeFieldName = `${ay.kode}_${ANDRE_YTELSER_PERIODE_SUFFIX}`;\n    ytelseInitialValues[ytelsePeriodeFieldName] = [{}];\n  });\n  return { [ANDRE_YTELSER_NAME_PREFIX]: ytelseInitialValues };\n};\n\nAndreYtelserPanel.transformValues = (values: FormValues, andreYtelser: KodeverkMedNavn[]): any => {\n  const ytelseValues = values[ANDRE_YTELSER_NAME_PREFIX];\n  const newValues = [];\n\n  andreYtelser\n    .filter(ay => ytelseValues && ytelseValues[ay.kode])\n    .forEach(ay => {\n      const ytelsePerioderFieldName = `${ay.kode}_${ANDRE_YTELSER_PERIODE_SUFFIX}`;\n      const ytelsePerioder = ytelseValues[ytelsePerioderFieldName];\n      if (ytelsePerioder) {\n        RenderAndreYtelserPerioderFieldArray.transformValues(ytelsePerioder, ay.kode).forEach(tv => newValues.push(tv));\n      }\n    });\n\n  return newValues;\n};\n\nexport default AndreYtelserPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\nimport { AlleKodeverk, KodeverkMedNavn } from '@navikt/fp-types';\n\nimport AndreYtelserPanel, { FormValues } from './components/AndreYtelserPanel';\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n  kunMiliterEllerSiviltjeneste?: boolean;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: (andreYtelser: KodeverkMedNavn[]) => FormValues;\n  transformValues: (values: FormValues, andreYtelser: KodeverkMedNavn[]) => any;\n}\n\nconst AndreYtelserPapirsoknadIndex: FunctionComponent<OwnProps> & StaticFunctions = ({\n  readOnly,\n  alleKodeverk,\n  kunMiliterEllerSiviltjeneste,\n}) => (\n  <RawIntlProvider value={intl}>\n    <AndreYtelserPanel\n      readOnly={readOnly}\n      alleKodeverk={alleKodeverk}\n      kunMiliterEllerSiviltjeneste={kunMiliterEllerSiviltjeneste}\n    />\n  </RawIntlProvider>\n);\n\nAndreYtelserPapirsoknadIndex.buildInitialValues = andreYtelser => AndreYtelserPanel.buildInitialValues(andreYtelser);\n\nAndreYtelserPapirsoknadIndex.transformValues = (values, andreYtelser) =>\n  AndreYtelserPanel.transformValues(values, andreYtelser);\n\nexport default AndreYtelserPapirsoknadIndex;\n"],"names":["ANDRE_YTELSER_NAME_PREFIX","ANDRE_YTELSER_PERIODE_SUFFIX","getValue","getValues","fieldName","RenderAndreYtelserPerioderFieldArray","readOnly","name","intl","useIntl","control","trigger","isSubmitted","useFormContext","fields","remove","append","useFieldArray","jsx","PeriodFieldArray","field","index","getRemoveButton","namePart1","jsxs","styles","FlexContainer","FlexRow","FlexColumn","Datepicker","required","hasValidDate","fomVerdi","tomVerdi","dateBeforeOrEqual","dateAfterOrEqual","VerticalSpacer","values","ytelseType","ytelsePeriode","removeArbeidstyper","andreYtelser","kunMiliterEllerSiviltjeneste","ay","arbeidType","AndreYtelserPanel","alleKodeverk","watch","selectedYtelser","KodeverkType","filtrerteArbeidstyper","useMemo","BorderBox","Heading","FormattedMessage","ytelseFieldName","React","CheckboxField","Fragment","ArrowBox","ytelseInitialValues","ytelsePeriodeFieldName","ytelseValues","newValues","ytelsePerioderFieldName","ytelsePerioder","tv","createIntl","messages","AndreYtelserPapirsoknadIndex","RawIntlProvider","AndreYtelserPapirsoknadIndex$1"],"mappings":"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"}