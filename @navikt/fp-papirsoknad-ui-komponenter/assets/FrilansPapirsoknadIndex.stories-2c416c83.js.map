{"version":3,"file":"FrilansPapirsoknadIndex.stories-2c416c83.js","sources":["../../src/frilansPanel/components/FrilansPerioderFieldArray.tsx","../../src/frilansPanel/components/FrilansOppdragForFamilieFieldArray.tsx","../../src/frilansPanel/components/FrilansOppdragForFamiliePanel.tsx","../../src/frilansPanel/components/FrilansPanel.tsx","../../src/frilansPanel/FrilansPapirsoknadIndex.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { UseFormGetValues, useFieldArray, useFormContext } from 'react-hook-form';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Datepicker, PeriodFieldArray } from '@navikt/ft-form-hooks';\nimport { required, hasValidDate, dateBeforeOrEqual, dateAfterOrEqual } from '@navikt/ft-form-validators';\n\nimport styles from './frilansPerioderFieldArray.module.css';\n\nconst FRILANS_NAME_PREFIX = 'frilans';\n\nexport type FormValues = {\n  perioder?: {\n    periodeFom: string;\n    periodeTom?: string;\n  }[];\n};\n\nconst getValue = (\n  getValues: UseFormGetValues<{ [FRILANS_NAME_PREFIX]: FormValues }>,\n  fieldName: string,\n  // @ts-ignore\n): string => getValues(fieldName);\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\n/**\n * FrilansPerioderFieldArray\n *\n * Viser inputfelter for fra og til dato for frilansperioder\n */\nconst FrilansPerioderFieldArray: FunctionComponent<OwnProps> = ({ readOnly }) => {\n  const intl = useIntl();\n\n  const {\n    control,\n    getValues,\n    formState: { isSubmitted },\n    trigger,\n  } = useFormContext<{ [FRILANS_NAME_PREFIX]: FormValues }>();\n  const { fields, remove, append } = useFieldArray({\n    control,\n    name: `${FRILANS_NAME_PREFIX}.perioder`,\n  });\n\n  return (\n    <PeriodFieldArray\n      fields={fields}\n      bodyText={intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.NyPeriode' })}\n      readOnly={readOnly}\n      remove={remove}\n      append={append}\n    >\n      {(field, index, getRemoveButton) => {\n        const namePart1 = `${FRILANS_NAME_PREFIX}.perioder.${index}`;\n        return (\n          <div key={field.id} className={index !== fields.length - 1 ? styles.notLastRow : ''}>\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Datepicker\n                    name={`${namePart1}.periodeFom`}\n                    label={index === 0 ? intl.formatMessage({ id: 'Registrering.Frilans.periodeFom' }) : ''}\n                    validate={[\n                      required,\n                      hasValidDate,\n                      () => {\n                        const fomVerdi = getValue(getValues, `${namePart1}.periodeFom`);\n                        const tomVerdi = getValue(getValues, `${namePart1}.periodeTom`);\n                        return tomVerdi && fomVerdi ? dateBeforeOrEqual(tomVerdi)(fomVerdi) : null;\n                      },\n                    ]}\n                    onChange={() => (isSubmitted ? trigger() : undefined)}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <Datepicker\n                    name={`${namePart1}.periodeTom`}\n                    label={index === 0 ? intl.formatMessage({ id: 'Registrering.Frilans.periodeTom' }) : ''}\n                    validate={[\n                      required,\n                      hasValidDate,\n                      () => {\n                        const fomVerdi = getValue(getValues, `${namePart1}.periodeFom`);\n                        const tomVerdi = getValue(getValues, `${namePart1}.periodeTom`);\n                        return tomVerdi && fomVerdi ? dateAfterOrEqual(fomVerdi)(tomVerdi) : null;\n                      },\n                    ]}\n                    onChange={() => (isSubmitted ? trigger() : undefined)}\n                  />\n                </FlexColumn>\n                {getRemoveButton && <FlexColumn>{getRemoveButton()}</FlexColumn>}\n              </FlexRow>\n            </FlexContainer>\n            <VerticalSpacer sixteenPx />\n          </div>\n        );\n      }}\n    </PeriodFieldArray>\n  );\n};\n\nexport default FrilansPerioderFieldArray;\n","import React, { FunctionComponent, useMemo } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport moment from 'moment';\nimport { FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { ISO_DATE_FORMAT } from '@navikt/ft-utils';\nimport { Datepicker, InputField, PeriodFieldArray } from '@navikt/ft-form-hooks';\nimport { dateAfterOrEqual, dateBeforeOrEqual, hasValidDate, maxLength } from '@navikt/ft-form-validators';\n\nimport { UseFormGetValues, useFieldArray, useFormContext } from 'react-hook-form';\nimport styles from './frilansOppdragForFamilieFieldArray.module.css';\n\nexport const FRILANS_NAME_PREFIX = 'frilans';\n\ntype OppdragPeriode = {\n  fomDato: string;\n  tomDato: string;\n  oppdragsgiver: string;\n};\n\ntype Periode = {\n  periodeFom: string;\n  periodeTom?: string;\n};\n\nexport type FormValues = {\n  oppdragPerioder?: OppdragPeriode[];\n  perioder?: Periode[];\n};\n\nconst getValue = (\n  getValues: UseFormGetValues<{ [FRILANS_NAME_PREFIX]: FormValues }>,\n  fieldName: string,\n  // @ts-ignore\n): string => getValues(fieldName);\n\nconst sortFomDates = (perioder: Periode[] = []) =>\n  perioder\n    .map(p => p.periodeFom)\n    .filter(p => p && p !== '')\n    .sort((periodeFom1, periodeFom2) =>\n      moment(periodeFom1, ISO_DATE_FORMAT).diff(moment(periodeFom2, ISO_DATE_FORMAT)),\n    );\n\nexport const defaultFrilansPeriode: OppdragPeriode = {\n  fomDato: '',\n  tomDato: '',\n  oppdragsgiver: '',\n};\n\nconst maxLength50 = maxLength(50);\n\nconst getValiderAtFomDatoErFørFørstePeriode =\n  (\n    getValues: UseFormGetValues<{\n      frilans: FormValues;\n    }>,\n    namePart1: string,\n    sorterteFomDatoer: string[],\n    intl: IntlShape,\n  ) =>\n  () => {\n    const fomVerdi = getValue(getValues, `${namePart1}.fomDato`);\n    if (sorterteFomDatoer.length > 0 && sorterteFomDatoer[0] && fomVerdi) {\n      const isBefore = moment(sorterteFomDatoer[0]).isSameOrBefore(moment(fomVerdi));\n      if (!isBefore) {\n        return intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.BeforeFomValidation' });\n      }\n    }\n    return null;\n  };\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\n/**\n * FrilansOppdragForFamilieFieldArray\n *\n * Viser inputfelter for fra og til dato for frilansperioder.\n */\nexport const FrilansOppdragForFamilieFieldArray: FunctionComponent<OwnProps> = ({ readOnly }) => {\n  const intl = useIntl();\n\n  const {\n    control,\n    getValues,\n    watch,\n    trigger,\n    formState: { isSubmitted },\n  } = useFormContext<{ [FRILANS_NAME_PREFIX]: FormValues }>();\n  const { fields, remove, append } = useFieldArray({\n    control,\n    name: `${FRILANS_NAME_PREFIX}.oppdragPerioder`,\n  });\n\n  const perioder = watch(`${FRILANS_NAME_PREFIX}.perioder`);\n  const sorterteFomDatoer = useMemo(() => sortFomDates(perioder), [perioder]);\n\n  return (\n    <PeriodFieldArray\n      bodyText={intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.NyPeriode' })}\n      fields={fields}\n      emptyPeriodTemplate={defaultFrilansPeriode}\n      readOnly={readOnly}\n      append={append}\n      remove={remove}\n    >\n      {(field, index, getRemoveButton) => {\n        const namePart1 = `${FRILANS_NAME_PREFIX}.oppdragPerioder.${index}`;\n        return (\n          <div key={field.id} className={index !== fields.length - 1 ? styles.notLastRow : ''}>\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Datepicker\n                    name={`${namePart1}.fomDato`}\n                    label={intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.periodeFom' })}\n                    validate={[\n                      hasValidDate,\n                      getValiderAtFomDatoErFørFørstePeriode(getValues, namePart1, sorterteFomDatoer, intl),\n                      () => {\n                        const fomVerdi = getValue(getValues, `${namePart1}.fomDato`);\n                        const tomVerdi = getValue(getValues, `${namePart1}.tomDato`);\n                        return tomVerdi && fomVerdi ? dateBeforeOrEqual(tomVerdi)(fomVerdi) : null;\n                      },\n                    ]}\n                    onChange={() => (isSubmitted ? trigger() : undefined)}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <Datepicker\n                    name={`${namePart1}.tomDato`}\n                    label={intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.periodeTom' })}\n                    validate={[\n                      hasValidDate,\n                      () => {\n                        const fomVerdi = getValue(getValues, `${namePart1}.fomDato`);\n                        const tomVerdi = getValue(getValues, `${namePart1}.tomDato`);\n                        return tomVerdi && fomVerdi ? dateAfterOrEqual(fomVerdi)(tomVerdi) : null;\n                      },\n                    ]}\n                    onChange={() => (isSubmitted ? trigger() : undefined)}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <InputField\n                    name={`${namePart1}.oppdragsgiver`}\n                    validate={[maxLength50]}\n                    label={intl.formatMessage({ id: 'Registrering.FrilansOppdrag.FieldArray.Oppdragsgiver' })}\n                  />\n                </FlexColumn>\n                {getRemoveButton && <FlexColumn>{getRemoveButton()}</FlexColumn>}\n              </FlexRow>\n            </FlexContainer>\n            <VerticalSpacer sixteenPx />\n          </div>\n        );\n      }}\n    </PeriodFieldArray>\n  );\n};\n\nexport default FrilansOppdragForFamilieFieldArray;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label } from '@navikt/ds-react';\nimport { ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { required } from '@navikt/ft-form-validators';\n\nimport { useFormContext } from 'react-hook-form';\nimport FrilansOppdragForFamilieFieldArray, {\n  FRILANS_NAME_PREFIX,\n  defaultFrilansPeriode,\n  FormValues as FieldArrayFormValues,\n} from './FrilansOppdragForFamilieFieldArray';\n\nexport type FormValues = {\n  harHattOppdragForFamilie?: boolean;\n} & FieldArrayFormValues;\n\ninterface StaticFunctions {\n  buildInitialValues: () => FormValues;\n}\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\nconst FrilansOppdragForFamiliePanel: FunctionComponent<OwnProps> & StaticFunctions = ({ readOnly }) => {\n  const { watch } = useFormContext<{ [FRILANS_NAME_PREFIX]: FormValues }>();\n  const harHattOppdragForFamilie = watch(`${FRILANS_NAME_PREFIX}.harHattOppdragForFamilie`);\n\n  return (\n    <>\n      <RadioGroupPanel\n        name={`${FRILANS_NAME_PREFIX}.harHattOppdragForFamilie`}\n        label={<FormattedMessage id=\"Registrering.FrilansOppdrag.HarHattOppdragForFamilie\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isHorizontal\n        isTrueOrFalseSelection\n        radios={[\n          {\n            label: <FormattedMessage id=\"Registrering.FrilansOppdrag.Yes\" />,\n            value: 'true',\n          },\n          {\n            label: <FormattedMessage id=\"Registrering.FrilansOppdrag.No\" />,\n            value: 'false',\n          },\n        ]}\n      />\n      {harHattOppdragForFamilie && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox>\n            <Label size=\"small\">\n              <FormattedMessage id=\"Registrering.FrilansOppdrag.OppgiPeriode\" />\n            </Label>\n            <VerticalSpacer fourPx />\n            <FrilansOppdragForFamilieFieldArray readOnly={readOnly} />\n          </ArrowBox>\n        </>\n      )}\n    </>\n  );\n};\n\nFrilansOppdragForFamiliePanel.buildInitialValues = (): FormValues => ({\n  oppdragPerioder: [defaultFrilansPeriode],\n  perioder: undefined,\n});\n\nexport default FrilansOppdragForFamiliePanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Detail, Heading } from '@navikt/ds-react';\nimport { ArrowBox, BorderBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { required } from '@navikt/ft-form-validators';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\n\nimport FrilansPerioderFieldArray, { FormValues as PerioderFormValues } from './FrilansPerioderFieldArray';\nimport FrilansOppdragForFamiliePanel, {\n  FormValues as FormValuesOppdragForFamilie,\n} from './FrilansOppdragForFamiliePanel';\n\nexport const FRILANS_NAME_PREFIX = 'frilans';\n\nexport type FormValues = {\n  harSokerPeriodeMedFrilans?: boolean;\n  erNyoppstartetFrilanser?: boolean;\n  harInntektFraFosterhjem?: boolean;\n} & FormValuesOppdragForFamilie &\n  PerioderFormValues;\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: () => FormValues;\n  transformValues: (formValues: FormValues) => FormValues;\n}\n\nconst FrilansPanel: FunctionComponent<OwnProps> & StaticFunctions = ({ readOnly }) => (\n  <BorderBox>\n    <Heading size=\"small\">\n      <FormattedMessage id=\"Registrering.Frilans.Title\" />\n    </Heading>\n    <VerticalSpacer sixteenPx />\n    <RadioGroupPanel\n      name={`${FRILANS_NAME_PREFIX}.harSokerPeriodeMedFrilans`}\n      label={<FormattedMessage id=\"Registrering.Frilans.HarFrilansvirksomhet\" />}\n      validate={[required]}\n      isReadOnly={readOnly}\n      isTrueOrFalseSelection\n      radios={[\n        {\n          label: <FormattedMessage id=\"Registrering.Frilans.No\" />,\n          value: 'false',\n        },\n        {\n          label: <FormattedMessage id=\"Registrering.Frilans.Yes\" />,\n          value: 'true',\n          element: (\n            <>\n              <VerticalSpacer eightPx />\n              <ArrowBox>\n                <Detail>\n                  <FormattedMessage id=\"Registrering.Frilans.OppgiPeriode\" />\n                </Detail>\n                <VerticalSpacer eightPx />\n                <FrilansPerioderFieldArray readOnly={readOnly} />\n                <VerticalSpacer fourPx />\n                <RadioGroupPanel\n                  name={`${FRILANS_NAME_PREFIX}.erNyoppstartetFrilanser`}\n                  label={<FormattedMessage id=\"Registrering.Frilans.ErNyoppstartedFrilanser\" />}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      label: <FormattedMessage id=\"Registrering.Frilans.Yes\" />,\n                      value: 'true',\n                    },\n                    {\n                      label: <FormattedMessage id=\"Registrering.Frilans.No\" />,\n                      value: 'false',\n                    },\n                  ]}\n                />\n                <VerticalSpacer sixteenPx />\n                <RadioGroupPanel\n                  name={`${FRILANS_NAME_PREFIX}.harInntektFraFosterhjem`}\n                  label={<FormattedMessage id=\"Registrering.Frilans.HarInntektFraForsterhjem\" />}\n                  validate={[required]}\n                  isReadOnly={readOnly}\n                  isHorizontal\n                  isTrueOrFalseSelection\n                  radios={[\n                    {\n                      label: <FormattedMessage id=\"Registrering.Frilans.Yes\" />,\n                      value: 'true',\n                    },\n                    {\n                      label: <FormattedMessage id=\"Registrering.Frilans.No\" />,\n                      value: 'false',\n                    },\n                  ]}\n                />\n                <VerticalSpacer sixteenPx />\n                <FrilansOppdragForFamiliePanel readOnly={readOnly} />\n              </ArrowBox>\n            </>\n          ),\n        },\n      ]}\n    />\n  </BorderBox>\n);\n\nFrilansPanel.buildInitialValues = () => ({\n  ...FrilansOppdragForFamiliePanel.buildInitialValues(),\n  perioder: [\n    {\n      periodeFom: '',\n      periodeTom: '',\n    },\n  ],\n});\n\nFrilansPanel.transformValues = formValues =>\n  formValues.harSokerPeriodeMedFrilans\n    ? formValues\n    : {\n        harSokerPeriodeMedFrilans: formValues.harSokerPeriodeMedFrilans,\n      };\n\nexport default FrilansPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\n\nimport FrilansPanel, { FormValues } from './components/FrilansPanel';\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\ninterface StaticFunctions {\n  buildInitialValues: () => FormValues;\n  transformValues: (formValues: FormValues) => FormValues;\n}\n\nconst FrilansPapirsoknadIndex: FunctionComponent<OwnProps> & StaticFunctions = ({ readOnly }) => (\n  <RawIntlProvider value={intl}>\n    <FrilansPanel readOnly={readOnly} />\n  </RawIntlProvider>\n);\n\nFrilansPapirsoknadIndex.buildInitialValues = () => FrilansPanel.buildInitialValues();\n\nFrilansPapirsoknadIndex.transformValues = formValues => FrilansPanel.transformValues(formValues);\n\nexport default FrilansPapirsoknadIndex;\n"],"names":["FRILANS_NAME_PREFIX","getValue","getValues","fieldName","FrilansPerioderFieldArray","readOnly","intl","useIntl","control","isSubmitted","trigger","useFormContext","fields","remove","append","useFieldArray","jsx","PeriodFieldArray","field","index","getRemoveButton","namePart1","jsxs","styles","FlexContainer","FlexRow","FlexColumn","Datepicker","required","hasValidDate","fomVerdi","tomVerdi","dateBeforeOrEqual","dateAfterOrEqual","VerticalSpacer","sortFomDates","perioder","p","periodeFom1","periodeFom2","moment","ISO_DATE_FORMAT","defaultFrilansPeriode","maxLength50","maxLength","getValiderAtFomDatoErFørFørstePeriode","sorterteFomDatoer","FrilansOppdragForFamilieFieldArray","watch","useMemo","InputField","FrilansOppdragForFamiliePanel","harHattOppdragForFamilie","Fragment","RadioGroupPanel","FormattedMessage","ArrowBox","Label","FrilansPanel","BorderBox","Heading","Detail","formValues","createIntl","messages","FrilansPapirsoknadIndex","RawIntlProvider","FrilansPapirsoknadIndex$1"],"mappings":"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"}