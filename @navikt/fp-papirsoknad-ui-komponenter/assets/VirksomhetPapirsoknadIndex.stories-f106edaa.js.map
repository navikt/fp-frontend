{"version":3,"file":"VirksomhetPapirsoknadIndex.stories-f106edaa.js","sources":["../../src/images/add-circle.svg","../../src/images/remove.svg","../../src/virksomhetPanel/components/VirksomhetIdentifikasjonPanel.tsx","../../src/virksomhetPanel/components/VirksomhetRegnskapPanel.tsx","../../src/virksomhetPanel/components/VirksomhetStartetEndretPanel.tsx","../../src/virksomhetPanel/components/VirksomhetRelasjonPanel.tsx","../../src/virksomhetPanel/components/VirksomhetTypeNaringPanel.tsx","../../src/virksomhetPanel/components/RegistrerVirksomhetModalForm.tsx","../../src/virksomhetPanel/components/RegistrerVirksomhetPanel.tsx","../../src/virksomhetPanel/components/EgenVirksomhetPanel.tsx","../../src/virksomhetPanel/VirksomhetPapirsoknadIndex.tsx"],"sourcesContent":["export default \"__VITE_ASSET__49c85ac3__\"","export default \"__VITE_ASSET__190a4b19__\"","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Datepicker, InputField, RadioGroupPanel, SelectField } from '@navikt/ft-form-hooks';\nimport { ArrowBox, FlexColumn, FlexContainer, FlexRow, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport {\n  dateBeforeOrEqualToToday,\n  hasValidDate,\n  hasValidInteger,\n  hasValidOrgNumber,\n  required,\n  validPeriodeFomTom,\n} from '@navikt/ft-form-validators';\nimport { KodeverkType } from '@navikt/fp-kodeverk';\nimport { AlleKodeverk, KodeverkMedNavn } from '@navikt/fp-types';\n\nimport { useFormContext } from 'react-hook-form';\nimport styles from './virksomhetIdentifikasjonPanel.module.css';\n\nconst countrySelectValues = (countryCodes: KodeverkMedNavn[]): ReactElement[] =>\n  countryCodes.map(({ kode, navn }) => (\n    <option value={kode} key={kode}>\n      {navn}\n    </option>\n  ));\n\ninterface OwnProps {\n  readOnly?: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\nexport type FormValues = {\n  fom?: string;\n  tom?: string;\n  navn?: string;\n  virksomhetRegistrertINorge?: boolean;\n  organisasjonsnummer?: string;\n  landJobberFra?: string;\n};\n\n/**\n * VirksomhetIdentifikasjonPanel\n *\n * Komponenten vises som del av skjermbildet for registrering av\n * papirsøknad dersom søknad gjelder foreldrepenger og saksbehandler skal legge til ny virksomhet for søker.\n */\nconst VirksomhetIdentifikasjonPanel: FunctionComponent<OwnProps> = ({ readOnly = true, alleKodeverk }) => {\n  const intl = useIntl();\n  const sortedCountriesByName = alleKodeverk[KodeverkType.LANDKODER]\n    .slice()\n    .sort((a, b) => a.navn.localeCompare(b.navn));\n\n  const { watch, getValues } = useFormContext<FormValues>();\n\n  const virksomhetRegistrertINorge = watch('virksomhetRegistrertINorge');\n\n  return (\n    <>\n      <InputField\n        name=\"navn\"\n        validate={[required]}\n        label={<FormattedMessage id=\"Registrering.VirksomhetIdentifikasjonPanel.Name\" />}\n        className={styles.navnBredde}\n        readOnly={readOnly}\n      />\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"virksomhetRegistrertINorge\"\n        label={<FormattedMessage id=\"Registrering.VirksomhetIdentifikasjonPanel.RegisteredInNorway\" />}\n        validate={[required]}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        isHorizontal\n        radios={[\n          {\n            label: intl.formatMessage({ id: 'Registrering.VirksomhetIdentifikasjonPanel.Yes' }),\n            value: 'true',\n          },\n          {\n            label: intl.formatMessage({ id: 'Registrering.VirksomhetIdentifikasjonPanel.No' }),\n            value: 'false',\n          },\n        ]}\n      />\n      {virksomhetRegistrertINorge && (\n        <>\n          <VerticalSpacer eightPx />\n          <div className={styles.orgNrBredde}>\n            <ArrowBox>\n              <InputField\n                name=\"organisasjonsnummer\"\n                readOnly={readOnly}\n                validate={[required, hasValidInteger, hasValidOrgNumber]}\n                label={<FormattedMessage id=\"Registrering.VirksomhetIdentifikasjonPanel.OrganizationNumber\" />}\n              />\n            </ArrowBox>\n          </div>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n      {!virksomhetRegistrertINorge && virksomhetRegistrertINorge !== undefined && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox alignOffset={57}>\n            <SelectField\n              name=\"landJobberFra\"\n              className={styles.landBredde}\n              selectValues={countrySelectValues(sortedCountriesByName)}\n              validate={[required]}\n              label={intl.formatMessage({ id: 'Registrering.VirksomhetIdentifikasjonPanel.Country' })}\n            />\n            <VerticalSpacer sixteenPx />\n            <FlexContainer>\n              <FlexRow>\n                <FlexColumn>\n                  <Datepicker\n                    isReadOnly={readOnly}\n                    validate={[required, hasValidDate, dateBeforeOrEqualToToday]}\n                    name=\"fom\"\n                    label={intl.formatMessage({ id: 'Registrering.VirksomhetIdentifikasjonPanel.periodeFom' })}\n                  />\n                </FlexColumn>\n                <FlexColumn>\n                  <Datepicker\n                    isReadOnly={readOnly}\n                    validate={[hasValidDate, fomDato => validPeriodeFomTom(getValues('fom'), fomDato)]}\n                    name=\"tom\"\n                    label={intl.formatMessage({ id: 'Registrering.VirksomhetIdentifikasjonPanel.periodeTom' })}\n                  />\n                </FlexColumn>\n              </FlexRow>\n            </FlexContainer>\n          </ArrowBox>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default VirksomhetIdentifikasjonPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { InputField, RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { required, hasValidInteger, hasValidText } from '@navikt/ft-form-validators';\n\nimport { useFormContext } from 'react-hook-form';\nimport styles from './virksomhetRegnskapPanel.module.css';\n\nexport type FormValues = {\n  harRegnskapsforer?: boolean;\n  navnRegnskapsforer?: string;\n  tlfRegnskapsforer?: string;\n};\n\ninterface OwnProps {\n  readOnly?: boolean;\n}\n\n/**\n * VirksomhetRegnskapPanel\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom\n * søknad gjelder foreldrepenger og saksbehandler skal legge til ny virksomhet for søker.\n */\nconst VirksomhetRegnskapPanel: FunctionComponent<OwnProps> = ({ readOnly = true }) => {\n  const { watch } = useFormContext<FormValues>();\n  const harRegnskapsforer = watch('harRegnskapsforer') || false;\n\n  return (\n    <>\n      <RadioGroupPanel\n        name=\"harRegnskapsforer\"\n        label={<FormattedMessage id=\"Registrering.VirksomhetRegnskapPanel.Accountant\" />}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        isHorizontal\n        radios={[\n          {\n            label: <FormattedMessage id=\"Registrering.VirksomhetRegnskapPanel.Yes\" />,\n            value: 'true',\n          },\n          {\n            label: <FormattedMessage id=\"Registrering.VirksomhetRegnskapPanel.No\" />,\n            value: 'false',\n          },\n        ]}\n      />\n      {harRegnskapsforer && (\n        <>\n          <VerticalSpacer eightPx />\n          <ArrowBox>\n            <InputField\n              name=\"navnRegnskapsforer\"\n              className={styles.navnBredde}\n              readOnly={readOnly}\n              validate={[required, hasValidText]}\n              label={<FormattedMessage id=\"Registrering.VirksomhetRegnskapPanel.AccountantName\" />}\n            />\n            <VerticalSpacer sixteenPx />\n            <InputField\n              name=\"tlfRegnskapsforer\"\n              readOnly={readOnly}\n              validate={[required, hasValidInteger]}\n              className={styles.tlfBredde}\n              label={<FormattedMessage id=\"Registrering.VirksomhetRegnskapPanel.AccountantPhone\" />}\n            />\n          </ArrowBox>\n          <VerticalSpacer sixteenPx />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default VirksomhetRegnskapPanel;\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ErrorMessage, Label } from '@navikt/ds-react';\nimport { ArrowBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { hasValidDate, hasValidInteger, required, hasValidText } from '@navikt/ft-form-validators';\nimport { CheckboxField, Datepicker, InputField, RadioGroupPanel, TextAreaField } from '@navikt/ft-form-hooks';\n\nimport { useFormContext } from 'react-hook-form';\nimport styles from './virksomhetStartetEndretPanel.module.css';\n\ntype VirtuellFeilType = {\n  ingenArsakValgt?: boolean;\n};\n\nexport type FormValues = {\n  varigEndretEllerStartetSisteFireAr?: boolean;\n  harVarigEndring?: boolean;\n  varigEndringGjeldendeFom?: string;\n  erNyoppstartet?: boolean;\n  erNyIArbeidslivet?: boolean;\n  nyIArbeidslivetFom?: string;\n  beskrivelseAvEndring?: string;\n  inntekt?: number;\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n}\n\n/**\n * VirksomhetStartetEndretPanel\n *\n * Komponenten vises som del av skjermbildet for registrering av\n * papirsøknad dersom søknad gjelder foreldrepenger og saksbehandler skal legge til ny virksomhet for søker.\n */\nexport const VirksomhetStartetEndretPanel: FunctionComponent<OwnProps> = ({ readOnly }) => {\n  const intl = useIntl();\n  const { watch, setError, clearErrors, formState } = useFormContext<FormValues & VirtuellFeilType>();\n  const varigEndretEllerStartetSisteFireAr = watch('varigEndretEllerStartetSisteFireAr') || false;\n  const harVarigEndring = watch('harVarigEndring') || false;\n  const erNyoppstartet = watch('erNyoppstartet') || false;\n  const erNyIArbeidslivet = watch('erNyIArbeidslivet') || false;\n\n  const isError = !harVarigEndring && !erNyoppstartet && !erNyIArbeidslivet;\n\n  useEffect(() => {\n    if (isError && varigEndretEllerStartetSisteFireAr) {\n      setError('ingenArsakValgt', {\n        type: 'custom',\n        message: intl.formatMessage({ id: 'Registrering.VirksomhetStartetPanel.MaFylleUtEnArsak' }),\n      });\n    }\n    if (!isError || !varigEndretEllerStartetSisteFireAr) {\n      clearErrors('ingenArsakValgt');\n    }\n  }, [isError, varigEndretEllerStartetSisteFireAr]);\n\n  return (\n    <>\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name=\"varigEndretEllerStartetSisteFireAr\"\n        label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.NewlyStartedOrChanged\" />}\n        isReadOnly={readOnly}\n        isTrueOrFalseSelection\n        isHorizontal\n        radios={[\n          {\n            label: <FormattedMessage id=\"Registrering.VirksomhetStartetPanel.Yes\" />,\n            value: 'true',\n          },\n          {\n            label: <FormattedMessage id=\"Registrering.VirksomhetStartetPanel.No\" />,\n            value: 'false',\n          },\n        ]}\n      />\n      {varigEndretEllerStartetSisteFireAr && (\n        <div>\n          <VerticalSpacer eightPx />\n          <ArrowBox>\n            <Label size=\"small\">\n              <FormattedMessage id=\"Registrering.VirksomhetStartetPanel.Reason\" />\n            </Label>\n            <VerticalSpacer fourPx />\n            <CheckboxField\n              name=\"harVarigEndring\"\n              label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.HarVarigEndring\" />}\n            />\n            <VerticalSpacer fourPx />\n            {harVarigEndring && (\n              <>\n                <VerticalSpacer sixteenPx />\n                <ArrowBox>\n                  <Datepicker\n                    name=\"varigEndringGjeldendeFom\"\n                    isReadOnly={readOnly}\n                    validate={[hasValidDate, required]}\n                    label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.GjeldendeFom\" />}\n                  />\n                </ArrowBox>\n              </>\n            )}\n            <CheckboxField\n              name=\"erNyoppstartet\"\n              label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.ErNyoppstartet\" />}\n            />\n            <VerticalSpacer fourPx />\n            <CheckboxField\n              name=\"erNyIArbeidslivet\"\n              label={<FormattedMessage id=\"Registrering.VirksomhetNyIArbeidslivetPanel.ErNyIArbeidslivet\" />}\n            />\n            <VerticalSpacer fourPx />\n            {erNyIArbeidslivet && (\n              <>\n                <VerticalSpacer sixteenPx />\n                <ArrowBox>\n                  <Datepicker\n                    name=\"nyIArbeidslivetFom\"\n                    isReadOnly={readOnly}\n                    validate={[hasValidDate, required]}\n                    label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.GjeldendeFom\" />}\n                  />\n                </ArrowBox>\n              </>\n            )}\n            {formState.isSubmitted && formState.errors?.ingenArsakValgt?.message && (\n              <ErrorMessage>{formState.errors?.ingenArsakValgt?.message}</ErrorMessage>\n            )}\n            <VerticalSpacer sixteenPx />\n            <TextAreaField\n              name=\"beskrivelseAvEndring\"\n              label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.VirksomhetEndretBeskrivelse\" />}\n              validate={[hasValidText]}\n            />\n            <VerticalSpacer sixteenPx />\n            <InputField\n              name=\"inntekt\"\n              label={<FormattedMessage id=\"Registrering.VirksomhetStartetPanel.Inntekt\" />}\n              readOnly={readOnly}\n              validate={[hasValidInteger, required]}\n              className={styles.inntektBredde}\n              parse={(value: string) => {\n                const parsedValue = parseInt(value, 10);\n                return Number.isNaN(parsedValue) ? value : parsedValue;\n              }}\n            />\n          </ArrowBox>\n        </div>\n      )}\n      <VerticalSpacer eightPx />\n    </>\n  );\n};\n\nexport default VirksomhetStartetEndretPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\n\nexport type FormValues = {\n  familieEllerVennerTilknyttetNaringen: boolean;\n};\n\ninterface OwnProps {\n  readOnly?: boolean;\n}\n\n/**\n * VirksomhetRelasjonPanel\n *\n * Presentasjonskomponent. Komponenten vises som del av skjermbildet for registrering av\n * papirsøknad dersom søknad gjelder foreldrepenger og saksbehandler skal legge til ny virksomhet for\n * søker.\n */\nconst VirksomhetRelasjonPanel: FunctionComponent<OwnProps> = ({ readOnly = true }) => (\n  <RadioGroupPanel\n    name=\"familieEllerVennerTilknyttetNaringen\"\n    label={<FormattedMessage id=\"Registrering.VirksomhetRelasjonPanel.Relation\" />}\n    isReadOnly={readOnly}\n    isTrueOrFalseSelection\n    radios={[\n      {\n        label: <FormattedMessage id=\"Registrering.VirksomhetRelasjonPanel.Yes\" />,\n        value: 'true',\n      },\n      {\n        label: <FormattedMessage id=\"Registrering.VirksomhetRelasjonPanel.No\" />,\n        value: 'false',\n      },\n    ]}\n  />\n);\n\nexport default VirksomhetRelasjonPanel;\n","import React, { Fragment, FunctionComponent, useEffect, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Label, ErrorMessage } from '@navikt/ds-react';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { CheckboxField } from '@navikt/ft-form-hooks';\nimport { AlleKodeverk } from '@navikt/fp-types';\nimport { naringsvirksomhetType, KodeverkType } from '@navikt/fp-kodeverk';\nimport { isRequiredMessage } from '@navikt/ft-form-validators';\nimport { useFormContext } from 'react-hook-form';\n\nconst TYPE_VIRKSOMHET_PREFIX = 'typeVirksomhet';\n\nconst naringsvirksomhetTypeOrder = {\n  [naringsvirksomhetType.DAGMAMMA]: 1,\n  [naringsvirksomhetType.FISKE]: 2,\n  [naringsvirksomhetType.JORDBRUK_ELLER_SKOGBRUK]: 3,\n  [naringsvirksomhetType.ANNEN]: 4,\n};\n\nconst compare = (arg1: number, arg2: number): number => {\n  if (arg1 > arg2) {\n    return 1;\n  }\n  return arg1 < arg2 ? -1 : 0;\n};\n\ntype VirtualErrorField = {\n  notRegisteredInput?: string;\n};\n\nexport type FormValues = {\n  [TYPE_VIRKSOMHET_PREFIX]: Record<string, boolean>;\n};\n\ninterface OwnProps {\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\n/**\n * VirksomhetTypeNaringPanel\n *\n * Presentasjonskomponent. Komponenten vises som del av skjermbildet for registrering av\n * papirsøknad dersom søknad gjelder foreldrepenger og saksbehandler skal legge til ny virksomhet for søker.\n */\nconst VirksomhetTypeNaringPanel: FunctionComponent<OwnProps> = ({ readOnly, alleKodeverk }) => {\n  const virksomhetTyper = alleKodeverk[KodeverkType.VIRKSOMHET_TYPE];\n  const naringvirksomhetTyper = useMemo(\n    () =>\n      virksomhetTyper\n        .filter(t => t.kode !== naringsvirksomhetType.FRILANSER)\n        .sort((a, b) => compare(naringsvirksomhetTypeOrder[a.kode], naringsvirksomhetTypeOrder[b.kode])),\n    [],\n  );\n\n  const { watch, setError, formState, clearErrors } = useFormContext<FormValues & VirtualErrorField>();\n\n  const checkboxVerdier = watch(TYPE_VIRKSOMHET_PREFIX);\n\n  const isError = !checkboxVerdier || !Object.values(checkboxVerdier).some(v => v === true);\n\n  useEffect(() => {\n    if (isError) {\n      setError('notRegisteredInput', {\n        type: 'custom',\n        message: isRequiredMessage(),\n      });\n    }\n    if (!isError) {\n      clearErrors('notRegisteredInput');\n    }\n  }, [isError]);\n\n  return (\n    <>\n      <VerticalSpacer eightPx />\n      <Label size=\"small\">\n        <FormattedMessage id=\"Registrering.VirksomhetNaeringTypePanel.Title\" />\n      </Label>\n      <VerticalSpacer fourPx />\n      {naringvirksomhetTyper.map(nv => (\n        <Fragment key={nv.kode}>\n          <VerticalSpacer fourPx />\n          <CheckboxField\n            name={`${TYPE_VIRKSOMHET_PREFIX}.${nv.kode}`}\n            key={nv.kode}\n            label={nv.navn}\n            readOnly={readOnly}\n          />\n        </Fragment>\n      ))}\n      {formState.isSubmitted && formState.errors.notRegisteredInput?.message && (\n        <ErrorMessage>{formState.errors.notRegisteredInput?.message}</ErrorMessage>\n      )}\n    </>\n  );\n};\n\nexport default VirksomhetTypeNaringPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { Button, Modal, Heading } from '@navikt/ds-react';\nimport { VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { Form } from '@navikt/ft-form-hooks';\nimport { AlleKodeverk } from '@navikt/fp-types';\n\nimport VirksomhetIdentifikasjonPanel, { FormValues as IdFormValues } from './VirksomhetIdentifikasjonPanel';\nimport VirksomhetRegnskapPanel, { FormValues as RegnskapFormValues } from './VirksomhetRegnskapPanel';\nimport VirksomhetStartetEndretPanel, { FormValues as StartedEndretFormValues } from './VirksomhetStartetEndretPanel';\nimport VirksomhetRelasjonPanel, { FormValues as RelasjonFormValues } from './VirksomhetRelasjonPanel';\nimport VirksomhetTypeNaringPanel, { FormValues as TypeNaringFormValues } from './VirksomhetTypeNaringPanel';\n\nimport styles from './registrerVirksomhetModalForm.module.css';\n\nexport type FormValues = IdFormValues &\n  RelasjonFormValues &\n  RegnskapFormValues &\n  StartedEndretFormValues &\n  TypeNaringFormValues;\n\ninterface OwnProps {\n  showModal?: boolean;\n  onSubmit: (value: FormValues) => void;\n  closeEvent: () => void;\n  readOnly?: boolean;\n  alleKodeverk: AlleKodeverk;\n  virksomhet?: FormValues;\n}\n\n/**\n * RegistrerVirksomhetModalForm\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom søknad gjelder\n * foreldrepenger og saksbehandler skal legge til ny virksomhet for søker.\n */\nconst RegistrerVirksomhetModalForm: FunctionComponent<OwnProps> = ({\n  showModal = false,\n  readOnly = false,\n  closeEvent,\n  onSubmit,\n  alleKodeverk,\n  virksomhet,\n}) => {\n  const intl = useIntl();\n\n  const formMethods = useForm<FormValues>({\n    defaultValues: virksomhet,\n  });\n\n  return (\n    <Modal\n      className={styles.modal}\n      open={showModal}\n      aria-label={intl.formatMessage({ id: 'Registrering.RegistrerVirksomhetModalForm.ModalDescription' })}\n      onClose={closeEvent}\n      closeButton={false}\n      shouldCloseOnOverlayClick={false}\n    >\n      <Modal.Content>\n        <div className={styles.form}>\n          <Form formMethods={formMethods}>\n            <Heading size=\"small\">\n              <FormattedMessage id=\"Registrering.RegistrerVirksomhetModalForm.Title\" />\n            </Heading>\n            <VerticalSpacer twentyPx />\n            <VirksomhetIdentifikasjonPanel readOnly={readOnly} alleKodeverk={alleKodeverk} />\n            <VirksomhetTypeNaringPanel readOnly={readOnly} alleKodeverk={alleKodeverk} />\n            <VirksomhetStartetEndretPanel readOnly={readOnly} />\n            <VirksomhetRegnskapPanel readOnly={readOnly} />\n            <VerticalSpacer sixteenPx />\n            <VirksomhetRelasjonPanel readOnly={readOnly} />\n            <VerticalSpacer sixteenPx />\n            <Button\n              size=\"small\"\n              variant=\"primary\"\n              onClick={formMethods.handleSubmit(onSubmit)}\n              disabled={readOnly}\n              className={styles.savebutton}\n              type=\"button\"\n            >\n              <FormattedMessage id=\"Registrering.RegistrerVirksomhetModalForm.Save\" />\n            </Button>\n            <Button\n              size=\"small\"\n              variant=\"secondary\"\n              onClick={closeEvent}\n              disabled={readOnly}\n              className={styles.cancelbutton}\n              type=\"button\"\n            >\n              <FormattedMessage id=\"Registrering.RegistrerVirksomhetModalForm.Cancel\" />\n            </Button>\n          </Form>\n        </div>\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default RegistrerVirksomhetModalForm;\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Label, BodyShort, Detail, ErrorMessage } from '@navikt/ds-react';\nimport { FlexColumn, FlexContainer, FlexRow, Image, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { AlleKodeverk } from '@navikt/fp-types';\n\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport addCircleIcon from '../../images/add-circle.svg';\nimport removeIcon from '../../images/remove.svg';\n\nimport RegistrerVirksomhetModalForm, { FormValues as ModalFormValues } from './RegistrerVirksomhetModalForm';\n\nimport styles from './registrerVirksomhetPanel.module.css';\n\nexport const EGEN_VIRKSOMHET_NAME_PREFIX = 'egenVirksomhet';\n\ntype VirtueltValideringsfeilFelt = {\n  notRegisteredInput?: string;\n};\n\nexport type FormValues = {\n  virksomheter: ModalFormValues[];\n};\n\ninterface OwnProps {\n  readOnly?: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\n/**\n * RegistrererVirksomhetPanel\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom søknad gjelder\n * foreldrepenger og søker har arbeidet i egen virksomhet.\n * Viser registrerte virksomheter samt knapp for å legge til nye virksomheter.\n */\nconst RegistrerVirksomhetPanel: FunctionComponent<OwnProps> = ({ readOnly = false, alleKodeverk }) => {\n  const intl = useIntl();\n  const [virksomhetIndex, setVirksomhetIndex] = useState<number>();\n\n  const { control, setError, formState, clearErrors } = useFormContext<{\n    [EGEN_VIRKSOMHET_NAME_PREFIX]: FormValues & VirtueltValideringsfeilFelt;\n  }>();\n  const { fields, remove, append, update } = useFieldArray({\n    control,\n    name: `${EGEN_VIRKSOMHET_NAME_PREFIX}.virksomheter`,\n  });\n\n  const visModal = useCallback(\n    (index?: number): void => {\n      setVirksomhetIndex(index !== undefined ? index : -1);\n    },\n    [setVirksomhetIndex],\n  );\n\n  const lukkModal = useCallback((): void => {\n    setVirksomhetIndex(undefined);\n  }, [setVirksomhetIndex]);\n\n  const leggTilVirksomhet = useCallback(\n    (virksomhet: ModalFormValues) => {\n      const justertVirksomhet = {\n        ...virksomhet,\n        landJobberFra: virksomhet.virksomhetRegistrertINorge ? 'NOR' : virksomhet.landJobberFra,\n        varigEndringGjeldendeFom: virksomhet.nyIArbeidslivetFom || virksomhet.varigEndringGjeldendeFom,\n      };\n\n      if (virksomhetIndex === -1) {\n        append(justertVirksomhet);\n      } else {\n        update(virksomhetIndex, justertVirksomhet);\n      }\n\n      lukkModal();\n    },\n    [append, update, lukkModal, virksomhetIndex],\n  );\n\n  useEffect(() => {\n    if (fields.length === 0) {\n      setError(`${EGEN_VIRKSOMHET_NAME_PREFIX}.notRegisteredInput`, {\n        type: 'custom',\n        message: intl.formatMessage({ id: 'Registrering.RegistrerVirksomhetPanel.ArrayMinLength' }),\n      });\n    }\n    if (fields.length > 0) {\n      clearErrors(`${EGEN_VIRKSOMHET_NAME_PREFIX}.notRegisteredInput`);\n    }\n  }, [fields.length]);\n\n  return (\n    <div className={styles.fieldsList}>\n      {fields.length > 0 && (\n        <React.Fragment key={1}>\n          <Label size=\"small\">\n            <FormattedMessage id=\"Registrering.RegistrerVirksomhetPanel.Name\" />\n          </Label>\n          <hr className={styles.divider} />\n          {fields.map((field, index) => (\n            <FlexContainer key={field.id}>\n              <FlexRow>\n                <FlexColumn>\n                  {\n                    // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n                  }\n                  <a\n                    onClick={() => visModal(index)}\n                    onKeyDown={() => visModal(index)}\n                    className={styles.customLink}\n                    role=\"link\"\n                    tabIndex={0}\n                  >\n                    <BodyShort size=\"small\">{field.navn}</BodyShort>\n                  </a>\n                </FlexColumn>\n                <FlexColumn>\n                  {\n                    // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n                  }\n                  <div\n                    className={styles.removeButton}\n                    onClick={() => remove(index)}\n                    onKeyDown={() => remove(index)}\n                    id=\"removebutton\"\n                    role=\"button\"\n                    tabIndex={0}\n                  >\n                    <Image src={removeIcon} />\n                  </div>\n                </FlexColumn>\n              </FlexRow>\n              <hr className={styles.divider} />\n              <VerticalSpacer eightPx />\n            </FlexContainer>\n          ))}\n        </React.Fragment>\n      )}\n      {\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n      }\n      <div\n        id=\"addbutton\"\n        className={styles.addVirksomhet}\n        onClick={() => visModal()}\n        onKeyDown={e => (e.nativeEvent.code === 'Space' ? visModal() : false)}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <Image className={styles.addCircleIcon} src={addCircleIcon} />\n        <Detail size=\"small\" className={styles.imageText}>\n          <FormattedMessage id=\"Registrering.RegistrerVirksomhetPanel.Add\" />\n        </Detail>\n      </div>\n      {formState.isSubmitted && formState.errors[EGEN_VIRKSOMHET_NAME_PREFIX]?.notRegisteredInput?.message && (\n        <ErrorMessage>{formState.errors[EGEN_VIRKSOMHET_NAME_PREFIX]?.notRegisteredInput?.message}</ErrorMessage>\n      )}\n      {virksomhetIndex !== undefined && (\n        <RegistrerVirksomhetModalForm\n          showModal\n          virksomhet={virksomhetIndex !== -1 && fields.length > virksomhetIndex ? fields[virksomhetIndex] : undefined}\n          onSubmit={leggTilVirksomhet}\n          closeEvent={lukkModal}\n          readOnly={readOnly}\n          alleKodeverk={alleKodeverk}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default RegistrerVirksomhetPanel;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\nimport { RadioGroupPanel } from '@navikt/ft-form-hooks';\nimport { BorderBox, VerticalSpacer } from '@navikt/ft-ui-komponenter';\nimport { required } from '@navikt/ft-form-validators';\nimport { AlleKodeverk } from '@navikt/fp-types';\n\nimport { useFormContext } from 'react-hook-form';\nimport RegistrerVirksomhetPanel, {\n  EGEN_VIRKSOMHET_NAME_PREFIX,\n  FormValues as VirksomhetFormValues,\n} from './RegistrerVirksomhetPanel';\n\nexport type FormValues = {\n  harArbeidetIEgenVirksomhet: boolean;\n} & VirksomhetFormValues;\n\ninterface OwnProps {\n  alleKodeverk: AlleKodeverk;\n  readOnly?: boolean;\n}\n\n/**\n * EgenVirksomhetPanel\n *\n * Komponenten vises som del av skjermbildet for registrering av papirsøknad dersom søknad gjelder foreldrepenger.\n * Søker må oppgi om hen har arbdeidet i egen virksomhet.\n */\nconst EgenVirksomhetPanel: FunctionComponent<OwnProps> = ({ readOnly = true, alleKodeverk }) => {\n  const intl = useIntl();\n\n  const { watch } = useFormContext<{ [EGEN_VIRKSOMHET_NAME_PREFIX]: FormValues }>();\n  const harArbeidetIEgenVirksomhet = watch(`${EGEN_VIRKSOMHET_NAME_PREFIX}.harArbeidetIEgenVirksomhet`) || null;\n\n  return (\n    <BorderBox>\n      <Heading size=\"small\">\n        <FormattedMessage id=\"Registrering.EgenVirksomhet.Title\" />\n      </Heading>\n      <VerticalSpacer sixteenPx />\n      <RadioGroupPanel\n        name={`${EGEN_VIRKSOMHET_NAME_PREFIX}.harArbeidetIEgenVirksomhet`}\n        validate={[required]}\n        isReadOnly={readOnly}\n        hideLegend\n        isTrueOrFalseSelection\n        radios={[\n          {\n            label: intl.formatMessage({ id: 'Registrering.EgenVirksomhet.No' }),\n            value: 'false',\n          },\n          {\n            label: intl.formatMessage({ id: 'Registrering.EgenVirksomhet.Yes' }),\n            value: 'true',\n          },\n        ]}\n      />\n      {harArbeidetIEgenVirksomhet && <RegistrerVirksomhetPanel readOnly={readOnly} alleKodeverk={alleKodeverk} />}\n    </BorderBox>\n  );\n};\n\nexport default EgenVirksomhetPanel;\n","import React, { FunctionComponent } from 'react';\nimport { RawIntlProvider } from 'react-intl';\nimport { createIntl } from '@navikt/ft-utils';\nimport { AlleKodeverk } from '@navikt/fp-types';\n\nimport EgenVirksomhetPanel from './components/EgenVirksomhetPanel';\nimport messages from '../../i18n/nb_NO.json';\n\nconst intl = createIntl(messages);\n\ninterface OwnProps {\n  readOnly: boolean;\n  alleKodeverk: AlleKodeverk;\n}\n\nconst VirksomhetPapirsoknadIndex: FunctionComponent<OwnProps> = ({ readOnly, alleKodeverk }) => (\n  <RawIntlProvider value={intl}>\n    <EgenVirksomhetPanel readOnly={readOnly} alleKodeverk={alleKodeverk} />\n  </RawIntlProvider>\n);\n\nexport default VirksomhetPapirsoknadIndex;\n"],"names":["addCircleIcon$1","removeIcon","countrySelectValues","countryCodes","kode","navn","jsx","VirksomhetIdentifikasjonPanel","readOnly","alleKodeverk","intl","useIntl","sortedCountriesByName","KodeverkType","a","b","watch","getValues","useFormContext","virksomhetRegistrertINorge","jsxs","Fragment","InputField","required","FormattedMessage","styles","VerticalSpacer","RadioGroupPanel","ArrowBox","hasValidInteger","hasValidOrgNumber","SelectField","FlexContainer","FlexRow","FlexColumn","Datepicker","hasValidDate","dateBeforeOrEqualToToday","fomDato","validPeriodeFomTom","VirksomhetRegnskapPanel","harRegnskapsforer","hasValidText","VirksomhetStartetEndretPanel","setError","clearErrors","formState","varigEndretEllerStartetSisteFireAr","harVarigEndring","erNyoppstartet","erNyIArbeidslivet","isError","useEffect","Label","CheckboxField","_b","_a","ErrorMessage","_d","_c","TextAreaField","value","parsedValue","VirksomhetRelasjonPanel","TYPE_VIRKSOMHET_PREFIX","naringsvirksomhetTypeOrder","naringsvirksomhetType","compare","arg1","arg2","VirksomhetTypeNaringPanel","virksomhetTyper","naringvirksomhetTyper","useMemo","t","checkboxVerdier","v","isRequiredMessage","nv","Fragment2","RegistrerVirksomhetModalForm","showModal","closeEvent","onSubmit","virksomhet","formMethods","useForm","Modal","Form","Heading","Button","EGEN_VIRKSOMHET_NAME_PREFIX","RegistrerVirksomhetPanel","virksomhetIndex","setVirksomhetIndex","useState","control","fields","remove","append","update","useFieldArray","visModal","useCallback","index","lukkModal","leggTilVirksomhet","justertVirksomhet","React","field","BodyShort","Image","e","addCircleIcon","Detail","EgenVirksomhetPanel","harArbeidetIEgenVirksomhet","BorderBox","createIntl","messages","VirksomhetPapirsoknadIndex","RawIntlProvider","VirksomhetPapirsoknadIndex$1"],"mappings":"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"}